(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var a,i,s=e[0],l=e[1],c=e[2],p=0,m=[];p<s.length;p++)i=s[p],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&m.push(r[i][0]),r[i]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(n[a]=l[a]);for(d&&d(e);m.length;)m.shift()();return o.push.apply(o,c||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],a=!0,s=1;s<t.length;s++){var l=t[s];0!==r[l]&&(a=!1)}a&&(o.splice(e--,1),n=i(i.s=t[0]))}return n}var a={},r={1:0},o=[];function i(e){if(a[e])return a[e].exports;var t=a[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=r[n];if(0!==t)if(t)e.push(t[2]);else{var a=new Promise((function(e,a){t=r[n]=[e,a]}));e.push(t[2]=a);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"8273876b",3:"d68e1d13",4:"de17fbe4",5:"59910585",6:"0ab71a58",7:"769e6e3f",8:"812618a5",9:"c942e82a",10:"cb095657",11:"d1f39b42",12:"892c0d9f",13:"ea744146",14:"c755eadf",15:"7a29d3f4",16:"5c417580",17:"76fdc3b2",18:"f857e697",19:"8c1d0f81",20:"47831bf7",21:"8580b0b4",22:"2d87ea68",23:"c1a929a6",24:"707a9b9d",25:"e47a8360",26:"db56ba8d",27:"0b0c1f7f",28:"a5d8ae18",29:"0bc8ea25",30:"063f8dbe",31:"69d8f2c2",32:"50aa541b",33:"4aa00ff3",34:"b25c4a87",35:"a1af8744",36:"5558b717",37:"511798d2",38:"2dfd8d32",39:"e8482eab",40:"c6dc3476",41:"78bfe256",42:"248cddd4",43:"6429d3dc",44:"71e9af05",45:"f80fb4fc",46:"3d5e7e58",47:"1bbf5e9a",48:"6909050b",49:"9c775f82",50:"aceb6009",51:"acd0d321",52:"a4f9f157",53:"0f1ec943",54:"6c5c2837",55:"f412714f",56:"64a3862c",57:"d070eb7d",58:"a80067c8",59:"084f5e76",60:"42e0fbb5",61:"b5b87c23",62:"014cdbe2",63:"ff1278d1",64:"44a86cb2",65:"1a69bd56",66:"b8d9a1e9",67:"48e3c0e6",68:"127da596",69:"77e4e1cb",70:"7863bd30",71:"c5c89c65",72:"030ac8a4",73:"e96cf593",74:"f9319fe7",75:"049ce9e1",76:"c71e5605",77:"1e682453",78:"0cce7473",79:"3d32f303",80:"c956dc30",81:"8276eaa8",82:"10f6fdc6",83:"cac65ec1",84:"a4ce0ebf",85:"d9efee67",86:"cf64260c",87:"e261e385",88:"63b9894b",89:"0ad95e30",90:"77f9f729",91:"3fcbf2d5",92:"8b57334e",93:"6095e56a",94:"c616143f",95:"a9b61cf9",96:"a3896e7e",97:"0318332c",98:"17b8173b",99:"d299c156",100:"fbcd69a7",101:"8fad45f8",102:"16b0b3d1",103:"c2af4d4a",104:"d37d4660",105:"27e54103",106:"e4098682",107:"8efeef5d",108:"6c305bbf",109:"6f1c6613",110:"6f264ba6",111:"1b6294ef",112:"2ad16154",113:"a40acefc",114:"d44cb107",115:"bd15b919",116:"778a9058",117:"19ff15b7",118:"2630ca8d",119:"604bd439",120:"43a964f8",121:"5993f55a",122:"6c054fcf",123:"95ddd9a3",124:"c3a9510e",125:"612c461a",126:"ccdb194e",127:"865789a0",128:"9e0bc723",129:"68515ee6",130:"32a31759",131:"467e7aaf",132:"3bb05df9",133:"52bbf931",134:"ee00e869",135:"aadd30fb",136:"6b5bb775",137:"9d66b052",138:"1df874a9",139:"bd1e48e9",140:"2a849d58",141:"28c22cf9",142:"e99735ee",143:"0666fdce",144:"216c1efe",145:"fad2c93a",146:"01533714",147:"1af38e50",148:"84844c3d",149:"49ce06ed",150:"234bdfef",151:"89e0796a",152:"389ced87",153:"07285920",154:"965fc5c1",155:"7bf58a9a",156:"99e400e4",157:"b6edd5ab",158:"af656e52",159:"4b3d37d2",160:"fa1e9d1b",161:"43d6f2b4",162:"c0e7e60f",163:"c78d27b4",164:"7ee2986b",165:"bbc6516b",166:"90e15253",167:"18578ca6",168:"c52ad494",169:"c34b2d53",170:"c97f6096",171:"358f0f02",172:"30f03133",173:"b72d5243",174:"4e333643",175:"2c07b836",176:"29bcb24c",177:"102b3f0f",178:"5862bde0",179:"0da54072",180:"393e8099",181:"418f9fe8",182:"e65424fa",183:"3b3cb092",184:"73f7a76a",185:"537623fb",186:"df802468",187:"1095bafd",188:"1d2acd1a",189:"dc6a5186",190:"a279b4dd",191:"3abaa15f",192:"4d0dd04e",193:"2c698e6f",194:"4243beaa",195:"7c13b124",196:"b18118bf",197:"2abfac38",198:"407f0a8b",199:"d4e97578",200:"86ce407c",201:"56a65a3f",202:"f852c6e8",203:"92530d7a",204:"ce612269",205:"b14b2d70",206:"b5112828",207:"a4becd8a",208:"f82e2766",209:"11566ec8",210:"bf848e0e",211:"6db52324",212:"c9a03071",213:"734c775f",214:"7654a416",215:"34ad7e3d",216:"aabcd184",217:"26ffe7d6",218:"d8ceaf2e",219:"82bad7ef",220:"0c35dcdf",221:"8657d7c1",222:"291af8a7",223:"e8ce5ce0",224:"2c3c1268",225:"b31429da",226:"8ec29e66",227:"84469b41",228:"cd6b9967",229:"e5497c23",230:"643fdbb6",231:"22457248",232:"7e94e6f0",233:"1083085e",234:"6ce5972b",235:"bc1d1e7e",236:"f510d892",237:"4690c583",238:"ef69b085",239:"e7cbaef4",240:"02e1ce4d",241:"8ccdecd0",242:"25a5eeac",243:"80dc6cf3",244:"d2d264c1",245:"8646c059",246:"0d788a8c",247:"211b425b",248:"15e5b430",249:"b28c41d2",250:"e4621bbf",251:"2f49ea1d",252:"c567824c",253:"7eb2a6c2",254:"adf8b2ad",255:"43d07402",256:"d49b01ff",257:"cc61cd1a",258:"e46ee926",259:"5c84c742",260:"05cc8cff",261:"1891f9c6",262:"0913812a",263:"a6836819",264:"363da610",265:"2cbfbe9f",266:"555ca792",267:"83f4c202",268:"6dea35af",269:"cbc5306b",270:"6bc430c5",271:"f5105765",272:"e1541ef7",273:"158c7593",274:"efb98c5b",275:"cf2c3b21",276:"0bf20a2d",277:"2e4ddf6c",278:"7f8b14ac",279:"83a65d2f",280:"47de1643",281:"1d5cab51",282:"b2299bce",283:"fdad201b",284:"cdf83f8f",285:"caee6eb0",286:"6b211023",287:"e9e93db3",288:"5892d2e1",289:"48074c49",290:"b478b2ab",291:"18239d2b",292:"9f6b48b4",293:"70a0b924",294:"bc5f021a",295:"dfa72324",296:"fb717477",297:"2b2daf25",298:"0ed3ce25",299:"c59a3f82",300:"f423c130",301:"a11bcaa5",302:"5a45b99e",303:"80ac16da",304:"f773afc2",305:"52f1b3ba",306:"966f2eef",307:"c22143cf",308:"a6dfec6e",309:"377e4f0b",310:"a76309fc",311:"0706d5ca",312:"40513d91",313:"e36621af",314:"3d4325be",315:"72480163",316:"83f31163",317:"872fd713",318:"0dc2aea4",319:"454e4745",320:"d9116236",321:"b06a7a4e",322:"41bcaaf1",323:"f01ba88b",324:"9a736f30",325:"49b1193e",326:"5a07b4a0",327:"aceece56",328:"e03489c3",329:"5673fdef",330:"246e74fa",331:"e1cffa6b",332:"2856b83e",333:"d4c9c15a",334:"13b03971",335:"0b8ed702",336:"3e71f28d",337:"f929f08c",338:"01a6cfbe",339:"5cd647ad",340:"f941cae0",341:"aa01a6b1",342:"edd59a58",343:"237c716b",344:"06e59f2b",345:"ddd4f6fe",346:"70fe3c42",347:"d39ad15e",348:"1b135410",349:"fd78d783",350:"b10e7d69",351:"a6ae4318",352:"3117739a",353:"99e022f1",354:"a444c2d8",355:"13d044aa",356:"d2cfe5d0",357:"eb44f05f",358:"394c15db",359:"6c541551",360:"65af88d5",361:"d9b3c889",362:"37ec0a7d",363:"49690222",364:"419b3dab",365:"1f79df07",366:"fa710c6f",367:"497eeda5",368:"45cf08f6",369:"80a60b6a",370:"61b161b4",371:"545f0249",372:"d383f896",373:"df22361b",374:"0b9872ee",375:"76bbca97",376:"1f6f8210",377:"3dd0dc75",378:"32cac01d",379:"6682a524",380:"1ab9ec1d",381:"cea4ec7d",382:"fc51cce1",383:"489718b4",384:"a7a1c6d7",385:"7b2d3a89",386:"f0a18324",387:"53063e56",388:"1115759c",389:"58bf8aaf"}[n]+".js"}(n);var l=new Error;o=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=r[n];if(0!==t){if(t){var a=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+a+": "+o+")",l.name="ChunkLoadError",l.type=a,l.request=o,t[1](l)}r[n]=void 0}};var c=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=a,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var a in n)i.d(t,a,function(e){return n[e]}.bind(null,a));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var d=l;o.push([106,0]),t()}([function(n,e,t){"use strict";var a=function(n){return n&&n.Math===Math&&n};n.exports=a("object"==typeof globalThis&&globalThis)||a("object"==typeof window&&window)||a("object"==typeof self&&self)||a("object"==typeof global&&global)||a("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";var a="object"==typeof document&&document.all;n.exports=void 0===a&&void 0!==a?function(n){return"function"==typeof n||n===a}:function(n){return"function"==typeof n}},function(n,e,t){"use strict";var a=t(27),r=Function.prototype,o=r.call,i=a&&r.bind.bind(o,o);n.exports=a?i:function(n){return function(){return o.apply(n,arguments)}}},function(n,e,t){"use strict";n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";function a(n,e,t,a,r,o,i,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),a&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),i?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),r&&r.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},c._ssrRegister=l):r&&(l=s?function(){r.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:r),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(n,e){return l.call(e),d(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return a}))},function(n,e,t){"use strict";var a=t(3);n.exports=!a((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){"use strict";var a=t(1);n.exports=function(n){return"object"==typeof n?null!==n:a(n)}},function(n,e,t){var a=t(69),r="object"==typeof self&&self&&self.Object===Object&&self,o=a||r||Function("return this")();n.exports=o},function(n,e,t){"use strict";var a=t(2),r=t(32),o=a({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return o(r(n),e)}},function(n,e,t){var a=t(165),r=t(168);n.exports=function(n,e){var t=r(n,e);return a(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return a})),t.d(e,"b",(function(){return o})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return d})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return m})),t.d(e,"l",(function(){return u})),t.d(e,"m",(function(){return h})),t.d(e,"d",(function(){return f})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(16);const a=/#.*$/,r=/\.(md|html)$/,o=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(a,"").replace(r,"")}function l(n){return i.test(n)}function c(n){return/^mailto:/.test(n)}function d(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;if(!n)return"404";const e=n.match(a),t=e?e[0]:"",r=s(n);return o.test(r)?n:r+".html"+t}function m(n,e){const t=n.hash,r=function(n){const e=n&&n.match(a);if(e)return e[0]}(e);if(r&&t!==r)return!1;return s(n.path)===s(e)}function u(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const a=n.charAt(0);if("/"===a)return n;if("?"===a||"#"===a)return e+n;const r=e.split("/");t&&r[r.length-1]||r.pop();const o=n.replace(/^\//,"").split("/");for(let n=0;n<o.length;n++){const e=o[n];".."===e?r.pop():"."!==e&&r.push(e)}""!==r[0]&&r.unshift("");return r.join("/")}(e,t));const a=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===a)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function h(n,e,t,a){const{pages:r,themeConfig:o}=t,i=a&&o.locales&&o.locales[a]||o;if("auto"===(n.frontmatter.sidebar||i.sidebar||o.sidebar))return g(n);const s=i.sidebar||o.sidebar;if(s){const{base:t,config:a}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const a in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(a)))return{base:a,config:e[a]};var t;return{}}(e,s);return"auto"===a?g(n):a?a.map(n=>function n(e,t,a,r=1){if("string"==typeof e)return u(t,e,a);if(Array.isArray(e))return Object.assign(u(t,e[0],a),{title:e[1]});{r>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const o=e.children||[];return 0===o.length&&e.path?Object.assign(u(t,e.path,a),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:o.map(e=>n(e,t,a,r+1)),collapsable:!1!==e.collapsable}}}(n,r,t)):[]}return[]}function g(n){const e=f(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function f(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var a=t(15),r=t(150),o=t(151),i=a?a.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?r(n):o(n)}},function(n,e,t){"use strict";var a=t(5),r=t(17),o=t(35);n.exports=a?function(n,e,t){return r.f(n,e,o(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var a=t(8).Symbol;n.exports=a},function(n,e,t){"use strict";var a=t(26),r=t(32),o=t(33),i=t(144),s=t(146);a({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=r(this),t=o(e),a=arguments.length;s(t+a);for(var l=0;l<a;l++)e[t]=arguments[l],t++;return i(e,t),t}})},function(n,e,t){"use strict";var a=t(5),r=t(64),o=t(101),i=t(48),s=t(55),l=TypeError,c=Object.defineProperty,d=Object.getOwnPropertyDescriptor;e.f=a?o?function(n,e,t){if(i(n),e=s(e),i(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var a=d(n,e);a&&a.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:a.configurable,enumerable:"enumerable"in t?t.enumerable:a.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(i(n),e=s(e),i(t),r)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw new l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){"use strict";var a=t(2),r=a({}.toString),o=a("".slice);n.exports=function(n){return o(r(n),8,-1)}},function(n,e,t){var a=t(155),r=t(156),o=t(157),i=t(158),s=t(159);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var a=n[e];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=o,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var a=t(71);n.exports=function(n,e){for(var t=n.length;t--;)if(a(n[t][0],e))return t;return-1}},function(n,e,t){var a=t(10)(Object,"create");n.exports=a},function(n,e,t){var a=t(177);n.exports=function(n,e){var t=n.__data__;return a(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var a=t(46);n.exports=function(n){if("string"==typeof n||a(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var a,r;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(r="function"==typeof(a=function(){var n,e,t={version:"0.2.0"},a=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(n,e,t){return n<e?e:n>t?t:n}function o(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(a[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=r(n,a.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(a.barSelector),d=a.speed,p=a.easing;return l.offsetWidth,i((function(e){""===a.positionUsing&&(a.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var r;return(r="translate3d"===a.positionUsing?{transform:"translate3d("+o(n)+"%,0,0)"}:"translate"===a.positionUsing?{transform:"translate("+o(n)+"%,0)"}:{"margin-left":o(n)+"%"}).transition="all "+e+"ms "+t,r}(n,d,p)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),d)}),d)):setTimeout(e,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),a.trickleSpeed)};return a.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*r(Math.random()*e,.1,.95)),e=r(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*a.trickleRate)},n=0,e=0,t.promise=function(a){return a&&"resolved"!==a.state()?(0===e&&t.start(),n++,e++,a.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=a.template;var r,i=e.querySelector(a.barSelector),l=n?"-100":o(t.status||0),d=document.querySelector(a.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),a.showSpinner||(r=e.querySelector(a.spinnerSelector))&&m(r),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(e),e},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(a.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&m(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var a,r=n.length,o=e.charAt(0).toUpperCase()+e.slice(1);r--;)if((a=n[r]+o)in t)return a;return e}(t))}function a(n,e,a){e=t(e),n.style[e]=a}return function(n,e){var t,r,o=arguments;if(2==o.length)for(t in e)void 0!==(r=e[t])&&e.hasOwnProperty(t)&&a(n,t,r);else a(n,o[1],o[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),a=t+e;l(t,e)||(n.className=a.substring(1))}function d(n,e){var t,a=p(n);l(n,e)&&(t=a.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function m(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?a.call(e,t,e,n):a)||(n.exports=r)},function(n){n.exports=JSON.parse('{"name":"vuepress-plugin-comment","version":"0.7.3","description":"Comment plugin in vuepress, such as Gitalk, Valine...","main":"index.js","scripts":{"test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"git+ssh://git@github.com/dongyuanxin/vuepress-plugin-comment.git"},"keywords":["vuepress","comment","plugin","vue","gitalk","valine"],"author":"dongyuanxin","license":"MIT","bugs":{"url":"https://github.com/dongyuanxin/vuepress-plugin-comment/issues"},"homepage":"https://github.com/dongyuanxin/vuepress-plugin-comment#readme","dependencies":{"ejs":"^2.6.1","gitalk":"^1.5.0","gitalk-fix":"^1.5.2","i":"^0.3.6","npm":"^6.9.0","valine":"^1.3.9"}}')},function(n,e,t){"use strict";var a=t(0),r=t(53).f,o=t(14),i=t(97),s=t(38),l=t(65),c=t(125);n.exports=function(n,e){var t,d,p,m,u,h=n.target,g=n.global,f=n.stat;if(t=g?a:f?a[h]||s(h,{}):a[h]&&a[h].prototype)for(d in e){if(m=e[d],p=n.dontCallGetSet?(u=r(t,d))&&u.value:t[d],!c(g?d:h+(f?".":"#")+d,n.forced)&&void 0!==p){if(typeof m==typeof p)continue;l(m,p)}(n.sham||p&&p.sham)&&o(m,"sham",!0),i(t,d,m,n)}}},function(n,e,t){"use strict";var a=t(3);n.exports=!a((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){"use strict";var a=t(49),r=t(36);n.exports=function(n){return a(r(n))}},function(n,e,t){"use strict";var a=t(0),r=t(1),o=function(n){return r(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?o(a[n]):a[n]&&a[n][e]}},function(n,e,t){"use strict";var a=t(1),r=t(112),o=TypeError;n.exports=function(n){if(a(n))return n;throw new o(r(n)+" is not a function")}},function(n,e,t){"use strict";var a=t(0),r=t(61),o=t(9),i=t(63),s=t(59),l=t(58),c=a.Symbol,d=r("wks"),p=l?c.for||c:c&&c.withoutSetter||i;n.exports=function(n){return o(d,n)||(d[n]=s&&o(c,n)?c[n]:p("Symbol."+n)),d[n]}},function(n,e,t){"use strict";var a=t(36),r=Object;n.exports=function(n){return r(a(n))}},function(n,e,t){"use strict";var a=t(123);n.exports=function(n){return a(n.length)}},function(n,e,t){"use strict";var a=t(27),r=Function.prototype.call;n.exports=a?r.bind(r):function(){return r.apply(r,arguments)}},function(n,e,t){"use strict";n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var a=t(54),r=TypeError;n.exports=function(n){if(a(n))throw new r("Can't call method on "+n);return n}},function(n,e,t){"use strict";var a=t(62),r=t(0),o=t(38),i=n.exports=r["__core-js_shared__"]||o("__core-js_shared__",{});(i.versions||(i.versions=[])).push({version:"3.36.1",mode:a?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.36.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){"use strict";var a=t(0),r=Object.defineProperty;n.exports=function(n,e){try{r(a,n,{value:e,configurable:!0,writable:!0})}catch(t){a[n]=e}return e}},function(n,e,t){var a=t(149),r=t(12),o=Object.prototype,i=o.hasOwnProperty,s=o.propertyIsEnumerable,l=a(function(){return arguments}())?a:function(n){return r(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var a=t(10)(t(8),"Map");n.exports=a},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var a=t(169),r=t(176),o=t(178),i=t(179),s=t(180);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var a=n[e];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=o,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var a=t(6),r=t(46),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(a(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!r(n))||(i.test(n)||!o.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var a=t(13),r=t(12);n.exports=function(n){return"symbol"==typeof n||r(n)&&"[object Symbol]"==a(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var a=t(7),r=String,o=TypeError;n.exports=function(n){if(a(n))return n;throw new o(r(n)+" is not an object")}},function(n,e,t){"use strict";var a=t(2),r=t(3),o=t(18),i=Object,s=a("".split);n.exports=r((function(){return!i("z").propertyIsEnumerable(0)}))?function(n){return"String"===o(n)?s(n,""):i(n)}:i},function(n,e,t){"use strict";n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,o=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),d=Object.prototype.toString,p=Math.max,m=Math.min,u=function(){return c.Date.now()};function h(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==d.call(n)}(n))return NaN;if(h(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=h(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=r.test(n);return s||o.test(n)?i(n.slice(2),s?2:8):a.test(n)?NaN:+n}n.exports=function(n,e,t){var a,r,o,i,s,l,c=0,d=!1,f=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=a,o=r;return a=r=void 0,c=e,i=n.apply(o,t)}function y(n){return c=n,s=setTimeout(k,e),d?b(n):i}function x(n){var t=n-l;return void 0===l||t>=e||t<0||f&&n-c>=o}function k(){var n=u();if(x(n))return E(n);s=setTimeout(k,function(n){var t=e-(n-l);return f?m(t,o-(n-c)):t}(n))}function E(n){return s=void 0,v&&a?b(n):(a=r=void 0,i)}function w(){var n=u(),t=x(n);if(a=arguments,r=this,l=n,t){if(void 0===s)return y(l);if(f)return s=setTimeout(k,e),b(l)}return void 0===s&&(s=setTimeout(k,e)),i}return e=g(e)||0,h(t)&&(d=!!t.leading,o=(f="maxWait"in t)?p(g(t.maxWait)||0,e):o,v="trailing"in t?!!t.trailing:v),w.cancel=function(){void 0!==s&&clearTimeout(s),c=0,a=l=r=s=void 0},w.flush=function(){return void 0===s?i:E(u())},w}},function(n,e,t){"use strict";var a=t(5),r=t(34),o=t(108),i=t(35),s=t(28),l=t(55),c=t(9),d=t(64),p=Object.getOwnPropertyDescriptor;e.f=a?p:function(n,e){if(n=s(n),e=l(e),d)try{return p(n,e)}catch(n){}if(c(n,e))return i(!r(o.f,n,e),n[e])}},function(n,e,t){"use strict";n.exports=function(n){return null==n}},function(n,e,t){"use strict";var a=t(109),r=t(56);n.exports=function(n){var e=a(n,"string");return r(e)?e:e+""}},function(n,e,t){"use strict";var a=t(29),r=t(1),o=t(57),i=t(58),s=Object;n.exports=i?function(n){return"symbol"==typeof n}:function(n){var e=a("Symbol");return r(e)&&o(e.prototype,s(n))}},function(n,e,t){"use strict";var a=t(2);n.exports=a({}.isPrototypeOf)},function(n,e,t){"use strict";var a=t(59);n.exports=a&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){"use strict";var a=t(60),r=t(3),o=t(0).String;n.exports=!!Object.getOwnPropertySymbols&&!r((function(){var n=Symbol("symbol detection");return!o(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&a&&a<41}))},function(n,e,t){"use strict";var a,r,o=t(0),i=t(110),s=o.process,l=o.Deno,c=s&&s.versions||l&&l.version,d=c&&c.v8;d&&(r=(a=d.split("."))[0]>0&&a[0]<4?1:+(a[0]+a[1])),!r&&i&&(!(a=i.match(/Edge\/(\d+)/))||a[1]>=74)&&(a=i.match(/Chrome\/(\d+)/))&&(r=+a[1]),n.exports=r},function(n,e,t){"use strict";var a=t(37);n.exports=function(n,e){return a[n]||(a[n]=e||{})}},function(n,e,t){"use strict";n.exports=!1},function(n,e,t){"use strict";var a=t(2),r=0,o=Math.random(),i=a(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++r+o,36)}},function(n,e,t){"use strict";var a=t(5),r=t(3),o=t(100);n.exports=!a&&!r((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){"use strict";var a=t(9),r=t(118),o=t(53),i=t(17);n.exports=function(n,e,t){for(var s=r(e),l=i.f,c=o.f,d=0;d<s.length;d++){var p=s[d];a(n,p)||t&&a(t,p)||l(n,p,c(e,p))}}},function(n,e,t){"use strict";var a=t(122);n.exports=function(n){var e=+n;return e!=e||0===e?0:a(e)}},function(n,e,t){"use strict";var a=t(132),r=t(7),o=t(36),i=t(133);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=a(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,a){return o(t),i(a),r(t)?(e?n(t,a):t.__proto__=a,t):t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,a=e.length,r=n.length;++t<a;)n[r+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var a=t(19),r=t(160),o=t(161),i=t(162),s=t(163),l=t(164);function c(n){var e=this.__data__=new a(n);this.size=e.size}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var a=t(13),r=t(41);n.exports=function(n){if(!r(n))return!1;var e=a(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var a=t(181),r=t(12);n.exports=function n(e,t,o,i,s){return e===t||(null==e||null==t||!r(e)&&!r(t)?e!=e&&t!=t:a(e,t,o,i,n,s))}},function(n,e,t){var a=t(76),r=t(184),o=t(77);n.exports=function(n,e,t,i,s,l){var c=1&t,d=n.length,p=e.length;if(d!=p&&!(c&&p>d))return!1;var m=l.get(n),u=l.get(e);if(m&&u)return m==e&&u==n;var h=-1,g=!0,f=2&t?new a:void 0;for(l.set(n,e),l.set(e,n);++h<d;){var v=n[h],b=e[h];if(i)var y=c?i(b,v,h,e,n,l):i(v,b,h,n,e,l);if(void 0!==y){if(y)continue;g=!1;break}if(f){if(!r(e,(function(n,e){if(!o(f,e)&&(v===n||s(v,n,t,i,l)))return f.push(e)}))){g=!1;break}}else if(v!==b&&!s(v,b,t,i,l)){g=!1;break}}return l.delete(n),l.delete(e),g}},function(n,e,t){var a=t(42),r=t(182),o=t(183);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new a;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=r,i.prototype.has=o,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var a=t(194),r=t(200),o=t(82);n.exports=function(n){return o(n)?a(n):r(n)}},function(n,e,t){(function(n){var a=t(8),r=t(196),o=e&&!e.nodeType&&e,i=o&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===o?a.Buffer:void 0,l=(s?s.isBuffer:void 0)||r;n.exports=l}).call(this,t(51)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var a=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==a||"symbol"!=a&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var a=t(197),r=t(198),o=t(199),i=o&&o.isTypedArray,s=i?r(i):a;n.exports=s},function(n,e,t){var a=t(72),r=t(44);n.exports=function(n){return null!=n&&r(n.length)&&!a(n)}},function(n,e,t){var a=t(10)(t(8),"Set");n.exports=a},function(n,e,t){var a=t(41);n.exports=function(n){return n==n&&!a(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var a=t(87),r=t(23);n.exports=function(n,e){for(var t=0,o=(e=a(e,n)).length;null!=n&&t<o;)n=n[r(e[t++])];return t&&t==o?n:void 0}},function(n,e,t){var a=t(6),r=t(45),o=t(211),i=t(214);n.exports=function(n,e){return a(n)?n:r(n,e)?[n]:o(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var a=t(147),r=t(152),o=t(223),i=t(231),s=t(240),l=t(105),c=o((function(n){var e=l(n);return s(e)&&(e=void 0),i(a(n,1,s,!0),r(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var a=/["'&<>]/;n.exports=function(n){var e,t=""+n,r=a.exec(t);if(!r)return t;var o="",i=0,s=0;for(i=r.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(o+=t.substring(s,i)),s=i+1,o+=e}return s!==i?o+t.substring(s,i):o}},function(n,e,t){"use strict";
/**
 * @file Embedded JavaScript templating engine. {@link http://ejs.co}
 * @author Matthew Eernisse <mde@fleegix.org>
 * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
 * @project EJS
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
 */var a=t(247),r=t(248),o=t(249),i=!1,s=t(250).version,l=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],c=l.concat("cache"),d=/^\uFEFF/;function p(n,t){var r,o,i=t.views,s=/^[A-Za-z]+:\\|^\//.exec(n);if(s&&s.length)r=e.resolveInclude(n.replace(/^\/*/,""),t.root||"/",!0);else if(t.filename&&(o=e.resolveInclude(n,t.filename),a.existsSync(o)&&(r=o)),r||Array.isArray(i)&&i.some((function(t){return o=e.resolveInclude(n,t,!0),a.existsSync(o)}))&&(r=o),!r)throw new Error('Could not find the include file "'+t.escapeFunction(n)+'"');return r}function m(n,t){var a,r=n.filename,o=arguments.length>1;if(n.cache){if(!r)throw new Error("cache option requires a filename");if(a=e.cache.get(r))return a;o||(t=h(r).toString().replace(d,""))}else if(!o){if(!r)throw new Error("Internal EJS error: no file name or template provided");t=h(r).toString().replace(d,"")}return a=e.compile(t,n),n.cache&&e.cache.set(r,a),a}function u(n,t,a){var r;if(!a){if("function"==typeof e.promiseImpl)return new e.promiseImpl((function(e,a){try{e(r=m(n)(t))}catch(n){a(n)}}));throw new Error("Please provide a callback function")}try{r=m(n)(t)}catch(n){return a(n)}a(null,r)}function h(n){return e.fileLoader(n)}function g(n,e,t,a,r){var o=e.split("\n"),i=Math.max(a-3,0),s=Math.min(o.length,a+3),l=r(t),c=o.slice(i,s).map((function(n,e){var t=e+i+1;return(t==a?" >> ":"    ")+t+"| "+n})).join("\n");throw n.path=l,n.message=(l||"ejs")+":"+a+"\n"+c+"\n\n"+n.message,n}function f(n){return n.replace(/;(\s*$)/,"$1")}function v(n,t){t=t||{};var a={};this.templateText=n,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",this.dependencies=[],a.client=t.client||!1,a.escapeFunction=t.escape||t.escapeFunction||o.escapeXML,a.compileDebug=!1!==t.compileDebug,a.debug=!!t.debug,a.filename=t.filename,a.openDelimiter=t.openDelimiter||e.openDelimiter||"<",a.closeDelimiter=t.closeDelimiter||e.closeDelimiter||">",a.delimiter=t.delimiter||e.delimiter||"%",a.strict=t.strict||!1,a.context=t.context,a.cache=t.cache||!1,a.rmWhitespace=t.rmWhitespace,a.root=t.root,a.outputFunctionName=t.outputFunctionName,a.localsName=t.localsName||e.localsName||"locals",a.views=t.views,a.async=t.async,a.destructuredLocals=t.destructuredLocals,a.legacyInclude=void 0===t.legacyInclude||!!t.legacyInclude,a.strict?a._with=!1:a._with=void 0===t._with||t._with,this.opts=a,this.regex=this.createRegex()}e.cache=o.cache,e.fileLoader=a.readFileSync,e.localsName="locals",e.promiseImpl=new Function("return this;")().Promise,e.resolveInclude=function(n,e,t){var a=r.dirname,o=r.extname,i=(0,r.resolve)(t?e:a(e),n);return o(n)||(i+=".ejs"),i},e.compile=function(n,e){return e&&e.scope&&(i||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),i=!0),e.context||(e.context=e.scope),delete e.scope),new v(n,e).compile()},e.render=function(n,e,t){var a=e||{},r=t||{};return 2==arguments.length&&o.shallowCopyFromList(r,a,l),m(r,n)(a)},e.renderFile=function(){var n,e,t,a=Array.prototype.slice.call(arguments),r=a.shift(),i={filename:r};return"function"==typeof arguments[arguments.length-1]&&(n=a.pop()),a.length?(e=a.shift(),a.length?o.shallowCopy(i,a.pop()):(e.settings&&(e.settings.views&&(i.views=e.settings.views),e.settings["view cache"]&&(i.cache=!0),(t=e.settings["view options"])&&o.shallowCopy(i,t)),o.shallowCopyFromList(i,e,c)),i.filename=r):e={},u(i,e,n)},e.Template=v,e.clearCache=function(){e.cache.reset()},v.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},v.prototype={createRegex:function(){var n="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",e=o.escapeRegExpChars(this.opts.delimiter),t=o.escapeRegExpChars(this.opts.openDelimiter),a=o.escapeRegExpChars(this.opts.closeDelimiter);return n=n.replace(/%/g,e).replace(/</g,t).replace(/>/g,a),new RegExp(n)},compile:function(){var n,e,t,a=this.opts,i="",s="",l=a.escapeFunction;if(!this.source){if(this.generateSource(),i+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',a.outputFunctionName&&(i+="  var "+a.outputFunctionName+" = __append;\n"),a.destructuredLocals&&a.destructuredLocals.length){for(var c="  var __locals = ("+a.localsName+" || {}),\n",d=0;d<a.destructuredLocals.length;d++){var u=a.destructuredLocals[d];d>0&&(c+=",\n  "),c+=u+" = __locals."+u}i+=c+";\n"}!1!==a._with&&(i+="  with ("+a.localsName+" || {}) {\n",s+="  }\n"),s+="  return __output;\n",this.source=i+this.source+s}n=a.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+(a.filename?JSON.stringify(a.filename):"undefined")+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,a.client&&(n="escapeFn = escapeFn || "+l.toString()+";\n"+n,a.compileDebug&&(n="rethrow = rethrow || "+g.toString()+";\n"+n)),a.strict&&(n='"use strict";\n'+n),a.debug&&console.log(n),a.compileDebug&&a.filename&&(n=n+"\n//# sourceURL="+a.filename+"\n");try{if(a.async)try{t=new Function("return (async function(){}).constructor;")()}catch(n){throw n instanceof SyntaxError?new Error("This environment does not support async/await"):n}else t=Function;e=new t(a.localsName+", escapeFn, include, rethrow",n)}catch(n){throw n instanceof SyntaxError&&(a.filename&&(n.message+=" in "+a.filename),n.message+=" while compiling ejs\n\n",n.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",n.message+="https://github.com/RyanZim/EJS-Lint",a.async||(n.message+="\n",n.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),n}var h=a.client?e:function(n){return e.apply(a.context,[n||{},l,function(e,t){var r=o.shallowCopy({},n);return t&&(r=o.shallowCopy(r,t)),function(n,e){var t=o.shallowCopy({},e);return t.filename=p(n,t),m(t)}(e,a)(r)},g])};if(h.dependencies=this.dependencies,a.filename&&"function"==typeof Object.defineProperty){var f=a.filename,v=r.basename(f,r.extname(f));try{Object.defineProperty(h,"name",{value:v,writable:!1,enumerable:!1,configurable:!0})}catch(n){}}return h},generateSource:function(){var n=this.opts;n.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,a=this.parseTemplateText(),r=this.opts.delimiter,i=this.opts.openDelimiter,s=this.opts.closeDelimiter;a&&a.length&&a.forEach((function(l,c){var m,u,g,f,b,y;if(0===l.indexOf(i+r)&&0!==l.indexOf(i+r+r)&&(u=a[c+2])!=r+s&&u!="-"+r+s&&u!="_"+r+s)throw new Error('Could not find matching close tag for "'+l+'".');if(n.legacyInclude&&(g=l.match(/^\s*include\s+(\S+)/))&&(m=a[c-1])&&(m==i+r||m==i+r+"-"||m==i+r+"_"))return f=o.shallowCopy({},t.opts),b=function(n,e){var t,a,r=o.shallowCopy({},e);a=h(t=p(n,r)).toString().replace(d,""),r.filename=t;var i=new v(a,r);return i.generateSource(),{source:i.source,filename:t,template:a}}(g[1],f),y=t.opts.compileDebug?"    ; (function(){\n      var __line = 1\n      , __lines = "+JSON.stringify(b.template)+"\n      , __filename = "+JSON.stringify(b.filename)+";\n      try {\n"+b.source+"      } catch (e) {\n        rethrow(e, __lines, __filename, __line, escapeFn);\n      }\n    ; }).call(this)\n":"    ; (function(){\n"+b.source+"    ; }).call(this)\n",t.source+=y,void t.dependencies.push(e.resolveInclude(g[1],f.filename));t.scanLine(l)}))},parseTemplateText:function(){for(var n,e=this.templateText,t=this.regex,a=t.exec(e),r=[];a;)0!==(n=a.index)&&(r.push(e.substring(0,n)),e=e.slice(n)),r.push(a[0]),e=e.slice(a[0].length),a=t.exec(e);return e&&r.push(e),r},_addOutput:function(n){if(this.truncate&&(n=n.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!n)return n;n=(n=(n=(n=n.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+n+'")\n'},scanLine:function(n){var e,t=this.opts.delimiter,a=this.opts.openDelimiter,r=this.opts.closeDelimiter;switch(e=n.split("\n").length-1,n){case a+t:case a+t+"_":this.mode=v.modes.EVAL;break;case a+t+"=":this.mode=v.modes.ESCAPED;break;case a+t+"-":this.mode=v.modes.RAW;break;case a+t+"#":this.mode=v.modes.COMMENT;break;case a+t+t:this.mode=v.modes.LITERAL,this.source+='    ; __append("'+n.replace(a+t+t,a+t)+'")\n';break;case t+t+r:this.mode=v.modes.LITERAL,this.source+='    ; __append("'+n.replace(t+t+r,t+r)+'")\n';break;case t+r:case"-"+t+r:case"_"+t+r:this.mode==v.modes.LITERAL&&this._addOutput(n),this.mode=null,this.truncate=0===n.indexOf("-")||0===n.indexOf("_");break;default:if(this.mode){switch(this.mode){case v.modes.EVAL:case v.modes.ESCAPED:case v.modes.RAW:n.lastIndexOf("//")>n.lastIndexOf("\n")&&(n+="\n")}switch(this.mode){case v.modes.EVAL:this.source+="    ; "+n+"\n";break;case v.modes.ESCAPED:this.source+="    ; __append(escapeFn("+f(n)+"))\n";break;case v.modes.RAW:this.source+="    ; __append("+f(n)+")\n";break;case v.modes.COMMENT:break;case v.modes.LITERAL:this._addOutput(n)}}else this._addOutput(n)}this.opts.compileDebug&&e&&(this.currentLine+=e,this.source+="    ; __line = "+this.currentLine+"\n")}},e.escapeXML=o.escapeXML,e.__express=e.renderFile,e.VERSION=s,e.name="ejs","undefined"!=typeof window&&(window.ejs=e)},function(n,e,t){"use strict";t.r(e);var a={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},r=(t(243),t(4)),o=Object(r.a)(a,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=o.exports},function(n,e,t){"use strict";t.r(e);var a={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},r=(t(244),t(4)),o=Object(r.a)(a,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,a){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":a===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(a)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=o.exports},function(n,e,t){"use strict";var a=t(1),r=t(17),o=t(102),i=t(38);n.exports=function(n,e,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:e;if(a(t)&&o(t,c,s),s.global)l?n[e]=t:i(e,t);else{try{s.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:r.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){"use strict";n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var a=t(138),r=String;n.exports=function(n){if("Symbol"===a(n))throw new TypeError("Cannot convert a Symbol value to a string");return r(n)}},function(n,e,t){"use strict";var a=t(0),r=t(7),o=a.document,i=r(o)&&r(o.createElement);n.exports=function(n){return i?o.createElement(n):{}}},function(n,e,t){"use strict";var a=t(5),r=t(3);n.exports=a&&r((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){"use strict";var a=t(2),r=t(3),o=t(1),i=t(9),s=t(5),l=t(114).CONFIGURABLE,c=t(115),d=t(116),p=d.enforce,m=d.get,u=String,h=Object.defineProperty,g=a("".slice),f=a("".replace),v=a([].join),b=s&&!r((function(){return 8!==h((function(){}),"length",{value:8}).length})),y=String(String).split("String"),x=n.exports=function(n,e,t){"Symbol("===g(u(e),0,7)&&(e="["+f(u(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!i(n,"name")||l&&n.name!==e)&&(s?h(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&i(t,"arity")&&n.length!==t.arity&&h(n,"length",{value:t.arity});try{t&&i(t,"constructor")&&t.constructor?s&&h(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var a=p(n);return i(a,"source")||(a.source=v(y,"string"==typeof e?e:"")),n};Function.prototype.toString=x((function(){return o(this)&&m(this).source||c(this)}),"toString")},function(n,e,t){"use strict";var a=t(61),r=t(63),o=a("keys");n.exports=function(n){return o[n]||(o[n]=r(n))}},function(n,e,t){"use strict";var a=t(2),r=t(9),o=t(28),i=t(120).indexOf,s=t(50),l=a([].push);n.exports=function(n,e){var t,a=o(n),c=0,d=[];for(t in a)!r(s,t)&&r(a,t)&&l(d,t);for(;e.length>c;)r(a,t=e[c++])&&(~i(d,t)||l(d,t));return d}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(253)},function(n,e,t){"use strict";var a=t(26),r=t(126).left,o=t(127),i=t(60);a({target:"Array",proto:!0,forced:!t(128)&&i>79&&i<83||!o("reduce")},{reduce:function(n){var e=arguments.length;return r(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var a={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!a.call({1:2},1);e.f=o?function(n){var e=r(this,n);return!!e&&e.enumerable}:a},function(n,e,t){"use strict";var a=t(34),r=t(7),o=t(56),i=t(111),s=t(113),l=t(31),c=TypeError,d=l("toPrimitive");n.exports=function(n,e){if(!r(n)||o(n))return n;var t,l=i(n,d);if(l){if(void 0===e&&(e="default"),t=a(l,n,e),!r(t)||o(t))return t;throw new c("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){"use strict";n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){"use strict";var a=t(30),r=t(54);n.exports=function(n,e){var t=n[e];return r(t)?void 0:a(t)}},function(n,e,t){"use strict";var a=String;n.exports=function(n){try{return a(n)}catch(n){return"Object"}}},function(n,e,t){"use strict";var a=t(34),r=t(1),o=t(7),i=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&r(t=n.toString)&&!o(s=a(t,n)))return s;if(r(t=n.valueOf)&&!o(s=a(t,n)))return s;if("string"!==e&&r(t=n.toString)&&!o(s=a(t,n)))return s;throw new i("Can't convert object to primitive value")}},function(n,e,t){"use strict";var a=t(5),r=t(9),o=Function.prototype,i=a&&Object.getOwnPropertyDescriptor,s=r(o,"name"),l=s&&"something"===function(){}.name,c=s&&(!a||a&&i(o,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){"use strict";var a=t(2),r=t(1),o=t(37),i=a(Function.toString);r(o.inspectSource)||(o.inspectSource=function(n){return i(n)}),n.exports=o.inspectSource},function(n,e,t){"use strict";var a,r,o,i=t(117),s=t(0),l=t(7),c=t(14),d=t(9),p=t(37),m=t(103),u=t(50),h=s.TypeError,g=s.WeakMap;if(i||p.state){var f=p.state||(p.state=new g);f.get=f.get,f.has=f.has,f.set=f.set,a=function(n,e){if(f.has(n))throw new h("Object already initialized");return e.facade=n,f.set(n,e),e},r=function(n){return f.get(n)||{}},o=function(n){return f.has(n)}}else{var v=m("state");u[v]=!0,a=function(n,e){if(d(n,v))throw new h("Object already initialized");return e.facade=n,c(n,v,e),e},r=function(n){return d(n,v)?n[v]:{}},o=function(n){return d(n,v)}}n.exports={set:a,get:r,has:o,enforce:function(n){return o(n)?r(n):a(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=r(e)).type!==n)throw new h("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var a=t(0),r=t(1),o=a.WeakMap;n.exports=r(o)&&/native code/.test(String(o))},function(n,e,t){"use strict";var a=t(29),r=t(2),o=t(119),i=t(124),s=t(48),l=r([].concat);n.exports=a("Reflect","ownKeys")||function(n){var e=o.f(s(n)),t=i.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var a=t(104),r=t(98).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return a(n,r)}},function(n,e,t){"use strict";var a=t(28),r=t(121),o=t(33),i=function(n){return function(e,t,i){var s=a(e),l=o(s);if(0===l)return!n&&-1;var c,d=r(i,l);if(n&&t!=t){for(;l>d;)if((c=s[d++])!=c)return!0}else for(;l>d;d++)if((n||d in s)&&s[d]===t)return n||d||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){"use strict";var a=t(66),r=Math.max,o=Math.min;n.exports=function(n,e){var t=a(n);return t<0?r(t+e,0):o(t,e)}},function(n,e,t){"use strict";var a=Math.ceil,r=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?r:a)(e)}},function(n,e,t){"use strict";var a=t(66),r=Math.min;n.exports=function(n){var e=a(n);return e>0?r(e,9007199254740991):0}},function(n,e,t){"use strict";e.f=Object.getOwnPropertySymbols},function(n,e,t){"use strict";var a=t(3),r=t(1),o=/#|\.prototype\./,i=function(n,e){var t=l[s(n)];return t===d||t!==c&&(r(e)?a(e):!!e)},s=i.normalize=function(n){return String(n).replace(o,".").toLowerCase()},l=i.data={},c=i.NATIVE="N",d=i.POLYFILL="P";n.exports=i},function(n,e,t){"use strict";var a=t(30),r=t(32),o=t(49),i=t(33),s=TypeError,l="Reduce of empty array with no initial value",c=function(n){return function(e,t,c,d){var p=r(e),m=o(p),u=i(p);if(a(t),0===u&&c<2)throw new s(l);var h=n?u-1:0,g=n?-1:1;if(c<2)for(;;){if(h in m){d=m[h],h+=g;break}if(h+=g,n?h<0:u<=h)throw new s(l)}for(;n?h>=0:u>h;h+=g)h in m&&(d=t(d,m[h],h,p));return d}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var a=t(3);n.exports=function(n,e){var t=[][n];return!!t&&a((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var a=t(0),r=t(18);n.exports="process"===r(a.process)},function(n,e,t){"use strict";var a=t(26),r=t(0),o=t(130),i=t(131),s=r.WebAssembly,l=7!==new Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=i(n,e,l),a({global:!0,constructor:!0,arity:1,forced:l},t)},d=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,l),a({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return o(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return o(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return o(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return o(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return o(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return o(n,this,arguments)}})),c("URIError",(function(n){return function(e){return o(n,this,arguments)}})),d("CompileError",(function(n){return function(e){return o(n,this,arguments)}})),d("LinkError",(function(n){return function(e){return o(n,this,arguments)}})),d("RuntimeError",(function(n){return function(e){return o(n,this,arguments)}}))},function(n,e,t){"use strict";var a=t(27),r=Function.prototype,o=r.apply,i=r.call;n.exports="object"==typeof Reflect&&Reflect.apply||(a?i.bind(o):function(){return i.apply(o,arguments)})},function(n,e,t){"use strict";var a=t(29),r=t(9),o=t(14),i=t(57),s=t(67),l=t(65),c=t(135),d=t(136),p=t(137),m=t(140),u=t(141),h=t(5),g=t(62);n.exports=function(n,e,t,f){var v=f?2:1,b=n.split("."),y=b[b.length-1],x=a.apply(null,b);if(x){var k=x.prototype;if(!g&&r(k,"cause")&&delete k.cause,!t)return x;var E=a("Error"),w=e((function(n,e){var t=p(f?e:n,void 0),a=f?new x(n):new x;return void 0!==t&&o(a,"message",t),u(a,w,a.stack,2),this&&i(k,this)&&d(a,this,w),arguments.length>v&&m(a,arguments[v]),a}));if(w.prototype=k,"Error"!==y?s?s(w,E):l(w,E,{name:!0}):h&&"stackTraceLimit"in x&&(c(w,x,"stackTraceLimit"),c(w,x,"prepareStackTrace")),l(w,x),!g)try{k.name!==y&&o(k,"name",y),k.constructor=w}catch(n){}return w}}},function(n,e,t){"use strict";var a=t(2),r=t(30);n.exports=function(n,e,t){try{return a(r(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){"use strict";var a=t(134),r=String,o=TypeError;n.exports=function(n){if(a(n))return n;throw new o("Can't set "+r(n)+" as a prototype")}},function(n,e,t){"use strict";var a=t(7);n.exports=function(n){return a(n)||null===n}},function(n,e,t){"use strict";var a=t(17).f;n.exports=function(n,e,t){t in n||a(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var a=t(1),r=t(7),o=t(67);n.exports=function(n,e,t){var i,s;return o&&a(i=e.constructor)&&i!==t&&r(s=i.prototype)&&s!==t.prototype&&o(n,s),n}},function(n,e,t){"use strict";var a=t(99);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:a(n)}},function(n,e,t){"use strict";var a=t(139),r=t(1),o=t(18),i=t(31)("toStringTag"),s=Object,l="Arguments"===o(function(){return arguments}());n.exports=a?o:function(n){var e,t,a;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),i))?t:l?o(e):"Object"===(a=o(e))&&r(e.callee)?"Arguments":a}},function(n,e,t){"use strict";var a={};a[t(31)("toStringTag")]="z",n.exports="[object z]"===String(a)},function(n,e,t){"use strict";var a=t(7),r=t(14);n.exports=function(n,e){a(e)&&"cause"in e&&r(n,"cause",e.cause)}},function(n,e,t){"use strict";var a=t(14),r=t(142),o=t(143),i=Error.captureStackTrace;n.exports=function(n,e,t,s){o&&(i?i(n,e):a(n,"stack",r(t,s)))}},function(n,e,t){"use strict";var a=t(2),r=Error,o=a("".replace),i=String(new r("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(i);n.exports=function(n,e){if(l&&"string"==typeof n&&!r.prepareStackTrace)for(;e--;)n=o(n,s,"");return n}},function(n,e,t){"use strict";var a=t(3),r=t(35);n.exports=!a((function(){var n=new Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",r(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var a=t(5),r=t(145),o=TypeError,i=Object.getOwnPropertyDescriptor,s=a&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(r(n)&&!i(n,"length").writable)throw new o("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){"use strict";var a=t(18);n.exports=Array.isArray||function(n){return"Array"===a(n)}},function(n,e,t){"use strict";var a=TypeError;n.exports=function(n){if(n>9007199254740991)throw a("Maximum allowed index exceeded");return n}},function(n,e,t){var a=t(68),r=t(148);n.exports=function n(e,t,o,i,s){var l=-1,c=e.length;for(o||(o=r),s||(s=[]);++l<c;){var d=e[l];t>0&&o(d)?t>1?n(d,t-1,o,i,s):a(s,d):i||(s[s.length]=d)}return s}},function(n,e,t){var a=t(15),r=t(39),o=t(6),i=a?a.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||r(n)||!!(i&&n&&n[i])}},function(n,e,t){var a=t(13),r=t(12);n.exports=function(n){return r(n)&&"[object Arguments]"==a(n)}},function(n,e,t){var a=t(15),r=Object.prototype,o=r.hasOwnProperty,i=r.toString,s=a?a.toStringTag:void 0;n.exports=function(n){var e=o.call(n,s),t=n[s];try{n[s]=void 0;var a=!0}catch(n){}var r=i.call(n);return a&&(e?n[s]=t:delete n[s]),r}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var a=t(153),r=t(209),o=t(47),i=t(6),s=t(220);n.exports=function(n){return"function"==typeof n?n:null==n?o:"object"==typeof n?i(n)?r(n[0],n[1]):a(n):s(n)}},function(n,e,t){var a=t(154),r=t(208),o=t(85);n.exports=function(n){var e=r(n);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(t){return t===n||a(t,n,e)}}},function(n,e,t){var a=t(70),r=t(74);n.exports=function(n,e,t,o){var i=t.length,s=i,l=!o;if(null==n)return!s;for(n=Object(n);i--;){var c=t[i];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++i<s;){var d=(c=t[i])[0],p=n[d],m=c[1];if(l&&c[2]){if(void 0===p&&!(d in n))return!1}else{var u=new a;if(o)var h=o(p,m,d,n,e,u);if(!(void 0===h?r(m,p,3,o,u):h))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var a=t(20),r=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=a(e,n);return!(t<0)&&(t==e.length-1?e.pop():r.call(e,t,1),--this.size,!0)}},function(n,e,t){var a=t(20);n.exports=function(n){var e=this.__data__,t=a(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var a=t(20);n.exports=function(n){return a(this.__data__,n)>-1}},function(n,e,t){var a=t(20);n.exports=function(n,e){var t=this.__data__,r=a(t,n);return r<0?(++this.size,t.push([n,e])):t[r][1]=e,this}},function(n,e,t){var a=t(19);n.exports=function(){this.__data__=new a,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var a=t(19),r=t(40),o=t(42);n.exports=function(n,e){var t=this.__data__;if(t instanceof a){var i=t.__data__;if(!r||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new o(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var a=t(72),r=t(166),o=t(41),i=t(73),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,p=c.hasOwnProperty,m=RegExp("^"+d.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!o(n)||r(n))&&(a(n)?m:s).test(i(n))}},function(n,e,t){var a,r=t(167),o=(a=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+a:"";n.exports=function(n){return!!o&&o in n}},function(n,e,t){var a=t(8)["__core-js_shared__"];n.exports=a},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var a=t(170),r=t(19),o=t(40);n.exports=function(){this.size=0,this.__data__={hash:new a,map:new(o||r),string:new a}}},function(n,e,t){var a=t(171),r=t(172),o=t(173),i=t(174),s=t(175);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var a=n[e];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=o,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var a=t(21);n.exports=function(){this.__data__=a?a(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var a=t(21),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(a){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return r.call(e,n)?e[n]:void 0}},function(n,e,t){var a=t(21),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return a?void 0!==e[n]:r.call(e,n)}},function(n,e,t){var a=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=a&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var a=t(22);n.exports=function(n){var e=a(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var a=t(22);n.exports=function(n){return a(this,n).get(n)}},function(n,e,t){var a=t(22);n.exports=function(n){return a(this,n).has(n)}},function(n,e,t){var a=t(22);n.exports=function(n,e){var t=a(this,n),r=t.size;return t.set(n,e),this.size+=t.size==r?0:1,this}},function(n,e,t){var a=t(70),r=t(75),o=t(185),i=t(188),s=t(204),l=t(6),c=t(79),d=t(81),p="[object Object]",m=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,u,h,g){var f=l(n),v=l(e),b=f?"[object Array]":s(n),y=v?"[object Array]":s(e),x=(b="[object Arguments]"==b?p:b)==p,k=(y="[object Arguments]"==y?p:y)==p,E=b==y;if(E&&c(n)){if(!c(e))return!1;f=!0,x=!1}if(E&&!x)return g||(g=new a),f||d(n)?r(n,e,t,u,h,g):o(n,e,b,t,u,h,g);if(!(1&t)){var w=x&&m.call(n,"__wrapped__"),A=k&&m.call(e,"__wrapped__");if(w||A){var T=w?n.value():n,z=A?e.value():e;return g||(g=new a),h(T,z,t,u,g)}}return!!E&&(g||(g=new a),i(n,e,t,u,h,g))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,a=null==n?0:n.length;++t<a;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var a=t(15),r=t(186),o=t(71),i=t(75),s=t(187),l=t(43),c=a?a.prototype:void 0,d=c?c.valueOf:void 0;n.exports=function(n,e,t,a,c,p,m){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new r(n),new r(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var u=s;case"[object Set]":var h=1&a;if(u||(u=l),n.size!=e.size&&!h)return!1;var g=m.get(n);if(g)return g==e;a|=2,m.set(n,e);var f=i(u(n),u(e),a,c,p,m);return m.delete(n),f;case"[object Symbol]":if(d)return d.call(n)==d.call(e)}return!1}},function(n,e,t){var a=t(8).Uint8Array;n.exports=a},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,a){t[++e]=[a,n]})),t}},function(n,e,t){var a=t(189),r=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,o,i,s){var l=1&t,c=a(n),d=c.length;if(d!=a(e).length&&!l)return!1;for(var p=d;p--;){var m=c[p];if(!(l?m in e:r.call(e,m)))return!1}var u=s.get(n),h=s.get(e);if(u&&h)return u==e&&h==n;var g=!0;s.set(n,e),s.set(e,n);for(var f=l;++p<d;){var v=n[m=c[p]],b=e[m];if(o)var y=l?o(b,v,m,e,n,s):o(v,b,m,n,e,s);if(!(void 0===y?v===b||i(v,b,t,o,s):y)){g=!1;break}f||(f="constructor"==m)}if(g&&!f){var x=n.constructor,k=e.constructor;x==k||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof k&&k instanceof k||(g=!1)}return s.delete(n),s.delete(e),g}},function(n,e,t){var a=t(190),r=t(191),o=t(78);n.exports=function(n){return a(n,o,r)}},function(n,e,t){var a=t(68),r=t(6);n.exports=function(n,e,t){var o=e(n);return r(n)?o:a(o,t(n))}},function(n,e,t){var a=t(192),r=t(193),o=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),a(i(n),(function(e){return o.call(n,e)})))}:r;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,a=null==n?0:n.length,r=0,o=[];++t<a;){var i=n[t];e(i,t,n)&&(o[r++]=i)}return o}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var a=t(195),r=t(39),o=t(6),i=t(79),s=t(80),l=t(81),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=o(n),d=!t&&r(n),p=!t&&!d&&i(n),m=!t&&!d&&!p&&l(n),u=t||d||p||m,h=u?a(n.length,String):[],g=h.length;for(var f in n)!e&&!c.call(n,f)||u&&("length"==f||p&&("offset"==f||"parent"==f)||m&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||s(f,g))||h.push(f);return h}},function(n,e){n.exports=function(n,e){for(var t=-1,a=Array(n);++t<n;)a[t]=e(t);return a}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var a=t(13),r=t(44),o=t(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return o(n)&&r(n.length)&&!!i[a(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var a=t(69),r=e&&!e.nodeType&&e,o=r&&"object"==typeof n&&n&&!n.nodeType&&n,i=o&&o.exports===r&&a.process,s=function(){try{var n=o&&o.require&&o.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(51)(n))},function(n,e,t){var a=t(201),r=t(202),o=Object.prototype.hasOwnProperty;n.exports=function(n){if(!a(n))return r(n);var e=[];for(var t in Object(n))o.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var a=t(203)(Object.keys,Object);n.exports=a},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var a=t(205),r=t(40),o=t(206),i=t(83),s=t(207),l=t(13),c=t(73),d=c(a),p=c(r),m=c(o),u=c(i),h=c(s),g=l;(a&&"[object DataView]"!=g(new a(new ArrayBuffer(1)))||r&&"[object Map]"!=g(new r)||o&&"[object Promise]"!=g(o.resolve())||i&&"[object Set]"!=g(new i)||s&&"[object WeakMap]"!=g(new s))&&(g=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,a=t?c(t):"";if(a)switch(a){case d:return"[object DataView]";case p:return"[object Map]";case m:return"[object Promise]";case u:return"[object Set]";case h:return"[object WeakMap]"}return e}),n.exports=g},function(n,e,t){var a=t(10)(t(8),"DataView");n.exports=a},function(n,e,t){var a=t(10)(t(8),"Promise");n.exports=a},function(n,e,t){var a=t(10)(t(8),"WeakMap");n.exports=a},function(n,e,t){var a=t(84),r=t(78);n.exports=function(n){for(var e=r(n),t=e.length;t--;){var o=e[t],i=n[o];e[t]=[o,i,a(i)]}return e}},function(n,e,t){var a=t(74),r=t(210),o=t(217),i=t(45),s=t(84),l=t(85),c=t(23);n.exports=function(n,e){return i(n)&&s(e)?l(c(n),e):function(t){var i=r(t,n);return void 0===i&&i===e?o(t,n):a(e,i,3)}}},function(n,e,t){var a=t(86);n.exports=function(n,e,t){var r=null==n?void 0:a(n,e);return void 0===r?t:r}},function(n,e,t){var a=t(212),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,i=a((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(r,(function(n,t,a,r){e.push(a?r.replace(o,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var a=t(213);n.exports=function(n){var e=a(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var a=t(42);function r(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var a=arguments,r=e?e.apply(this,a):a[0],o=t.cache;if(o.has(r))return o.get(r);var i=n.apply(this,a);return t.cache=o.set(r,i)||o,i};return t.cache=new(r.Cache||a),t}r.Cache=a,n.exports=r},function(n,e,t){var a=t(215);n.exports=function(n){return null==n?"":a(n)}},function(n,e,t){var a=t(15),r=t(216),o=t(6),i=t(46),s=a?a.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(o(e))return r(e,n)+"";if(i(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,a=null==n?0:n.length,r=Array(a);++t<a;)r[t]=e(n[t],t,n);return r}},function(n,e,t){var a=t(218),r=t(219);n.exports=function(n,e){return null!=n&&r(n,e,a)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var a=t(87),r=t(39),o=t(6),i=t(80),s=t(44),l=t(23);n.exports=function(n,e,t){for(var c=-1,d=(e=a(e,n)).length,p=!1;++c<d;){var m=l(e[c]);if(!(p=null!=n&&t(n,m)))break;n=n[m]}return p||++c!=d?p:!!(d=null==n?0:n.length)&&s(d)&&i(m,d)&&(o(n)||r(n))}},function(n,e,t){var a=t(221),r=t(222),o=t(45),i=t(23);n.exports=function(n){return o(n)?a(i(n)):r(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var a=t(86);n.exports=function(n){return function(e){return a(e,n)}}},function(n,e,t){var a=t(47),r=t(224),o=t(226);n.exports=function(n,e){return o(r(n,e,a),n+"")}},function(n,e,t){var a=t(225),r=Math.max;n.exports=function(n,e,t){return e=r(void 0===e?n.length-1:e,0),function(){for(var o=arguments,i=-1,s=r(o.length-e,0),l=Array(s);++i<s;)l[i]=o[e+i];i=-1;for(var c=Array(e+1);++i<e;)c[i]=o[i];return c[e]=t(l),a(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var a=t(227),r=t(230)(a);n.exports=r},function(n,e,t){var a=t(228),r=t(229),o=t(47),i=r?function(n,e){return r(n,"toString",{configurable:!0,enumerable:!1,value:a(e),writable:!0})}:o;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var a=t(10),r=function(){try{var n=a(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=r},function(n,e){var t=Date.now;n.exports=function(n){var e=0,a=0;return function(){var r=t(),o=16-(r-a);if(a=r,o>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var a=t(76),r=t(232),o=t(237),i=t(77),s=t(238),l=t(43);n.exports=function(n,e,t){var c=-1,d=r,p=n.length,m=!0,u=[],h=u;if(t)m=!1,d=o;else if(p>=200){var g=e?null:s(n);if(g)return l(g);m=!1,d=i,h=new a}else h=e?[]:u;n:for(;++c<p;){var f=n[c],v=e?e(f):f;if(f=t||0!==f?f:0,m&&v==v){for(var b=h.length;b--;)if(h[b]===v)continue n;e&&h.push(v),u.push(f)}else d(h,v,t)||(h!==u&&h.push(v),u.push(f))}return u}},function(n,e,t){var a=t(233);n.exports=function(n,e){return!!(null==n?0:n.length)&&a(n,e,0)>-1}},function(n,e,t){var a=t(234),r=t(235),o=t(236);n.exports=function(n,e,t){return e==e?o(n,e,t):a(n,r,t)}},function(n,e){n.exports=function(n,e,t,a){for(var r=n.length,o=t+(a?1:-1);a?o--:++o<r;)if(e(n[o],o,n))return o;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var a=t-1,r=n.length;++a<r;)if(n[a]===e)return a;return-1}},function(n,e){n.exports=function(n,e,t){for(var a=-1,r=null==n?0:n.length;++a<r;)if(t(e,n[a]))return!0;return!1}},function(n,e,t){var a=t(83),r=t(239),o=t(43),i=a&&1/o(new a([,-0]))[1]==1/0?function(n){return new a(n)}:r;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var a=t(82),r=t(12);n.exports=function(n){return r(n)&&a(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){},function(n,e,t){},function(n,e){},function(n,e){function t(n,e){for(var t=0,a=n.length-1;a>=0;a--){var r=n[a];"."===r?n.splice(a,1):".."===r?(n.splice(a,1),t++):t&&(n.splice(a,1),t--)}if(e)for(;t--;t)n.unshift("..");return n}function a(n,e){if(n.filter)return n.filter(e);for(var t=[],a=0;a<n.length;a++)e(n[a],a,n)&&t.push(n[a]);return t}e.resolve=function(){for(var n="",e=!1,r=arguments.length-1;r>=-1&&!e;r--){var o=r>=0?arguments[r]:process.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(n=o+"/"+n,e="/"===o.charAt(0))}return(e?"/":"")+(n=t(a(n.split("/"),(function(n){return!!n})),!e).join("/"))||"."},e.normalize=function(n){var o=e.isAbsolute(n),i="/"===r(n,-1);return(n=t(a(n.split("/"),(function(n){return!!n})),!o).join("/"))||o||(n="."),n&&i&&(n+="/"),(o?"/":"")+n},e.isAbsolute=function(n){return"/"===n.charAt(0)},e.join=function(){var n=Array.prototype.slice.call(arguments,0);return e.normalize(a(n,(function(n,e){if("string"!=typeof n)throw new TypeError("Arguments to path.join must be strings");return n})).join("/"))},e.relative=function(n,t){function a(n){for(var e=0;e<n.length&&""===n[e];e++);for(var t=n.length-1;t>=0&&""===n[t];t--);return e>t?[]:n.slice(e,t-e+1)}n=e.resolve(n).substr(1),t=e.resolve(t).substr(1);for(var r=a(n.split("/")),o=a(t.split("/")),i=Math.min(r.length,o.length),s=i,l=0;l<i;l++)if(r[l]!==o[l]){s=l;break}var c=[];for(l=s;l<r.length;l++)c.push("..");return(c=c.concat(o.slice(s))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(n){if("string"!=typeof n&&(n+=""),0===n.length)return".";for(var e=n.charCodeAt(0),t=47===e,a=-1,r=!0,o=n.length-1;o>=1;--o)if(47===(e=n.charCodeAt(o))){if(!r){a=o;break}}else r=!1;return-1===a?t?"/":".":t&&1===a?"/":n.slice(0,a)},e.basename=function(n,e){var t=function(n){"string"!=typeof n&&(n+="");var e,t=0,a=-1,r=!0;for(e=n.length-1;e>=0;--e)if(47===n.charCodeAt(e)){if(!r){t=e+1;break}}else-1===a&&(r=!1,a=e+1);return-1===a?"":n.slice(t,a)}(n);return e&&t.substr(-1*e.length)===e&&(t=t.substr(0,t.length-e.length)),t},e.extname=function(n){"string"!=typeof n&&(n+="");for(var e=-1,t=0,a=-1,r=!0,o=0,i=n.length-1;i>=0;--i){var s=n.charCodeAt(i);if(47!==s)-1===a&&(r=!1,a=i+1),46===s?-1===e?e=i:1!==o&&(o=1):-1!==e&&(o=-1);else if(!r){t=i+1;break}}return-1===e||-1===a||0===o||1===o&&e===a-1&&e===t+1?"":n.slice(e,a)};var r="b"==="ab".substr(-1)?function(n,e,t){return n.substr(e,t)}:function(n,e,t){return e<0&&(e=n.length+e),n.substr(e,t)}},function(n,e,t){"use strict";var a=/[|\\{}()[\]^$+*?.]/g;e.escapeRegExpChars=function(n){return n?String(n).replace(a,"\\$&"):""};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},o=/[&<>'"]/g;function i(n){return r[n]||n}e.escapeXML=function(n){return null==n?"":String(n).replace(o,i)},e.escapeXML.toString=function(){return Function.prototype.toString.call(this)+';\nvar _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n'},e.shallowCopy=function(n,e){for(var t in e=e||{})n[t]=e[t];return n},e.shallowCopyFromList=function(n,e,t){for(var a=0;a<t.length;a++){var r=t[a];void 0!==e[r]&&(n[r]=e[r])}return n},e.cache={_data:{},set:function(n,e){this._data[n]=e},get:function(n){return this._data[n]},remove:function(n){delete this._data[n]},reset:function(){this._data={}}}},function(n){n.exports=JSON.parse('{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.7.4","author":"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)","license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":"https://github.com/mde/ejs/issues","homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.1.1","eslint":"^4.14.0","git-directory-deploy":"^1.5.1","jake":"^10.3.1","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^5.0.5","uglify-js":"^3.3.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","postinstall":"node ./postinstall.js"}}')},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.16
 * (c) 2014-2023 Evan You
 * Released under the MIT License.
 */
var a=Object.freeze({}),r=Array.isArray;function o(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function d(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function m(n){return"[object Object]"===p.call(n)}function u(n){return"[object RegExp]"===p.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function g(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||m(n)&&n.toString===p?JSON.stringify(n,v,2):String(n)}function v(n,e){return e&&e.__v_isRef?e.value:e}function b(n){var e=parseFloat(n);return isNaN(e)?n:e}function y(n,e){for(var t=Object.create(null),a=n.split(","),r=0;r<a.length;r++)t[a[r]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}y("slot,component",!0);var x=y("key,ref,slot,slot-scope,is");function k(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var a=n.indexOf(e);if(a>-1)return n.splice(a,1)}}var E=Object.prototype.hasOwnProperty;function w(n,e){return E.call(n,e)}function A(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var T=/-(\w)/g,z=A((function(n){return n.replace(T,(function(n,e){return e?e.toUpperCase():""}))})),j=A((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),S=/\B([A-Z])/g,B=A((function(n){return n.replace(S,"-$1").toLowerCase()}));var _=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var a=arguments.length;return a?a>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function C(n,e){e=e||0;for(var t=n.length-e,a=new Array(t);t--;)a[t]=n[t+e];return a}function I(n,e){for(var t in e)n[t]=e[t];return n}function P(n){for(var e={},t=0;t<n.length;t++)n[t]&&I(e,n[t]);return e}function D(n,e,t){}var L=function(n,e,t){return!1},R=function(n){return n};function F(n,e){if(n===e)return!0;var t=d(n),a=d(e);if(!t||!a)return!t&&!a&&String(n)===String(e);try{var r=Array.isArray(n),o=Array.isArray(e);if(r&&o)return n.length===e.length&&n.every((function(n,t){return F(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(r||o)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return F(n[t],e[t])}))}catch(n){return!1}}function $(n,e){for(var t=0;t<n.length;t++)if(F(n[t],e))return t;return-1}function U(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function O(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var q=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:D,parsePlatformTagName:R,mustUseProp:L,async:!0,_lifecycleHooks:N},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function J(n,e,t,a){Object.defineProperty(n,e,{value:t,enumerable:!!a,writable:!0,configurable:!0})}var G=new RegExp("[^".concat(V.source,".$_\\d]"));var W="__proto__"in{},Z="undefined"!=typeof window,X=Z&&window.navigator.userAgent.toLowerCase(),K=X&&/msie|trident/.test(X),Y=X&&X.indexOf("msie 9.0")>0,Q=X&&X.indexOf("edge/")>0;X&&X.indexOf("android");var nn=X&&/iphone|ipad|ipod|ios/.test(X);X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X);var en,tn=X&&X.match(/firefox\/(\d+)/),an={}.watch,rn=!1;if(Z)try{var on={};Object.defineProperty(on,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var sn=function(){return void 0===en&&(en=!Z&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),en},ln=Z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function cn(n){return"function"==typeof n&&/native code/.test(n.toString())}var dn,pn="undefined"!=typeof Symbol&&cn(Symbol)&&"undefined"!=typeof Reflect&&cn(Reflect.ownKeys);dn="undefined"!=typeof Set&&cn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var mn=null;function un(n){void 0===n&&(n=null),n||mn&&mn._scope.off(),mn=n,n&&n._scope.on()}var hn=function(){function n(n,e,t,a,r,o,i,s){this.tag=n,this.data=e,this.children=t,this.text=a,this.elm=r,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),gn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function fn(n){return new hn(void 0,void 0,void 0,String(n))}function vn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}"function"==typeof SuppressedError&&SuppressedError;var bn=0,yn=[],xn=function(){function n(){this._pending=!1,this.id=bn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,yn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,a=e.length;t<a;t++){0,e[t].update()}},n}();xn.target=null;var kn=[];function En(n){kn.push(n),xn.target=n}function wn(){kn.pop(),xn.target=kn[kn.length-1]}var An=Array.prototype,Tn=Object.create(An);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=An[n];J(Tn,n,(function(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];var r,o=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":r=t;break;case"splice":r=t.slice(2)}return r&&i.observeArray(r),i.dep.notify(),o}))}));var zn=Object.getOwnPropertyNames(Tn),jn={},Sn=!0;function Bn(n){Sn=n}var _n={notify:D,depend:D,addSub:D,removeSub:D},Cn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?_n:new xn,this.vmCount=0,J(n,"__ob__",this),r(n)){if(!t)if(W)n.__proto__=Tn;else for(var a=0,o=zn.length;a<o;a++){J(n,s=zn[a],Tn[s])}e||this.observeArray(n)}else{var i=Object.keys(n);for(a=0;a<i.length;a++){var s;Pn(n,s=i[a],jn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)In(n[e],!1,this.mock)},n}();function In(n,e,t){return n&&w(n,"__ob__")&&n.__ob__ instanceof Cn?n.__ob__:!Sn||!t&&sn()||!r(n)&&!m(n)||!Object.isExtensible(n)||n.__v_skip||On(n)||n instanceof hn?void 0:new Cn(n,e,t)}function Pn(n,e,t,a,o,i,s){void 0===s&&(s=!1);var l=new xn,c=Object.getOwnPropertyDescriptor(n,e);if(!c||!1!==c.configurable){var d=c&&c.get,p=c&&c.set;d&&!p||t!==jn&&2!==arguments.length||(t=n[e]);var m=o?t&&t.__ob__:In(t,!1,i);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=d?d.call(n):t;return xn.target&&(l.depend(),m&&(m.dep.depend(),r(e)&&Rn(e))),On(e)&&!o?e.value:e},set:function(e){var a=d?d.call(n):t;if(O(a,e)){if(p)p.call(n,e);else{if(d)return;if(!o&&On(a)&&!On(e))return void(a.value=e);t=e}m=o?e&&e.__ob__:In(e,!1,i),l.notify()}}}),l}}function Dn(n,e,t){if(!Un(n)){var a=n.__ob__;return r(n)&&h(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),a&&!a.shallow&&a.mock&&In(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||a&&a.vmCount?t:a?(Pn(a.value,e,t,void 0,a.shallow,a.mock),a.dep.notify(),t):(n[e]=t,t)}}function Ln(n,e){if(r(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Un(n)||w(n,e)&&(delete n[e],t&&t.dep.notify())}}function Rn(n){for(var e=void 0,t=0,a=n.length;t<a;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),r(e)&&Rn(e)}function Fn(n){return $n(n,!0),J(n,"__v_isShallow",!0),n}function $n(n,e){if(!Un(n)){In(n,e,sn());0}}function Un(n){return!(!n||!n.__v_isReadonly)}function On(n){return!(!n||!0!==n.__v_isRef)}function qn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(On(n))return n.value;var a=n&&n.__ob__;return a&&a.dep.depend(),n},set:function(n){var a=e[t];On(a)&&!On(n)?a.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Nn;var Mn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Nn,!n&&Nn&&(this.index=(Nn.scopes||(Nn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Nn;try{return Nn=this,n()}finally{Nn=e}}else 0},n.prototype.on=function(){Nn=this},n.prototype.off=function(){Nn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Vn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Hn=A((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),a="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=a?n.slice(1):n,once:t,capture:a,passive:e}}));function Jn(n,e){function t(){var n=t.fns;if(!r(n))return Se(n,null,arguments,e,"v-on handler");for(var a=n.slice(),o=0;o<a.length;o++)Se(a[o],null,arguments,e,"v-on handler")}return t.fns=n,t}function Gn(n,e,t,a,r,i){var l,c,d,p;for(l in n)c=n[l],d=e[l],p=Hn(l),o(c)||(o(d)?(o(c.fns)&&(c=n[l]=Jn(c,i)),s(p.once)&&(c=n[l]=r(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==d&&(d.fns=c,n[l]=d));for(l in e)o(n[l])&&a((p=Hn(l)).name,e[l],p.capture)}function Wn(n,e,t){var a;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var r=n[e];function l(){t.apply(this,arguments),k(a.fns,l)}o(r)?a=Jn([l]):i(r.fns)&&s(r.merged)?(a=r).fns.push(l):a=Jn([r,l]),a.merged=!0,n[e]=a}function Zn(n,e,t,a,r){if(i(e)){if(w(e,t))return n[t]=e[t],r||delete e[t],!0;if(w(e,a))return n[t]=e[a],r||delete e[a],!0}return!1}function Xn(n){return l(n)?[fn(n)]:r(n)?function n(e,t){var a,c,d,p,m=[];for(a=0;a<e.length;a++)o(c=e[a])||"boolean"==typeof c||(d=m.length-1,p=m[d],r(c)?c.length>0&&(Kn((c=n(c,"".concat(t||"","_").concat(a)))[0])&&Kn(p)&&(m[d]=fn(p.text+c[0].text),c.shift()),m.push.apply(m,c)):l(c)?Kn(p)?m[d]=fn(p.text+c):""!==c&&m.push(fn(c)):Kn(c)&&Kn(p)?m[d]=fn(p.text+c.text):(s(e._isVList)&&i(c.tag)&&o(c.key)&&i(t)&&(c.key="__vlist".concat(t,"_").concat(a,"__")),m.push(c)));return m}(n):void 0}function Kn(n){return i(n)&&i(n.text)&&!1===n.isComment}function Yn(n,e){var t,a,o,s,l=null;if(r(n)||"string"==typeof n)for(l=new Array(n.length),t=0,a=n.length;t<a;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(d(n))if(pn&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),p=c.next();!p.done;)l.push(e(p.value,l.length)),p=c.next()}else for(o=Object.keys(n),l=new Array(o.length),t=0,a=o.length;t<a;t++)s=o[t],l[t]=e(n[s],s,t);return i(l)||(l=[]),l._isVList=!0,l}function Qn(n,e,t,a){var r,o=this.$scopedSlots[n];o?(t=t||{},a&&(t=I(I({},a),t)),r=o(t)||(c(e)?e():e)):r=this.$slots[n]||(c(e)?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},r):r}function ne(n){return Ct(this.$options,"filters",n,!0)||R}function ee(n,e){return r(n)?-1===n.indexOf(e):n!==e}function te(n,e,t,a,r){var o=M.keyCodes[e]||t;return r&&a&&!M.keyCodes[e]?ee(r,a):o?ee(o,n):a?B(a)!==e:void 0===n}function ae(n,e,t,a,o){if(t)if(d(t)){r(t)&&(t=P(t));var i=void 0,s=function(r){if("class"===r||"style"===r||x(r))i=n;else{var s=n.attrs&&n.attrs.type;i=a||M.mustUseProp(e,s,r)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=z(r),c=B(r);l in i||c in i||(i[r]=t[r],o&&((n.on||(n.on={}))["update:".concat(r)]=function(n){t[r]=n}))};for(var l in t)s(l)}else;return n}function re(n,e){var t=this._staticTrees||(this._staticTrees=[]),a=t[n];return a&&!e||ie(a=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),a}function oe(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(r(n))for(var a=0;a<n.length;a++)n[a]&&"string"!=typeof n[a]&&se(n[a],"".concat(e,"_").concat(a),t);else se(n,e,t)}function se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function le(n,e){if(e)if(m(e)){var t=n.on=n.on?I({},n.on):{};for(var a in e){var r=t[a],o=e[a];t[a]=r?[].concat(r,o):o}}else;return n}function ce(n,e,t,a){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var i=n[o];r(i)?ce(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return a&&(e.$key=a),e}function de(n,e){for(var t=0;t<e.length;t+=2){var a=e[t];"string"==typeof a&&a&&(n[e[t]]=e[t+1])}return n}function pe(n,e){return"string"==typeof n?e+n:n}function me(n){n._o=oe,n._n=b,n._s=f,n._l=Yn,n._t=Qn,n._q=F,n._i=$,n._m=re,n._f=ne,n._k=te,n._b=ae,n._v=fn,n._e=gn,n._u=ce,n._g=le,n._d=de,n._p=pe}function ue(n,e){if(!n||!n.length)return{};for(var t={},a=0,r=n.length;a<r;a++){var o=n[a],i=o.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,o.context!==e&&o.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(o);else{var s=i.slot,l=t[s]||(t[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in t)t[c].every(he)&&delete t[c];return t}function he(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function fe(n,e,t,r){var o,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&r&&r!==a&&l===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=ve(n,t,c,e[c]))}else o={};for(var d in t)d in o||(o[d]=be(t,d));return e&&Object.isExtensible(e)&&(e._normalized=o),J(o,"$stable",s),J(o,"$key",l),J(o,"$hasNormal",i),o}function ve(n,e,t,a){var o=function(){var e=mn;un(n);var t=arguments.length?a.apply(null,arguments):a({}),o=(t=t&&"object"==typeof t&&!r(t)?[t]:Xn(t))&&t[0];return un(e),t&&(!o||1===t.length&&o.isComment&&!ge(o))?void 0:t};return a.proxy&&Object.defineProperty(e,t,{get:o,enumerable:!0,configurable:!0}),o}function be(n,e){return function(){return n[e]}}function ye(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};J(e,"_v_attr_proxy",!0),xe(e,n.$attrs,a,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||xe(n._listenersProxy={},n.$listeners,a,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||Ee(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:_(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return qn(n,e,t)}))}}}function xe(n,e,t,a,r){var o=!1;for(var i in e)i in n?e[i]!==t[i]&&(o=!0):(o=!0,ke(n,i,a,r));for(var i in n)i in e||(o=!0,delete n[i]);return o}function ke(n,e,t,a){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[a][e]}})}function Ee(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var we=null;function Ae(n,e){return(n.__esModule||pn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),d(n)?e.extend(n):n}function Te(n){if(r(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||ge(t)))return t}}function ze(n,e,t,a,p,m){return(r(t)||l(t))&&(p=a,a=t,t=void 0),s(m)&&(p=2),function(n,e,t,a,l){if(i(t)&&i(t.__ob__))return gn();i(t)&&i(t.is)&&(e=t.is);if(!e)return gn();0;r(a)&&c(a[0])&&((t=t||{}).scopedSlots={default:a[0]},a.length=0);2===l?a=Xn(a):1===l&&(a=function(n){for(var e=0;e<n.length;e++)if(r(n[e]))return Array.prototype.concat.apply([],n);return n}(a));var p,m;if("string"==typeof e){var u=void 0;m=n.$vnode&&n.$vnode.ns||M.getTagNamespace(e),p=M.isReservedTag(e)?new hn(M.parsePlatformTagName(e),t,a,void 0,void 0,n):t&&t.pre||!i(u=Ct(n.$options,"components",e))?new hn(e,t,a,void 0,void 0,n):kt(u,t,n,a,e)}else p=kt(e,t,n,a);return r(p)?p:i(p)?(i(m)&&function n(e,t,a){e.ns=t,"foreignObject"===e.tag&&(t=void 0,a=!0);if(i(e.children))for(var r=0,l=e.children.length;r<l;r++){var c=e.children[r];i(c.tag)&&(o(c.ns)||s(a)&&"svg"!==c.tag)&&n(c,t,a)}}(p,m),i(t)&&function(n){d(n.style)&&Me(n.style);d(n.class)&&Me(n.class)}(t),p):gn()}(n,e,t,a,p)}function je(n,e,t){En();try{if(e)for(var a=e;a=a.$parent;){var r=a.$options.errorCaptured;if(r)for(var o=0;o<r.length;o++)try{if(!1===r[o].call(a,n,e,t))return}catch(n){Be(n,a,"errorCaptured hook")}}Be(n,e,t)}finally{wn()}}function Se(n,e,t,a,r){var o;try{(o=t?n.apply(e,t):n.call(e))&&!o._isVue&&g(o)&&!o._handled&&(o.catch((function(n){return je(n,a,r+" (Promise/async)")})),o._handled=!0)}catch(n){je(n,a,r)}return o}function Be(n,e,t){if(M.errorHandler)try{return M.errorHandler.call(null,n,e,t)}catch(e){e!==n&&_e(e,null,"config.errorHandler")}_e(n,e,t)}function _e(n,e,t){if(!Z||"undefined"==typeof console)throw n;console.error(n)}var Ce,Ie=!1,Pe=[],De=!1;function Le(){De=!1;var n=Pe.slice(0);Pe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&cn(Promise)){var Re=Promise.resolve();Ce=function(){Re.then(Le),nn&&setTimeout(D)},Ie=!0}else if(K||"undefined"==typeof MutationObserver||!cn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ce="undefined"!=typeof setImmediate&&cn(setImmediate)?function(){setImmediate(Le)}:function(){setTimeout(Le,0)};else{var Fe=1,$e=new MutationObserver(Le),Ue=document.createTextNode(String(Fe));$e.observe(Ue,{characterData:!0}),Ce=function(){Fe=(Fe+1)%2,Ue.data=String(Fe)},Ie=!0}function Oe(n,e){var t;if(Pe.push((function(){if(n)try{n.call(e)}catch(n){je(n,e,"nextTick")}else t&&t(e)})),De||(De=!0,Ce()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function qe(n){return function(e,t){if(void 0===t&&(t=mn),t)return function(n,e,t){var a=n.$options;a[e]=jt(a[e],t)}(t,n,e)}}qe("beforeMount"),qe("mounted"),qe("beforeUpdate"),qe("updated"),qe("beforeDestroy"),qe("destroyed"),qe("activated"),qe("deactivated"),qe("serverPrefetch"),qe("renderTracked"),qe("renderTriggered"),qe("errorCaptured");var Ne=new dn;function Me(n){return function n(e,t){var a,o,i=r(e);if(!i&&!d(e)||e.__v_skip||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(a=e.length;a--;)n(e[a],t);else if(On(e))n(e.value,t);else for(o=Object.keys(e),a=o.length;a--;)n(e[o[a]],t)}(n,Ne),Ne.clear(),n}var Ve,He=0,Je=function(){function n(n,e,t,a,r){var o,i;o=this,void 0===(i=Nn&&!Nn._vm?Nn:n?n._scope:void 0)&&(i=Nn),i&&i.active&&i.effects.push(o),(this.vm=n)&&r&&(n._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++He,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new dn,this.newDepIds=new dn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!G.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=D)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;En(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;je(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Me(n),wn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():ut(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||d(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Se(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&k(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Ge(n,e){Ve.$on(n,e)}function We(n,e){Ve.$off(n,e)}function Ze(n,e){var t=Ve;return function a(){var r=e.apply(null,arguments);null!==r&&t.$off(n,a)}}function Xe(n,e,t){Ve=n,Gn(e,t||{},Ge,We,Ze,n),Ve=void 0}var Ke=null;function Ye(n){var e=Ke;return Ke=n,function(){Ke=e}}function Qe(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function nt(n,e){if(e){if(n._directInactive=!1,Qe(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)nt(n.$children[t]);et(n,"activated")}}function et(n,e,t,a){void 0===a&&(a=!0),En();var r=mn,o=Nn;a&&un(n);var i=n.$options[e],s="".concat(e," hook");if(i)for(var l=0,c=i.length;l<c;l++)Se(i[l],n,t||null,n,s);n._hasHookEvent&&n.$emit("hook:"+e),a&&(un(r),o&&o.on()),wn()}var tt=[],at=[],rt={},ot=!1,it=!1,st=0;var lt=0,ct=Date.now;if(Z&&!K){var dt=window.performance;dt&&"function"==typeof dt.now&&ct()>document.createEvent("Event").timeStamp&&(ct=function(){return dt.now()})}var pt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function mt(){var n,e;for(lt=ct(),it=!0,tt.sort(pt),st=0;st<tt.length;st++)(n=tt[st]).before&&n.before(),e=n.id,rt[e]=null,n.run();var t=at.slice(),a=tt.slice();st=tt.length=at.length=0,rt={},ot=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,nt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],a=t.vm;a&&a._watcher===t&&a._isMounted&&!a._isDestroyed&&et(a,"updated")}}(a),function(){for(var n=0;n<yn.length;n++){var e=yn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}yn.length=0}(),ln&&M.devtools&&ln.emit("flush")}function ut(n){var e=n.id;if(null==rt[e]&&(n!==xn.target||!n.noRecurse)){if(rt[e]=!0,it){for(var t=tt.length-1;t>st&&tt[t].id>n.id;)t--;tt.splice(t+1,0,n)}else tt.push(n);ot||(ot=!0,Oe(mt))}}function ht(n,e){if(n){for(var t=Object.create(null),a=pn?Reflect.ownKeys(n):Object.keys(n),r=0;r<a.length;r++){var o=a[r];if("__ob__"!==o){var i=n[o].from;if(i in e._provided)t[o]=e._provided[i];else if("default"in n[o]){var s=n[o].default;t[o]=c(s)?s.call(e):s}else 0}}return t}}function gt(n,e,t,o,i){var l,c=this,d=i.options;w(o,"_uid")?(l=Object.create(o))._original=o:(l=o,o=o._original);var p=s(d._compiled),m=!p;this.data=n,this.props=e,this.children=t,this.parent=o,this.listeners=n.on||a,this.injections=ht(d.inject,o),this.slots=function(){return c.$slots||fe(o,n.scopedSlots,c.$slots=ue(t,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fe(o,n.scopedSlots,this.slots())}}),p&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=fe(o,n.scopedSlots,this.$slots)),d._scopeId?this._c=function(n,e,t,a){var i=ze(l,n,e,t,a,m);return i&&!r(i)&&(i.fnScopeId=d._scopeId,i.fnContext=o),i}:this._c=function(n,e,t,a){return ze(l,n,e,t,a,m)}}function ft(n,e,t,a,r){var o=vn(n);return o.fnContext=t,o.fnOptions=a,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function vt(n,e){for(var t in e)n[z(t)]=e[t]}function bt(n){return n.name||n.__name||n._componentTag}me(gt.prototype);var yt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;yt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},a=n.data.inlineTemplate;i(a)&&(t.render=a.render,t.staticRenderFns=a.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ke)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,o){var i=r.data.scopedSlots,s=n.$scopedSlots,l=!!(i&&!i.$stable||s!==a&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),c=!!(o||n.$options._renderChildren||l),d=n.$vnode;n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r),n.$options._renderChildren=o;var p=r.data.attrs||a;n._attrsProxy&&xe(n._attrsProxy,p,d.data&&d.data.attrs||a,n,"$attrs")&&(c=!0),n.$attrs=p,t=t||a;var m=n.$options._parentListeners;if(n._listenersProxy&&xe(n._listenersProxy,t,m||a,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Xe(n,t,m),e&&n.$options.props){Bn(!1);for(var u=n._props,h=n.$options._propKeys||[],g=0;g<h.length;g++){var f=h[g],v=n.$options.props;u[f]=It(f,v,e,n)}Bn(!0),n.$options.propsData=e}c&&(n.$slots=ue(o,r.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,a=n.componentInstance;a._isMounted||(a._isMounted=!0,et(a,"mounted")),n.data.keepAlive&&(t._isMounted?((e=a)._inactive=!1,at.push(e)):nt(a,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Qe(e))||e._inactive)){e._inactive=!0;for(var a=0;a<e.$children.length;a++)n(e.$children[a]);et(e,"deactivated")}}(e,!0):e.$destroy())}},xt=Object.keys(yt);function kt(n,e,t,l,c){if(!o(n)){var p=t.$options._base;if(d(n)&&(n=p.extend(n)),"function"==typeof n){var m;if(o(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=we;if(t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var a=n.owners=[t],r=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return k(a,t)}));var p=function(n){for(var e=0,t=a.length;e<t;e++)a[e].$forceUpdate();n&&(a.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},m=U((function(t){n.resolved=Ae(t,e),r?a.length=0:p(!0)})),u=U((function(e){i(n.errorComp)&&(n.error=!0,p(!0))})),h=n(m,u);return d(h)&&(g(h)?o(n.resolved)&&h.then(m,u):g(h.component)&&(h.component.then(m,u),i(h.error)&&(n.errorComp=Ae(h.error,e)),i(h.loading)&&(n.loadingComp=Ae(h.loading,e),0===h.delay?n.loading=!0:l=setTimeout((function(){l=null,o(n.resolved)&&o(n.error)&&(n.loading=!0,p(!1))}),h.delay||200)),i(h.timeout)&&(c=setTimeout((function(){c=null,o(n.resolved)&&u(null)}),h.timeout)))),r=!1,n.loading?n.loadingComp:n.resolved}}(m=n,p)))return function(n,e,t,a,r){var o=gn();return o.asyncFactory=n,o.asyncMeta={data:e,context:t,children:a,tag:r},o}(m,e,t,l,c);e=e||{},Jt(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",a=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),s=o[a],l=e.model.callback;i(s)?(r(s)?-1===s.indexOf(l):s!==l)&&(o[a]=[l].concat(s)):o[a]=l}(n.options,e);var u=function(n,e,t){var a=e.options.props;if(!o(a)){var r={},s=n.attrs,l=n.props;if(i(s)||i(l))for(var c in a){var d=B(c);Zn(r,l,c,d,!0)||Zn(r,s,c,d,!1)}return r}}(e,n);if(s(n.options.functional))return function(n,e,t,o,s){var l=n.options,c={},d=l.props;if(i(d))for(var p in d)c[p]=It(p,d,e||a);else i(t.attrs)&&vt(c,t.attrs),i(t.props)&&vt(c,t.props);var m=new gt(t,c,s,o,n),u=l.render.call(null,m._c,m);if(u instanceof hn)return ft(u,t,m.parent,l,m);if(r(u)){for(var h=Xn(u)||[],g=new Array(h.length),f=0;f<h.length;f++)g[f]=ft(h[f],t,m.parent,l,m);return g}}(n,u,e,t,l);var h=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<xt.length;t++){var a=xt[t],r=e[a],o=yt[a];r===o||r&&r._merged||(e[a]=r?Et(o,r):o)}}(e);var v=bt(n.options)||c;return new hn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:u,listeners:h,tag:c,children:l},m)}}}function Et(n,e){var t=function(t,a){n(t,a),e(t,a)};return t._merged=!0,t}var wt=D,At=M.optionMergeStrategies;function Tt(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var a,r,o,i=pn?Reflect.ownKeys(e):Object.keys(e),s=0;s<i.length;s++)"__ob__"!==(a=i[s])&&(r=n[a],o=e[a],t&&w(n,a)?r!==o&&m(r)&&m(o)&&Tt(r,o):Dn(n,a,o));return n}function zt(n,e,t){return t?function(){var a=c(e)?e.call(t,t):e,r=c(n)?n.call(t,t):n;return a?Tt(a,r):r}:e?n?function(){return Tt(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function jt(n,e){var t=e?n?n.concat(e):r(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function St(n,e,t,a){var r=Object.create(n||null);return e?I(r,e):r}At.data=function(n,e,t){return t?zt(n,e,t):e&&"function"!=typeof e?n:zt(n,e)},N.forEach((function(n){At[n]=jt})),q.forEach((function(n){At[n+"s"]=St})),At.watch=function(n,e,t,a){if(n===an&&(n=void 0),e===an&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var i in I(o,n),e){var s=o[i],l=e[i];s&&!r(s)&&(s=[s]),o[i]=s?s.concat(l):r(l)?l:[l]}return o},At.props=At.methods=At.inject=At.computed=function(n,e,t,a){if(!n)return e;var r=Object.create(null);return I(r,n),e&&I(r,e),r},At.provide=function(n,e){return n?function(){var t=Object.create(null);return Tt(t,c(n)?n.call(this):n),e&&Tt(t,c(e)?e.call(this):e,!1),t}:e};var Bt=function(n,e){return void 0===e?n:e};function _t(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var a,o,i={};if(r(t))for(a=t.length;a--;)"string"==typeof(o=t[a])&&(i[z(o)]={type:null});else if(m(t))for(var s in t)o=t[s],i[z(s)]=m(o)?o:{type:o};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var a=n.inject={};if(r(t))for(var o=0;o<t.length;o++)a[t[o]]={from:t[o]};else if(m(t))for(var i in t){var s=t[i];a[i]=m(s)?I({from:i},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var a=e[t];c(a)&&(e[t]={bind:a,update:a})}}(e),!e._base&&(e.extends&&(n=_t(n,e.extends,t)),e.mixins))for(var a=0,o=e.mixins.length;a<o;a++)n=_t(n,e.mixins[a],t);var i,s={};for(i in n)l(i);for(i in e)w(n,i)||l(i);function l(a){var r=At[a]||Bt;s[a]=r(n[a],e[a],t,a)}return s}function Ct(n,e,t,a){if("string"==typeof t){var r=n[e];if(w(r,t))return r[t];var o=z(t);if(w(r,o))return r[o];var i=j(o);return w(r,i)?r[i]:r[t]||r[o]||r[i]}}function It(n,e,t,a){var r=e[n],o=!w(t,n),i=t[n],s=Rt(Boolean,r.type);if(s>-1)if(o&&!w(r,"default"))i=!1;else if(""===i||i===B(n)){var l=Rt(String,r.type);(l<0||s<l)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!w(e,"default"))return;var a=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(a)&&"Function"!==Dt(e.type)?a.call(n):a}(a,r,n);var d=Sn;Bn(!0),In(i),Bn(d)}return i}var Pt=/^\s*function (\w+)/;function Dt(n){var e=n&&n.toString().match(Pt);return e?e[1]:""}function Lt(n,e){return Dt(n)===Dt(e)}function Rt(n,e){if(!r(e))return Lt(e,n)?0:-1;for(var t=0,a=e.length;t<a;t++)if(Lt(e[t],n))return t;return-1}var Ft={enumerable:!0,configurable:!0,get:D,set:D};function $t(n,e,t){Ft.get=function(){return this[e][t]},Ft.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Ft)}function Ut(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},a=n._props=Fn({}),r=n.$options._propKeys=[];n.$parent&&Bn(!1);var o=function(o){r.push(o);var i=It(o,e,t,n);Pn(a,o,i,void 0,!0),o in n||$t(n,"_props",o)};for(var i in e)o(i);Bn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var a=n._setupContext=ye(n);un(n),En();var r=Se(t,null,[n._props||Fn({}),a],n,"setup");if(wn(),un(),c(r))e.render=r;else if(d(r))if(n._setupState=r,r.__sfc){var o=n._setupProxy={};for(var i in r)"__sfc"!==i&&qn(o,r,i)}else for(var i in r)H(i)||qn(n,r,i);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?D:_(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;m(e=n._data=c(e)?function(n,e){En();try{return n.call(e,e)}catch(n){return je(n,e,"data()"),{}}finally{wn()}}(e,n):e||{})||(e={});var t=Object.keys(e),a=n.$options.props,r=(n.$options.methods,t.length);for(;r--;){var o=t[r];0,a&&w(a,o)||H(o)||$t(n,"_data",o)}var i=In(e);i&&i.vmCount++}(n);else{var t=In(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),a=sn();for(var r in e){var o=e[r],i=c(o)?o:o.get;0,a||(t[r]=new Je(n,i||D,D,Ot)),r in n||qt(n,r,o)}}(n,e.computed),e.watch&&e.watch!==an&&function(n,e){for(var t in e){var a=e[t];if(r(a))for(var o=0;o<a.length;o++)Vt(n,t,a[o]);else Vt(n,t,a)}}(n,e.watch)}var Ot={lazy:!0};function qt(n,e,t){var a=!sn();c(t)?(Ft.get=a?Nt(e):Mt(t),Ft.set=D):(Ft.get=t.get?a&&!1!==t.cache?Nt(e):Mt(t.get):D,Ft.set=t.set||D),Object.defineProperty(n,e,Ft)}function Nt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),xn.target&&e.depend(),e.value}}function Mt(n){return function(){return n.call(this,this)}}function Vt(n,e,t,a){return m(t)&&(a=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,a)}var Ht=0;function Jt(n){var e=n.options;if(n.super){var t=Jt(n.super);if(t!==n.superOptions){n.superOptions=t;var a=function(n){var e,t=n.options,a=n.sealedOptions;for(var r in t)t[r]!==a[r]&&(e||(e={}),e[r]=t[r]);return e}(n);a&&I(n.extendOptions,a),(e=n.options=_t(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Gt(n){this._init(n)}function Wt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,a=t.cid,r=n._Ctor||(n._Ctor={});if(r[a])return r[a];var o=bt(n)||bt(t.options);var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=_t(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)$t(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)qt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,q.forEach((function(n){i[n]=t[n]})),o&&(i.options.components[o]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=I({},i.options),r[a]=i,i}}function Zt(n){return n&&(bt(n.Ctor.options)||n.tag)}function Xt(n,e){return r(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!u(n)&&n.test(e)}function Kt(n,e){var t=n.cache,a=n.keys,r=n._vnode,o=n.$vnode;for(var i in t){var s=t[i];if(s){var l=s.name;l&&!e(l)&&Yt(t,i,a,r)}}o.componentOptions.children=void 0}function Yt(n,e,t,a){var r=n[e];!r||a&&r.tag===a.tag||r.componentInstance.$destroy(),n[e]=null,k(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ht++,e._isVue=!0,e.__v_skip=!0,e._scope=new Mn(!0),e._scope.parent=void 0,e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),a=e._parentVnode;t.parent=e.parent,t._parentVnode=a;var r=a.componentOptions;t.propsData=r.propsData,t._parentListeners=r.listeners,t._renderChildren=r.children,t._componentTag=r.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=_t(Jt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Xe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=ue(e._renderChildren,r),n.$scopedSlots=t?fe(n.$parent,t.data.scopedSlots,n.$slots):a,n._c=function(e,t,a,r){return ze(n,e,t,a,r,!1)},n.$createElement=function(e,t,a,r){return ze(n,e,t,a,r,!0)};var o=t&&t.data;Pn(n,"$attrs",o&&o.attrs||a,null,!0),Pn(n,"$listeners",e._parentListeners||a,null,!0)}(e),et(e,"beforeCreate",void 0,!1),function(n){var e=ht(n.$options.inject,n);e&&(Bn(!1),Object.keys(e).forEach((function(t){Pn(n,t,e[t])})),Bn(!0))}(e),Ut(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!d(t))return;for(var a=Vn(n),r=pn?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];Object.defineProperty(a,i,Object.getOwnPropertyDescriptor(t,i))}}}(e),et(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Gt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=Dn,n.prototype.$delete=Ln,n.prototype.$watch=function(n,e,t){if(m(e))return Vt(this,n,e,t);(t=t||{}).user=!0;var a=new Je(this,n,e,t);if(t.immediate){var r='callback for immediate watcher "'.concat(a.expression,'"');En(),Se(e,this,[a.value],this,r),wn()}return function(){a.teardown()}}}(Gt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var a=this;if(r(n))for(var o=0,i=n.length;o<i;o++)a.$on(n[o],t);else(a._events[n]||(a._events[n]=[])).push(t),e.test(n)&&(a._hasHookEvent=!0);return a},n.prototype.$once=function(n,e){var t=this;function a(){t.$off(n,a),e.apply(t,arguments)}return a.fn=e,t.$on(n,a),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(r(n)){for(var a=0,o=n.length;a<o;a++)t.$off(n[a],e);return t}var i,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var l=s.length;l--;)if((i=s[l])===e||i.fn===e){s.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?C(t):t;for(var a=C(arguments,1),r='event handler for "'.concat(n,'"'),o=0,i=t.length;o<i;o++)Se(t[o],e,a,e,r)}return e}}(Gt),function(n){n.prototype._update=function(n,e){var t=this,a=t.$el,r=t._vnode,o=Ye(t);t._vnode=n,t.$el=r?t.__patch__(r,n):t.__patch__(t.$el,n,e,!1),o(),a&&(a.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var i=t;i&&i.$vnode&&i.$parent&&i.$vnode===i.$parent._vnode;)i.$parent.$el=i.$el,i=i.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){et(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||k(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),et(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Gt),function(n){me(n.prototype),n.prototype.$nextTick=function(n){return Oe(n,this)},n.prototype._render=function(){var n=this,e=n.$options,t=e.render,a=e._parentVnode;a&&n._isMounted&&(n.$scopedSlots=fe(n.$parent,a.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&Ee(n._slotsProxy,n.$scopedSlots)),n.$vnode=a;var o,i=mn,s=we;try{un(n),we=n,o=t.call(n._renderProxy,n.$createElement)}catch(e){je(e,n,"render"),o=n._vnode}finally{we=s,un(i)}return r(o)&&1===o.length&&(o=o[0]),o instanceof hn||(o=gn()),o.parent=a,o}}(Gt);var Qt=[String,RegExp,Array],na={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Qt,exclude:Qt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,a=this.keyToCache;if(t){var r=t.tag,o=t.componentInstance,i=t.componentOptions;n[a]={name:Zt(i),tag:r,componentInstance:o},e.push(a),this.max&&e.length>parseInt(this.max)&&Yt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Yt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Kt(n,(function(n){return Xt(e,n)}))})),this.$watch("exclude",(function(e){Kt(n,(function(n){return!Xt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Te(n),t=e&&e.componentOptions;if(t){var a=Zt(t),r=this.include,o=this.exclude;if(r&&(!a||!Xt(r,a))||o&&a&&Xt(o,a))return e;var i=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;i[l]?(e.componentInstance=i[l].componentInstance,k(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return M}};Object.defineProperty(n,"config",e),n.util={warn:wt,extend:I,mergeOptions:_t,defineReactive:Pn},n.set=Dn,n.delete=Ln,n.nextTick=Oe,n.observable=function(n){return In(n),n},n.options=Object.create(null),q.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,I(n.options.components,na),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=C(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=_t(this.options,n),this}}(n),Wt(n),function(n){q.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&m(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Gt),Object.defineProperty(Gt.prototype,"$isServer",{get:sn}),Object.defineProperty(Gt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Gt,"FunctionalRenderContext",{value:gt}),Gt.version="2.7.16";var ea=y("style,class"),ta=y("input,textarea,option,select,progress"),aa=y("contenteditable,draggable,spellcheck"),ra=y("events,caret,typing,plaintext-only"),oa=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ia="http://www.w3.org/1999/xlink",sa=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},la=function(n){return sa(n)?n.slice(6,n.length):""},ca=function(n){return null==n||!1===n};function da(n){for(var e=n.data,t=n,a=n;i(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(e=pa(a.data,e));for(;i(t=t.parent);)t&&t.data&&(e=pa(e,t.data));return function(n,e){if(i(n)||i(e))return ma(n,ua(e));return""}(e.staticClass,e.class)}function pa(n,e){return{staticClass:ma(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function ma(n,e){return n?e?n+" "+e:n:e||""}function ua(n){return Array.isArray(n)?function(n){for(var e,t="",a=0,r=n.length;a<r;a++)i(e=ua(n[a]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):d(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var ha={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ga=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),fa=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),va=function(n){return ga(n)||fa(n)};var ba=Object.create(null);var ya=y("text,number,password,search,email,tel,url");var xa=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(ha[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),ka={create:function(n,e){Ea(e)},update:function(n,e){n.data.ref!==e.data.ref&&(Ea(n,!0),Ea(e))},destroy:function(n){Ea(n,!0)}};function Ea(n,e){var t=n.data.ref;if(i(t)){var a=n.context,o=n.componentInstance||n.elm,s=e?null:o,l=e?void 0:o;if(c(t))Se(t,a,[s],a,"template ref function");else{var d=n.data.refInFor,p="string"==typeof t||"number"==typeof t,m=On(t),u=a.$refs;if(p||m)if(d){var h=p?u[t]:t.value;e?r(h)&&k(h,o):r(h)?h.includes(o)||h.push(o):p?(u[t]=[o],wa(a,t,u[t])):t.value=[o]}else if(p){if(e&&u[t]!==o)return;u[t]=l,wa(a,t,s)}else if(m){if(e&&t.value!==o)return;t.value=s}else 0}}}function wa(n,e,t){var a=n._setupState;a&&w(a,e)&&(On(a[e])?a[e].value=t:a[e]=t)}var Aa=new hn("",{},[]),Ta=["create","activate","update","remove","destroy"];function za(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,a=i(t=n.data)&&i(t=t.attrs)&&t.type,r=i(t=e.data)&&i(t=t.attrs)&&t.type;return a===r||ya(a)&&ya(r)}(n,e)||s(n.isAsyncPlaceholder)&&o(e.asyncFactory.error))}function ja(n,e,t){var a,r,o={};for(a=e;a<=t;++a)i(r=n[a].key)&&(o[r]=a);return o}var Sa={create:Ba,update:Ba,destroy:function(n){Ba(n,Aa)}};function Ba(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,a,r,o=n===Aa,i=e===Aa,s=Ca(n.data.directives,n.context),l=Ca(e.data.directives,e.context),c=[],d=[];for(t in l)a=s[t],r=l[t],a?(r.oldValue=a.value,r.oldArg=a.arg,Pa(r,"update",e,n),r.def&&r.def.componentUpdated&&d.push(r)):(Pa(r,"bind",e,n),r.def&&r.def.inserted&&c.push(r));if(c.length){var p=function(){for(var t=0;t<c.length;t++)Pa(c[t],"inserted",e,n)};o?Wn(e,"insert",p):p()}d.length&&Wn(e,"postpatch",(function(){for(var t=0;t<d.length;t++)Pa(d[t],"componentUpdated",e,n)}));if(!o)for(t in s)l[t]||Pa(s[t],"unbind",n,n,i)}(n,e)}var _a=Object.create(null);function Ca(n,e){var t,a,r=Object.create(null);if(!n)return r;for(t=0;t<n.length;t++){if((a=n[t]).modifiers||(a.modifiers=_a),r[Ia(a)]=a,e._setupState&&e._setupState.__sfc){var o=a.def||Ct(e,"_setupState","v-"+a.name);a.def="function"==typeof o?{bind:o,update:o}:o}a.def=a.def||Ct(e.$options,"directives",a.name)}return r}function Ia(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Pa(n,e,t,a,r){var o=n.def&&n.def[e];if(o)try{o(t.elm,n,t,a,r)}catch(a){je(a,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Da=[ka,Sa];function La(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||o(n.data.attrs)&&o(e.data.attrs))){var a,r,l=e.elm,c=n.data.attrs||{},d=e.data.attrs||{};for(a in(i(d.__ob__)||s(d._v_attr_proxy))&&(d=e.data.attrs=I({},d)),d)r=d[a],c[a]!==r&&Ra(l,a,r,e.data.pre);for(a in(K||Q)&&d.value!==c.value&&Ra(l,"value",d.value),c)o(d[a])&&(sa(a)?l.removeAttributeNS(ia,la(a)):aa(a)||l.removeAttribute(a))}}function Ra(n,e,t,a){a||n.tagName.indexOf("-")>-1?Fa(n,e,t):oa(e)?ca(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):aa(e)?n.setAttribute(e,function(n,e){return ca(e)||"false"===e?"false":"contenteditable"===n&&ra(e)?e:"true"}(e,t)):sa(e)?ca(t)?n.removeAttributeNS(ia,la(e)):n.setAttributeNS(ia,e,t):Fa(n,e,t)}function Fa(n,e,t){if(ca(t))n.removeAttribute(e);else{if(K&&!Y&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var a=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",a)};n.addEventListener("input",a),n.__ieph=!0}n.setAttribute(e,t)}}var $a={create:La,update:La};function Ua(n,e){var t=e.elm,a=e.data,r=n.data;if(!(o(a.staticClass)&&o(a.class)&&(o(r)||o(r.staticClass)&&o(r.class)))){var s=da(e),l=t._transitionClasses;i(l)&&(s=ma(s,ua(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Oa,qa={create:Ua,update:Ua};function Na(n,e,t){var a=Oa;return function r(){var o=e.apply(null,arguments);null!==o&&Ha(n,r,t,a)}}var Ma=Ie&&!(tn&&Number(tn[1])<=53);function Va(n,e,t,a){if(Ma){var r=lt,o=e;e=o._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=r||n.timeStamp<=0||n.target.ownerDocument!==document)return o.apply(this,arguments)}}Oa.addEventListener(n,e,rn?{capture:t,passive:a}:t)}function Ha(n,e,t,a){(a||Oa).removeEventListener(n,e._wrapper||e,t)}function Ja(n,e){if(!o(n.data.on)||!o(e.data.on)){var t=e.data.on||{},a=n.data.on||{};Oa=e.elm||n.elm,function(n){if(i(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Gn(t,a,Va,Ha,Na,e.context),Oa=void 0}}var Ga,Wa={create:Ja,update:Ja,destroy:function(n){return Ja(n,Aa)}};function Za(n,e){if(!o(n.data.domProps)||!o(e.data.domProps)){var t,a,r=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(i(c.__ob__)||s(c._v_attr_proxy))&&(c=e.data.domProps=I({},c)),l)t in c||(r[t]="");for(t in c){if(a=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),a===l[t])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===t&&"PROGRESS"!==r.tagName){r._value=a;var d=o(a)?"":String(a);Xa(r,d)&&(r.value=d)}else if("innerHTML"===t&&fa(r.tagName)&&o(r.innerHTML)){(Ga=Ga||document.createElement("div")).innerHTML="<svg>".concat(a,"</svg>");for(var p=Ga.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;p.firstChild;)r.appendChild(p.firstChild)}else if(a!==l[t])try{r[t]=a}catch(n){}}}}function Xa(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,a=n._vModifiers;if(i(a)){if(a.number)return b(t)!==b(e);if(a.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Ka={create:Za,update:Za},Ya=A((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var a=n.split(t);a.length>1&&(e[a[0].trim()]=a[1].trim())}})),e}));function Qa(n){var e=nr(n.style);return n.staticStyle?I(n.staticStyle,e):e}function nr(n){return Array.isArray(n)?P(n):"string"==typeof n?Ya(n):n}var er,tr=/^--/,ar=/\s*!important$/,rr=function(n,e,t){if(tr.test(e))n.style.setProperty(e,t);else if(ar.test(t))n.style.setProperty(B(e),t.replace(ar,""),"important");else{var a=ir(e);if(Array.isArray(t))for(var r=0,o=t.length;r<o;r++)n.style[a]=t[r];else n.style[a]=t}},or=["Webkit","Moz","ms"],ir=A((function(n){if(er=er||document.createElement("div").style,"filter"!==(n=z(n))&&n in er)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<or.length;t++){var a=or[t]+e;if(a in er)return a}}));function sr(n,e){var t=e.data,a=n.data;if(!(o(t.staticStyle)&&o(t.style)&&o(a.staticStyle)&&o(a.style))){var r,s,l=e.elm,c=a.staticStyle,d=a.normalizedStyle||a.style||{},p=c||d,m=nr(e.data.style)||{};e.data.normalizedStyle=i(m.__ob__)?I({},m):m;var u=function(n,e){var t,a={};if(e)for(var r=n;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(t=Qa(r.data))&&I(a,t);(t=Qa(n.data))&&I(a,t);for(var o=n;o=o.parent;)o.data&&(t=Qa(o.data))&&I(a,t);return a}(e,!0);for(s in p)o(u[s])&&rr(l,s,"");for(s in u)r=u[s],rr(l,s,null==r?"":r)}}var lr={create:sr,update:sr},cr=/\s+/;function dr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(cr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function pr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(cr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),a=" "+e+" ";t.indexOf(a)>=0;)t=t.replace(a," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function mr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&I(e,ur(n.name||"v")),I(e,n),e}return"string"==typeof n?ur(n):void 0}}var ur=A((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),hr=Z&&!Y,gr="transition",fr="transitionend",vr="animation",br="animationend";hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(gr="WebkitTransition",fr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(vr="WebkitAnimation",br="webkitAnimationEnd"));var yr=Z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function xr(n){yr((function(){yr(n)}))}function kr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),dr(n,e))}function Er(n,e){n._transitionClasses&&k(n._transitionClasses,e),pr(n,e)}function wr(n,e,t){var a=Tr(n,e),r=a.type,o=a.timeout,i=a.propCount;if(!r)return t();var s="transition"===r?fr:br,l=0,c=function(){n.removeEventListener(s,d),t()},d=function(e){e.target===n&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),o+1),n.addEventListener(s,d)}var Ar=/\b(transform|all)(,|$)/;function Tr(n,e){var t,a=window.getComputedStyle(n),r=(a[gr+"Delay"]||"").split(", "),o=(a[gr+"Duration"]||"").split(", "),i=zr(r,o),s=(a[vr+"Delay"]||"").split(", "),l=(a[vr+"Duration"]||"").split(", "),c=zr(s,l),d=0,p=0;return"transition"===e?i>0&&(t="transition",d=i,p=o.length):"animation"===e?c>0&&(t="animation",d=c,p=l.length):p=(t=(d=Math.max(i,c))>0?i>c?"transition":"animation":null)?"transition"===t?o.length:l.length:0,{type:t,timeout:d,propCount:p,hasTransform:"transition"===t&&Ar.test(a[gr+"Property"])}}function zr(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return jr(e)+jr(n[t])})))}function jr(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Sr(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var a=mr(n.data.transition);if(!o(a)&&!i(t._enterCb)&&1===t.nodeType){for(var r=a.css,s=a.type,l=a.enterClass,p=a.enterToClass,m=a.enterActiveClass,u=a.appearClass,h=a.appearToClass,g=a.appearActiveClass,f=a.beforeEnter,v=a.enter,y=a.afterEnter,x=a.enterCancelled,k=a.beforeAppear,E=a.appear,w=a.afterAppear,A=a.appearCancelled,T=a.duration,z=Ke,j=Ke.$vnode;j&&j.parent;)z=j.context,j=j.parent;var S=!z._isMounted||!n.isRootInsert;if(!S||E||""===E){var B=S&&u?u:l,_=S&&g?g:m,C=S&&h?h:p,I=S&&k||f,P=S&&c(E)?E:v,D=S&&w||y,L=S&&A||x,R=b(d(T)?T.enter:T);0;var F=!1!==r&&!Y,$=Cr(P),O=t._enterCb=U((function(){F&&(Er(t,C),Er(t,_)),O.cancelled?(F&&Er(t,B),L&&L(t)):D&&D(t),t._enterCb=null}));n.data.show||Wn(n,"insert",(function(){var e=t.parentNode,a=e&&e._pending&&e._pending[n.key];a&&a.tag===n.tag&&a.elm._leaveCb&&a.elm._leaveCb(),P&&P(t,O)})),I&&I(t),F&&(kr(t,B),kr(t,_),xr((function(){Er(t,B),O.cancelled||(kr(t,C),$||(_r(R)?setTimeout(O,R):wr(t,s,O)))}))),n.data.show&&(e&&e(),P&&P(t,O)),F||$||O()}}}function Br(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var a=mr(n.data.transition);if(o(a)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var r=a.css,s=a.type,l=a.leaveClass,c=a.leaveToClass,p=a.leaveActiveClass,m=a.beforeLeave,u=a.leave,h=a.afterLeave,g=a.leaveCancelled,f=a.delayLeave,v=a.duration,y=!1!==r&&!Y,x=Cr(u),k=b(d(v)?v.leave:v);0;var E=t._leaveCb=U((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(Er(t,c),Er(t,p)),E.cancelled?(y&&Er(t,l),g&&g(t)):(e(),h&&h(t)),t._leaveCb=null}));f?f(w):w()}function w(){E.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),m&&m(t),y&&(kr(t,l),kr(t,p),xr((function(){Er(t,l),E.cancelled||(kr(t,c),x||(_r(k)?setTimeout(E,k):wr(t,s,E)))}))),u&&u(t,E),y||x||E())}}function _r(n){return"number"==typeof n&&!isNaN(n)}function Cr(n){if(o(n))return!1;var e=n.fns;return i(e)?Cr(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Ir(n,e){!0!==e.data.show&&Sr(e)}var Pr=function(n){var e,t,a={},c=n.modules,d=n.nodeOps;for(e=0;e<Ta.length;++e)for(a[Ta[e]]=[],t=0;t<c.length;++t)i(c[t][Ta[e]])&&a[Ta[e]].push(c[t][Ta[e]]);function p(n){var e=d.parentNode(n);i(e)&&d.removeChild(e,n)}function m(n,e,t,r,o,l,c){if(i(n.elm)&&i(l)&&(n=l[c]=vn(n)),n.isRootInsert=!o,!function(n,e,t,r){var o=n.data;if(i(o)){var l=i(n.componentInstance)&&o.keepAlive;if(i(o=o.hook)&&i(o=o.init)&&o(n,!1),i(n.componentInstance))return u(n,e),h(t,n.elm,r),s(l)&&function(n,e,t,r){var o,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(o=s.data)&&i(o=o.transition)){for(o=0;o<a.activate.length;++o)a.activate[o](Aa,s);e.push(s);break}h(t,n.elm,r)}(n,e,t,r),!0}}(n,e,t,r)){var p=n.data,m=n.children,f=n.tag;i(f)?(n.elm=n.ns?d.createElementNS(n.ns,f):d.createElement(f,n),b(n),g(n,m,e),i(p)&&v(n,e),h(t,n.elm,r)):s(n.isComment)?(n.elm=d.createComment(n.text),h(t,n.elm,r)):(n.elm=d.createTextNode(n.text),h(t,n.elm,r))}}function u(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,f(n)?(v(n,e),b(n)):(Ea(n),e.push(n))}function h(n,e,t){i(n)&&(i(t)?d.parentNode(t)===n&&d.insertBefore(n,e,t):d.appendChild(n,e))}function g(n,e,t){if(r(e)){0;for(var a=0;a<e.length;++a)m(e[a],t,n.elm,null,!0,e,a)}else l(n.text)&&d.appendChild(n.elm,d.createTextNode(String(n.text)))}function f(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function v(n,t){for(var r=0;r<a.create.length;++r)a.create[r](Aa,n);i(e=n.data.hook)&&(i(e.create)&&e.create(Aa,n),i(e.insert)&&t.push(n))}function b(n){var e;if(i(e=n.fnScopeId))d.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&d.setStyleScope(n.elm,e),t=t.parent;i(e=Ke)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&d.setStyleScope(n.elm,e)}function x(n,e,t,a,r,o){for(;a<=r;++a)m(t[a],o,n,e,!1,t,a)}function k(n){var e,t,r=n.data;if(i(r))for(i(e=r.hook)&&i(e=e.destroy)&&e(n),e=0;e<a.destroy.length;++e)a.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)k(n.children[t])}function E(n,e,t){for(;e<=t;++e){var a=n[e];i(a)&&(i(a.tag)?(w(a),k(a)):p(a.elm))}}function w(n,e){if(i(e)||i(n.data)){var t,r=a.remove.length+1;for(i(e)?e.listeners+=r:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,r),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&w(t,e),t=0;t<a.remove.length;++t)a.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else p(n.elm)}function A(n,e,t,a){for(var r=t;r<a;r++){var o=e[r];if(i(o)&&za(n,o))return r}}function T(n,e,t,r,l,c){if(n!==e){i(e.elm)&&i(r)&&(e=r[l]=vn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?S(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var u,h=e.data;i(h)&&i(u=h.hook)&&i(u=u.prepatch)&&u(n,e);var g=n.children,v=e.children;if(i(h)&&f(e)){for(u=0;u<a.update.length;++u)a.update[u](n,e);i(u=h.hook)&&i(u=u.update)&&u(n,e)}o(e.text)?i(g)&&i(v)?g!==v&&function(n,e,t,a,r){var s,l,c,p=0,u=0,h=e.length-1,g=e[0],f=e[h],v=t.length-1,b=t[0],y=t[v],k=!r;for(0;p<=h&&u<=v;)o(g)?g=e[++p]:o(f)?f=e[--h]:za(g,b)?(T(g,b,a,t,u),g=e[++p],b=t[++u]):za(f,y)?(T(f,y,a,t,v),f=e[--h],y=t[--v]):za(g,y)?(T(g,y,a,t,v),k&&d.insertBefore(n,g.elm,d.nextSibling(f.elm)),g=e[++p],y=t[--v]):za(f,b)?(T(f,b,a,t,u),k&&d.insertBefore(n,f.elm,g.elm),f=e[--h],b=t[++u]):(o(s)&&(s=ja(e,p,h)),o(l=i(b.key)?s[b.key]:A(b,e,p,h))?m(b,a,n,g.elm,!1,t,u):za(c=e[l],b)?(T(c,b,a,t,u),e[l]=void 0,k&&d.insertBefore(n,c.elm,g.elm)):m(b,a,n,g.elm,!1,t,u),b=t[++u]);p>h?x(n,o(t[v+1])?null:t[v+1].elm,t,u,v,a):u>v&&E(e,p,h)}(p,g,v,t,c):i(v)?(i(n.text)&&d.setTextContent(p,""),x(p,null,v,0,v.length-1,t)):i(g)?E(g,0,g.length-1):i(n.text)&&d.setTextContent(p,""):n.text!==e.text&&d.setTextContent(p,e.text),i(h)&&i(u=h.hook)&&i(u=u.postpatch)&&u(n,e)}}}function z(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var a=0;a<e.length;++a)e[a].data.hook.insert(e[a])}var j=y("attrs,class,staticClass,staticStyle,key");function S(n,e,t,a){var r,o=e.tag,l=e.data,c=e.children;if(a=a||l&&l.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(l)&&(i(r=l.hook)&&i(r=r.init)&&r(e,!0),i(r=e.componentInstance)))return u(e,t),!0;if(i(o)){if(i(c))if(n.hasChildNodes())if(i(r=l)&&i(r=r.domProps)&&i(r=r.innerHTML)){if(r!==n.innerHTML)return!1}else{for(var d=!0,p=n.firstChild,m=0;m<c.length;m++){if(!p||!S(p,c[m],t,a)){d=!1;break}p=p.nextSibling}if(!d||p)return!1}else g(e,c,t);if(i(l)){var h=!1;for(var f in l)if(!j(f)){h=!0,v(e,t);break}!h&&l.class&&Me(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,r){if(!o(e)){var l,c=!1,p=[];if(o(n))c=!0,m(e,p);else{var u=i(n.nodeType);if(!u&&za(n,e))T(n,e,p,null,null,r);else{if(u){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&S(n,e,p))return z(e,p,!0),n;l=n,n=new hn(d.tagName(l).toLowerCase(),{},[],void 0,l)}var h=n.elm,g=d.parentNode(h);if(m(e,p,h._leaveCb?null:g,d.nextSibling(h)),i(e.parent))for(var v=e.parent,b=f(e);v;){for(var y=0;y<a.destroy.length;++y)a.destroy[y](v);if(v.elm=e.elm,b){for(var x=0;x<a.create.length;++x)a.create[x](Aa,v);var w=v.data.hook.insert;if(w.merged)for(var A=w.fns.slice(1),j=0;j<A.length;j++)A[j]()}else Ea(v);v=v.parent}i(g)?E([n],0,0):i(n.tag)&&k(n)}}return z(e,p,c),e.elm}i(n)&&k(n)}}({nodeOps:xa,modules:[$a,qa,Wa,Ka,lr,Z?{create:Ir,activate:Ir,remove:function(n,e){!0!==n.data.show?Br(n,e):e()}}:{}].concat(Da)});Y&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&qr(n,"input")}));var Dr={inserted:function(n,e,t,a){"select"===t.tag?(a.elm&&!a.elm._vOptions?Wn(t,"postpatch",(function(){Dr.componentUpdated(n,e,t)})):Lr(n,e,t.context),n._vOptions=[].map.call(n.options,$r)):("textarea"===t.tag||ya(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Ur),n.addEventListener("compositionend",Or),n.addEventListener("change",Or),Y&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Lr(n,e,t.context);var a=n._vOptions,r=n._vOptions=[].map.call(n.options,$r);if(r.some((function(n,e){return!F(n,a[e])})))(n.multiple?e.value.some((function(n){return Fr(n,r)})):e.value!==e.oldValue&&Fr(e.value,r))&&qr(n,"change")}}};function Lr(n,e,t){Rr(n,e,t),(K||Q)&&setTimeout((function(){Rr(n,e,t)}),0)}function Rr(n,e,t){var a=e.value,r=n.multiple;if(!r||Array.isArray(a)){for(var o,i,s=0,l=n.options.length;s<l;s++)if(i=n.options[s],r)o=$(a,$r(i))>-1,i.selected!==o&&(i.selected=o);else if(F($r(i),a))return void(n.selectedIndex!==s&&(n.selectedIndex=s));r||(n.selectedIndex=-1)}}function Fr(n,e){return e.every((function(e){return!F(e,n)}))}function $r(n){return"_value"in n?n._value:n.value}function Ur(n){n.target.composing=!0}function Or(n){n.target.composing&&(n.target.composing=!1,qr(n.target,"input"))}function qr(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Nr(n){return!n.componentInstance||n.data&&n.data.transition?n:Nr(n.componentInstance._vnode)}var Mr={model:Dr,show:{bind:function(n,e,t){var a=e.value,r=(t=Nr(t)).data&&t.data.transition,o=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;a&&r?(t.data.show=!0,Sr(t,(function(){n.style.display=o}))):n.style.display=a?o:"none"},update:function(n,e,t){var a=e.value;!a!=!e.oldValue&&((t=Nr(t)).data&&t.data.transition?(t.data.show=!0,a?Sr(t,(function(){n.style.display=n.__vOriginalDisplay})):Br(t,(function(){n.style.display="none"}))):n.style.display=a?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,a,r){r||(n.style.display=n.__vOriginalDisplay)}}},Vr={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Hr(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Hr(Te(e.children)):n}function Jr(n){var e={},t=n.$options;for(var a in t.propsData)e[a]=n[a];var r=t._parentListeners;for(var a in r)e[z(a)]=r[a];return e}function Gr(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Wr=function(n){return n.tag||ge(n)},Zr=function(n){return"show"===n.name},Xr={name:"transition",props:Vr,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Wr)).length){0;var a=this.mode;0;var r=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return r;var o=Hr(r);if(!o)return r;if(this._leaving)return Gr(n,r);var i="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?i+"comment":i+o.tag:l(o.key)?0===String(o.key).indexOf(i)?o.key:i+o.key:o.key;var s=(o.data||(o.data={})).transition=Jr(this),c=this._vnode,d=Hr(c);if(o.data.directives&&o.data.directives.some(Zr)&&(o.data.show=!0),d&&d.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(o,d)&&!ge(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var p=d.data.transition=I({},s);if("out-in"===a)return this._leaving=!0,Wn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Gr(n,r);if("in-out"===a){if(ge(o))return c;var m,u=function(){m()};Wn(s,"afterEnter",u),Wn(s,"enterCancelled",u),Wn(p,"delayLeave",(function(n){m=n}))}}return r}}},Kr=I({tag:String,moveClass:String},Vr);function Yr(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Qr(n){n.data.newPos=n.elm.getBoundingClientRect()}function no(n){var e=n.data.pos,t=n.data.newPos,a=e.left-t.left,r=e.top-t.top;if(a||r){n.data.moved=!0;var o=n.elm.style;o.transform=o.WebkitTransform="translate(".concat(a,"px,").concat(r,"px)"),o.transitionDuration="0s"}}delete Kr.mode;var eo={Transition:Xr,TransitionGroup:{props:Kr,beforeMount:function(){var n=this,e=this._update;this._update=function(t,a){var r=Ye(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,r(),e.call(n,t,a)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),a=this.prevChildren=this.children,r=this.$slots.default||[],o=this.children=[],i=Jr(this),s=0;s<r.length;s++){if((d=r[s]).tag)if(null!=d.key&&0!==String(d.key).indexOf("__vlist"))o.push(d),t[d.key]=d,(d.data||(d.data={})).transition=i;else;}if(a){var l=[],c=[];for(s=0;s<a.length;s++){var d;(d=a[s]).data.transition=i,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):c.push(d)}this.kept=n(e,null,l),this.removed=c}return n(e,null,o)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Yr),n.forEach(Qr),n.forEach(no),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,a=t.style;kr(t,e),a.transform=a.WebkitTransform=a.transitionDuration="",t.addEventListener(fr,t._moveCb=function n(a){a&&a.target!==t||a&&!/transform$/.test(a.propertyName)||(t.removeEventListener(fr,n),t._moveCb=null,Er(t,e))})}})))},methods:{hasMove:function(n,e){if(!hr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){pr(t,n)})),dr(t,e),t.style.display="none",this.$el.appendChild(t);var a=Tr(t);return this.$el.removeChild(t),this._hasMove=a.hasTransform}}}};function to(n,e){for(var t in e)n[t]=e[t];return n}Gt.config.mustUseProp=function(n,e,t){return"value"===t&&ta(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Gt.config.isReservedTag=va,Gt.config.isReservedAttr=ea,Gt.config.getTagNamespace=function(n){return fa(n)?"svg":"math"===n?"math":void 0},Gt.config.isUnknownElement=function(n){if(!Z)return!0;if(va(n))return!1;if(n=n.toLowerCase(),null!=ba[n])return ba[n];var e=document.createElement(n);return n.indexOf("-")>-1?ba[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:ba[n]=/HTMLUnknownElement/.test(e.toString())},I(Gt.options.directives,Mr),I(Gt.options.components,eo),Gt.prototype.__patch__=Z?Pr:D,Gt.prototype.$mount=function(n,e){return function(n,e,t){var a;n.$el=e,n.$options.render||(n.$options.render=gn),et(n,"beforeMount"),a=function(){n._update(n._render(),t)},new Je(n,a,D,{before:function(){n._isMounted&&!n._isDestroyed&&et(n,"beforeUpdate")}},!0),t=!1;var r=n._preWatchers;if(r)for(var o=0;o<r.length;o++)r[o].run();return null==n.$vnode&&(n._isMounted=!0,et(n,"mounted")),n}(this,n=n&&Z?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},Z&&setTimeout((function(){M.devtools&&ln&&ln.emit("init",Gt)}),0);var ao=/[!'()*]/g,ro=function(n){return"%"+n.charCodeAt(0).toString(16)},oo=/%2C/g,io=function(n){return encodeURIComponent(n).replace(ao,ro).replace(oo,",")};function so(n){try{return decodeURIComponent(n)}catch(n){0}return n}var lo=function(n){return null==n||"object"==typeof n?n:String(n)};function co(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),a=so(t.shift()),r=t.length>0?so(t.join("=")):null;void 0===e[a]?e[a]=r:Array.isArray(e[a])?e[a].push(r):e[a]=[e[a],r]})),e):e}function po(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return io(e);if(Array.isArray(t)){var a=[];return t.forEach((function(n){void 0!==n&&(null===n?a.push(io(e)):a.push(io(e)+"="+io(n)))})),a.join("&")}return io(e)+"="+io(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var mo=/\/?$/;function uo(n,e,t,a){var r=a&&a.options.stringifyQuery,o=e.query||{};try{o=ho(o)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:o,params:e.params||{},fullPath:vo(e,r),matched:n?fo(n):[]};return t&&(i.redirectedFrom=vo(t,r)),Object.freeze(i)}function ho(n){if(Array.isArray(n))return n.map(ho);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=ho(n[t]);return e}return n}var go=uo(null,{path:"/"});function fo(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function vo(n,e){var t=n.path,a=n.query;void 0===a&&(a={});var r=n.hash;return void 0===r&&(r=""),(t||"/")+(e||po)(a)+r}function bo(n,e,t){return e===go?n===e:!!e&&(n.path&&e.path?n.path.replace(mo,"")===e.path.replace(mo,"")&&(t||n.hash===e.hash&&yo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&yo(n.query,e.query)&&yo(n.params,e.params))))}function yo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),a=Object.keys(e).sort();return t.length===a.length&&t.every((function(t,r){var o=n[t];if(a[r]!==t)return!1;var i=e[t];return null==o||null==i?o===i:"object"==typeof o&&"object"==typeof i?yo(o,i):String(o)===String(i)}))}function xo(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var a in t.instances){var r=t.instances[a],o=t.enteredCbs[a];if(r&&o){delete t.enteredCbs[a];for(var i=0;i<o.length;i++)r._isBeingDestroyed||o[i](r)}}}}var ko={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,a=e.children,r=e.parent,o=e.data;o.routerView=!0;for(var i=r.$createElement,s=t.name,l=r.$route,c=r._routerViewCache||(r._routerViewCache={}),d=0,p=!1;r&&r._routerRoot!==r;){var m=r.$vnode?r.$vnode.data:{};m.routerView&&d++,m.keepAlive&&r._directInactive&&r._inactive&&(p=!0),r=r.$parent}if(o.routerViewDepth=d,p){var u=c[s],h=u&&u.component;return h?(u.configProps&&Eo(h,o,u.route,u.configProps),i(h,o,a)):i()}var g=l.matched[d],f=g&&g.components[s];if(!g||!f)return c[s]=null,i();c[s]={component:f},o.registerRouteInstance=function(n,e){var t=g.instances[s];(e&&t!==n||!e&&t===n)&&(g.instances[s]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){g.instances[s]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==g.instances[s]&&(g.instances[s]=n.componentInstance),xo(l)};var v=g.props&&g.props[s];return v&&(to(c[s],{route:l,configProps:v}),Eo(f,o,l,v)),i(f,o,a)}};function Eo(n,e,t,a){var r=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,a);if(r){r=e.props=to({},r);var o=e.attrs=e.attrs||{};for(var i in r)n.props&&i in n.props||(o[i]=r[i],delete r[i])}}function wo(n,e,t){var a=n.charAt(0);if("/"===a)return n;if("?"===a||"#"===a)return e+n;var r=e.split("/");t&&r[r.length-1]||r.pop();for(var o=n.replace(/^\//,"").split("/"),i=0;i<o.length;i++){var s=o[i];".."===s?r.pop():"."!==s&&r.push(s)}return""!==r[0]&&r.unshift(""),r.join("/")}function Ao(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var To=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},zo=Oo,jo=Io,So=function(n,e){return Do(Io(n,e),e)},Bo=Do,_o=Uo,Co=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Io(n,e){for(var t,a=[],r=0,o=0,i="",s=e&&e.delimiter||"/";null!=(t=Co.exec(n));){var l=t[0],c=t[1],d=t.index;if(i+=n.slice(o,d),o=d+l.length,c)i+=c[1];else{var p=n[o],m=t[2],u=t[3],h=t[4],g=t[5],f=t[6],v=t[7];i&&(a.push(i),i="");var b=null!=m&&null!=p&&p!==m,y="+"===f||"*"===f,x="?"===f||"*"===f,k=t[2]||s,E=h||g;a.push({name:u||r++,prefix:m||"",delimiter:k,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:E?Ro(E):v?".*":"[^"+Lo(k)+"]+?"})}}return o<n.length&&(i+=n.substr(o)),i&&a.push(i),a}function Po(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Do(n,e){for(var t=new Array(n.length),a=0;a<n.length;a++)"object"==typeof n[a]&&(t[a]=new RegExp("^(?:"+n[a].pattern+")$",$o(e)));return function(e,a){for(var r="",o=e||{},i=(a||{}).pretty?Po:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,d=o[l.name];if(null==d){if(l.optional){l.partial&&(r+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(To(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(c=i(d[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");r+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(d),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');r+=l.prefix+c}}else r+=l}return r}}function Lo(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Ro(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Fo(n,e){return n.keys=e,n}function $o(n){return n&&n.sensitive?"":"i"}function Uo(n,e,t){To(e)||(t=e||t,e=[]);for(var a=(t=t||{}).strict,r=!1!==t.end,o="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)o+=Lo(s);else{var l=Lo(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),o+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=Lo(t.delimiter||"/"),p=o.slice(-d.length)===d;return a||(o=(p?o.slice(0,-d.length):o)+"(?:"+d+"(?=$))?"),o+=r?"$":a&&p?"":"(?="+d+"|$)",Fo(new RegExp("^"+o,$o(t)),e)}function Oo(n,e,t){return To(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var a=0;a<t.length;a++)e.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Fo(n,e)}(n,e):To(n)?function(n,e,t){for(var a=[],r=0;r<n.length;r++)a.push(Oo(n[r],e,t).source);return Fo(new RegExp("(?:"+a.join("|")+")",$o(t)),e)}(n,e,t):function(n,e,t){return Uo(Io(n,t),e,t)}(n,e,t)}zo.parse=jo,zo.compile=So,zo.tokensToFunction=Bo,zo.tokensToRegExp=_o;var qo=Object.create(null);function No(n,e,t){e=e||{};try{var a=qo[n]||(qo[n]=zo.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),a(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Mo(n,e,t,a){var r="string"==typeof n?{path:n}:n;if(r._normalized)return r;if(r.name){var o=(r=to({},n)).params;return o&&"object"==typeof o&&(r.params=to({},o)),r}if(!r.path&&r.params&&e){(r=to({},r))._normalized=!0;var i=to(to({},e.params),r.params);if(e.name)r.name=e.name,r.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;r.path=No(s,i,e.path)}else 0;return r}var l=function(n){var e="",t="",a=n.indexOf("#");a>=0&&(e=n.slice(a),n=n.slice(0,a));var r=n.indexOf("?");return r>=0&&(t=n.slice(r+1),n=n.slice(0,r)),{path:n,query:t,hash:e}}(r.path||""),c=e&&e.path||"/",d=l.path?wo(l.path,c,t||r.append):c,p=function(n,e,t){void 0===e&&(e={});var a,r=t||co;try{a=r(n||"")}catch(n){a={}}for(var o in e){var i=e[o];a[o]=Array.isArray(i)?i.map(lo):lo(i)}return a}(l.query,r.query,a&&a.options.parseQuery),m=r.hash||l.hash;return m&&"#"!==m.charAt(0)&&(m="#"+m),{_normalized:!0,path:d,query:p,hash:m}}var Vo,Ho=function(){},Jo={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,a=this.$route,r=t.resolve(this.to,a,this.append),o=r.location,i=r.route,s=r.href,l={},c=t.options.linkActiveClass,d=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,m=null==d?"router-link-exact-active":d,u=null==this.activeClass?p:this.activeClass,h=null==this.exactActiveClass?m:this.exactActiveClass,g=i.redirectedFrom?uo(null,Mo(i.redirectedFrom),null,t):i;l[h]=bo(a,g,this.exactPath),l[u]=this.exact||this.exactPath?l[h]:function(n,e){return 0===n.path.replace(mo,"/").indexOf(e.path.replace(mo,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(a,g);var f=l[h]?this.ariaCurrentValue:null,v=function(n){Go(n)&&(e.replace?t.replace(o,Ho):t.push(o,Ho))},b={click:Go};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:v,isActive:l[u],isExactActive:l[h]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":f};else{var k=function n(e){var t;if(e)for(var a=0;a<e.length;a++){if("a"===(t=e[a]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(k){k.isStatic=!1;var E=k.data=to({},k.data);for(var w in E.on=E.on||{},E.on){var A=E.on[w];w in b&&(E.on[w]=Array.isArray(A)?A:[A])}for(var T in b)T in E.on?E.on[T].push(b[T]):E.on[T]=v;var z=k.data.attrs=to({},k.data.attrs);z.href=s,z["aria-current"]=f}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Go(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Wo="undefined"!=typeof window;function Zo(n,e,t,a,r){var o=e||[],i=t||Object.create(null),s=a||Object.create(null);n.forEach((function(n){!function n(e,t,a,r,o,i){var s=r.path,l=r.name;0;var c=r.pathToRegexpOptions||{},d=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return Ao(e.path+"/"+n)}(s,o,c.strict);"boolean"==typeof r.caseSensitive&&(c.sensitive=r.caseSensitive);var p={path:d,regex:Xo(d,c),components:r.components||{default:r.component},alias:r.alias?"string"==typeof r.alias?[r.alias]:r.alias:[],instances:{},enteredCbs:{},name:l,parent:o,matchAs:i,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var o=i?Ao(i+"/"+r.path):void 0;n(e,t,a,r,p,o)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==r.alias)for(var m=Array.isArray(r.alias)?r.alias:[r.alias],u=0;u<m.length;++u){0;var h={path:m[u],children:r.children};n(e,t,a,h,o,p.path||"/")}l&&(a[l]||(a[l]=p))}(o,i,s,n,r)}));for(var l=0,c=o.length;l<c;l++)"*"===o[l]&&(o.push(o.splice(l,1)[0]),c--,l--);return{pathList:o,pathMap:i,nameMap:s}}function Xo(n,e){return zo(n,[],e)}function Ko(n,e){var t=Zo(n),a=t.pathList,r=t.pathMap,o=t.nameMap;function i(n,t,i){var s=Mo(n,t,!1,e),c=s.name;if(c){var d=o[c];if(!d)return l(null,s);var p=d.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var m in t.params)!(m in s.params)&&p.indexOf(m)>-1&&(s.params[m]=t.params[m]);return s.path=No(d.path,s.params),l(d,s,i)}if(s.path){s.params={};for(var u=0;u<a.length;u++){var h=a[u],g=r[h];if(Yo(g.regex,s.path,s.params))return l(g,s,i)}}return l(null,s)}function s(n,t){var a=n.redirect,r="function"==typeof a?a(uo(n,t,null,e)):a;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return l(null,t);var s=r,c=s.name,d=s.path,p=t.query,m=t.hash,u=t.params;if(p=s.hasOwnProperty("query")?s.query:p,m=s.hasOwnProperty("hash")?s.hash:m,u=s.hasOwnProperty("params")?s.params:u,c){o[c];return i({_normalized:!0,name:c,query:p,hash:m,params:u},void 0,t)}if(d){var h=function(n,e){return wo(n,e.parent?e.parent.path:"/",!0)}(d,n);return i({_normalized:!0,path:No(h,u),query:p,hash:m},void 0,t)}return l(null,t)}function l(n,t,a){return n&&n.redirect?s(n,a||t):n&&n.matchAs?function(n,e,t){var a=i({_normalized:!0,path:No(t,e.params)});if(a){var r=a.matched,o=r[r.length-1];return e.params=a.params,l(o,e)}return l(null,e)}(0,t,n.matchAs):uo(n,t,a,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?o[n]:void 0;Zo([e||n],a,r,o,t),t&&t.alias.length&&Zo(t.alias.map((function(n){return{path:n,children:[e]}})),a,r,o,t)},getRoutes:function(){return a.map((function(n){return r[n]}))},addRoutes:function(n){Zo(n,a,r,o)}}}function Yo(n,e,t){var a=e.match(n);if(!a)return!1;if(!t)return!0;for(var r=1,o=a.length;r<o;++r){var i=n.keys[r-1];i&&(t[i.name||"pathMatch"]="string"==typeof a[r]?so(a[r]):a[r])}return!0}var Qo=Wo&&window.performance&&window.performance.now?window.performance:Date;function ni(){return Qo.now().toFixed(3)}var ei=ni();function ti(){return ei}function ai(n){return ei=n}var ri=Object.create(null);function oi(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=to({},window.history.state);return t.key=ti(),window.history.replaceState(t,"",e),window.addEventListener("popstate",li),function(){window.removeEventListener("popstate",li)}}function ii(n,e,t,a){if(n.app){var r=n.options.scrollBehavior;r&&n.app.$nextTick((function(){var o=function(){var n=ti();if(n)return ri[n]}(),i=r.call(n,e,t,a?o:null);i&&("function"==typeof i.then?i.then((function(n){ui(n,o)})).catch((function(n){0})):ui(i,o))}))}}function si(){var n=ti();n&&(ri[n]={x:window.pageXOffset,y:window.pageYOffset})}function li(n){si(),n.state&&n.state.key&&ai(n.state.key)}function ci(n){return pi(n.x)||pi(n.y)}function di(n){return{x:pi(n.x)?n.x:window.pageXOffset,y:pi(n.y)?n.y:window.pageYOffset}}function pi(n){return"number"==typeof n}var mi=/^#\d/;function ui(n,e){var t,a="object"==typeof n;if(a&&"string"==typeof n.selector){var r=mi.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(r){var o=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),a=n.getBoundingClientRect();return{x:a.left-t.left-e.x,y:a.top-t.top-e.y}}(r,o={x:pi((t=o).x)?t.x:0,y:pi(t.y)?t.y:0})}else ci(n)&&(e=di(n))}else a&&ci(n)&&(e=di(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var hi,gi=Wo&&((-1===(hi=window.navigator.userAgent).indexOf("Android 2.")&&-1===hi.indexOf("Android 4.0")||-1===hi.indexOf("Mobile Safari")||-1!==hi.indexOf("Chrome")||-1!==hi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fi(n,e){si();var t=window.history;try{if(e){var a=to({},t.state);a.key=ti(),t.replaceState(a,"",n)}else t.pushState({key:ai(ni())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function vi(n){fi(n,!0)}var bi={redirected:2,aborted:4,cancelled:8,duplicated:16};function yi(n,e){return ki(n,e,bi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return Ei.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function xi(n,e){return ki(n,e,bi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function ki(n,e,t,a){var r=new Error(a);return r._isRouter=!0,r.from=n,r.to=e,r.type=t,r}var Ei=["params","query","hash"];function wi(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function Ai(n,e){return wi(n)&&n._isRouter&&(null==e||n.type===e)}function Ti(n,e,t){var a=function(r){r>=n.length?t():n[r]?e(n[r],(function(){a(r+1)})):a(r+1)};a(0)}function zi(n){return function(e,t,a){var r=!1,o=0,i=null;ji(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){r=!0,o++;var l,c=_i((function(e){var r;((r=e).__esModule||Bi&&"Module"===r[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Vo.extend(e),t.components[s]=e,--o<=0&&a()})),d=_i((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=wi(n)?n:new Error(e),a(i))}));try{l=n(c,d)}catch(n){d(n)}if(l)if("function"==typeof l.then)l.then(c,d);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,d)}}})),r||a()}}function ji(n,e){return Si(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Si(n){return Array.prototype.concat.apply([],n)}var Bi="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function _i(n){var e=!1;return function(){for(var t=[],a=arguments.length;a--;)t[a]=arguments[a];if(!e)return e=!0,n.apply(this,t)}}var Ci=function(n,e){this.router=n,this.base=function(n){if(!n)if(Wo){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=go,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Ii(n,e,t,a){var r=ji(n,(function(n,a,r,o){var i=function(n,e){"function"!=typeof n&&(n=Vo.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,a,r,o)})):t(i,a,r,o)}));return Si(a?r.reverse():r)}function Pi(n,e){if(e)return function(){return n.apply(e,arguments)}}Ci.prototype.listen=function(n){this.cb=n},Ci.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Ci.prototype.onError=function(n){this.errorCbs.push(n)},Ci.prototype.transitionTo=function(n,e,t){var a,r=this;try{a=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var o=this.current;this.confirmTransition(a,(function(){r.updateRoute(a),e&&e(a),r.ensureURL(),r.router.afterHooks.forEach((function(n){n&&n(a,o)})),r.ready||(r.ready=!0,r.readyCbs.forEach((function(n){n(a)})))}),(function(n){t&&t(n),n&&!r.ready&&(Ai(n,bi.redirected)&&o===go||(r.ready=!0,r.readyErrorCbs.forEach((function(e){e(n)}))))}))},Ci.prototype.confirmTransition=function(n,e,t){var a=this,r=this.current;this.pending=n;var o,i,s=function(n){!Ai(n)&&wi(n)&&(a.errorCbs.length?a.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=r.matched.length-1;if(bo(n,r)&&l===c&&n.matched[l]===r.matched[c])return this.ensureURL(),n.hash&&ii(this.router,r,n,!1),s(((i=ki(o=r,n,bi.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",i));var d=function(n,e){var t,a=Math.max(n.length,e.length);for(t=0;t<a&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=d.updated,m=d.deactivated,u=d.activated,h=[].concat(function(n){return Ii(n,"beforeRouteLeave",Pi,!0)}(m),this.router.beforeHooks,function(n){return Ii(n,"beforeRouteUpdate",Pi)}(p),u.map((function(n){return n.beforeEnter})),zi(u)),g=function(e,t){if(a.pending!==n)return s(xi(r,n));try{e(n,r,(function(e){!1===e?(a.ensureURL(!0),s(function(n,e){return ki(n,e,bi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(r,n))):wi(e)?(a.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(yi(r,n)),"object"==typeof e&&e.replace?a.replace(e):a.push(e)):t(e)}))}catch(n){s(n)}};Ti(h,g,(function(){Ti(function(n){return Ii(n,"beforeRouteEnter",(function(n,e,t,a){return function(n,e,t){return function(a,r,o){return n(a,r,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),o(n)}))}}(n,t,a)}))}(u).concat(a.router.resolveHooks),g,(function(){if(a.pending!==n)return s(xi(r,n));a.pending=null,e(n),a.router.app&&a.router.app.$nextTick((function(){xo(n)}))}))}))},Ci.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Ci.prototype.setupListeners=function(){},Ci.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=go,this.pending=null};var Di=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Li(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,a=gi&&t;a&&this.listeners.push(oi());var r=function(){var t=n.current,r=Li(n.base);n.current===go&&r===n._startLocation||n.transitionTo(r,(function(n){a&&ii(e,n,t,!0)}))};window.addEventListener("popstate",r),this.listeners.push((function(){window.removeEventListener("popstate",r)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){fi(Ao(a.base+n.fullPath)),ii(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){vi(Ao(a.base+n.fullPath)),ii(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Li(this.base)!==this.current.fullPath){var e=Ao(this.base+this.current.fullPath);n?fi(e):vi(e)}},e.prototype.getCurrentLocation=function(){return Li(this.base)},e}(Ci);function Li(n){var e=window.location.pathname,t=e.toLowerCase(),a=n.toLowerCase();return!n||t!==a&&0!==t.indexOf(Ao(a+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Ri=function(n){function e(e,t,a){n.call(this,e,t),a&&function(n){var e=Li(n);if(!/^\/#/.test(e))return window.location.replace(Ao(n+"/#"+e)),!0}(this.base)||Fi()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=gi&&e;t&&this.listeners.push(oi());var a=function(){var e=n.current;Fi()&&n.transitionTo($i(),(function(a){t&&ii(n.router,a,e,!0),gi||qi(a.fullPath)}))},r=gi?"popstate":"hashchange";window.addEventListener(r,a),this.listeners.push((function(){window.removeEventListener(r,a)}))}},e.prototype.push=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){Oi(n.fullPath),ii(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){qi(n.fullPath),ii(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;$i()!==e&&(n?Oi(e):qi(e))},e.prototype.getCurrentLocation=function(){return $i()},e}(Ci);function Fi(){var n=$i();return"/"===n.charAt(0)||(qi("/"+n),!1)}function $i(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Ui(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Oi(n){gi?fi(Ui(n)):window.location.hash=n}function qi(n){gi?vi(Ui(n)):window.location.replace(Ui(n))}var Ni=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var a=this;this.transitionTo(n,(function(n){a.stack=a.stack.slice(0,a.index+1).concat(n),a.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var a=this;this.transitionTo(n,(function(n){a.stack=a.stack.slice(0,a.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var a=this.stack[t];this.confirmTransition(a,(function(){var n=e.current;e.index=t,e.updateRoute(a),e.router.afterHooks.forEach((function(e){e&&e(a,n)}))}),(function(n){Ai(n,bi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Ci),Mi=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ko(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!gi&&!1!==n.fallback,this.fallback&&(e="hash"),Wo||(e="abstract"),this.mode=e,e){case"history":this.history=new Di(this,n.base);break;case"hash":this.history=new Ri(this,n.base,this.fallback);break;case"abstract":this.history=new Ni(this,n.base);break;default:0}},Vi={currentRoute:{configurable:!0}};Mi.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Vi.currentRoute.get=function(){return this.history&&this.history.current},Mi.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Di||t instanceof Ri){var a=function(n){t.setupListeners(),function(n){var a=t.current,r=e.options.scrollBehavior;gi&&r&&"fullPath"in n&&ii(e,n,a,!1)}(n)};t.transitionTo(t.getCurrentLocation(),a,a)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Mi.prototype.beforeEach=function(n){return Ji(this.beforeHooks,n)},Mi.prototype.beforeResolve=function(n){return Ji(this.resolveHooks,n)},Mi.prototype.afterEach=function(n){return Ji(this.afterHooks,n)},Mi.prototype.onReady=function(n,e){this.history.onReady(n,e)},Mi.prototype.onError=function(n){this.history.onError(n)},Mi.prototype.push=function(n,e,t){var a=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){a.history.push(n,e,t)}));this.history.push(n,e,t)},Mi.prototype.replace=function(n,e,t){var a=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){a.history.replace(n,e,t)}));this.history.replace(n,e,t)},Mi.prototype.go=function(n){this.history.go(n)},Mi.prototype.back=function(){this.go(-1)},Mi.prototype.forward=function(){this.go(1)},Mi.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Mi.prototype.resolve=function(n,e,t){var a=Mo(n,e=e||this.history.current,t,this),r=this.match(a,e),o=r.redirectedFrom||r.fullPath;return{location:a,route:r,href:function(n,e,t){var a="hash"===t?"#"+e:e;return n?Ao(n+"/"+a):a}(this.history.base,o,this.mode),normalizedTo:a,resolved:r}},Mi.prototype.getRoutes=function(){return this.matcher.getRoutes()},Mi.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==go&&this.history.transitionTo(this.history.getCurrentLocation())},Mi.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==go&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Mi.prototype,Vi);var Hi=Mi;function Ji(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Mi.install=function n(e){if(!n.installed||Vo!==e){n.installed=!0,Vo=e;var t=function(n){return void 0!==n},a=function(n,e){var a=n.$options._parentVnode;t(a)&&t(a=a.data)&&t(a=a.registerRouteInstance)&&a(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",ko),e.component("RouterLink",Jo);var r=e.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},Mi.version="3.6.5",Mi.isNavigationFailure=Ai,Mi.NavigationFailureType=bi,Mi.START_LOCATION=go,Wo&&window.Vue&&window.Vue.use(Mi);t(107);t(129),t(16);var Gi={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,342)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,341))},Wi={"v-3ea18074":()=>t.e(5).then(t.bind(null,344)),"v-19627c88":()=>t.e(6).then(t.bind(null,345)),"v-113427db":()=>t.e(8).then(t.bind(null,346)),"v-755e396c":()=>t.e(7).then(t.bind(null,347)),"v-4ae1c406":()=>t.e(9).then(t.bind(null,348)),"v-7760fc46":()=>t.e(10).then(t.bind(null,349)),"v-18fed24a":()=>t.e(11).then(t.bind(null,350)),"v-53879af9":()=>t.e(12).then(t.bind(null,351)),"v-2147514e":()=>t.e(13).then(t.bind(null,352)),"v-375f6543":()=>t.e(14).then(t.bind(null,353)),"v-b41db4aa":()=>t.e(15).then(t.bind(null,354)),"v-7f25d5ce":()=>t.e(16).then(t.bind(null,355)),"v-44031c04":()=>t.e(17).then(t.bind(null,356)),"v-9fd0a9a2":()=>t.e(18).then(t.bind(null,357)),"v-7d4a4db9":()=>t.e(19).then(t.bind(null,358)),"v-2a7ec60c":()=>t.e(20).then(t.bind(null,359)),"v-34453bd6":()=>t.e(21).then(t.bind(null,360)),"v-0489726b":()=>t.e(22).then(t.bind(null,361)),"v-44ae2d74":()=>t.e(23).then(t.bind(null,362)),"v-68accd9a":()=>t.e(24).then(t.bind(null,363)),"v-898894de":()=>t.e(25).then(t.bind(null,364)),"v-a5598ff0":()=>t.e(26).then(t.bind(null,365)),"v-b89e91da":()=>t.e(27).then(t.bind(null,366)),"v-22022594":()=>t.e(28).then(t.bind(null,367)),"v-b3ac3d9e":()=>t.e(29).then(t.bind(null,368)),"v-6d299f3c":()=>t.e(30).then(t.bind(null,369)),"v-28a47994":()=>t.e(31).then(t.bind(null,370)),"v-38446c96":()=>t.e(32).then(t.bind(null,371)),"v-117d00e4":()=>t.e(33).then(t.bind(null,372)),"v-1b4aa252":()=>t.e(35).then(t.bind(null,373)),"v-3339066d":()=>t.e(34).then(t.bind(null,374)),"v-3d4665d4":()=>t.e(36).then(t.bind(null,375)),"v-e72f1de0":()=>t.e(37).then(t.bind(null,376)),"v-5b29bf2e":()=>t.e(38).then(t.bind(null,377)),"v-0bc9b511":()=>t.e(39).then(t.bind(null,378)),"v-02700e14":()=>t.e(40).then(t.bind(null,379)),"v-74fc53b5":()=>t.e(41).then(t.bind(null,380)),"v-616e898c":()=>t.e(42).then(t.bind(null,381)),"v-015fc979":()=>t.e(43).then(t.bind(null,382)),"v-a3882fd8":()=>t.e(44).then(t.bind(null,383)),"v-5c20f059":()=>t.e(45).then(t.bind(null,384)),"v-0db1ba4c":()=>t.e(46).then(t.bind(null,385)),"v-e11d5338":()=>t.e(47).then(t.bind(null,386)),"v-756e0e40":()=>t.e(48).then(t.bind(null,387)),"v-c9c3d120":()=>t.e(49).then(t.bind(null,388)),"v-59bbb9a4":()=>t.e(50).then(t.bind(null,389)),"v-4f5baf9f":()=>t.e(51).then(t.bind(null,390)),"v-7e248577":()=>t.e(53).then(t.bind(null,391)),"v-2718b826":()=>t.e(52).then(t.bind(null,392)),"v-3046ee2f":()=>t.e(54).then(t.bind(null,393)),"v-6f25eb68":()=>t.e(55).then(t.bind(null,394)),"v-4b840afb":()=>t.e(56).then(t.bind(null,395)),"v-64765687":()=>t.e(57).then(t.bind(null,396)),"v-dff38a1a":()=>t.e(58).then(t.bind(null,397)),"v-44c16328":()=>t.e(59).then(t.bind(null,398)),"v-b64ba72e":()=>t.e(60).then(t.bind(null,399)),"v-8f5bdd2c":()=>t.e(61).then(t.bind(null,400)),"v-72dfb1fa":()=>t.e(62).then(t.bind(null,401)),"v-4ada5ffa":()=>t.e(63).then(t.bind(null,402)),"v-e94a892c":()=>t.e(64).then(t.bind(null,403)),"v-25b79342":()=>t.e(65).then(t.bind(null,404)),"v-294fcdc0":()=>t.e(66).then(t.bind(null,405)),"v-18b829d6":()=>t.e(68).then(t.bind(null,406)),"v-0107a901":()=>t.e(67).then(t.bind(null,407)),"v-7ae44890":()=>t.e(70).then(t.bind(null,408)),"v-244826a4":()=>t.e(69).then(t.bind(null,409)),"v-75a6e172":()=>t.e(71).then(t.bind(null,410)),"v-404acf5a":()=>t.e(73).then(t.bind(null,411)),"v-0dbc8d1f":()=>t.e(72).then(t.bind(null,412)),"v-6c24507d":()=>t.e(75).then(t.bind(null,413)),"v-633514a6":()=>t.e(76).then(t.bind(null,414)),"v-2b182e4d":()=>t.e(74).then(t.bind(null,415)),"v-2f04e1e9":()=>t.e(77).then(t.bind(null,416)),"v-db787618":()=>t.e(78).then(t.bind(null,417)),"v-69702e1b":()=>t.e(79).then(t.bind(null,418)),"v-36ccea9d":()=>t.e(80).then(t.bind(null,419)),"v-19fa0d03":()=>t.e(81).then(t.bind(null,420)),"v-723f17bb":()=>t.e(82).then(t.bind(null,421)),"v-e0422a10":()=>t.e(83).then(t.bind(null,422)),"v-4fa1e33d":()=>t.e(84).then(t.bind(null,423)),"v-875c577c":()=>t.e(85).then(t.bind(null,424)),"v-7e456407":()=>t.e(86).then(t.bind(null,425)),"v-6eab398b":()=>t.e(87).then(t.bind(null,426)),"v-a1181280":()=>t.e(88).then(t.bind(null,427)),"v-c4bc892a":()=>t.e(89).then(t.bind(null,428)),"v-a438f52e":()=>t.e(90).then(t.bind(null,429)),"v-6543965a":()=>t.e(91).then(t.bind(null,430)),"v-20786cca":()=>t.e(92).then(t.bind(null,431)),"v-755fb43e":()=>t.e(93).then(t.bind(null,432)),"v-42425032":()=>t.e(94).then(t.bind(null,433)),"v-0e7f65be":()=>t.e(95).then(t.bind(null,434)),"v-704812be":()=>t.e(96).then(t.bind(null,435)),"v-72ab9b2a":()=>t.e(97).then(t.bind(null,436)),"v-fcaea610":()=>t.e(98).then(t.bind(null,437)),"v-50865a3e":()=>t.e(99).then(t.bind(null,438)),"v-2db45745":()=>t.e(100).then(t.bind(null,439)),"v-1e91960a":()=>t.e(101).then(t.bind(null,440)),"v-dc86c314":()=>t.e(102).then(t.bind(null,441)),"v-273d985e":()=>t.e(104).then(t.bind(null,442)),"v-37738e87":()=>t.e(103).then(t.bind(null,443)),"v-2b38f21a":()=>t.e(105).then(t.bind(null,444)),"v-c2f34ac4":()=>t.e(106).then(t.bind(null,445)),"v-c4e89c56":()=>t.e(107).then(t.bind(null,446)),"v-734dba6f":()=>t.e(108).then(t.bind(null,447)),"v-11e4e95e":()=>t.e(109).then(t.bind(null,448)),"v-f2704616":()=>t.e(110).then(t.bind(null,449)),"v-b5463836":()=>t.e(111).then(t.bind(null,450)),"v-3d549796":()=>t.e(112).then(t.bind(null,451)),"v-12cba644":()=>t.e(113).then(t.bind(null,452)),"v-7adc269e":()=>t.e(114).then(t.bind(null,453)),"v-2b460b22":()=>t.e(115).then(t.bind(null,454)),"v-3d78375a":()=>t.e(116).then(t.bind(null,455)),"v-451b2d5a":()=>t.e(117).then(t.bind(null,456)),"v-4cbe235a":()=>t.e(118).then(t.bind(null,457)),"v-5c040f5a":()=>t.e(119).then(t.bind(null,458)),"v-5cc78d4e":()=>t.e(120).then(t.bind(null,459)),"v-38307c66":()=>t.e(121).then(t.bind(null,460)),"v-2bd8c78e":()=>t.e(122).then(t.bind(null,461)),"v-5492dfdc":()=>t.e(123).then(t.bind(null,462)),"v-f23f5676":()=>t.e(124).then(t.bind(null,463)),"v-411c38d0":()=>t.e(125).then(t.bind(null,464)),"v-2f349092":()=>t.e(126).then(t.bind(null,465)),"v-b2f966b2":()=>t.e(127).then(t.bind(null,466)),"v-e5fe87ee":()=>t.e(128).then(t.bind(null,467)),"v-384fdc07":()=>t.e(129).then(t.bind(null,468)),"v-ba498c5e":()=>t.e(130).then(t.bind(null,469)),"v-51c53022":()=>t.e(131).then(t.bind(null,470)),"v-259471da":()=>t.e(132).then(t.bind(null,471)),"v-bf002aaa":()=>t.e(133).then(t.bind(null,472)),"v-3101e03e":()=>t.e(134).then(t.bind(null,473)),"v-957d58aa":()=>t.e(135).then(t.bind(null,474)),"v-07ea42ec":()=>t.e(136).then(t.bind(null,475)),"v-0a701b72":()=>t.e(137).then(t.bind(null,476)),"v-1f897546":()=>t.e(138).then(t.bind(null,477)),"v-db165b2e":()=>t.e(139).then(t.bind(null,478)),"v-640aa13f":()=>t.e(140).then(t.bind(null,479)),"v-5c0a68a2":()=>t.e(141).then(t.bind(null,480)),"v-34298677":()=>t.e(142).then(t.bind(null,481)),"v-1ef80a76":()=>t.e(143).then(t.bind(null,482)),"v-4688bc8e":()=>t.e(144).then(t.bind(null,483)),"v-7273c368":()=>t.e(145).then(t.bind(null,484)),"v-34c872f9":()=>t.e(146).then(t.bind(null,485)),"v-2e80dc0e":()=>t.e(147).then(t.bind(null,486)),"v-31e87db2":()=>t.e(148).then(t.bind(null,487)),"v-01de7511":()=>t.e(149).then(t.bind(null,488)),"v-f74f517e":()=>t.e(150).then(t.bind(null,489)),"v-ce83d69e":()=>t.e(151).then(t.bind(null,490)),"v-0433bcc2":()=>t.e(152).then(t.bind(null,491)),"v-432df53c":()=>t.e(153).then(t.bind(null,492)),"v-818c779e":()=>t.e(154).then(t.bind(null,493)),"v-58553816":()=>t.e(155).then(t.bind(null,494)),"v-f593c2e0":()=>t.e(156).then(t.bind(null,495)),"v-69595f78":()=>t.e(157).then(t.bind(null,496)),"v-31ed20a4":()=>t.e(158).then(t.bind(null,497)),"v-486aed96":()=>t.e(159).then(t.bind(null,498)),"v-1c6576d1":()=>t.e(160).then(t.bind(null,499)),"v-b990e9a2":()=>t.e(161).then(t.bind(null,500)),"v-a15a4686":()=>t.e(162).then(t.bind(null,501)),"v-59d8bdc0":()=>t.e(163).then(t.bind(null,502)),"v-6589c999":()=>t.e(164).then(t.bind(null,503)),"v-20b16aa4":()=>t.e(166).then(t.bind(null,504)),"v-5b46cb28":()=>t.e(165).then(t.bind(null,505)),"v-4173bc9e":()=>t.e(167).then(t.bind(null,506)),"v-ecc0819e":()=>t.e(168).then(t.bind(null,507)),"v-6653d599":()=>t.e(169).then(t.bind(null,508)),"v-54627bda":()=>t.e(170).then(t.bind(null,509)),"v-4602a18c":()=>t.e(171).then(t.bind(null,510)),"v-4d20f12a":()=>t.e(172).then(t.bind(null,511)),"v-e13e4a56":()=>t.e(173).then(t.bind(null,512)),"v-8c5f8bc2":()=>t.e(174).then(t.bind(null,513)),"v-55723356":()=>t.e(175).then(t.bind(null,514)),"v-62615f84":()=>t.e(176).then(t.bind(null,515)),"v-f471752a":()=>t.e(177).then(t.bind(null,516)),"v-62ff2e8c":()=>t.e(178).then(t.bind(null,517)),"v-5a174d42":()=>t.e(179).then(t.bind(null,518)),"v-c709a762":()=>t.e(180).then(t.bind(null,519)),"v-67dd179f":()=>t.e(181).then(t.bind(null,520)),"v-883ac370":()=>t.e(182).then(t.bind(null,521)),"v-034a9719":()=>t.e(183).then(t.bind(null,522)),"v-3e8e1b39":()=>t.e(184).then(t.bind(null,523)),"v-7c096f14":()=>t.e(185).then(t.bind(null,524)),"v-c9151fb2":()=>t.e(186).then(t.bind(null,525)),"v-5d7ae588":()=>t.e(187).then(t.bind(null,526)),"v-0d9e81f2":()=>t.e(188).then(t.bind(null,527)),"v-5af49bfd":()=>t.e(189).then(t.bind(null,528)),"v-bcf39418":()=>t.e(190).then(t.bind(null,529)),"v-586c4455":()=>t.e(191).then(t.bind(null,530)),"v-b7e1a42e":()=>t.e(192).then(t.bind(null,531)),"v-6a1d7036":()=>t.e(193).then(t.bind(null,532)),"v-ff0fc978":()=>t.e(194).then(t.bind(null,533)),"v-7da55d0b":()=>t.e(195).then(t.bind(null,534)),"v-5e589024":()=>t.e(196).then(t.bind(null,535)),"v-c72003c0":()=>t.e(197).then(t.bind(null,536)),"v-91cef146":()=>t.e(198).then(t.bind(null,537)),"v-707b90f2":()=>t.e(199).then(t.bind(null,538)),"v-43e94077":()=>t.e(200).then(t.bind(null,539)),"v-0559b8eb":()=>t.e(201).then(t.bind(null,540)),"v-5cd2ddfe":()=>t.e(202).then(t.bind(null,541)),"v-32e7e7a3":()=>t.e(203).then(t.bind(null,542)),"v-059fa4ea":()=>t.e(204).then(t.bind(null,543)),"v-2c66c560":()=>t.e(205).then(t.bind(null,544)),"v-b5656fd2":()=>t.e(206).then(t.bind(null,545)),"v-04c86028":()=>t.e(207).then(t.bind(null,546)),"v-295cb760":()=>t.e(208).then(t.bind(null,547)),"v-72bebe02":()=>t.e(209).then(t.bind(null,548)),"v-354037c8":()=>t.e(210).then(t.bind(null,549)),"v-cb406ede":()=>t.e(211).then(t.bind(null,550)),"v-27ea0e5e":()=>t.e(212).then(t.bind(null,551)),"v-2b5304ef":()=>t.e(213).then(t.bind(null,552)),"v-54b89c43":()=>t.e(214).then(t.bind(null,553)),"v-6d4fda76":()=>t.e(215).then(t.bind(null,554)),"v-2a9e80c5":()=>t.e(216).then(t.bind(null,555)),"v-1580d648":()=>t.e(217).then(t.bind(null,556)),"v-3ac2d970":()=>t.e(218).then(t.bind(null,557)),"v-7cc5bcbe":()=>t.e(219).then(t.bind(null,558)),"v-1a6a6e0c":()=>t.e(220).then(t.bind(null,559)),"v-7abe89ca":()=>t.e(221).then(t.bind(null,560)),"v-db69ce64":()=>t.e(222).then(t.bind(null,561)),"v-18e34bdf":()=>t.e(223).then(t.bind(null,562)),"v-f92ac00e":()=>t.e(224).then(t.bind(null,563)),"v-255e2aba":()=>t.e(225).then(t.bind(null,564)),"v-121673ac":()=>t.e(226).then(t.bind(null,565)),"v-609104d0":()=>t.e(227).then(t.bind(null,566)),"v-0d2b1e30":()=>t.e(228).then(t.bind(null,567)),"v-80eb33f0":()=>t.e(229).then(t.bind(null,568)),"v-66a8f2f4":()=>t.e(230).then(t.bind(null,569)),"v-52b2ca12":()=>t.e(231).then(t.bind(null,570)),"v-2536db2f":()=>t.e(232).then(t.bind(null,571)),"v-7f096632":()=>t.e(233).then(t.bind(null,572)),"v-7b4d5398":()=>t.e(234).then(t.bind(null,573)),"v-d905965c":()=>t.e(235).then(t.bind(null,574)),"v-2aefaf68":()=>t.e(236).then(t.bind(null,575)),"v-73200d26":()=>t.e(237).then(t.bind(null,576)),"v-5fbf5ab8":()=>t.e(238).then(t.bind(null,577)),"v-e866ea6c":()=>t.e(239).then(t.bind(null,578)),"v-61745406":()=>t.e(240).then(t.bind(null,579)),"v-a44c2b60":()=>t.e(241).then(t.bind(null,580)),"v-b9442570":()=>t.e(242).then(t.bind(null,581)),"v-5e1134a2":()=>t.e(243).then(t.bind(null,582)),"v-422ec5c3":()=>t.e(244).then(t.bind(null,583)),"v-3b5de10f":()=>t.e(245).then(t.bind(null,584)),"v-4df87696":()=>t.e(246).then(t.bind(null,585)),"v-0613a89c":()=>t.e(247).then(t.bind(null,586)),"v-b3eeeae6":()=>t.e(248).then(t.bind(null,587)),"v-6cdc77c0":()=>t.e(249).then(t.bind(null,588)),"v-45feb2d4":()=>t.e(250).then(t.bind(null,589)),"v-4ee676b6":()=>t.e(251).then(t.bind(null,590)),"v-8ca4ec2c":()=>t.e(252).then(t.bind(null,591)),"v-6035f632":()=>t.e(253).then(t.bind(null,592)),"v-0ca18440":()=>t.e(254).then(t.bind(null,593)),"v-0128ec18":()=>t.e(255).then(t.bind(null,594)),"v-597c5320":()=>t.e(256).then(t.bind(null,595)),"v-7f619821":()=>t.e(257).then(t.bind(null,596)),"v-a4adc414":()=>t.e(258).then(t.bind(null,597)),"v-0aa6bb20":()=>t.e(259).then(t.bind(null,598)),"v-667a0d04":()=>t.e(260).then(t.bind(null,599)),"v-6d11b8ea":()=>t.e(261).then(t.bind(null,600)),"v-40b6895a":()=>t.e(262).then(t.bind(null,601)),"v-b95ea328":()=>t.e(263).then(t.bind(null,602)),"v-37b2aac6":()=>t.e(264).then(t.bind(null,603)),"v-450174da":()=>t.e(265).then(t.bind(null,604)),"v-0c2c6274":()=>t.e(266).then(t.bind(null,605)),"v-2b4555ef":()=>t.e(267).then(t.bind(null,606)),"v-202ff976":()=>t.e(268).then(t.bind(null,607)),"v-9bc8ee5e":()=>t.e(269).then(t.bind(null,608)),"v-999c427e":()=>t.e(270).then(t.bind(null,609)),"v-0ba7a38a":()=>t.e(271).then(t.bind(null,610)),"v-46dca920":()=>t.e(272).then(t.bind(null,611)),"v-02fb82dd":()=>t.e(273).then(t.bind(null,612)),"v-39bb54b4":()=>t.e(274).then(t.bind(null,613)),"v-637a46ad":()=>t.e(275).then(t.bind(null,614)),"v-52830739":()=>t.e(276).then(t.bind(null,615)),"v-11f041eb":()=>t.e(277).then(t.bind(null,616)),"v-14a0ffc2":()=>t.e(278).then(t.bind(null,617)),"v-c4b199f0":()=>t.e(279).then(t.bind(null,618)),"v-56a682c3":()=>t.e(280).then(t.bind(null,619)),"v-7f3d874b":()=>t.e(281).then(t.bind(null,620)),"v-77a48bc4":()=>t.e(282).then(t.bind(null,621)),"v-5a649ff4":()=>t.e(283).then(t.bind(null,622)),"v-069bf93c":()=>t.e(284).then(t.bind(null,623)),"v-afbab932":()=>t.e(285).then(t.bind(null,624)),"v-2aedc5db":()=>t.e(286).then(t.bind(null,625)),"v-37d9273c":()=>t.e(287).then(t.bind(null,626)),"v-fb185790":()=>t.e(289).then(t.bind(null,627)),"v-758ceeb4":()=>t.e(288).then(t.bind(null,628)),"v-64a3be22":()=>t.e(290).then(t.bind(null,629)),"v-99e641ee":()=>t.e(291).then(t.bind(null,630)),"v-fac0801c":()=>t.e(292).then(t.bind(null,631)),"v-096b8acd":()=>t.e(293).then(t.bind(null,632)),"v-c7da08e8":()=>t.e(294).then(t.bind(null,633)),"v-830953a2":()=>t.e(295).then(t.bind(null,634)),"v-2f1c16fe":()=>t.e(296).then(t.bind(null,635)),"v-843e79e6":()=>t.e(297).then(t.bind(null,636)),"v-056c5481":()=>t.e(298).then(t.bind(null,637)),"v-44d36276":()=>t.e(299).then(t.bind(null,638)),"v-79b275fd":()=>t.e(300).then(t.bind(null,639)),"v-a5adc4d6":()=>t.e(301).then(t.bind(null,640)),"v-3a0ac19e":()=>t.e(302).then(t.bind(null,641)),"v-3a1e5206":()=>t.e(303).then(t.bind(null,642)),"v-7dcec107":()=>t.e(304).then(t.bind(null,643)),"v-c7488666":()=>t.e(305).then(t.bind(null,644)),"v-8dd3c12e":()=>t.e(306).then(t.bind(null,645)),"v-859c6816":()=>t.e(307).then(t.bind(null,646)),"v-c95955ea":()=>t.e(308).then(t.bind(null,647)),"v-4b8583be":()=>t.e(309).then(t.bind(null,648)),"v-0de0e66d":()=>t.e(310).then(t.bind(null,649)),"v-954f96d4":()=>t.e(311).then(t.bind(null,650)),"v-70523ffb":()=>t.e(312).then(t.bind(null,651)),"v-61f0d178":()=>t.e(313).then(t.bind(null,652)),"v-5f1658aa":()=>t.e(314).then(t.bind(null,653)),"v-36e6cf13":()=>t.e(315).then(t.bind(null,654)),"v-c1d0aba0":()=>t.e(316).then(t.bind(null,655)),"v-2804e650":()=>t.e(317).then(t.bind(null,656)),"v-be6ea94c":()=>t.e(318).then(t.bind(null,657)),"v-2f59633d":()=>t.e(319).then(t.bind(null,658)),"v-44f90c84":()=>t.e(320).then(t.bind(null,659)),"v-109fad4a":()=>t.e(321).then(t.bind(null,660)),"v-0009ed72":()=>t.e(322).then(t.bind(null,661)),"v-253cad4c":()=>t.e(323).then(t.bind(null,662)),"v-67a409f4":()=>t.e(324).then(t.bind(null,663)),"v-1b409232":()=>t.e(325).then(t.bind(null,664)),"v-c977ad84":()=>t.e(326).then(t.bind(null,665)),"v-645905ee":()=>t.e(327).then(t.bind(null,666)),"v-3830fac4":()=>t.e(328).then(t.bind(null,667)),"v-6665e6f8":()=>t.e(329).then(t.bind(null,668)),"v-41806177":()=>t.e(330).then(t.bind(null,669)),"v-4da71f67":()=>t.e(331).then(t.bind(null,670)),"v-67950ee7":()=>t.e(332).then(t.bind(null,671)),"v-61f6be49":()=>t.e(333).then(t.bind(null,672)),"v-31f67e68":()=>t.e(334).then(t.bind(null,673)),"v-15087347":()=>t.e(335).then(t.bind(null,674)),"v-5ce2fd45":()=>t.e(336).then(t.bind(null,675)),"v-99641424":()=>t.e(337).then(t.bind(null,676)),"v-acdd69cc":()=>t.e(338).then(t.bind(null,677)),"v-1d1bff6c":()=>t.e(339).then(t.bind(null,678)),"v-541ca9fa":()=>t.e(340).then(t.bind(null,679)),"v-034237ec":()=>t.e(341).then(t.bind(null,680)),"v-e3860708":()=>t.e(342).then(t.bind(null,681)),"v-19e29604":()=>t.e(343).then(t.bind(null,682)),"v-29d30750":()=>t.e(344).then(t.bind(null,683)),"v-621c5505":()=>t.e(345).then(t.bind(null,343)),"v-0dcc91ac":()=>t.e(346).then(t.bind(null,684)),"v-3b3c077c":()=>t.e(347).then(t.bind(null,685)),"v-1fb6a910":()=>t.e(348).then(t.bind(null,686)),"v-12a7b30e":()=>t.e(349).then(t.bind(null,687)),"v-b3163758":()=>t.e(350).then(t.bind(null,688)),"v-5d2542b4":()=>t.e(352).then(t.bind(null,689)),"v-2676e328":()=>t.e(351).then(t.bind(null,690)),"v-1a3dc34b":()=>t.e(353).then(t.bind(null,691)),"v-3f7728aa":()=>t.e(354).then(t.bind(null,692)),"v-a53b626a":()=>t.e(355).then(t.bind(null,693)),"v-1bbcf022":()=>t.e(356).then(t.bind(null,694)),"v-0df4ca3d":()=>t.e(357).then(t.bind(null,695)),"v-23ac94d8":()=>t.e(358).then(t.bind(null,696)),"v-b3e01fac":()=>t.e(359).then(t.bind(null,697)),"v-3dcfb846":()=>t.e(360).then(t.bind(null,698)),"v-2d09c694":()=>t.e(361).then(t.bind(null,699)),"v-12c8c438":()=>t.e(362).then(t.bind(null,700)),"v-e89d809a":()=>t.e(363).then(t.bind(null,701)),"v-e175a41e":()=>t.e(364).then(t.bind(null,702)),"v-a6df536c":()=>t.e(365).then(t.bind(null,703)),"v-46a7d210":()=>t.e(366).then(t.bind(null,704)),"v-4a21bdcc":()=>t.e(367).then(t.bind(null,705)),"v-92871f08":()=>t.e(368).then(t.bind(null,706)),"v-329e022a":()=>t.e(369).then(t.bind(null,707)),"v-0cf9197a":()=>t.e(370).then(t.bind(null,708)),"v-72c19148":()=>t.e(371).then(t.bind(null,709)),"v-52f64dfa":()=>t.e(372).then(t.bind(null,710)),"v-6749114c":()=>t.e(373).then(t.bind(null,711)),"v-ea9fe824":()=>t.e(374).then(t.bind(null,712)),"v-4b731cb4":()=>t.e(375).then(t.bind(null,713)),"v-0199cf76":()=>t.e(376).then(t.bind(null,714)),"v-c6b66d0c":()=>t.e(377).then(t.bind(null,715)),"v-73f1a00e":()=>t.e(378).then(t.bind(null,716)),"v-03d101c4":()=>t.e(379).then(t.bind(null,717)),"v-bce7f622":()=>t.e(380).then(t.bind(null,718)),"v-c50b688c":()=>t.e(381).then(t.bind(null,719)),"v-5ae38e48":()=>t.e(382).then(t.bind(null,720)),"v-b795c8ee":()=>t.e(383).then(t.bind(null,721)),"v-584eac56":()=>t.e(384).then(t.bind(null,722)),"v-3b3e454a":()=>t.e(385).then(t.bind(null,723)),"v-3e623c1a":()=>t.e(386).then(t.bind(null,724))};function Zi(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Xi=/-(\w)/g,Ki=Zi(n=>n.replace(Xi,(n,e)=>e?e.toUpperCase():"")),Yi=/\B([A-Z])/g,Qi=Zi(n=>n.replace(Yi,"-$1").toLowerCase()),ns=Zi(n=>n.charAt(0).toUpperCase()+n.slice(1));function es(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(ns(Ki(e))):n(ns(e))||n(Qi(e))}const ts=Object.assign({},Gi,Wi),as=n=>ts[n],rs=n=>Wi[n],os=n=>Gi[n],is=n=>Gt.component(n);function ss(n){return es(rs,n)}function ls(n){return es(os,n)}function cs(n){return es(as,n)}function ds(n){return es(is,n)}function ps(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!ds(n)&&cs(n)){const e=await cs(n)();Gt.component(n,e.default)}}))}function ms(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var us=t(92),hs=t.n(us),gs=t(93),fs=t.n(gs),vs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${fs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=ys(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=xs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],n,this.siteMeta,ks)},updateCanonicalLink(){bs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",ys(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){xs(null,this.currentMetaTags),bs()}};function bs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function ys(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function xs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ks(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var Es=t(52),ws={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(Es)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),r=window.innerHeight+t;for(let n=0;n<e.length;n++){const o=e[n],i=e[n+1],s=0===n&&0===t||t>=o.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(o.hash)){const t=o;if(r===a)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},As=t(24),Ts=t.n(As),zs={mounted(){Ts.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Gt.component(n.name)||Ts.a.start(),t()}),this.$router.afterEach(()=>{Ts.a.done(),this.isSidebarOpen=!1})}};t(241),t(242);class js{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Ss={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new js).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===t&&a.firstChild?a.insertBefore(r,a.firstChild):a.appendChild(r),r.styleSheet?r.styleSheet.cssText=n:r.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var Bs={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},_s={},Cs=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Is=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:Bs[n]},Ps=function n(e,t,a){var r=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))r[n]=t[n];else{var e=n.replace("data","");r.dataset[e]=t[n]}})),a&&a.forEach((function(e){var t=e.tag,a=e.attrs,o=e.children;r.appendChild(n(t,a,o))})),r},Ds=function(n,e,t){var a,r=(a=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(a));return 1!==r.length||t?r:r[0]},Ls=function(n,e){var t,a,r=n.match(/<style>([\s\S]+)<\/style>/),o=n.match(/<template>([\s\S]+)<\/template>/),i=n.match(/<script>([\s\S]+)<\/script>/),s={css:r&&r[1].replace(/^\n|\n$/g,""),html:o&&o[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=Cs(s.html),s.jsTpl=(t=s.js,a=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(a,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),a="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),r=window.Babel?window.Babel.transform(a,{presets:["es2015"]}).code:a,o=[eval][0](r);return o.template=e,o}(s.js,s.html);var l=Is("vue");return s.jsLib.unshift(l),s},Rs=function(n,e){var t,a=n.match(/<style>([\s\S]+)<\/style>/),r=n.match(/<html>([\s\S]+)<\/html>/),o=n.match(/<script>([\s\S]+)<\/script>/),i={css:a&&a[1].replace(/^\n|\n$/g,""),html:r&&r[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return i.htmlTpl=i.html,i.jsTpl=i.js,i.script=(t=i.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),i},Fs=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function $s(){var n=Ds(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Ds(n,"vuepress-plugin-demo-block__code"),t=Ds(n,"vuepress-plugin-demo-block__display"),a=Ds(n,"vuepress-plugin-demo-block__footer"),r=Ds(t,"vuepress-plugin-demo-block__app"),o=decodeURIComponent(n.dataset.code),i=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);i=i?JSON.parse(i):{};var l=e.querySelector("div").clientHeight,c="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,a="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),r=new Function("return ".concat(a))(),o={js:r,css:r.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Fs(n),htmlTpl:Cs("")},i=Is("react"),s=Is("reactDOM");return o.jsLib.unshift(i,s),o}(o,i):"vanilla"===s?Rs(o,i):Ls(o,i),d=Ps("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(a.appendChild(d),d.addEventListener("click",Us.bind(null,d,l,e,a)),Is("jsfiddle")&&a.appendChild(function(n){var e=n.css,t=n.htmlTpl,a=n.jsTpl,r=n.jsLib,o=n.cssLib,i=r.concat(o).concat(Is("cssLib")).concat(Is("jsLib")).join(",");return Ps("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:a}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:i}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),Is("codepen")&&a.appendChild(function(n){var e=n.css,t=n.htmlTpl,a=n.jsTpl,r=n.jsLib,o=n.cssLib,i=JSON.stringify({css:e,html:t,js:a,js_external:r.concat(Is("jsLib")).join(";"),css_external:o.concat(Is("cssLib")).join(";"),layout:Is("codepenLayout"),js_pre_processor:Is("codepenJsProcessor"),editors:Is("codepenEditors")});return Ps("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:i}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==i.horizontal?i.horizontal:Is("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var p=e.firstChild.cloneNode(!0);p.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(p)}if(c.css&&function(n){if(!_s[n]){var e=Ps("style",{innerHTML:n});document.body.appendChild(e),_s[n]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),r);else if("vue"===s){var m=(new(Vue.extend(c.script))).$mount();r.appendChild(m.$el)}else"vanilla"===s&&(r.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){$s()}),300)}function Us(n,e,t,a){var r="1"!==n.dataset.isExpand;t.style.height=r?"".concat(e,"px"):0,r?a.classList.add("vuepress-plugin-demo-block__show-link"):a.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=r?"1":"0"}var Os={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},$s()},updated:function(){$s()}},qs="auto",Ns="zoom-in",Ms="zoom-out",Vs="grab",Hs="move";function Js(n,e,t){var a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r={passive:!1};a?n.addEventListener(e,t,r):n.removeEventListener(e,t,r)}function Gs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Ws(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Zs(n,e,t){!function(n){var e=Xs,t=Ks;if(n.transition){var a=n.transition;delete n.transition,n[e]=a}if(n.transform){var r=n.transform;delete n.transform,n[t]=r}}(e);var a=n.style,r={};for(var o in e)t&&(r[o]=a[o]||""),a[o]=e[o];return r}var Xs="transition",Ks="transform",Ys="transform",Qs="transitionend";var nl=function(){},el={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:nl,onClose:nl,onGrab:nl,onMove:nl,onRelease:nl,onBeforeOpen:nl,onBeforeClose:nl,onBeforeGrab:nl,onBeforeRelease:nl,onImageLoading:nl,onImageLoaded:nl},tl={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),rl(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var a=this.lastScrollPosition.x-e,r=this.lastScrollPosition.y-t,o=this.options.scrollThreshold;(Math.abs(r)>=o||Math.abs(a)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(al(n)&&!rl(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){al(n)&&!rl(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,a=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,a)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,a=e.clientY;this.move(t,a)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function al(n){return 0===n.button}function rl(n){return n.metaKey||n.ctrlKey}var ol={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Zs(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Js(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Zs(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},il="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},sl=function(){function n(n,e){for(var t=0;t<e.length;t++){var a=e[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(n,a.key,a)}}return function(e,t,a){return t&&n(e.prototype,t),a&&n(e,a),e}}(),ll=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(n[a]=t[a])}return n},cl={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Ws(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,a=n.transitionDuration,r=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Vs:Ms,transition:Ys+"\n        "+a+"s\n        "+r,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Zs(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Zs(this.el,{transform:"none"})},grab:function(n,e,t){var a=dl(),r=a.x-n,o=a.y-e;Zs(this.el,{cursor:Hs,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var a=dl(),r=a.x-n,o=a.y-e;Zs(this.el,{transition:Ys,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Zs(this.el,this.styleClose)},restoreOpenStyle:function(){Zs(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=dl(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,a=this.instance.options,r=a.customSize,o=a.scaleBase;if(!r&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(r&&"object"===(void 0===r?"undefined":il(r)))return{x:r.width/this.rect.width,y:r.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,l=dl(),c={x:l.x-i,y:l.y-s},d=c.x/i,p=c.y/s,m=o+Math.min(d,p);if(r&&"string"==typeof r){var u=t||this.el.naturalWidth,h=e||this.el.naturalHeight,g=parseFloat(r)*u/(100*this.rect.width),f=parseFloat(r)*h/(100*this.rect.height);if(m>g||m>f)return{x:g,y:f}}return{x:m,y:m}}};function dl(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function pl(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(a){Js(n,a,e[a],t)}))}var ml=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(cl),this.overlay=Object.create(ol),this.handler=Object.create(tl),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=ll({},el,e),this.overlay.init(this),this.handler.init(this)}return sl(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Ns,Js(n,"click",this.handler.click),this.options.preloadImage&&Gs(Ws(n)));return this}},{key:"config",value:function(n){return n?(ll(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var a="string"==typeof n?document.querySelector(n):n;if("IMG"===a.tagName){if(this.options.onBeforeOpen(a),this.target.init(a,this),!this.options.preloadImage){var r=this.target.srcOriginal;null!=r&&(this.options.onImageLoading(a),Gs(r,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Js(document,"scroll",this.handler.scroll),Js(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Js(window,"resize",this.handler.resizeWindow);var o=function n(){Js(a,Qs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&pl(document,e.handler,!0),t(a)};return Js(a,Qs,o),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=qs,this.overlay.fadeOut(),this.target.zoomOut(),Js(document,"scroll",this.handler.scroll,!1),Js(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Js(window,"resize",this.handler.resizeWindow,!1);var a=function a(){Js(t,Qs,a,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&pl(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Js(t,Qs,a),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var r=this.target.el;this.options.onBeforeGrab(r),this.released=!1,this.target.grab(n,e,t);var o=function n(){Js(r,Qs,n,!1),a(r)};return Js(r,Qs,o),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Hs,this.target.move(n,e,t);var r=this.target.el,o=function n(){Js(r,Qs,n,!1),a(r)};return Js(r,Qs,o),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=qs,this.target.restoreOpenStyle();var a=function a(){Js(t,Qs,a,!1),n.lock=!1,n.released=!0,e(t)};return Js(t,Qs,a),this}}}]),n}();const ul=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),hl=Number("500");class gl{constructor(){this.instance=new ml(ul)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=hl){setTimeout(()=>this.update(n),e)}}var fl=[vs,ws,zs,Ss,Os,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new gl,this.$vuepress.zooming.updateDelay()}}],vl={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ms("layout",n),Gt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},bl=t(4),yl=Object(bl.a)(vl,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(yl,"mixins",fl);const xl=[{name:"v-3ea18074",path:"/note/infrastructure/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3ea18074").then(t)}},{path:"/note/infrastructure/index.html",redirect:"/note/infrastructure/"},{path:"/10.大前端/00.《前端项目基础建设》笔记.html",redirect:"/note/infrastructure/"},{name:"v-19627c88",path:"/pages/15af70/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-19627c88").then(t)}},{path:"/pages/15af70/index.html",redirect:"/pages/15af70/"},{path:"/10.大前端/1010.HTML&CSS/101001.H5 标签使用场景.html",redirect:"/pages/15af70/"},{name:"v-113427db",path:"/pages/e1f868/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-113427db").then(t)}},{path:"/pages/e1f868/index.html",redirect:"/pages/e1f868/"},{path:"/10.大前端/1010.HTML&CSS/101010.项目基础建设 css与处理器scss.html",redirect:"/pages/e1f868/"},{name:"v-755e396c",path:"/pages/03a46d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-755e396c").then(t)}},{path:"/pages/03a46d/index.html",redirect:"/pages/03a46d/"},{path:"/10.大前端/1010.HTML&CSS/101006.css常用命名单词.html",redirect:"/pages/03a46d/"},{name:"v-4ae1c406",path:"/pages/d3debc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4ae1c406").then(t)}},{path:"/pages/d3debc/index.html",redirect:"/pages/d3debc/"},{path:"/10.大前端/1010.HTML&CSS/1010100.看不见的html标签.html",redirect:"/pages/d3debc/"},{name:"v-7760fc46",path:"/pages/b189f2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7760fc46").then(t)}},{path:"/pages/b189f2/index.html",redirect:"/pages/b189f2/"},{path:"/10.大前端/1010.HTML&CSS/101011.项目基础建设 CSS公共样式.html",redirect:"/pages/b189f2/"},{name:"v-18fed24a",path:"/pages/7499ea/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-18fed24a").then(t)}},{path:"/pages/7499ea/index.html",redirect:"/pages/7499ea/"},{path:"/10.大前端/1010.HTML&CSS/1010150.手写css预处理器.html",redirect:"/pages/7499ea/"},{name:"v-53879af9",path:"/pages/10481f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-53879af9").then(t)}},{path:"/pages/10481f/index.html",redirect:"/pages/10481f/"},{path:"/10.大前端/1010.HTML&CSS/101020.iframe.html",redirect:"/pages/10481f/"},{name:"v-2147514e",path:"/pages/933422/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2147514e").then(t)}},{path:"/pages/933422/index.html",redirect:"/pages/933422/"},{path:"/10.大前端/1010.HTML&CSS/1010200.grid vs flex布局.html",redirect:"/pages/933422/"},{name:"v-375f6543",path:"/pages/749ce2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-375f6543").then(t)}},{path:"/pages/749ce2/index.html",redirect:"/pages/749ce2/"},{path:"/10.大前端/1010.HTML&CSS/101030.css 变量使用.html",redirect:"/pages/749ce2/"},{name:"v-b41db4aa",path:"/pages/14d171/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b41db4aa").then(t)}},{path:"/pages/14d171/index.html",redirect:"/pages/14d171/"},{path:"/10.大前端/1010.HTML&CSS/101031.css常见但不常用的属性.html",redirect:"/pages/14d171/"},{name:"v-7f25d5ce",path:"/pages/dbb200/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7f25d5ce").then(t)}},{path:"/pages/dbb200/index.html",redirect:"/pages/dbb200/"},{path:"/10.大前端/1010.HTML&CSS/101032.躺着旋转动画.html",redirect:"/pages/dbb200/"},{name:"v-44031c04",path:"/pages/7e3052/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-44031c04").then(t)}},{path:"/pages/7e3052/index.html",redirect:"/pages/7e3052/"},{path:"/10.大前端/1010.HTML&CSS/101033.边框渐变（圆形）.html",redirect:"/pages/7e3052/"},{name:"v-9fd0a9a2",path:"/pages/3aded5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-9fd0a9a2").then(t)}},{path:"/pages/3aded5/index.html",redirect:"/pages/3aded5/"},{path:"/10.大前端/1010.HTML&CSS/101050.float 布局.html",redirect:"/pages/3aded5/"},{name:"v-7d4a4db9",path:"/pages/2a8bd5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7d4a4db9").then(t)}},{path:"/pages/2a8bd5/index.html",redirect:"/pages/2a8bd5/"},{path:"/10.大前端/1010.HTML&CSS/101060.在 Javascript 和 Sass（或 CSS！）之间共享变量的方法.html",redirect:"/pages/2a8bd5/"},{name:"v-2a7ec60c",path:"/pages/1110/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2a7ec60c").then(t)}},{path:"/pages/1110/index.html",redirect:"/pages/1110/"},{path:"/10.大前端/1010.HTML&CSS/1110.Scss语言学习实用心得.html",redirect:"/pages/1110/"},{name:"v-34453bd6",path:"/pages/a31c06/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-34453bd6").then(t)}},{path:"/pages/a31c06/index.html",redirect:"/pages/a31c06/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102000.缓缓滚动到顶部实现方式.html",redirect:"/pages/a31c06/"},{name:"v-0489726b",path:"/pages/9ee936/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0489726b").then(t)}},{path:"/pages/9ee936/index.html",redirect:"/pages/9ee936/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102001.js 精准和模糊获取dom.html",redirect:"/pages/9ee936/"},{name:"v-44ae2d74",path:"/pages/cb116f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-44ae2d74").then(t)}},{path:"/pages/cb116f/index.html",redirect:"/pages/cb116f/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020015.js 使用技巧.html",redirect:"/pages/cb116f/"},{name:"v-68accd9a",path:"/pages/b19749/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-68accd9a").then(t)}},{path:"/pages/b19749/index.html",redirect:"/pages/b19749/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020015.前端开发这些年碰到不常见的api（不论新旧 持续更新）.html",redirect:"/pages/b19749/"},{name:"v-898894de",path:"/pages/a09c96/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-898894de").then(t)}},{path:"/pages/a09c96/index.html",redirect:"/pages/a09c96/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020018.js api常用详解.html",redirect:"/pages/a09c96/"},{name:"v-a5598ff0",path:"/pages/c466bf/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a5598ff0").then(t)}},{path:"/pages/c466bf/index.html",redirect:"/pages/c466bf/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102002.iframe 笔记.html",redirect:"/pages/c466bf/"},{name:"v-b89e91da",path:"/pages/b3a05e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b89e91da").then(t)}},{path:"/pages/b3a05e/index.html",redirect:"/pages/b3a05e/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102003.文件上传安全问题.html",redirect:"/pages/b3a05e/"},{name:"v-22022594",path:"/pages/5a1e99/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-22022594").then(t)}},{path:"/pages/5a1e99/index.html",redirect:"/pages/5a1e99/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102004.时间处理.html",redirect:"/pages/5a1e99/"},{name:"v-b3ac3d9e",path:"/pages/8b5aea/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b3ac3d9e").then(t)}},{path:"/pages/8b5aea/index.html",redirect:"/pages/8b5aea/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020052.搭建typescript环境刷LeetCode算法.html",redirect:"/pages/8b5aea/"},{name:"v-6d299f3c",path:"/pages/12d678/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6d299f3c").then(t)}},{path:"/pages/12d678/index.html",redirect:"/pages/12d678/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020055.typescript 类型联动.html",redirect:"/pages/12d678/"},{name:"v-28a47994",path:"/pages/b41fe4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-28a47994").then(t)}},{path:"/pages/b41fe4/index.html",redirect:"/pages/b41fe4/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020061.js lodash深度比较两个对象值 并输出相应key value.html",redirect:"/pages/b41fe4/"},{name:"v-38446c96",path:"/pages/4fff79/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-38446c96").then(t)}},{path:"/pages/4fff79/index.html",redirect:"/pages/4fff79/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020061.前端避免一直try...catch...(ts装饰器).html",redirect:"/pages/4fff79/"},{name:"v-117d00e4",path:"/pages/ea13c1/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-117d00e4").then(t)}},{path:"/pages/ea13c1/index.html",redirect:"/pages/ea13c1/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102010.Web H5 接入海康录像机 (rtsp转flv).html",redirect:"/pages/ea13c1/"},{name:"v-1b4aa252",path:"/pages/e6b2bf/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1b4aa252").then(t)}},{path:"/pages/e6b2bf/index.html",redirect:"/pages/e6b2bf/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020104.用好DOM事件.html",redirect:"/pages/e6b2bf/"},{name:"v-3339066d",path:"/pages/20832d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3339066d").then(t)}},{path:"/pages/20832d/index.html",redirect:"/pages/20832d/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020102.高效操作DOM.html",redirect:"/pages/20832d/"},{name:"v-3d4665d4",path:"/pages/9bf063/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3d4665d4").then(t)}},{path:"/pages/9bf063/index.html",redirect:"/pages/9bf063/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102020.全局数据.html",redirect:"/pages/9bf063/"},{name:"v-e72f1de0",path:"/pages/b035dd/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e72f1de0").then(t)}},{path:"/pages/b035dd/index.html",redirect:"/pages/b035dd/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102021.持久化数据.html",redirect:"/pages/b035dd/"},{name:"v-5b29bf2e",path:"/pages/1c1a0c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5b29bf2e").then(t)}},{path:"/pages/1c1a0c/index.html",redirect:"/pages/1c1a0c/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020212.理解 AST 实现和编译原理.html",redirect:"/pages/1c1a0c/"},{name:"v-0bc9b511",path:"/pages/8a752b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0bc9b511").then(t)}},{path:"/pages/8a752b/index.html",redirect:"/pages/8a752b/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020400.常用正则.html",redirect:"/pages/8a752b/"},{name:"v-02700e14",path:"/pages/447c40/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-02700e14").then(t)}},{path:"/pages/447c40/index.html",redirect:"/pages/447c40/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102050.typescript 类型库.html",redirect:"/pages/447c40/"},{name:"v-74fc53b5",path:"/pages/963e31/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-74fc53b5").then(t)}},{path:"/pages/963e31/index.html",redirect:"/pages/963e31/"},{path:"/10.大前端/1020.JavaScript&TypeScript/102051.type.html",redirect:"/pages/963e31/"},{name:"v-616e898c",path:"/pages/0bc29e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-616e898c").then(t)}},{path:"/pages/0bc29e/index.html",redirect:"/pages/0bc29e/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020600.js面试技能拼图 this.html",redirect:"/pages/0bc29e/"},{name:"v-015fc979",path:"/pages/dd5f5e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-015fc979").then(t)}},{path:"/pages/dd5f5e/index.html",redirect:"/pages/dd5f5e/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020605.for...in for...of 区别.html",redirect:"/pages/dd5f5e/"},{name:"v-a3882fd8",path:"/pages/8167f9/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a3882fd8").then(t)}},{path:"/pages/8167f9/index.html",redirect:"/pages/8167f9/"},{path:"/10.大前端/1020.JavaScript&TypeScript/1020606.js 获取元素大小.html",redirect:"/pages/8167f9/"},{name:"v-5c20f059",path:"/pages/6effaf/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5c20f059").then(t)}},{path:"/pages/6effaf/index.html",redirect:"/pages/6effaf/"},{path:"/10.大前端/1020.JavaScript&TypeScript/10252.typescript 万金油.html",redirect:"/pages/6effaf/"},{name:"v-0db1ba4c",path:"/pages/febcd5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0db1ba4c").then(t)}},{path:"/pages/febcd5/index.html",redirect:"/pages/febcd5/"},{path:"/10.大前端/1030.Node/103001.nvm 使用.html",redirect:"/pages/febcd5/"},{name:"v-e11d5338",path:"/pages/b378af/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e11d5338").then(t)}},{path:"/pages/b378af/index.html",redirect:"/pages/b378af/"},{path:"/10.大前端/1030.Node/103002.nvm 深度使用解析.html",redirect:"/pages/b378af/"},{name:"v-756e0e40",path:"/pages/30de9a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-756e0e40").then(t)}},{path:"/pages/30de9a/index.html",redirect:"/pages/30de9a/"},{path:"/10.大前端/1030.Node/1030071.安装npm的过程中发生了什么.html",redirect:"/pages/30de9a/"},{name:"v-c9c3d120",path:"/pages/5565db/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c9c3d120").then(t)}},{path:"/pages/5565db/index.html",redirect:"/pages/5565db/"},{path:"/10.大前端/1030.Node/1030100.想用而找不到的 npm 插件.html",redirect:"/pages/5565db/"},{name:"v-59bbb9a4",path:"/pages/f3d9dd/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-59bbb9a4").then(t)}},{path:"/pages/f3d9dd/index.html",redirect:"/pages/f3d9dd/"},{path:"/10.大前端/1030.Node/1030101.node全局脚本原理解析.html",redirect:"/pages/f3d9dd/"},{name:"v-4f5baf9f",path:"/pages/e7db5c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4f5baf9f").then(t)}},{path:"/pages/e7db5c/index.html",redirect:"/pages/e7db5c/"},{path:"/10.大前端/1030.Node/1030103.转-commander.html",redirect:"/pages/e7db5c/"},{name:"v-7e248577",path:"/pages/147a7a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7e248577").then(t)}},{path:"/pages/147a7a/index.html",redirect:"/pages/147a7a/"},{path:"/10.大前端/1030.Node/1030108.lerna.html",redirect:"/pages/147a7a/"},{name:"v-2718b826",path:"/pages/34a68b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2718b826").then(t)}},{path:"/pages/34a68b/index.html",redirect:"/pages/34a68b/"},{path:"/10.大前端/1030.Node/1030105.制作自己的npm包.html",redirect:"/pages/34a68b/"},{name:"v-3046ee2f",path:"/pages/8c0e85/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3046ee2f").then(t)}},{path:"/pages/8c0e85/index.html",redirect:"/pages/8c0e85/"},{path:"/10.大前端/1030.Node/1030109.lerna - Lerna an Nx.html",redirect:"/pages/8c0e85/"},{name:"v-6f25eb68",path:"/pages/6bc0b9/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6f25eb68").then(t)}},{path:"/pages/6bc0b9/index.html",redirect:"/pages/6bc0b9/"},{path:"/10.大前端/1030.Node/1030110.lerna - 功能点.html",redirect:"/pages/6bc0b9/"},{name:"v-4b840afb",path:"/pages/f377d0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4b840afb").then(t)}},{path:"/pages/f377d0/index.html",redirect:"/pages/f377d0/"},{path:"/10.大前端/1030.Node/1030111.lerna API参考.html",redirect:"/pages/f377d0/"},{name:"v-64765687",path:"/pages/96c6f8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-64765687").then(t)}},{path:"/pages/96c6f8/index.html",redirect:"/pages/96c6f8/"},{path:"/10.大前端/1030.Node/103020.pnpm 学习.html",redirect:"/pages/96c6f8/"},{name:"v-dff38a1a",path:"/pages/3de397/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-dff38a1a").then(t)}},{path:"/pages/3de397/index.html",redirect:"/pages/3de397/"},{path:"/10.大前端/1030.Node/1030200.Egg.js 技巧 问题集合.html",redirect:"/pages/3de397/"},{name:"v-44c16328",path:"/pages/8743eb/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-44c16328").then(t)}},{path:"/pages/8743eb/index.html",redirect:"/pages/8743eb/"},{path:"/10.大前端/1030.Node/103021.pnpm 使用及问题处理.html",redirect:"/pages/8743eb/"},{name:"v-b64ba72e",path:"/pages/efacd5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b64ba72e").then(t)}},{path:"/pages/efacd5/index.html",redirect:"/pages/efacd5/"},{path:"/10.大前端/1030.Node/1030210.Node+vue打造全栈资源分享网站.html",redirect:"/pages/efacd5/"},{name:"v-8f5bdd2c",path:"/pages/d15ce2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-8f5bdd2c").then(t)}},{path:"/pages/d15ce2/index.html",redirect:"/pages/d15ce2/"},{path:"/10.大前端/1030.Node/103022.npm yarn pnpm命令对比.html",redirect:"/pages/d15ce2/"},{name:"v-72dfb1fa",path:"/pages/a97403/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-72dfb1fa").then(t)}},{path:"/pages/a97403/index.html",redirect:"/pages/a97403/"},{path:"/10.大前端/1030.Node/1030341.脚手架核心流程开发.html",redirect:"/pages/a97403/"},{name:"v-4ada5ffa",path:"/pages/e20e84/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4ada5ffa").then(t)}},{path:"/pages/e20e84/index.html",redirect:"/pages/e20e84/"},{path:"/10.大前端/1030.Node/1030344.脚手架命令注册和执行过程开发.html",redirect:"/pages/e20e84/"},{name:"v-e94a892c",path:"/pages/037850/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e94a892c").then(t)}},{path:"/pages/037850/index.html",redirect:"/pages/037850/"},{path:"/10.大前端/1030.Node/103040.koa学习.html",redirect:"/pages/037850/"},{name:"v-25b79342",path:"/pages/3e0a1c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-25b79342").then(t)}},{path:"/pages/3e0a1c/index.html",redirect:"/pages/3e0a1c/"},{path:"/10.大前端/1030.Node/103041.restful api笔记.html",redirect:"/pages/3e0a1c/"},{name:"v-294fcdc0",path:"/pages/1210/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-294fcdc0").then(t)}},{path:"/pages/1210/index.html",redirect:"/pages/1210/"},{path:"/10.大前端/1030.Node/103050.Eggjs 技巧.html",redirect:"/pages/1210/"},{name:"v-18b829d6",path:"/pages/110928/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-18b829d6").then(t)}},{path:"/pages/110928/index.html",redirect:"/pages/110928/"},{path:"/10.大前端/1030.Node/103070.npm 使用记录.html",redirect:"/pages/110928/"},{name:"v-0107a901",path:"/pages/9da7c4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0107a901").then(t)}},{path:"/pages/9da7c4/index.html",redirect:"/pages/9da7c4/"},{path:"/10.大前端/1030.Node/103052.Sequelize 学习笔记.html",redirect:"/pages/9da7c4/"},{name:"v-7ae44890",path:"/pages/34d0c9/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7ae44890").then(t)}},{path:"/pages/34d0c9/index.html",redirect:"/pages/34d0c9/"},{path:"/10.大前端/1030.Node/103098.npm 仓库.html",redirect:"/pages/34d0c9/"},{name:"v-244826a4",path:"/pages/50e782/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-244826a4").then(t)}},{path:"/pages/50e782/index.html",redirect:"/pages/50e782/"},{path:"/10.大前端/1030.Node/103090.node 记错修复.html",redirect:"/pages/50e782/"},{name:"v-75a6e172",path:"/pages/53d17e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-75a6e172").then(t)}},{path:"/pages/53d17e/index.html",redirect:"/pages/53d17e/"},{path:"/10.大前端/1035.构建/1035005.webpack考点梳理.html",redirect:"/pages/53d17e/"},{name:"v-404acf5a",path:"/pages/d1a534/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-404acf5a").then(t)}},{path:"/pages/d1a534/index.html",redirect:"/pages/d1a534/"},{path:"/10.大前端/1035.构建/1035050.自制脚手架.html",redirect:"/pages/d1a534/"},{name:"v-0dbc8d1f",path:"/pages/cf415a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0dbc8d1f").then(t)}},{path:"/pages/cf415a/index.html",redirect:"/pages/cf415a/"},{path:"/10.大前端/1035.构建/1035010.项目基础建设.html",redirect:"/pages/cf415a/"},{name:"v-6c24507d",path:"/pages/890104/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6c24507d").then(t)}},{path:"/pages/890104/index.html",redirect:"/pages/890104/"},{path:"/10.大前端/1035.构建/1035200.babel.html",redirect:"/pages/890104/"},{name:"v-633514a6",path:"/pages/066240/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-633514a6").then(t)}},{path:"/pages/066240/index.html",redirect:"/pages/066240/"},{path:"/10.大前端/1035.构建/1035305.pnpm 配置.html",redirect:"/pages/066240/"},{name:"v-2b182e4d",path:"/pages/820652/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2b182e4d").then(t)}},{path:"/pages/820652/index.html",redirect:"/pages/820652/"},{path:"/10.大前端/1035.构建/1035100.webpack高级使用.html",redirect:"/pages/820652/"},{name:"v-2f04e1e9",path:"/pages/e3d23f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2f04e1e9").then(t)}},{path:"/pages/e3d23f/index.html",redirect:"/pages/e3d23f/"},{path:"/10.大前端/1040.Vue/1040021.vue2中使用jsx.html",redirect:"/pages/e3d23f/"},{name:"v-db787618",path:"/pages/d36e75/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-db787618").then(t)}},{path:"/pages/d36e75/index.html",redirect:"/pages/d36e75/"},{path:"/10.大前端/1040.Vue/104005.持久化存储实时读取.html",redirect:"/pages/d36e75/"},{name:"v-69702e1b",path:"/pages/e3bb47/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-69702e1b").then(t)}},{path:"/pages/e3bb47/index.html",redirect:"/pages/e3bb47/"},{path:"/10.大前端/1040.Vue/104006.vue自适应布局.html",redirect:"/pages/e3bb47/"},{name:"v-36ccea9d",path:"/pages/a55fba/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-36ccea9d").then(t)}},{path:"/pages/a55fba/index.html",redirect:"/pages/a55fba/"},{path:"/10.大前端/1040.Vue/104009.Vue 中后台表格的增删改查统一解决方案(mixin版).html",redirect:"/pages/a55fba/"},{name:"v-19fa0d03",path:"/pages/af219f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-19fa0d03").then(t)}},{path:"/pages/af219f/index.html",redirect:"/pages/af219f/"},{path:"/10.大前端/1040.Vue/1040091.Vue 放弃繁琐的render函数，拥抱JSX.html",redirect:"/pages/af219f/"},{name:"v-723f17bb",path:"/pages/3de341/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-723f17bb").then(t)}},{path:"/pages/3de341/index.html",redirect:"/pages/3de341/"},{path:"/10.大前端/1040.Vue/104010.Vue 中后台表格的增删改查同一解决方案(组件封装版).html",redirect:"/pages/3de341/"},{name:"v-e0422a10",path:"/pages/ab52cb/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e0422a10").then(t)}},{path:"/pages/ab52cb/index.html",redirect:"/pages/ab52cb/"},{path:"/10.大前端/1040.Vue/1040102.组件设计步骤.html",redirect:"/pages/ab52cb/"},{name:"v-4fa1e33d",path:"/pages/b97f0c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4fa1e33d").then(t)}},{path:"/pages/b97f0c/index.html",redirect:"/pages/b97f0c/"},{path:"/10.大前端/1040.Vue/104011.Vue Render自定义table单元格内容.html",redirect:"/pages/b97f0c/"},{name:"v-875c577c",path:"/pages/479249/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-875c577c").then(t)}},{path:"/pages/479249/index.html",redirect:"/pages/479249/"},{path:"/10.大前端/1040.Vue/104012.项目初始化编码规范(eslint,prettier等).html",redirect:"/pages/479249/"},{name:"v-7e456407",path:"/pages/037c03/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7e456407").then(t)}},{path:"/pages/037c03/index.html",redirect:"/pages/037c03/"},{path:"/10.大前端/1040.Vue/104020.vue element-ui 换肤功能开发.html",redirect:"/pages/037c03/"},{name:"v-6eab398b",path:"/pages/53c4a8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6eab398b").then(t)}},{path:"/pages/53c4a8/index.html",redirect:"/pages/53c4a8/"},{path:"/10.大前端/1040.Vue/1040202.倒计时验证.html",redirect:"/pages/53c4a8/"},{name:"v-a1181280",path:"/pages/5ae239/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a1181280").then(t)}},{path:"/pages/5ae239/index.html",redirect:"/pages/5ae239/"},{path:"/10.大前端/1040.Vue/104021.vue element 定义多种主题实现换肤.html",redirect:"/pages/5ae239/"},{name:"v-c4bc892a",path:"/pages/9c2ca3/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c4bc892a").then(t)}},{path:"/pages/9c2ca3/index.html",redirect:"/pages/9c2ca3/"},{path:"/10.大前端/1040.Vue/1040210.Vue中computed和watch的区别.html",redirect:"/pages/9c2ca3/"},{name:"v-a438f52e",path:"/pages/66e402/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a438f52e").then(t)}},{path:"/pages/66e402/index.html",redirect:"/pages/66e402/"},{path:"/10.大前端/1040.Vue/104023.大屏自适应容器.html",redirect:"/pages/66e402/"},{name:"v-6543965a",path:"/pages/cb8f80/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6543965a").then(t)}},{path:"/pages/cb8f80/index.html",redirect:"/pages/cb8f80/"},{path:"/10.大前端/1040.Vue/104025.el-upload 自定义上传进度.html",redirect:"/pages/cb8f80/"},{name:"v-20786cca",path:"/pages/a00f46/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-20786cca").then(t)}},{path:"/pages/a00f46/index.html",redirect:"/pages/a00f46/"},{path:"/10.大前端/1040.Vue/104030.vue3初学注意点.html",redirect:"/pages/a00f46/"},{name:"v-755fb43e",path:"/pages/ec68c1/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-755fb43e").then(t)}},{path:"/pages/ec68c1/index.html",redirect:"/pages/ec68c1/"},{path:"/10.大前端/1040.Vue/1040300.vue3面试聚焦.html",redirect:"/pages/ec68c1/"},{name:"v-42425032",path:"/pages/66bb43/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-42425032").then(t)}},{path:"/pages/66bb43/index.html",redirect:"/pages/66bb43/"},{path:"/10.大前端/1040.Vue/104031.vue3 hooks 自适应可视化大屏.html",redirect:"/pages/66bb43/"},{name:"v-0e7f65be",path:"/pages/9902ec/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0e7f65be").then(t)}},{path:"/pages/9902ec/index.html",redirect:"/pages/9902ec/"},{path:"/10.大前端/1040.Vue/1040317.Vue3 原理 Proxy实现响应式.html",redirect:"/pages/9902ec/"},{name:"v-704812be",path:"/pages/b533ef/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-704812be").then(t)}},{path:"/pages/b533ef/index.html",redirect:"/pages/b533ef/"},{path:"/10.大前端/1040.Vue/104032.vue3 element-plus ant- design 自定义主题.html",redirect:"/pages/b533ef/"},{name:"v-72ab9b2a",path:"/pages/7f1090/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-72ab9b2a").then(t)}},{path:"/pages/7f1090/index.html",redirect:"/pages/7f1090/"},{path:"/10.大前端/1040.Vue/104060.博客开发.html",redirect:"/pages/7f1090/"},{name:"v-fcaea610",path:"/pages/c000dc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-fcaea610").then(t)}},{path:"/pages/c000dc/index.html",redirect:"/pages/c000dc/"},{path:"/10.大前端/1050.React/1050001.Awesome React.html",redirect:"/pages/c000dc/"},{name:"v-50865a3e",path:"/pages/bb127f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-50865a3e").then(t)}},{path:"/pages/bb127f/index.html",redirect:"/pages/bb127f/"},{path:"/10.大前端/1050.React/1050008.React 文档（vue版）.html",redirect:"/pages/bb127f/"},{name:"v-2db45745",path:"/pages/e13969/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2db45745").then(t)}},{path:"/pages/e13969/index.html",redirect:"/pages/e13969/"},{path:"/10.大前端/1050.React/1050040.react 项目开发注意事项.html",redirect:"/pages/e13969/"},{name:"v-1e91960a",path:"/pages/477bdb/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1e91960a").then(t)}},{path:"/pages/477bdb/index.html",redirect:"/pages/477bdb/"},{path:"/10.大前端/1050.React/1050042.常见功能实现.html",redirect:"/pages/477bdb/"},{name:"v-dc86c314",path:"/pages/803923/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-dc86c314").then(t)}},{path:"/pages/803923/index.html",redirect:"/pages/803923/"},{path:"/10.大前端/1050.React/1050044.react 常见坑集合.html",redirect:"/pages/803923/"},{name:"v-273d985e",path:"/pages/74ff3d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-273d985e").then(t)}},{path:"/pages/74ff3d/index.html",redirect:"/pages/74ff3d/"},{path:"/10.大前端/1050.React/1050060.ProComponents设计思路.html",redirect:"/pages/74ff3d/"},{name:"v-37738e87",path:"/pages/d8f9b4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-37738e87").then(t)}},{path:"/pages/d8f9b4/index.html",redirect:"/pages/d8f9b4/"},{path:"/10.大前端/1050.React/1050050.ant design pro 学习.html",redirect:"/pages/d8f9b4/"},{name:"v-2b38f21a",path:"/pages/1ed838/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2b38f21a").then(t)}},{path:"/pages/1ed838/index.html",redirect:"/pages/1ed838/"},{path:"/10.大前端/1050.React/1050065.万条数据渲染优化.html",redirect:"/pages/1ed838/"},{name:"v-c2f34ac4",path:"/pages/6a4091/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c2f34ac4").then(t)}},{path:"/pages/6a4091/index.html",redirect:"/pages/6a4091/"},{path:"/10.大前端/1050.React/1050070.react hook 与 闭包.html",redirect:"/pages/6a4091/"},{name:"v-c4e89c56",path:"/pages/bfda29/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c4e89c56").then(t)}},{path:"/pages/bfda29/index.html",redirect:"/pages/bfda29/"},{path:"/10.大前端/1050.React/1050100.JSX.html",redirect:"/pages/bfda29/"},{name:"v-734dba6f",path:"/pages/c1e5fe/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-734dba6f").then(t)}},{path:"/pages/c1e5fe/index.html",redirect:"/pages/c1e5fe/"},{path:"/10.大前端/1050.React/1050101.React生命周期.html",redirect:"/pages/c1e5fe/"},{name:"v-11e4e95e",path:"/pages/b33eff/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-11e4e95e").then(t)}},{path:"/pages/b33eff/index.html",redirect:"/pages/b33eff/"},{path:"/10.大前端/1050.React/1050109.React 基本使用 setState.html",redirect:"/pages/b33eff/"},{name:"v-f2704616",path:"/pages/bca771/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-f2704616").then(t)}},{path:"/pages/bca771/index.html",redirect:"/pages/bca771/"},{path:"/10.大前端/1050.React/1050112.React 基本使用 组件生命周期.html",redirect:"/pages/bca771/"},{name:"v-b5463836",path:"/pages/be9b53/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b5463836").then(t)}},{path:"/pages/be9b53/index.html",redirect:"/pages/be9b53/"},{path:"/10.大前端/1050.React/1050119.React 高级使用 性能优化.html",redirect:"/pages/be9b53/"},{name:"v-3d549796",path:"/pages/3101a6/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3d549796").then(t)}},{path:"/pages/3101a6/index.html",redirect:"/pages/3101a6/"},{path:"/10.大前端/1050.React/1050124.React 高级使用 高阶组件.html",redirect:"/pages/3101a6/"},{name:"v-12cba644",path:"/pages/56c5a3/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-12cba644").then(t)}},{path:"/pages/56c5a3/index.html",redirect:"/pages/56c5a3/"},{path:"/10.大前端/1050.React/1050127.React Redux使用.html",redirect:"/pages/56c5a3/"},{name:"v-7adc269e",path:"/pages/62d6bf/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7adc269e").then(t)}},{path:"/pages/62d6bf/index.html",redirect:"/pages/62d6bf/"},{path:"/10.大前端/1050.React/1050132.react-router 使用.html",redirect:"/pages/62d6bf/"},{name:"v-2b460b22",path:"/pages/6cddc4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2b460b22").then(t)}},{path:"/pages/6cddc4/index.html",redirect:"/pages/6cddc4/"},{path:"/10.大前端/1050.React/1050150.React 原理.html",redirect:"/pages/6cddc4/"},{name:"v-3d78375a",path:"/pages/158846/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3d78375a").then(t)}},{path:"/pages/158846/index.html",redirect:"/pages/158846/"},{path:"/10.大前端/1050.React/1050201.React 面试题1.html",redirect:"/pages/158846/"},{name:"v-451b2d5a",path:"/pages/247d4c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-451b2d5a").then(t)}},{path:"/pages/247d4c/index.html",redirect:"/pages/247d4c/"},{path:"/10.大前端/1050.React/1050202.React 面试题2.html",redirect:"/pages/247d4c/"},{name:"v-4cbe235a",path:"/pages/f00d6f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4cbe235a").then(t)}},{path:"/pages/f00d6f/index.html",redirect:"/pages/f00d6f/"},{path:"/10.大前端/1050.React/1050203.React 面试题3.html",redirect:"/pages/f00d6f/"},{name:"v-5c040f5a",path:"/pages/d1bd46/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5c040f5a").then(t)}},{path:"/pages/d1bd46/index.html",redirect:"/pages/d1bd46/"},{path:"/10.大前端/1050.React/1050205.React 面试题5.html",redirect:"/pages/d1bd46/"},{name:"v-5cc78d4e",path:"/pages/96e286/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5cc78d4e").then(t)}},{path:"/pages/96e286/index.html",redirect:"/pages/96e286/"},{path:"/10.大前端/1050.React/1050401.仿jira项目笔记 项目起航：第5章 JWT、用户认证与异步请求.html",redirect:"/pages/96e286/"},{name:"v-38307c66",path:"/pages/bb30f8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-38307c66").then(t)}},{path:"/pages/bb30f8/index.html",redirect:"/pages/bb30f8/"},{path:"/10.大前端/1050.React/1050401.仿jira项目笔记 项目起航：项目初始化与配置.html",redirect:"/pages/bb30f8/"},{name:"v-2bd8c78e",path:"/pages/e398d0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2bd8c78e").then(t)}},{path:"/pages/e398d0/index.html",redirect:"/pages/e398d0/"},{path:"/10.大前端/1050.React/1050406.第6章 CSS 其实很简单 - 用 CSS-in-JS 添加样式.html",redirect:"/pages/e398d0/"},{name:"v-5492dfdc",path:"/pages/a9bba7/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5492dfdc").then(t)}},{path:"/pages/a9bba7/index.html",redirect:"/pages/a9bba7/"},{path:"/10.大前端/1050.React/1050408.第8章 Hook，路由，与 URL 状态管理.html",redirect:"/pages/a9bba7/"},{name:"v-f23f5676",path:"/pages/82ebb2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-f23f5676").then(t)}},{path:"/pages/82ebb2/index.html",redirect:"/pages/82ebb2/"},{path:"/10.大前端/1050.React/1050501.pro-components 源码学习.html",redirect:"/pages/82ebb2/"},{name:"v-411c38d0",path:"/pages/88bcac/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-411c38d0").then(t)}},{path:"/pages/88bcac/index.html",redirect:"/pages/88bcac/"},{path:"/10.大前端/1050.React/1050600.ant-design Spin组件封装.html",redirect:"/pages/88bcac/"},{name:"v-2f349092",path:"/pages/7db6a2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2f349092").then(t)}},{path:"/pages/7db6a2/index.html",redirect:"/pages/7db6a2/"},{path:"/10.大前端/1050.React/1050851.React 生命周期.html",redirect:"/pages/7db6a2/"},{name:"v-b2f966b2",path:"/pages/5e7846/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b2f966b2").then(t)}},{path:"/pages/5e7846/index.html",redirect:"/pages/5e7846/"},{path:"/10.大前端/1050.React/1510.Vue 放弃繁琐的render函数，拥抱JSX.html",redirect:"/pages/5e7846/"},{name:"v-e5fe87ee",path:"/pages/855e3e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e5fe87ee").then(t)}},{path:"/pages/855e3e/index.html",redirect:"/pages/855e3e/"},{path:"/10.大前端/1060.小程序/106002.微信小程序入门.html",redirect:"/pages/855e3e/"},{name:"v-384fdc07",path:"/pages/a18549/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-384fdc07").then(t)}},{path:"/pages/a18549/index.html",redirect:"/pages/a18549/"},{path:"/10.大前端/1060.小程序/1610.uniapp物联网无网络智能配对模块.html",redirect:"/pages/a18549/"},{name:"v-ba498c5e",path:"/pages/bca428/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-ba498c5e").then(t)}},{path:"/pages/bca428/index.html",redirect:"/pages/bca428/"},{path:"/10.大前端/1070.跨端/107000.uniapp最快入门.html",redirect:"/pages/bca428/"},{name:"v-51c53022",path:"/pages/44c230/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-51c53022").then(t)}},{path:"/pages/44c230/index.html",redirect:"/pages/44c230/"},{path:"/10.大前端/1070.跨端/107001.uniapp 项目基建.html",redirect:"/pages/44c230/"},{name:"v-259471da",path:"/pages/b4bd7f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-259471da").then(t)}},{path:"/pages/b4bd7f/index.html",redirect:"/pages/b4bd7f/"},{path:"/10.大前端/1070.跨端/107002.uniapp问题记录.html",redirect:"/pages/b4bd7f/"},{name:"v-bf002aaa",path:"/pages/0bf715/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-bf002aaa").then(t)}},{path:"/pages/0bf715/index.html",redirect:"/pages/0bf715/"},{path:"/10.大前端/1070.跨端/107010.uniapp物联网无网络智能配对模块.html",redirect:"/pages/0bf715/"},{name:"v-3101e03e",path:"/pages/0ba794/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3101e03e").then(t)}},{path:"/pages/0ba794/index.html",redirect:"/pages/0ba794/"},{path:"/10.大前端/1080.Electron/108010.桌面端程序Electron入门到熟练.html",redirect:"/pages/0ba794/"},{name:"v-957d58aa",path:"/pages/b4aa88/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-957d58aa").then(t)}},{path:"/pages/b4aa88/index.html",redirect:"/pages/b4aa88/"},{path:"/10.大前端/1080.Electron/10810.electron 学习使用.html",redirect:"/pages/b4aa88/"},{name:"v-07ea42ec",path:"/pages/1db4ef/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-07ea42ec").then(t)}},{path:"/pages/1db4ef/index.html",redirect:"/pages/1db4ef/"},{path:"/10.大前端/1085.WebGL&GIS/1085010.GIS前端开发常用网站收录.html",redirect:"/pages/1db4ef/"},{name:"v-0a701b72",path:"/pages/c04b9d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0a701b72").then(t)}},{path:"/pages/c04b9d/index.html",redirect:"/pages/c04b9d/"},{path:"/10.大前端/1085.WebGL&GIS/1086200.Cesium 学习.html",redirect:"/pages/c04b9d/"},{name:"v-1f897546",path:"/pages/1d1752/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1f897546").then(t)}},{path:"/pages/1d1752/index.html",redirect:"/pages/1d1752/"},{path:"/10.大前端/1085.WebGL&GIS/1086241.Cesium 应用各类型地理数据.html",redirect:"/pages/1d1752/"},{name:"v-db165b2e",path:"/pages/622cd4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-db165b2e").then(t)}},{path:"/pages/622cd4/index.html",redirect:"/pages/622cd4/"},{path:"/10.大前端/1090.浏览器/109001.在浏览器中直接使用npm包.html",redirect:"/pages/622cd4/"},{name:"v-640aa13f",path:"/pages/898648/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-640aa13f").then(t)}},{path:"/pages/898648/index.html",redirect:"/pages/898648/"},{path:"/10.大前端/1090.浏览器/109002.前端单页面应用实现服务端渲染.html",redirect:"/pages/898648/"},{name:"v-5c0a68a2",path:"/pages/7f0791/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5c0a68a2").then(t)}},{path:"/pages/7f0791/index.html",redirect:"/pages/7f0791/"},{path:"/10.大前端/1090.浏览器/109010.快速测试某个请求在浏览器中是否跨域.html",redirect:"/pages/7f0791/"},{name:"v-34298677",path:"/pages/72d700/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-34298677").then(t)}},{path:"/pages/72d700/index.html",redirect:"/pages/72d700/"},{path:"/10.大前端/1090.浏览器/109020.浏览器反debugger调试.html",redirect:"/pages/72d700/"},{name:"v-1ef80a76",path:"/pages/9837fb/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1ef80a76").then(t)}},{path:"/pages/9837fb/index.html",redirect:"/pages/9837fb/"},{path:"/10.大前端/1090.浏览器/1090200.浏览器密码自动填充样式.html",redirect:"/pages/9837fb/"},{name:"v-4688bc8e",path:"/pages/8861c4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4688bc8e").then(t)}},{path:"/pages/8861c4/index.html",redirect:"/pages/8861c4/"},{path:"/10.大前端/1090.浏览器/109021.浏览器debugger反爬虫.html",redirect:"/pages/8861c4/"},{name:"v-7273c368",path:"/pages/baaecc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7273c368").then(t)}},{path:"/pages/baaecc/index.html",redirect:"/pages/baaecc/"},{path:"/10.大前端/1095.面经/1095100.数据结构和算法 .html",redirect:"/pages/baaecc/"},{name:"v-34c872f9",path:"/pages/709041/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-34c872f9").then(t)}},{path:"/pages/709041/index.html",redirect:"/pages/709041/"},{path:"/10.大前端/1095.面经/1095101.项目构建.html",redirect:"/pages/709041/"},{name:"v-2e80dc0e",path:"/pages/3d6262/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2e80dc0e").then(t)}},{path:"/pages/3d6262/index.html",redirect:"/pages/3d6262/"},{path:"/10.大前端/1095.面经/1095102.javascript.html",redirect:"/pages/3d6262/"},{name:"v-31e87db2",path:"/pages/3dda66/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-31e87db2").then(t)}},{path:"/pages/3dda66/index.html",redirect:"/pages/3dda66/"},{path:"/10.大前端/1095.面经/1095120.一面.html",redirect:"/pages/3dda66/"},{name:"v-01de7511",path:"/pages/4188b2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-01de7511").then(t)}},{path:"/pages/4188b2/index.html",redirect:"/pages/4188b2/"},{path:"/10.大前端/1095.面经/1095122.三面 四面.html",redirect:"/pages/4188b2/"},{name:"v-f74f517e",path:"/pages/18e162/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-f74f517e").then(t)}},{path:"/pages/18e162/index.html",redirect:"/pages/18e162/"},{path:"/10.大前端/1095.面经/1095124.二面 三面.html",redirect:"/pages/18e162/"},{name:"v-ce83d69e",path:"/pages/49d96d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-ce83d69e").then(t)}},{path:"/pages/49d96d/index.html",redirect:"/pages/49d96d/"},{path:"/10.大前端/1095.面经/1095301.高级前端面试题 成都某公司.html",redirect:"/pages/49d96d/"},{name:"v-0433bcc2",path:"/pages/b63ad7/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0433bcc2").then(t)}},{path:"/pages/b63ad7/index.html",redirect:"/pages/b63ad7/"},{path:"/10.大前端/1095.面经/1095400.初级面试题.html",redirect:"/pages/b63ad7/"},{name:"v-432df53c",path:"/pages/641ae2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-432df53c").then(t)}},{path:"/pages/641ae2/index.html",redirect:"/pages/641ae2/"},{path:"/10.大前端/1095.面经/new.html",redirect:"/pages/641ae2/"},{name:"v-818c779e",path:"/pages/da94ea/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-818c779e").then(t)}},{path:"/pages/da94ea/index.html",redirect:"/pages/da94ea/"},{path:"/10.大前端/1095.面经/名词解释.html",redirect:"/pages/da94ea/"},{name:"v-58553816",path:"/pages/098047/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-58553816").then(t)}},{path:"/pages/098047/index.html",redirect:"/pages/098047/"},{path:"/10.大前端/1095.面经/手动实现ES6继承.html",redirect:"/pages/098047/"},{name:"v-f593c2e0",path:"/pages/d3f7cb/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-f593c2e0").then(t)}},{path:"/pages/d3f7cb/index.html",redirect:"/pages/d3f7cb/"},{path:"/10.大前端/1095.面经/打包构建.html",redirect:"/pages/d3f7cb/"},{name:"v-69595f78",path:"/pages/aa434e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-69595f78").then(t)}},{path:"/pages/aa434e/index.html",redirect:"/pages/aa434e/"},{path:"/10.大前端/1095.面经/框架.html",redirect:"/pages/aa434e/"},{name:"v-31ed20a4",path:"/pages/44fb57/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-31ed20a4").then(t)}},{path:"/pages/44fb57/index.html",redirect:"/pages/44fb57/"},{path:"/10.大前端/1095.面经/自治高级面试题.html",redirect:"/pages/44fb57/"},{name:"v-486aed96",path:"/pages/243fe4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-486aed96").then(t)}},{path:"/pages/243fe4/index.html",redirect:"/pages/243fe4/"},{path:"/10.大前端/1095.面经/面试模拟与技巧.html",redirect:"/pages/243fe4/"},{name:"v-1c6576d1",path:"/pages/7267bc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1c6576d1").then(t)}},{path:"/pages/7267bc/index.html",redirect:"/pages/7267bc/"},{path:"/10.大前端/1095.面经/项目.html",redirect:"/pages/7267bc/"},{name:"v-b990e9a2",path:"/pages/c14f49/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b990e9a2").then(t)}},{path:"/pages/c14f49/index.html",redirect:"/pages/c14f49/"},{path:"/10.大前端/1099.其他/1020158.编码之道-设计模式原则.html",redirect:"/pages/c14f49/"},{name:"v-a15a4686",path:"/pages/e8db4a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a15a4686").then(t)}},{path:"/pages/e8db4a/index.html",redirect:"/pages/e8db4a/"},{path:"/10.大前端/1099.其他/1020159.编码之道-设计模式分类.html",redirect:"/pages/e8db4a/"},{name:"v-59d8bdc0",path:"/pages/f041f4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-59d8bdc0").then(t)}},{path:"/pages/f041f4/index.html",redirect:"/pages/f041f4/"},{path:"/10.大前端/1099.其他/109010.标准化编程规范解决方案.html",redirect:"/pages/f041f4/"},{name:"v-6589c999",path:"/pages/95715c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6589c999").then(t)}},{path:"/pages/95715c/index.html",redirect:"/pages/95715c/"},{path:"/10.大前端/1099.其他/109900.微前端.html",redirect:"/pages/95715c/"},{name:"v-20b16aa4",path:"/pages/d3548d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-20b16aa4").then(t)}},{path:"/pages/d3548d/index.html",redirect:"/pages/d3548d/"},{path:"/10.大前端/1099.其他/1099014.性能优化.html",redirect:"/pages/d3548d/"},{name:"v-5b46cb28",path:"/pages/a6201f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5b46cb28").then(t)}},{path:"/pages/a6201f/index.html",redirect:"/pages/a6201f/"},{path:"/10.大前端/1099.其他/109901.使用qiankun问题记录.html",redirect:"/pages/a6201f/"},{name:"v-4173bc9e",path:"/pages/89993d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4173bc9e").then(t)}},{path:"/pages/89993d/index.html",redirect:"/pages/89993d/"},{path:"/10.大前端/1099.其他/1099020.编码原则.html",redirect:"/pages/89993d/"},{name:"v-ecc0819e",path:"/pages/a6b1ff/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-ecc0819e").then(t)}},{path:"/pages/a6b1ff/index.html",redirect:"/pages/a6b1ff/"},{path:"/10.大前端/1099.其他/1099100.Code review.html",redirect:"/pages/a6b1ff/"},{name:"v-6653d599",path:"/pages/a08d44/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6653d599").then(t)}},{path:"/pages/a08d44/index.html",redirect:"/pages/a08d44/"},{path:"/10.大前端/1099.其他/1099300.设计模式之工厂模式.html",redirect:"/pages/a08d44/"},{name:"v-54627bda",path:"/pages/992121/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-54627bda").then(t)}},{path:"/pages/992121/index.html",redirect:"/pages/992121/"},{path:"/10.大前端/1099.其他/1099300.需求收集.html",redirect:"/pages/992121/"},{name:"v-4602a18c",path:"/pages/997e94/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4602a18c").then(t)}},{path:"/pages/997e94/index.html",redirect:"/pages/997e94/"},{path:"/10.大前端/1099.其他/109980.serverless.html",redirect:"/pages/997e94/"},{name:"v-4d20f12a",path:"/pages/7e33b1/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4d20f12a").then(t)}},{path:"/pages/7e33b1/index.html",redirect:"/pages/7e33b1/"},{path:"/20.后端&运维/2001.Java/200100.java初学者maven项目建立.html",redirect:"/pages/7e33b1/"},{name:"v-e13e4a56",path:"/pages/560807/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e13e4a56").then(t)}},{path:"/pages/560807/index.html",redirect:"/pages/560807/"},{path:"/20.后端&运维/2001.Java/200110.Maven学习笔记.html",redirect:"/pages/560807/"},{name:"v-8c5f8bc2",path:"/pages/afae63/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-8c5f8bc2").then(t)}},{path:"/pages/afae63/index.html",redirect:"/pages/afae63/"},{path:"/20.后端&运维/2001.Java/200119.IDEA重置试用期.html",redirect:"/pages/afae63/"},{name:"v-55723356",path:"/pages/510f9f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-55723356").then(t)}},{path:"/pages/510f9f/index.html",redirect:"/pages/510f9f/"},{path:"/20.后端&运维/2001.Java/200120.idea 插件推荐.html",redirect:"/pages/510f9f/"},{name:"v-62615f84",path:"/pages/31a175/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-62615f84").then(t)}},{path:"/pages/31a175/index.html",redirect:"/pages/31a175/"},{path:"/20.后端&运维/2001.Java/200141.springboot项目学习笔记1 项目初始化.html",redirect:"/pages/31a175/"},{name:"v-f471752a",path:"/pages/2fbdac/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-f471752a").then(t)}},{path:"/pages/2fbdac/index.html",redirect:"/pages/2fbdac/"},{path:"/20.后端&运维/2001.Java/200142.springboot项目学习笔记2 用户模块.html",redirect:"/pages/2fbdac/"},{name:"v-62ff2e8c",path:"/pages/2d5f32/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-62ff2e8c").then(t)}},{path:"/pages/2d5f32/index.html",redirect:"/pages/2d5f32/"},{path:"/20.后端&运维/2001.Java/200143.springboot项目学习笔记3 分类模块.html",redirect:"/pages/2d5f32/"},{name:"v-5a174d42",path:"/pages/2bcf71/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5a174d42").then(t)}},{path:"/pages/2bcf71/index.html",redirect:"/pages/2bcf71/"},{path:"/20.后端&运维/2001.Java/200144.springboot项目学习笔记4 商品模块.html",redirect:"/pages/2bcf71/"},{name:"v-c709a762",path:"/pages/4d1b47/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c709a762").then(t)}},{path:"/pages/4d1b47/index.html",redirect:"/pages/4d1b47/"},{path:"/20.后端&运维/2001.Java/200146.springboot项目学习笔记6 订单模块.html",redirect:"/pages/4d1b47/"},{name:"v-67dd179f",path:"/pages/b4e72c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-67dd179f").then(t)}},{path:"/pages/b4e72c/index.html",redirect:"/pages/b4e72c/"},{path:"/20.后端&运维/2001.Java/200150.开源的物联网平台thingsboard部署.html",redirect:"/pages/b4e72c/"},{name:"v-883ac370",path:"/pages/3eb92e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-883ac370").then(t)}},{path:"/pages/3eb92e/index.html",redirect:"/pages/3eb92e/"},{path:"/20.后端&运维/2001.Java/201001.Docker 学习.html",redirect:"/pages/3eb92e/"},{name:"v-034a9719",path:"/pages/610cc4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-034a9719").then(t)}},{path:"/pages/610cc4/index.html",redirect:"/pages/610cc4/"},{path:"/20.后端&运维/2001.Java/2011002.java版本管理 jenv使用.html",redirect:"/pages/610cc4/"},{name:"v-3e8e1b39",path:"/pages/9309b2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3e8e1b39").then(t)}},{path:"/pages/9309b2/index.html",redirect:"/pages/9309b2/"},{path:"/20.后端&运维/2001.Java/2011003.mac中安装卸载java.html",redirect:"/pages/9309b2/"},{name:"v-7c096f14",path:"/pages/e1e503/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7c096f14").then(t)}},{path:"/pages/e1e503/index.html",redirect:"/pages/e1e503/"},{path:"/20.后端&运维/2001.Java/2011040.springboot学习上手.html",redirect:"/pages/e1e503/"},{name:"v-c9151fb2",path:"/pages/0c1a07/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c9151fb2").then(t)}},{path:"/pages/0c1a07/index.html",redirect:"/pages/0c1a07/"},{path:"/20.后端&运维/2010.Docker/2010005.docker安装并初始化.html",redirect:"/pages/0c1a07/"},{name:"v-5d7ae588",path:"/pages/3eb92e11/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5d7ae588").then(t)}},{path:"/pages/3eb92e11/index.html",redirect:"/pages/3eb92e11/"},{path:"/20.后端&运维/2010.Docker/201001.Docker 学习.html",redirect:"/pages/3eb92e11/"},{name:"v-0d9e81f2",path:"/pages/a668af/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0d9e81f2").then(t)}},{path:"/pages/a668af/index.html",redirect:"/pages/a668af/"},{path:"/20.后端&运维/2010.Docker/2010010.docker 清理.html",redirect:"/pages/a668af/"},{name:"v-5af49bfd",path:"/pages/daf659111/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5af49bfd").then(t)}},{path:"/pages/daf659111/index.html",redirect:"/pages/daf659111/"},{path:"/20.后端&运维/2010.Docker/201002.Docker docker-compose笔记.html",redirect:"/pages/daf659111/"},{name:"v-bcf39418",path:"/pages/2e1376/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-bcf39418").then(t)}},{path:"/pages/2e1376/index.html",redirect:"/pages/2e1376/"},{path:"/20.后端&运维/2010.Docker/201003.Docker 配置详解.html",redirect:"/pages/2e1376/"},{name:"v-586c4455",path:"/pages/fbc78f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-586c4455").then(t)}},{path:"/pages/fbc78f/index.html",redirect:"/pages/fbc78f/"},{path:"/20.后端&运维/2010.Docker/2010030.docker for mac 踩坑记录.html",redirect:"/pages/fbc78f/"},{name:"v-b7e1a42e",path:"/pages/fa752e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b7e1a42e").then(t)}},{path:"/pages/fa752e/index.html",redirect:"/pages/fa752e/"},{path:"/20.后端&运维/2010.Docker/2010050.docker 网桥bridge创建.html",redirect:"/pages/fa752e/"},{name:"v-6a1d7036",path:"/pages/5fa923/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6a1d7036").then(t)}},{path:"/pages/5fa923/index.html",redirect:"/pages/5fa923/"},{path:"/20.后端&运维/2010.Docker/2010082.小镜像制作.html",redirect:"/pages/5fa923/"},{name:"v-ff0fc978",path:"/pages/b5165e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-ff0fc978").then(t)}},{path:"/pages/b5165e/index.html",redirect:"/pages/b5165e/"},{path:"/20.后端&运维/2010.Docker/201020.mac本地挂载阿里云盘.html",redirect:"/pages/b5165e/"},{name:"v-7da55d0b",path:"/pages/99ab30/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7da55d0b").then(t)}},{path:"/pages/99ab30/index.html",redirect:"/pages/99ab30/"},{path:"/20.后端&运维/2015.Jenkins/2015050.Jenkins之gitlab hook自动构建.html",redirect:"/pages/99ab30/"},{name:"v-5e589024",path:"/pages/495502/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5e589024").then(t)}},{path:"/pages/495502/index.html",redirect:"/pages/495502/"},{path:"/20.后端&运维/2020.Nacos/202001.认识nacos.html",redirect:"/pages/495502/"},{name:"v-c72003c0",path:"/pages/24d9e5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c72003c0").then(t)}},{path:"/pages/24d9e5/index.html",redirect:"/pages/24d9e5/"},{path:"/20.后端&运维/2020.Nacos/2020010.初步学习Nacos.html",redirect:"/pages/24d9e5/"},{name:"v-91cef146",path:"/pages/71ced0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-91cef146").then(t)}},{path:"/pages/71ced0/index.html",redirect:"/pages/71ced0/"},{path:"/20.后端&运维/2030.SQL/203001.redis 笔记.html",redirect:"/pages/71ced0/"},{name:"v-707b90f2",path:"/pages/a43052/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-707b90f2").then(t)}},{path:"/pages/a43052/index.html",redirect:"/pages/a43052/"},{path:"/20.后端&运维/2030.SQL/203002.MySQL 一套猛如虎操作.html",redirect:"/pages/a43052/"},{name:"v-43e94077",path:"/pages/b2f8a9/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-43e94077").then(t)}},{path:"/pages/b2f8a9/index.html",redirect:"/pages/b2f8a9/"},{path:"/20.后端&运维/2030.SQL/2030020.mysql 查询.html",redirect:"/pages/b2f8a9/"},{name:"v-0559b8eb",path:"/pages/16554f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0559b8eb").then(t)}},{path:"/pages/16554f/index.html",redirect:"/pages/16554f/"},{path:"/20.后端&运维/2030.SQL/2030021.mysql三值运算.html",redirect:"/pages/16554f/"},{name:"v-5cd2ddfe",path:"/pages/115d7f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5cd2ddfe").then(t)}},{path:"/pages/115d7f/index.html",redirect:"/pages/115d7f/"},{path:"/20.后端&运维/2030.SQL/2030025.mysql 查.html",redirect:"/pages/115d7f/"},{name:"v-32e7e7a3",path:"/pages/026210/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-32e7e7a3").then(t)}},{path:"/pages/026210/index.html",redirect:"/pages/026210/"},{path:"/20.后端&运维/2040.Nginx/204000.https 配置.html",redirect:"/pages/026210/"},{name:"v-059fa4ea",path:"/pages/e7493e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-059fa4ea").then(t)}},{path:"/pages/e7493e/index.html",redirect:"/pages/e7493e/"},{path:"/20.后端&运维/2040.Nginx/2040001.Nginx 学习.html",redirect:"/pages/e7493e/"},{name:"v-2c66c560",path:"/pages/44c88a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2c66c560").then(t)}},{path:"/pages/44c88a/index.html",redirect:"/pages/44c88a/"},{path:"/20.后端&运维/2048.Windows/2048010.windows ubuntu子系统WSL使用.html",redirect:"/pages/44c88a/"},{name:"v-b5656fd2",path:"/pages/dcc15e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b5656fd2").then(t)}},{path:"/pages/dcc15e/index.html",redirect:"/pages/dcc15e/"},{path:"/20.后端&运维/2050.Linux/2050005.常用命令.html",redirect:"/pages/dcc15e/"},{name:"v-04c86028",path:"/pages/b25f61/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-04c86028").then(t)}},{path:"/pages/b25f61/index.html",redirect:"/pages/b25f61/"},{path:"/20.后端&运维/2050.Linux/2050009.centos7初始化.html",redirect:"/pages/b25f61/"},{name:"v-295cb760",path:"/pages/5f4150/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-295cb760").then(t)}},{path:"/pages/5f4150/index.html",redirect:"/pages/5f4150/"},{path:"/20.后端&运维/2050.Linux/205001.基础使用.html",redirect:"/pages/5f4150/"},{name:"v-72bebe02",path:"/pages/55c8f7/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-72bebe02").then(t)}},{path:"/pages/55c8f7/index.html",redirect:"/pages/55c8f7/"},{path:"/20.后端&运维/2050.Linux/2050010.拿到公司的服务器后.html",redirect:"/pages/55c8f7/"},{name:"v-354037c8",path:"/pages/e5da38/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-354037c8").then(t)}},{path:"/pages/e5da38/index.html",redirect:"/pages/e5da38/"},{path:"/20.后端&运维/2050.Linux/205002.文件及文件夹.html",redirect:"/pages/e5da38/"},{name:"v-cb406ede",path:"/pages/5c819e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-cb406ede").then(t)}},{path:"/pages/5c819e/index.html",redirect:"/pages/5c819e/"},{path:"/20.后端&运维/2050.Linux/205003.批量操作文件及文件夹.html",redirect:"/pages/5c819e/"},{name:"v-27ea0e5e",path:"/pages/ad7501/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-27ea0e5e").then(t)}},{path:"/pages/ad7501/index.html",redirect:"/pages/ad7501/"},{path:"/20.后端&运维/2050.Linux/2050055.linux 网络学习.html",redirect:"/pages/ad7501/"},{name:"v-2b5304ef",path:"/pages/9cd4ff/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2b5304ef").then(t)}},{path:"/pages/9cd4ff/index.html",redirect:"/pages/9cd4ff/"},{path:"/20.后端&运维/2055.虚拟机/2055055.玩转虚拟机VMware.html",redirect:"/pages/9cd4ff/"},{name:"v-54b89c43",path:"/pages/a13721/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-54b89c43").then(t)}},{path:"/pages/a13721/index.html",redirect:"/pages/a13721/"},{path:"/20.后端&运维/2055.虚拟机/2055105.exei usb 硬盘挂载.html",redirect:"/pages/a13721/"},{name:"v-6d4fda76",path:"/pages/8c2077/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6d4fda76").then(t)}},{path:"/pages/8c2077/index.html",redirect:"/pages/8c2077/"},{path:"/20.后端&运维/2055.虚拟机/2055110.esxi all in one.html",redirect:"/pages/8c2077/"},{name:"v-2a9e80c5",path:"/pages/e649f7/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2a9e80c5").then(t)}},{path:"/pages/e649f7/index.html",redirect:"/pages/e649f7/"},{path:"/20.后端&运维/2055.虚拟机/2055301.pve使用.html",redirect:"/pages/e649f7/"},{name:"v-1580d648",path:"/pages/75e39d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1580d648").then(t)}},{path:"/pages/75e39d/index.html",redirect:"/pages/75e39d/"},{path:"/20.后端&运维/2055.虚拟机/2055304.PVE 软路由及网络.html",redirect:"/pages/75e39d/"},{name:"v-3ac2d970",path:"/pages/2236ae/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3ac2d970").then(t)}},{path:"/pages/2236ae/index.html",redirect:"/pages/2236ae/"},{path:"/20.后端&运维/2055.虚拟机/2055311.闲置笔记本  单网口pve软路由.html",redirect:"/pages/2236ae/"},{name:"v-7cc5bcbe",path:"/pages/769dad/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7cc5bcbe").then(t)}},{path:"/pages/769dad/index.html",redirect:"/pages/769dad/"},{path:"/20.后端&运维/2060.Git/206000.Git 实战使用.html",redirect:"/pages/769dad/"},{name:"v-1a6a6e0c",path:"/pages/8a2edc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1a6a6e0c").then(t)}},{path:"/pages/8a2edc/index.html",redirect:"/pages/8a2edc/"},{path:"/20.后端&运维/2060.Git/206010.git flow 步骤解析.html",redirect:"/pages/8a2edc/"},{name:"v-7abe89ca",path:"/pages/5459d5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7abe89ca").then(t)}},{path:"/pages/5459d5/index.html",redirect:"/pages/5459d5/"},{path:"/20.后端&运维/2060.Git/2060100.GitHub使用Action自动同步Gitee.html",redirect:"/pages/5459d5/"},{name:"v-db69ce64",path:"/pages/d33fbc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-db69ce64").then(t)}},{path:"/pages/d33fbc/index.html",redirect:"/pages/d33fbc/"},{path:"/20.后端&运维/2060.Git/206011.git 同步.html",redirect:"/pages/d33fbc/"},{name:"v-18e34bdf",path:"/pages/2b68bd/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-18e34bdf").then(t)}},{path:"/pages/2b68bd/index.html",redirect:"/pages/2b68bd/"},{path:"/20.后端&运维/2060.Git/206012.git 提交信息规范.html",redirect:"/pages/2b68bd/"},{name:"v-f92ac00e",path:"/pages/486e07/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-f92ac00e").then(t)}},{path:"/pages/486e07/index.html",redirect:"/pages/486e07/"},{path:"/20.后端&运维/2060.Git/206013.Git Hooks.html",redirect:"/pages/486e07/"},{name:"v-255e2aba",path:"/pages/e40051/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-255e2aba").then(t)}},{path:"/pages/e40051/index.html",redirect:"/pages/e40051/"},{path:"/20.后端&运维/2060.Git/206020.gitignore.html",redirect:"/pages/e40051/"},{name:"v-121673ac",path:"/pages/1bbe48/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-121673ac").then(t)}},{path:"/pages/1bbe48/index.html",redirect:"/pages/1bbe48/"},{path:"/20.后端&运维/2070.网络/2070010.深夜 当公司无人的时候.html",redirect:"/pages/1bbe48/"},{name:"v-609104d0",path:"/pages/00b5be/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-609104d0").then(t)}},{path:"/pages/00b5be/index.html",redirect:"/pages/00b5be/"},{path:"/20.后端&运维/2070.网络/2070015.ipv6 端口转发.html",redirect:"/pages/00b5be/"},{name:"v-0d2b1e30",path:"/pages/77d482/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0d2b1e30").then(t)}},{path:"/pages/77d482/index.html",redirect:"/pages/77d482/"},{path:"/20.后端&运维/2070.网络/2070020.iKuai 使用.html",redirect:"/pages/77d482/"},{name:"v-80eb33f0",path:"/pages/225742/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-80eb33f0").then(t)}},{path:"/pages/225742/index.html",redirect:"/pages/225742/"},{path:"/20.后端&运维/2070.网络/2070030.openWrt 使用.html",redirect:"/pages/225742/"},{name:"v-66a8f2f4",path:"/pages/ca250b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-66a8f2f4").then(t)}},{path:"/pages/ca250b/index.html",redirect:"/pages/ca250b/"},{path:"/20.后端&运维/2090.其他/209000.宝塔hook自动部署应用.html",redirect:"/pages/ca250b/"},{name:"v-52b2ca12",path:"/pages/3bab56/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-52b2ca12").then(t)}},{path:"/pages/3bab56/index.html",redirect:"/pages/3bab56/"},{path:"/20.后端&运维/2090.其他/209001.开发环境(java&node&other)轻量，急速，全能配置.html",redirect:"/pages/3bab56/"},{name:"v-2536db2f",path:"/pages/7087a0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2536db2f").then(t)}},{path:"/pages/7087a0/index.html",redirect:"/pages/7087a0/"},{path:"/20.后端&运维/2090.其他/209010.session Vs JWT.html",redirect:"/pages/7087a0/"},{name:"v-7f096632",path:"/pages/f15b8a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7f096632").then(t)}},{path:"/pages/f15b8a/index.html",redirect:"/pages/f15b8a/"},{path:"/30.其他技术/3001.嵌入式/300101.Arduino开发 及常见知识储备.html",redirect:"/pages/f15b8a/"},{name:"v-7b4d5398",path:"/pages/801f8d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7b4d5398").then(t)}},{path:"/pages/801f8d/index.html",redirect:"/pages/801f8d/"},{path:"/30.其他技术/3001.嵌入式/300110.指纹模块.html",redirect:"/pages/801f8d/"},{name:"v-d905965c",path:"/pages/3dc564/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-d905965c").then(t)}},{path:"/pages/3dc564/index.html",redirect:"/pages/3dc564/"},{path:"/30.其他技术/3005.Android/3005001.初次使用Android Studio.html",redirect:"/pages/3dc564/"},{name:"v-2aefaf68",path:"/pages/a704e3/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2aefaf68").then(t)}},{path:"/pages/a704e3/index.html",redirect:"/pages/a704e3/"},{path:"/30.其他技术/3011.编辑器/2011010.键来.html",redirect:"/pages/a704e3/"},{name:"v-73200d26",path:"/pages/ae97cd/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-73200d26").then(t)}},{path:"/pages/ae97cd/index.html",redirect:"/pages/ae97cd/"},{path:"/30.其他技术/3011.编辑器/301101.vscode 使用技巧.html",redirect:"/pages/ae97cd/"},{name:"v-5fbf5ab8",path:"/pages/271cec/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5fbf5ab8").then(t)}},{path:"/pages/271cec/index.html",redirect:"/pages/271cec/"},{path:"/30.其他技术/3011.编辑器/301102.代码截击术.html",redirect:"/pages/271cec/"},{name:"v-e866ea6c",path:"/pages/aed421/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e866ea6c").then(t)}},{path:"/pages/aed421/index.html",redirect:"/pages/aed421/"},{path:"/30.其他技术/3011.编辑器/3011101.jetbrains 系列编辑器正则批量替换.html",redirect:"/pages/aed421/"},{name:"v-61745406",path:"/pages/a5eeb6/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-61745406").then(t)}},{path:"/pages/a5eeb6/index.html",redirect:"/pages/a5eeb6/"},{path:"/30.其他技术/3011.编辑器/3011200.vim日常使用记录.html",redirect:"/pages/a5eeb6/"},{name:"v-a44c2b60",path:"/pages/6ae971/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a44c2b60").then(t)}},{path:"/pages/6ae971/index.html",redirect:"/pages/6ae971/"},{path:"/30.其他技术/3020.产品&设计/3020050.微信私域.html",redirect:"/pages/6ae971/"},{name:"v-b9442570",path:"/pages/f72cd5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b9442570").then(t)}},{path:"/pages/f72cd5/index.html",redirect:"/pages/f72cd5/"},{path:"/30.其他技术/3020.产品&设计/302010.产品经理学习路线.html",redirect:"/pages/f72cd5/"},{name:"v-5e1134a2",path:"/pages/59c7ac/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5e1134a2").then(t)}},{path:"/pages/59c7ac/index.html",redirect:"/pages/59c7ac/"},{path:"/30.其他技术/3020.产品&设计/3020200.headlessui初探.html",redirect:"/pages/59c7ac/"},{name:"v-422ec5c3",path:"/pages/ebaf44/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-422ec5c3").then(t)}},{path:"/pages/ebaf44/index.html",redirect:"/pages/ebaf44/"},{path:"/30.其他技术/3030.测试/033001.fielder 学习.html",redirect:"/pages/ebaf44/"},{name:"v-3b5de10f",path:"/pages/2ea55b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3b5de10f").then(t)}},{path:"/pages/2ea55b/index.html",redirect:"/pages/2ea55b/"},{path:"/30.其他技术/3040.虚拟机/304001.nvware 使用.html",redirect:"/pages/2ea55b/"},{name:"v-4df87696",path:"/pages/0097e6/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4df87696").then(t)}},{path:"/pages/0097e6/index.html",redirect:"/pages/0097e6/"},{path:"/30.其他技术/3050.算法/305004.最长公共前缀.html",redirect:"/pages/0097e6/"},{name:"v-0613a89c",path:"/pages/7b3bc0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0613a89c").then(t)}},{path:"/pages/7b3bc0/index.html",redirect:"/pages/7b3bc0/"},{path:"/30.其他技术/3050.算法/305011. 盛最多水的容器.html",redirect:"/pages/7b3bc0/"},{name:"v-b3eeeae6",path:"/pages/acce5f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b3eeeae6").then(t)}},{path:"/pages/acce5f/index.html",redirect:"/pages/acce5f/"},{path:"/30.其他技术/3050.算法/30501108.IP 地址无效化.html",redirect:"/pages/acce5f/"},{name:"v-6cdc77c0",path:"/pages/91e133/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6cdc77c0").then(t)}},{path:"/pages/91e133/index.html",redirect:"/pages/91e133/"},{path:"/30.其他技术/3050.算法/30501221.分割平衡字符串.html",redirect:"/pages/91e133/"},{name:"v-45feb2d4",path:"/pages/5ed14a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-45feb2d4").then(t)}},{path:"/pages/5ed14a/index.html",redirect:"/pages/5ed14a/"},{path:"/30.其他技术/3050.算法/30501431.拥有最多糖果的孩子.html",redirect:"/pages/5ed14a/"},{name:"v-4ee676b6",path:"/pages/a6973a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4ee676b6").then(t)}},{path:"/pages/a6973a/index.html",redirect:"/pages/a6973a/"},{path:"/30.其他技术/3050.算法/30501470.重新排列数组.html",redirect:"/pages/a6973a/"},{name:"v-8ca4ec2c",path:"/pages/f25ca3/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-8ca4ec2c").then(t)}},{path:"/pages/f25ca3/index.html",redirect:"/pages/f25ca3/"},{path:"/30.其他技术/3050.算法/30501486.数组异或操作.html",redirect:"/pages/f25ca3/"},{name:"v-6035f632",path:"/pages/6304a6/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6035f632").then(t)}},{path:"/pages/6304a6/index.html",redirect:"/pages/6304a6/"},{path:"/30.其他技术/3050.算法/305015. 三数之和.html",redirect:"/pages/6304a6/"},{name:"v-0ca18440",path:"/pages/7ad13c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0ca18440").then(t)}},{path:"/pages/7ad13c/index.html",redirect:"/pages/7ad13c/"},{path:"/30.其他技术/3050.算法/30501512.好数对的数目.html",redirect:"/pages/7ad13c/"},{name:"v-0128ec18",path:"/pages/860565/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0128ec18").then(t)}},{path:"/pages/860565/index.html",redirect:"/pages/860565/"},{path:"/30.其他技术/3050.算法/30501603.设计停车系统.html",redirect:"/pages/860565/"},{name:"v-597c5320",path:"/pages/333bac/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-597c5320").then(t)}},{path:"/pages/333bac/index.html",redirect:"/pages/333bac/"},{path:"/30.其他技术/3050.算法/30501672.最富有客户的资产总量.html",redirect:"/pages/333bac/"},{name:"v-7f619821",path:"/pages/eba8e5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7f619821").then(t)}},{path:"/pages/eba8e5/index.html",redirect:"/pages/eba8e5/"},{path:"/30.其他技术/3050.算法/30501688.比赛中的配对次数.html",redirect:"/pages/eba8e5/"},{name:"v-a4adc414",path:"/pages/05769c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a4adc414").then(t)}},{path:"/pages/05769c/index.html",redirect:"/pages/05769c/"},{path:"/30.其他技术/3050.算法/30501720.解码异或后的数组.html",redirect:"/pages/05769c/"},{name:"v-0aa6bb20",path:"/pages/dbf116/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0aa6bb20").then(t)}},{path:"/pages/dbf116/index.html",redirect:"/pages/dbf116/"},{path:"/30.其他技术/3050.算法/30501741.查找每个员工花费的总时间.html",redirect:"/pages/dbf116/"},{name:"v-667a0d04",path:"/pages/c39a4c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-667a0d04").then(t)}},{path:"/pages/c39a4c/index.html",redirect:"/pages/c39a4c/"},{path:"/30.其他技术/3050.算法/305020. 有效的括号.html",redirect:"/pages/c39a4c/"},{name:"v-6d11b8ea",path:"/pages/722ed5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6d11b8ea").then(t)}},{path:"/pages/722ed5/index.html",redirect:"/pages/722ed5/"},{path:"/30.其他技术/3050.算法/305020.有效的括号.html",redirect:"/pages/722ed5/"},{name:"v-40b6895a",path:"/pages/17c8ea/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-40b6895a").then(t)}},{path:"/pages/17c8ea/index.html",redirect:"/pages/17c8ea/"},{path:"/30.其他技术/3050.算法/30502006.差的绝对值为-k-的数对数目.html",redirect:"/pages/17c8ea/"},{name:"v-b95ea328",path:"/pages/990dd4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b95ea328").then(t)}},{path:"/pages/990dd4/index.html",redirect:"/pages/990dd4/"},{path:"/30.其他技术/3050.算法/30502011.执行操作后的变量值.html",redirect:"/pages/990dd4/"},{name:"v-37b2aac6",path:"/pages/5b9fdf/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-37b2aac6").then(t)}},{path:"/pages/5b9fdf/index.html",redirect:"/pages/5b9fdf/"},{path:"/30.其他技术/3050.算法/305021.合并两个有序链表.html",redirect:"/pages/5b9fdf/"},{name:"v-450174da",path:"/pages/6867b8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-450174da").then(t)}},{path:"/pages/6867b8/index.html",redirect:"/pages/6867b8/"},{path:"/30.其他技术/3050.算法/30502114.句子中的最多单词数.html",redirect:"/pages/6867b8/"},{name:"v-0c2c6274",path:"/pages/ae5c30/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0c2c6274").then(t)}},{path:"/pages/ae5c30/index.html",redirect:"/pages/ae5c30/"},{path:"/30.其他技术/3050.算法/30502160.拆分数位后四位数字的最小和.html",redirect:"/pages/ae5c30/"},{name:"v-2b4555ef",path:"/pages/5e1bb5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2b4555ef").then(t)}},{path:"/pages/5e1bb5/index.html",redirect:"/pages/5e1bb5/"},{path:"/30.其他技术/3050.算法/30502194.excel-表中某个范围内的单元格.html",redirect:"/pages/5e1bb5/"},{name:"v-202ff976",path:"/pages/17e5f7/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-202ff976").then(t)}},{path:"/pages/17e5f7/index.html",redirect:"/pages/17e5f7/"},{path:"/30.其他技术/3050.算法/30502351.第一个出现两次的字母.html",redirect:"/pages/17e5f7/"},{name:"v-9bc8ee5e",path:"/pages/798e78/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-9bc8ee5e").then(t)}},{path:"/pages/798e78/index.html",redirect:"/pages/798e78/"},{path:"/30.其他技术/3050.算法/30502367.算术三元组的数目.html",redirect:"/pages/798e78/"},{name:"v-999c427e",path:"/pages/6862b5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-999c427e").then(t)}},{path:"/pages/6862b5/index.html",redirect:"/pages/6862b5/"},{path:"/30.其他技术/3050.算法/30502373.矩阵中的局部最大值.html",redirect:"/pages/6862b5/"},{name:"v-0ba7a38a",path:"/pages/dd448c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0ba7a38a").then(t)}},{path:"/pages/dd448c/index.html",redirect:"/pages/dd448c/"},{path:"/30.其他技术/3050.算法/3050239. 滑动窗口最大值.html",redirect:"/pages/dd448c/"},{name:"v-46dca920",path:"/pages/d46779/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-46dca920").then(t)}},{path:"/pages/d46779/index.html",redirect:"/pages/d46779/"},{path:"/30.其他技术/3050.算法/3050242.有效的字母异位词.html",redirect:"/pages/d46779/"},{name:"v-02fb82dd",path:"/pages/d2126f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-02fb82dd").then(t)}},{path:"/pages/d2126f/index.html",redirect:"/pages/d2126f/"},{path:"/30.其他技术/3050.算法/3050283. 移动零.html",redirect:"/pages/d2126f/"},{name:"v-39bb54b4",path:"/pages/e3ef00/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-39bb54b4").then(t)}},{path:"/pages/e3ef00/index.html",redirect:"/pages/e3ef00/"},{path:"/30.其他技术/3050.算法/305042.接雨水.html",redirect:"/pages/e3ef00/"},{name:"v-637a46ad",path:"/pages/e35155/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-637a46ad").then(t)}},{path:"/pages/e35155/index.html",redirect:"/pages/e35155/"},{path:"/30.其他技术/3050.算法/305049.字母异位词分组.html",redirect:"/pages/e35155/"},{name:"v-52830739",path:"/pages/6d7960/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-52830739").then(t)}},{path:"/pages/6d7960/index.html",redirect:"/pages/6d7960/"},{path:"/30.其他技术/3050.算法/305070. 爬楼梯.html",redirect:"/pages/6d7960/"},{name:"v-11f041eb",path:"/pages/8777d6/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-11f041eb").then(t)}},{path:"/pages/8777d6/index.html",redirect:"/pages/8777d6/"},{path:"/30.其他技术/3050.算法/3050771.宝石与石头.html",redirect:"/pages/8777d6/"},{name:"v-14a0ffc2",path:"/pages/e9e1e8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-14a0ffc2").then(t)}},{path:"/pages/e9e1e8/index.html",redirect:"/pages/e9e1e8/"},{path:"/30.其他技术/3050.算法/305084. 柱状图中最大的矩形.html",redirect:"/pages/e9e1e8/"},{name:"v-c4b199f0",path:"/pages/74033f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c4b199f0").then(t)}},{path:"/pages/74033f/index.html",redirect:"/pages/74033f/"},{path:"/30.其他技术/3050.算法/快速排序.html",redirect:"/pages/74033f/"},{name:"v-56a682c3",path:"/pages/96f8e3/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-56a682c3").then(t)}},{path:"/pages/96f8e3/index.html",redirect:"/pages/96f8e3/"},{path:"/30.其他技术/3050.算法/求连续最多的字符和次数.html",redirect:"/pages/96f8e3/"},{name:"v-7f3d874b",path:"/pages/041ec3/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7f3d874b").then(t)}},{path:"/pages/041ec3/index.html",redirect:"/pages/041ec3/"},{path:"/30.其他技术/3050.算法/获取1-10000所有的回文数.html",redirect:"/pages/041ec3/"},{name:"v-77a48bc4",path:"/pages/b387de/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-77a48bc4").then(t)}},{path:"/pages/b387de/index.html",redirect:"/pages/b387de/"},{path:"/30.其他技术/3080.网络/3080100.搭建内网穿透服务器 基于frp.html",redirect:"/pages/b387de/"},{name:"v-5a649ff4",path:"/pages/64da6e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5a649ff4").then(t)}},{path:"/pages/64da6e/index.html",redirect:"/pages/64da6e/"},{path:"/30.其他技术/3085.Nas/3085005.Nas作用规划.html",redirect:"/pages/64da6e/"},{name:"v-069bf93c",path:"/pages/b4fc6b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-069bf93c").then(t)}},{path:"/pages/b4fc6b/index.html",redirect:"/pages/b4fc6b/"},{path:"/30.其他技术/3085.Nas/3085010.磁盘整列了解一下.html",redirect:"/pages/b4fc6b/"},{name:"v-afbab932",path:"/pages/ba2cf0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-afbab932").then(t)}},{path:"/pages/ba2cf0/index.html",redirect:"/pages/ba2cf0/"},{path:"/30.其他技术/3085.Nas/3085050.windows硬盘挂载群晖（移动ipv6网络也能挂）.html",redirect:"/pages/ba2cf0/"},{name:"v-2aedc5db",path:"/pages/d7a5c5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2aedc5db").then(t)}},{path:"/pages/d7a5c5/index.html",redirect:"/pages/d7a5c5/"},{path:"/30.其他技术/3085.Nas/3085060.影音中心.html",redirect:"/pages/d7a5c5/"},{name:"v-37d9273c",path:"/pages/99aea4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-37d9273c").then(t)}},{path:"/pages/99aea4/index.html",redirect:"/pages/99aea4/"},{path:"/30.其他技术/3085.Nas/3085102.使用群晖全球站注册账户.html",redirect:"/pages/99aea4/"},{name:"v-fb185790",path:"/pages/957c8c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-fb185790").then(t)}},{path:"/pages/957c8c/index.html",redirect:"/pages/957c8c/"},{path:"/30.其他技术/3085.Nas/3085104.arpl 装载 dsm.html",redirect:"/pages/957c8c/"},{name:"v-758ceeb4",path:"/pages/03046a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-758ceeb4").then(t)}},{path:"/pages/03046a/index.html",redirect:"/pages/03046a/"},{path:"/30.其他技术/3085.Nas/3085103.arpl使用概览.html",redirect:"/pages/03046a/"},{name:"v-64a3be22",path:"/pages/b4250f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-64a3be22").then(t)}},{path:"/pages/b4250f/index.html",redirect:"/pages/b4250f/"},{path:"/30.其他技术/3085.Nas/3085105.我的all in one 分离.html",redirect:"/pages/b4250f/"},{name:"v-99e641ee",path:"/pages/3505b5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-99e641ee").then(t)}},{path:"/pages/3505b5/index.html",redirect:"/pages/3505b5/"},{path:"/30.其他技术/3085.Nas/3085141.群晖问题记录.html",redirect:"/pages/3505b5/"},{name:"v-fac0801c",path:"/pages/fc6308/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-fac0801c").then(t)}},{path:"/pages/fc6308/index.html",redirect:"/pages/fc6308/"},{path:"/30.其他技术/3085.安全/3085020.cc攻击.html",redirect:"/pages/fc6308/"},{name:"v-096b8acd",path:"/pages/edadd2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-096b8acd").then(t)}},{path:"/pages/edadd2/index.html",redirect:"/pages/edadd2/"},{path:"/30.其他技术/3088.Nas/1088205.我在使用群晖中的问题.html",redirect:"/pages/edadd2/"},{name:"v-c7da08e8",path:"/pages/494851/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c7da08e8").then(t)}},{path:"/pages/494851/index.html",redirect:"/pages/494851/"},{path:"/30.其他技术/3088.Nas/3088101.esxi 硬盘直通 黑群晖.html",redirect:"/pages/494851/"},{name:"v-830953a2",path:"/pages/6f5e8b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-830953a2").then(t)}},{path:"/pages/6f5e8b/index.html",redirect:"/pages/6f5e8b/"},{path:"/30.其他技术/3088.Nas/3088200.黑群晖nas-tools使用.html",redirect:"/pages/6f5e8b/"},{name:"v-2f1c16fe",path:"/pages/7cd537/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2f1c16fe").then(t)}},{path:"/pages/7cd537/index.html",redirect:"/pages/7cd537/"},{path:"/30.其他技术/3088.Nas/3088201.黑群晖安装.html",redirect:"/pages/7cd537/"},{name:"v-843e79e6",path:"/pages/0f2be8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-843e79e6").then(t)}},{path:"/pages/0f2be8/index.html",redirect:"/pages/0f2be8/"},{path:"/30.其他技术/3088.Nas/3088204.磁盘阵列.html",redirect:"/pages/0f2be8/"},{name:"v-056c5481",path:"/pages/1f9c44/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-056c5481").then(t)}},{path:"/pages/1f9c44/index.html",redirect:"/pages/1f9c44/"},{path:"/30.其他技术/3088.Nas/3088301.群晖Docker版Jellyfin+TMM刮削器.html",redirect:"/pages/1f9c44/"},{name:"v-44d36276",path:"/pages/dd4d32/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-44d36276").then(t)}},{path:"/pages/dd4d32/index.html",redirect:"/pages/dd4d32/"},{path:"/30.其他技术/3088.Nas/3099202.黑群晖基础使用.html",redirect:"/pages/dd4d32/"},{name:"v-79b275fd",path:"/pages/961bf8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-79b275fd").then(t)}},{path:"/pages/961bf8/index.html",redirect:"/pages/961bf8/"},{path:"/30.其他技术/3088.Nas/3099205.群辉自动备份微信备份文件.html",redirect:"/pages/961bf8/"},{name:"v-a5adc4d6",path:"/pages/c508da/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a5adc4d6").then(t)}},{path:"/pages/c508da/index.html",redirect:"/pages/c508da/"},{path:"/30.其他技术/3090.硬件/1090050.网卡选配指南.html",redirect:"/pages/c508da/"},{name:"v-3a0ac19e",path:"/pages/a352ca/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3a0ac19e").then(t)}},{path:"/pages/a352ca/index.html",redirect:"/pages/a352ca/"},{path:"/30.其他技术/3090.硬件/3090020.到手的新硬盘最佳校验方式.html",redirect:"/pages/a352ca/"},{name:"v-3a1e5206",path:"/pages/f91b53/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3a1e5206").then(t)}},{path:"/pages/f91b53/index.html",redirect:"/pages/f91b53/"},{path:"/30.其他技术/3090.硬件/3090022.硬盘检测工具 Victoria 简单使用教程，Victoria 无响应？无法扫描？.html",redirect:"/pages/f91b53/"},{name:"v-7dcec107",path:"/pages/ca1134/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-7dcec107").then(t)}},{path:"/pages/ca1134/index.html",redirect:"/pages/ca1134/"},{path:"/30.其他技术/3090.硬件/3090040.硬盘选配指南.html",redirect:"/pages/ca1134/"},{name:"v-c7488666",path:"/pages/ea2081/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c7488666").then(t)}},{path:"/pages/ea2081/index.html",redirect:"/pages/ea2081/"},{path:"/30.其他技术/3092.CDCI/3092010.环境.html",redirect:"/pages/ea2081/"},{name:"v-8dd3c12e",path:"/pages/cb780b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-8dd3c12e").then(t)}},{path:"/pages/cb780b/index.html",redirect:"/pages/cb780b/"},{path:"/30.其他技术/3095.团队管理/3095.知识库.html",redirect:"/pages/cb780b/"},{name:"v-859c6816",path:"/pages/b7d80d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-859c6816").then(t)}},{path:"/pages/b7d80d/index.html",redirect:"/pages/b7d80d/"},{path:"/30.其他技术/3095.团队管理/3095020.技术设计文档.html",redirect:"/pages/b7d80d/"},{name:"v-c95955ea",path:"/pages/5e8584/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c95955ea").then(t)}},{path:"/pages/5e8584/index.html",redirect:"/pages/5e8584/"},{path:"/30.其他技术/3095.破解/3095011.技能人才评价工作网pdf文件下载方法.html",redirect:"/pages/5e8584/"},{name:"v-4b8583be",path:"/pages/199a32/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4b8583be").then(t)}},{path:"/pages/199a32/index.html",redirect:"/pages/199a32/"},{path:"/30.其他技术/3098.建筑/3098010.自建房_2混凝土施工技术准备.html",redirect:"/pages/199a32/"},{name:"v-0de0e66d",path:"/pages/0dc79d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0de0e66d").then(t)}},{path:"/pages/0dc79d/index.html",redirect:"/pages/0dc79d/"},{path:"/30.其他技术/309901.clash-rule最佳配置.html",redirect:"/pages/0dc79d/"},{name:"v-954f96d4",path:"/pages/9ac756/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-954f96d4").then(t)}},{path:"/pages/9ac756/index.html",redirect:"/pages/9ac756/"},{path:"/30.其他技术/309910.个人书签.html",redirect:"/pages/9ac756/"},{name:"v-70523ffb",path:"/pages/2bb4d0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-70523ffb").then(t)}},{path:"/pages/2bb4d0/index.html",redirect:"/pages/2bb4d0/"},{path:"/30.其他技术/​3092.软件巧用/3092011.PicGo 使用.html",redirect:"/pages/2bb4d0/"},{name:"v-61f0d178",path:"/pages/56b599/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-61f0d178").then(t)}},{path:"/pages/56b599/index.html",redirect:"/pages/56b599/"},{path:"/40.生活/0401.苹果生态/0400.产品使用/040010.罗技 Logitech G Hub 使用技巧.html",redirect:"/pages/56b599/"},{name:"v-5f1658aa",path:"/pages/088ab9/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5f1658aa").then(t)}},{path:"/pages/088ab9/index.html",redirect:"/pages/088ab9/"},{path:"/40.生活/0401.苹果生态/040101.mac 软件收藏.html",redirect:"/pages/088ab9/"},{name:"v-36e6cf13",path:"/pages/6361a7/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-36e6cf13").then(t)}},{path:"/pages/6361a7/index.html",redirect:"/pages/6361a7/"},{path:"/40.生活/0401.苹果生态/040102.mac 使用技巧.html",redirect:"/pages/6361a7/"},{name:"v-c1d0aba0",path:"/pages/7f2b78/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c1d0aba0").then(t)}},{path:"/pages/7f2b78/index.html",redirect:"/pages/7f2b78/"},{path:"/40.生活/0401.苹果生态/040105.自带输入法快捷打出当前时间.html",redirect:"/pages/7f2b78/"},{name:"v-2804e650",path:"/pages/32e548/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2804e650").then(t)}},{path:"/pages/32e548/index.html",redirect:"/pages/32e548/"},{path:"/40.生活/0401.苹果生态/040106.查看占用端口的程序.html",redirect:"/pages/32e548/"},{name:"v-be6ea94c",path:"/pages/df5cb0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-be6ea94c").then(t)}},{path:"/pages/df5cb0/index.html",redirect:"/pages/df5cb0/"},{path:"/40.生活/0401.苹果生态/040110.生活小帮手 打造个人自动化.html",redirect:"/pages/df5cb0/"},{name:"v-2f59633d",path:"/pages/3e0879/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2f59633d").then(t)}},{path:"/pages/3e0879/index.html",redirect:"/pages/3e0879/"},{path:"/40.生活/04100.家庭网络/40100010.常见网络设备.html",redirect:"/pages/3e0879/"},{name:"v-44f90c84",path:"/pages/19e0c4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-44f90c84").then(t)}},{path:"/pages/19e0c4/index.html",redirect:"/pages/19e0c4/"},{path:"/40.生活/04100.家庭网络/40100011.光猫使用.html",redirect:"/pages/19e0c4/"},{name:"v-109fad4a",path:"/pages/646b79/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-109fad4a").then(t)}},{path:"/pages/646b79/index.html",redirect:"/pages/646b79/"},{path:"/40.生活/04100.家庭网络/40100015.常人不知道的网络设备_软.html",redirect:"/pages/646b79/"},{name:"v-0009ed72",path:"/pages/ddb22e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0009ed72").then(t)}},{path:"/pages/ddb22e/index.html",redirect:"/pages/ddb22e/"},{path:"/40.生活/04100.家庭网络/40100020.家庭网络.html",redirect:"/pages/ddb22e/"},{name:"v-253cad4c",path:"/pages/b3b9d4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-253cad4c").then(t)}},{path:"/pages/b3b9d4/index.html",redirect:"/pages/b3b9d4/"},{path:"/40.生活/04100.家庭网络/4010009.网线接线.html",redirect:"/pages/b3b9d4/"},{name:"v-67a409f4",path:"/pages/553b8f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-67a409f4").then(t)}},{path:"/pages/553b8f/index.html",redirect:"/pages/553b8f/"},{path:"/40.生活/04100.家庭网络/4010021.PVE  AIO教程.html",redirect:"/pages/553b8f/"},{name:"v-1b409232",path:"/pages/b45103/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1b409232").then(t)}},{path:"/pages/b45103/index.html",redirect:"/pages/b45103/"},{path:"/40.生活/04100.家庭网络/4010022.家庭网络 拓扑图.html",redirect:"/pages/b45103/"},{name:"v-c977ad84",path:"/pages/db2434/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c977ad84").then(t)}},{path:"/pages/db2434/index.html",redirect:"/pages/db2434/"},{path:"/40.生活/04100.家庭网络/4010023.jellyfin使用.html",redirect:"/pages/db2434/"},{name:"v-645905ee",path:"/pages/cb233a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-645905ee").then(t)}},{path:"/pages/cb233a/index.html",redirect:"/pages/cb233a/"},{path:"/40.生活/04100.家庭网络/4010024.jellyfin 看电视.html",redirect:"/pages/cb233a/"},{name:"v-3830fac4",path:"/pages/9bfa8b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3830fac4").then(t)}},{path:"/pages/9bfa8b/index.html",redirect:"/pages/9bfa8b/"},{path:"/40.生活/04100.家庭网络/4010040.exei使用.html",redirect:"/pages/9bfa8b/"},{name:"v-6665e6f8",path:"/pages/264093/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6665e6f8").then(t)}},{path:"/pages/264093/index.html",redirect:"/pages/264093/"},{path:"/40.生活/04100.家庭网络/4010050.影音中心.html",redirect:"/pages/264093/"},{name:"v-41806177",path:"/pages/bbc229/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-41806177").then(t)}},{path:"/pages/bbc229/index.html",redirect:"/pages/bbc229/"},{path:"/40.生活/04100.家庭网络/4010055.影音中心 nastools使用.html",redirect:"/pages/bbc229/"},{name:"v-4da71f67",path:"/pages/b96bd5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4da71f67").then(t)}},{path:"/pages/b96bd5/index.html",redirect:"/pages/b96bd5/"},{path:"/40.生活/04100.家庭网络/4010060.媒体服务器.html",redirect:"/pages/b96bd5/"},{name:"v-67950ee7",path:"/pages/f51e0a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-67950ee7").then(t)}},{path:"/pages/f51e0a/index.html",redirect:"/pages/f51e0a/"},{path:"/40.生活/0411.如何成为开源项目的贡献者(提交PR).html",redirect:"/pages/f51e0a/"},{name:"v-61f6be49",path:"/pages/135624/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-61f6be49").then(t)}},{path:"/pages/135624/index.html",redirect:"/pages/135624/"},{path:"/40.生活/0480.百度网盘无需会员下载提速.html",redirect:"/pages/135624/"},{name:"v-31f67e68",path:"/pages/5e342f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-31f67e68").then(t)}},{path:"/pages/5e342f/index.html",redirect:"/pages/5e342f/"},{path:"/40.生活/0481.理想的笔记方式.html",redirect:"/pages/5e342f/"},{name:"v-15087347",path:"/pages/18e569/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-15087347").then(t)}},{path:"/pages/18e569/index.html",redirect:"/pages/18e569/"},{path:"/40.生活/0490.其他.html",redirect:"/pages/18e569/"},{name:"v-5ce2fd45",path:"/pages/294ba9/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5ce2fd45").then(t)}},{path:"/pages/294ba9/index.html",redirect:"/pages/294ba9/"},{path:"/40.生活/4010.陈列&整理/0420.规范性 条理命名.html",redirect:"/pages/294ba9/"},{name:"v-99641424",path:"/pages/3dad67/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-99641424").then(t)}},{path:"/pages/3dad67/index.html",redirect:"/pages/3dad67/"},{path:"/40.生活/4010.陈列&整理/4010020.个人软件归类存放及安装目录.html",redirect:"/pages/3dad67/"},{name:"v-acdd69cc",path:"/pages/046e76/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-acdd69cc").then(t)}},{path:"/pages/046e76/index.html",redirect:"/pages/046e76/"},{path:"/40.生活/4020.方法论/4020005.时间管理 GTD.html",redirect:"/pages/046e76/"},{name:"v-1d1bff6c",path:"/pages/236fbc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1d1bff6c").then(t)}},{path:"/pages/236fbc/index.html",redirect:"/pages/236fbc/"},{path:"/40.生活/4020.方法论/4020010.五色时间管理法.html",redirect:"/pages/236fbc/"},{name:"v-541ca9fa",path:"/pages/28f4e0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-541ca9fa").then(t)}},{path:"/pages/28f4e0/index.html",redirect:"/pages/28f4e0/"},{path:"/40.生活/4020.破解&福利/4020001.jetbrains系列软件一直试用方法.html",redirect:"/pages/28f4e0/"},{name:"v-034237ec",path:"/pages/599e6c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-034237ec").then(t)}},{path:"/pages/599e6c/index.html",redirect:"/pages/599e6c/"},{path:"/40.生活/4030.国内常用软件使用技巧/4030001.搜狗输入法自定义短语.html",redirect:"/pages/599e6c/"},{name:"v-e3860708",path:"/pages/850edc/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e3860708").then(t)}},{path:"/pages/850edc/index.html",redirect:"/pages/850edc/"},{path:"/40.生活/4050.病历/4050001.新冠感染记录.html",redirect:"/pages/850edc/"},{name:"v-19e29604",path:"/pages/ad9ff8/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-19e29604").then(t)}},{path:"/pages/ad9ff8/index.html",redirect:"/pages/ad9ff8/"},{path:"/40.生活/4060.英语学习/406010.词汇/406010010.英语的前世今生.html",redirect:"/pages/ad9ff8/"},{name:"v-29d30750",path:"/pages/706153/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-29d30750").then(t)}},{path:"/pages/706153/index.html",redirect:"/pages/706153/"},{path:"/40.生活/4080.薅羊毛/4080010.京东自动签到浇水领豆.html",redirect:"/pages/706153/"},{name:"v-621c5505",path:"/about/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-621c5505").then(t)}},{path:"/about/index.html",redirect:"/about/"},{path:"/50.关于我/关于我.html",redirect:"/about/"},{name:"v-0dcc91ac",path:"/pages/beb6c0bd8a66cea6/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0dcc91ac").then(t)}},{path:"/pages/beb6c0bd8a66cea6/index.html",redirect:"/pages/beb6c0bd8a66cea6/"},{path:"/60.收藏/01.网站.html",redirect:"/pages/beb6c0bd8a66cea6/"},{name:"v-3b3c077c",path:"/pages/47cf96/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3b3c077c").then(t)}},{path:"/pages/47cf96/index.html",redirect:"/pages/47cf96/"},{path:"/60.收藏/02.常用的前端轮子.html",redirect:"/pages/47cf96/"},{name:"v-1fb6a910",path:"/pages/163c07/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1fb6a910").then(t)}},{path:"/pages/163c07/index.html",redirect:"/pages/163c07/"},{path:"/60.收藏/03.JS库.html",redirect:"/pages/163c07/"},{name:"v-12a7b30e",path:"/pages/3990de/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-12a7b30e").then(t)}},{path:"/pages/3990de/index.html",redirect:"/pages/3990de/"},{path:"/60.收藏/04.CSS库.html",redirect:"/pages/3990de/"},{name:"v-b3163758",path:"/pages/4a895f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b3163758").then(t)}},{path:"/pages/4a895f/index.html",redirect:"/pages/4a895f/"},{path:"/60.收藏/300.vue3 生态收藏集.html",redirect:"/pages/4a895f/"},{name:"v-5d2542b4",path:"/resume/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5d2542b4").then(t)}},{path:"/resume/index.html",redirect:"/resume/"},{path:"/90.hidden/个人简历.html",redirect:"/resume/"},{name:"v-2676e328",path:"/resume/en/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2676e328").then(t)}},{path:"/resume/en/index.html",redirect:"/resume/en/"},{path:"/90.hidden/个人简历 (英文).html",redirect:"/resume/en/"},{name:"v-1a3dc34b",path:"/archives/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1a3dc34b").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-3f7728aa",path:"/categories/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3f7728aa").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-a53b626a",path:"/tags/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a53b626a").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-1bbcf022",path:"/pages/968f3e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-1bbcf022").then(t)}},{path:"/pages/968f3e/index.html",redirect:"/pages/968f3e/"},{path:"/_posts/故事/Telegram传奇：一个关于俄罗斯富豪、黑客、极权和阴谋的创业故事.html",redirect:"/pages/968f3e/"},{name:"v-0df4ca3d",path:"/pages/517331/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0df4ca3d").then(t)}},{path:"/pages/517331/index.html",redirect:"/pages/517331/"},{path:"/_posts/故事/窃钩者诛，窃国者侯.html",redirect:"/pages/517331/"},{name:"v-23ac94d8",path:"/pages/03f70d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-23ac94d8").then(t)}},{path:"/pages/03f70d/index.html",redirect:"/pages/03f70d/"},{path:"/_posts/随笔/享乐主义.html",redirect:"/pages/03f70d/"},{name:"v-b3e01fac",path:"/pages/4c0a7c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b3e01fac").then(t)}},{path:"/pages/4c0a7c/index.html",redirect:"/pages/4c0a7c/"},{path:"/_posts/随笔/你想活成什么样子.html",redirect:"/pages/4c0a7c/"},{name:"v-3dcfb846",path:"/pages/f2e63f/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3dcfb846").then(t)}},{path:"/pages/f2e63f/index.html",redirect:"/pages/f2e63f/"},{path:"/_posts/随笔/你知道的越多，不知道的也就越多.html",redirect:"/pages/f2e63f/"},{name:"v-2d09c694",path:"/pages/462671/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-2d09c694").then(t)}},{path:"/pages/462671/index.html",redirect:"/pages/462671/"},{path:"/_posts/随笔/苦中作乐.html",redirect:"/pages/462671/"},{name:"v-12c8c438",path:"/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-12c8c438").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-e89d809a",path:"/pages/f697a2/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e89d809a").then(t)}},{path:"/pages/f697a2/index.html",redirect:"/pages/f697a2/"},{path:"/《前端项目基础建设》笔记/1.前提规范.html",redirect:"/pages/f697a2/"},{name:"v-e175a41e",path:"/pages/7dd45e/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-e175a41e").then(t)}},{path:"/pages/7dd45e/index.html",redirect:"/pages/7dd45e/"},{path:"/《前端项目基础建设》笔记/100.vue项目实例演示.html",redirect:"/pages/7dd45e/"},{name:"v-a6df536c",path:"/pages/d642ef/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-a6df536c").then(t)}},{path:"/pages/d642ef/index.html",redirect:"/pages/d642ef/"},{path:"/《前端项目基础建设》笔记/30.eslint.html",redirect:"/pages/d642ef/"},{name:"v-46a7d210",path:"/pages/0aa7d0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-46a7d210").then(t)}},{path:"/pages/0aa7d0/index.html",redirect:"/pages/0aa7d0/"},{path:"/《前端项目基础建设》笔记/35.prettier.html",redirect:"/pages/0aa7d0/"},{name:"v-4a21bdcc",path:"/pages/f91a4d/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4a21bdcc").then(t)}},{path:"/pages/f91a4d/index.html",redirect:"/pages/f91a4d/"},{path:"/《前端项目基础建设》笔记/40.lint-staged.html",redirect:"/pages/f91a4d/"},{name:"v-92871f08",path:"/pages/f701f5/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-92871f08").then(t)}},{path:"/pages/f701f5/index.html",redirect:"/pages/f701f5/"},{path:"/《前端项目基础建设》笔记/90.jest测试.html",redirect:"/pages/f701f5/"},{name:"v-329e022a",path:"/pages/ef1443/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-329e022a").then(t)}},{path:"/pages/ef1443/index.html",redirect:"/pages/ef1443/"},{path:"/《前端项目基础建设》笔记/Git.html",redirect:"/pages/ef1443/"},{name:"v-0cf9197a",path:"/pages/84601b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0cf9197a").then(t)}},{path:"/pages/84601b/index.html",redirect:"/pages/84601b/"},{path:"/《前端项目基础建设》笔记/UI组件库.html",redirect:"/pages/84601b/"},{name:"v-72c19148",path:"/pages/8f916b/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-72c19148").then(t)}},{path:"/pages/8f916b/index.html",redirect:"/pages/8f916b/"},{path:"/《前端项目基础建设》笔记/css.html",redirect:"/pages/8f916b/"},{name:"v-52f64dfa",path:"/pages/3edcd6/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-52f64dfa").then(t)}},{path:"/pages/3edcd6/index.html",redirect:"/pages/3edcd6/"},{path:"/《前端项目基础建设》笔记/editorconfig.html",redirect:"/pages/3edcd6/"},{name:"v-6749114c",path:"/pages/35b9c4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-6749114c").then(t)}},{path:"/pages/35b9c4/index.html",redirect:"/pages/35b9c4/"},{path:"/《前端项目基础建设》笔记/http.html",redirect:"/pages/35b9c4/"},{name:"v-ea9fe824",path:"/pages/15c624/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-ea9fe824").then(t)}},{path:"/pages/15c624/index.html",redirect:"/pages/15c624/"},{path:"/《前端项目基础建设》笔记/other.html",redirect:"/pages/15c624/"},{name:"v-4b731cb4",path:"/pages/4b4af0/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-4b731cb4").then(t)}},{path:"/pages/4b4af0/index.html",redirect:"/pages/4b4af0/"},{path:"/《前端项目基础建设》笔记/stylelint.html",redirect:"/pages/4b4af0/"},{name:"v-0199cf76",path:"/pages/5e7a16/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-0199cf76").then(t)}},{path:"/pages/5e7a16/index.html",redirect:"/pages/5e7a16/"},{path:"/《前端项目基础建设》笔记/vue cli.html",redirect:"/pages/5e7a16/"},{name:"v-c6b66d0c",path:"/pages/a86f85/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c6b66d0c").then(t)}},{path:"/pages/a86f85/index.html",redirect:"/pages/a86f85/"},{path:"/《前端项目基础建设》笔记/vue-tool.html",redirect:"/pages/a86f85/"},{name:"v-73f1a00e",path:"/pages/f67bba/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-73f1a00e").then(t)}},{path:"/pages/f67bba/index.html",redirect:"/pages/f67bba/"},{path:"/《前端项目基础建设》笔记/函数库.html",redirect:"/pages/f67bba/"},{name:"v-03d101c4",path:"/pages/500a7a/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-03d101c4").then(t)}},{path:"/pages/500a7a/index.html",redirect:"/pages/500a7a/"},{path:"/《前端项目基础建设》笔记/浏览器.html",redirect:"/pages/500a7a/"},{name:"v-bce7f622",path:"/pages/578b2c/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-bce7f622").then(t)}},{path:"/pages/578b2c/index.html",redirect:"/pages/578b2c/"},{path:"/《前端项目基础建设》笔记/编辑器.html",redirect:"/pages/578b2c/"},{name:"v-c50b688c",path:"/pages/2bf1d4/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-c50b688c").then(t)}},{path:"/pages/2bf1d4/index.html",redirect:"/pages/2bf1d4/"},{path:"/《前端项目基础建设》笔记/自增函数.html",redirect:"/pages/2bf1d4/"},{name:"v-5ae38e48",path:"/web/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-5ae38e48").then(t)}},{path:"/web/index.html",redirect:"/web/"},{path:"/目录页/10.大前端.html",redirect:"/web/"},{name:"v-b795c8ee",path:"/backend-opt/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-b795c8ee").then(t)}},{path:"/backend-opt/index.html",redirect:"/backend-opt/"},{path:"/目录页/20.后端&运维.html",redirect:"/backend-opt/"},{name:"v-584eac56",path:"/other-tech/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-584eac56").then(t)}},{path:"/other-tech/index.html",redirect:"/other-tech/"},{path:"/目录页/30.其他.html",redirect:"/other-tech/"},{name:"v-3b3e454a",path:"/tech-live/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3b3e454a").then(t)}},{path:"/tech-live/index.html",redirect:"/tech-live/"},{path:"/目录页/40.生活.html",redirect:"/tech-live/"},{name:"v-3e623c1a",path:"/favorite/",component:yl,beforeEnter:(n,e,t)=>{ps("Layout","v-3e623c1a").then(t)}},{path:"/favorite/index.html",redirect:"/favorite/"},{path:"/目录页/60.收藏.html",redirect:"/favorite/"},{path:"*",component:yl}],kl={title:"",description:"",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"前端博客,个人技术博客,前端,前端开发,前端框架,web前端,前端面试题,技术文档,学习,面试,JavaScript,js,ES6,TypeScript,vue,python,css3,html5,Node,git,github,markdown"}],["meta",{name:"baidu-site-verification",content:"code-5CGlqw1B4p"}],["meta",{name:"google-site-verification",content:"PbO8RiLRwDnNwqNFNGnaxZnEFB3CqcGMCGoloYfQXV0"}],["meta",{name:"theme-color",content:"#65d1a0"}]],pages:[{title:"《前端项目基础建设》",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"《前端项目基础建设》笔记",imgUrl:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200112120340.png",description:"本章内容为博主在原教程基础上添加学习笔记，教程版权归原作者所有。来源：<a href='https://izhaong.com/note/infrastructure/' target='_blank'>前端基础建设</a>"}},title:"《前端项目基础建设》",date:"2020-01-12T11:51:53.000Z",permalink:"/note/infrastructure",article:!1,comment:!1,editLink:!1,author:{name:"izhaong",link:"https://github.com/izhaong"}},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/00.%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0.html",relativePath:"10.大前端/00.《前端项目基础建设》笔记.md",key:"v-3ea18074",path:"/note/infrastructure/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"H5 标签使用场景",frontmatter:{title:"H5 标签使用场景",date:"2021-12-30T13:32:19.000Z",permalink:"/pages/15af70/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101001.H5%20%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html",relativePath:"10.大前端/1010.HTML&CSS/101001.H5 标签使用场景.md",key:"v-19627c88",path:"/pages/15af70/",headers:[{level:2,title:"优缺点：",slug:"优缺点",normalizedTitle:"优缺点：",charIndex:2},{level:3,title:"HTML4",slug:"html4",normalizedTitle:"html4",charIndex:11},{level:3,title:"HTML5",slug:"html5",normalizedTitle:"html5",charIndex:119},{level:2,title:"常用标签的使用场景：",slug:"常用标签的使用场景",normalizedTitle:"常用标签的使用场景：",charIndex:240},{level:3,title:"header:",slug:"header",normalizedTitle:"header:",charIndex:255},{level:3,title:"nav：",slug:"nav",normalizedTitle:"nav：",charIndex:323},{level:3,title:"footer：",slug:"footer",normalizedTitle:"footer：",charIndex:400},{level:3,title:"section：",slug:"section",normalizedTitle:"section：",charIndex:484},{level:3,title:"article：",slug:"article",normalizedTitle:"article：",charIndex:601},{level:3,title:"aside:",slug:"aside",normalizedTitle:"aside:",charIndex:648},{level:3,title:"figure:",slug:"figure",normalizedTitle:"figure:",charIndex:788},{level:3,title:"time：",slug:"time",normalizedTitle:"time：",charIndex:895}],headersStr:"优缺点： HTML4 HTML5 常用标签的使用场景： header: nav： footer： section： article： aside: figure: time：",content:"# 优缺点：\n\n\n# HTML4\n\n\n\nHTML4 是采用“div+css”，网页的各个功能区域都是使用div标签进行排版的，而这些div的区分只是使用css类名称进行的，搜索引擎却不会读取他们，也不会理解类名称是有什么作用的。\n\n\n# HTML5\n\n\n\nHTML5的排版使用了新的标签，而这些标签都是可以被搜索引擎所理解的，这样，搜索引擎蜘蛛在我们的网页上爬行的时候，就会知道什么区域是顶部、什么区域是导航等等。这样就能够让搜索引擎更容易得到我们整个网站清晰的信息了。\n\n\n# 常用标签的使用场景：\n\n\n# header:\n\n定义了站点的头部信息，也就是页眉，一般放置网站的站点名称以及LOGO和导航栏。搜索引擎更容易识别站点的类型。\n\n\n# nav：\n\n定义导航链接，也就是栏目或者频道的链接。搜索引擎可以更好了解网站的信息架构，分类等。良好的信息架构，更有利于蜘蛛的爬行和权重的分布。\n\n\n# footer：\n\n定义了底部信息，也就是页脚。放置页脚导航，一些比如公司介绍，联系我们之类的信息。一般来说对网站比较不重要，有可能搜索引擎会降低其位置的权重。\n\n\n# section：\n\n该元素用来表示网页中不同的分区。优势体现在每个部分都可以有其独立的HTML标题。这可以让搜索引擎更好的了解网页的结构是如何划分的。搜索引擎可能会根据网页中的section 标签找出其信息架构。（同左撇子）\n\n\n# article：\n\n定义文章区域，可以更有利于搜索引擎识别网页的内容以及判断相关性。\n\n\n# aside:\n\n定义页面内容之外的内容，在左侧或右侧边栏。比如知乎右侧的“相关问题”就属于aside 区域。aside标签的文字信息与article标签区域的文字信息最好是相关。可能会影响到该页面和目标页面的排名。这些结构元素有些在HTML4时代，一般是用div来定义。\n\n\n# figure:\n\n定义媒介内容的分组，以及它们的标题，figcaption 定义 figure 元素的标题。这两个元素可以说非常好的使媒介和文字说明联系在了一起。有利于搜索引擎理解内容。文字说明是可见的。\n\n\n# time：\n\n定义日期/时间，time标签可能会作为一个来判断网页文字源，也就是能够通过time标签来识别哪篇文章是原创的。",normalizedContent:"# 优缺点：\n\n\n# html4\n\n\n\nhtml4 是采用“div+css”，网页的各个功能区域都是使用div标签进行排版的，而这些div的区分只是使用css类名称进行的，搜索引擎却不会读取他们，也不会理解类名称是有什么作用的。\n\n\n# html5\n\n\n\nhtml5的排版使用了新的标签，而这些标签都是可以被搜索引擎所理解的，这样，搜索引擎蜘蛛在我们的网页上爬行的时候，就会知道什么区域是顶部、什么区域是导航等等。这样就能够让搜索引擎更容易得到我们整个网站清晰的信息了。\n\n\n# 常用标签的使用场景：\n\n\n# header:\n\n定义了站点的头部信息，也就是页眉，一般放置网站的站点名称以及logo和导航栏。搜索引擎更容易识别站点的类型。\n\n\n# nav：\n\n定义导航链接，也就是栏目或者频道的链接。搜索引擎可以更好了解网站的信息架构，分类等。良好的信息架构，更有利于蜘蛛的爬行和权重的分布。\n\n\n# footer：\n\n定义了底部信息，也就是页脚。放置页脚导航，一些比如公司介绍，联系我们之类的信息。一般来说对网站比较不重要，有可能搜索引擎会降低其位置的权重。\n\n\n# section：\n\n该元素用来表示网页中不同的分区。优势体现在每个部分都可以有其独立的html标题。这可以让搜索引擎更好的了解网页的结构是如何划分的。搜索引擎可能会根据网页中的section 标签找出其信息架构。（同左撇子）\n\n\n# article：\n\n定义文章区域，可以更有利于搜索引擎识别网页的内容以及判断相关性。\n\n\n# aside:\n\n定义页面内容之外的内容，在左侧或右侧边栏。比如知乎右侧的“相关问题”就属于aside 区域。aside标签的文字信息与article标签区域的文字信息最好是相关。可能会影响到该页面和目标页面的排名。这些结构元素有些在html4时代，一般是用div来定义。\n\n\n# figure:\n\n定义媒介内容的分组，以及它们的标题，figcaption 定义 figure 元素的标题。这两个元素可以说非常好的使媒介和文字说明联系在了一起。有利于搜索引擎理解内容。文字说明是可见的。\n\n\n# time：\n\n定义日期/时间，time标签可能会作为一个来判断网页文字源，也就是能够通过time标签来识别哪篇文章是原创的。",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"项目基础建设 css与处理器scss",frontmatter:{title:"项目基础建设 css与处理器scss",date:"2021-12-16T17:53:24.000Z",permalink:"/pages/e1f868/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101010.%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%20css%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8scss.html",relativePath:"10.大前端/1010.HTML&CSS/101010.项目基础建设 css与处理器scss.md",key:"v-113427db",path:"/pages/e1f868/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"css常用命名单词",frontmatter:{title:"css常用命名单词",date:"2022-01-13T16:29:32.000Z",permalink:"/pages/03a46d/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101006.css%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D%E5%8D%95%E8%AF%8D.html",relativePath:"10.大前端/1010.HTML&CSS/101006.css常用命名单词.md",key:"v-755e396c",path:"/pages/03a46d/",headersStr:null,content:"文本命名规范\n\nindex.css： 一般用于首页建立样式\n\nhead.css： 头部样式，当多个页面头部设计风格相同时使用。\n\nbase.css： 共用样式。\n\nstyle.css：独立页面所使用的样式文件。\n\nglobal.css：页面样式基础，全局公用样式，页面中必须包含。\n\nlayout.css：布局、版面样式，公用类型较多时使用，一般用在首页级页面和产品类页面中\n\nmodule.css：模块，用于产品类页，也可与其它样式配合使用。\n\nmaster.css：主要的样式表\n\ncolumns.css：专栏样式\n\nthemes.css：主体样式\n\nforms.css：表单样式\n\nmend.css：补丁，基于以上样式进行的私有化修补。\n\n页面结构命名：\n\npage：代表整个页面，用于最外层。\n\nwrap：外套，将所有元素包在一起的一个外围包，用于最外层\n\nwrapper：页面外围控制整体布局宽度，用于最外层\n\ncontainer：一个整体容器，用于最外层\n\nhead，header：页头区域，用于头部\n\nnav: 导航条\n\ncontent：内容，网站中最重要的内容区域，用于网页中部主体\n\nmain：网站中的主要区域（表示最重要的一块位置），用于中部主体内容\n\ncolumn：栏目\n\nsidebar：侧栏\n\nfoot，footer：页尾、页脚。网站一些附加信息放置区域，（或命名为 copyright）用于底部\n\n导航命名：\n\nnav, navbar, navigation, nav-wrapper：导航条或导航包，代表横向导航\n\ntopnav：顶部导航\n\nmainbav：主导航\n\nsubnav：子导航\n\nsidebar：边导航\n\nleftsidebar 或 sidebar_a：左导航\n\nrightsidebar 或 sidebar_b：右导航\n\ntitle：标题\n\nsummary：摘要\n\nmenu：菜单，区域包含一般的链接和菜单\n\nsubmenu：子菜单\n\ndrop：下拉\n\ndorpmenu：下拉菜单\n\nlinks：链接菜单\n\n功能命名：\n\nlogo：标记网站logo标志\n\nbanner：标语、广告条、顶部广告条\n\nlogin：登陆，（例如登录表单：form-login）\n\nloginbar：登录条\n\nregister：注册\n\ntool, toolbar：工具条\n\nsearch：搜索\n\nsearchbar：搜索条\n\nsearchlnput：搜索输入框\n\nshop：功能区，表示现在的\n\nicon：小图标\n\nlabel：商标\n\nhomepage：首页\n\nsubpage：二级页面子页面\n\nhot：热门热点\n\nlist：文章列表，（例如：新闻列表：list-news）\n\nscroll：滚动\n\ntab：标签\n\nsitemap：网站地图\n\nmsg 或 message：提示信息\n\ncurrent：当前的\n\njoinus：加入\n\nstatus：状态\n\nbtn：按钮，（例如：搜索按钮可写成：btn-search）\n\ntips：小技巧\n\nnote：注释\n\nguild：指南\n\narr, arrow：标记箭头\n\nservice：服务\n\nbreadcrumb：(即页面所处位置导航提示）\n\ndownload：下载\n\nvote：投票\n\nsiteinfo：网站信息\n\npartner：合作伙伴\n\nlink, friendlink：友情链接\n\ncopyright：版权信息\n\nsiteinfoCredits：信誉\n\nsiteinfoLegal：法律信息",normalizedContent:"文本命名规范\n\nindex.css： 一般用于首页建立样式\n\nhead.css： 头部样式，当多个页面头部设计风格相同时使用。\n\nbase.css： 共用样式。\n\nstyle.css：独立页面所使用的样式文件。\n\nglobal.css：页面样式基础，全局公用样式，页面中必须包含。\n\nlayout.css：布局、版面样式，公用类型较多时使用，一般用在首页级页面和产品类页面中\n\nmodule.css：模块，用于产品类页，也可与其它样式配合使用。\n\nmaster.css：主要的样式表\n\ncolumns.css：专栏样式\n\nthemes.css：主体样式\n\nforms.css：表单样式\n\nmend.css：补丁，基于以上样式进行的私有化修补。\n\n页面结构命名：\n\npage：代表整个页面，用于最外层。\n\nwrap：外套，将所有元素包在一起的一个外围包，用于最外层\n\nwrapper：页面外围控制整体布局宽度，用于最外层\n\ncontainer：一个整体容器，用于最外层\n\nhead，header：页头区域，用于头部\n\nnav: 导航条\n\ncontent：内容，网站中最重要的内容区域，用于网页中部主体\n\nmain：网站中的主要区域（表示最重要的一块位置），用于中部主体内容\n\ncolumn：栏目\n\nsidebar：侧栏\n\nfoot，footer：页尾、页脚。网站一些附加信息放置区域，（或命名为 copyright）用于底部\n\n导航命名：\n\nnav, navbar, navigation, nav-wrapper：导航条或导航包，代表横向导航\n\ntopnav：顶部导航\n\nmainbav：主导航\n\nsubnav：子导航\n\nsidebar：边导航\n\nleftsidebar 或 sidebar_a：左导航\n\nrightsidebar 或 sidebar_b：右导航\n\ntitle：标题\n\nsummary：摘要\n\nmenu：菜单，区域包含一般的链接和菜单\n\nsubmenu：子菜单\n\ndrop：下拉\n\ndorpmenu：下拉菜单\n\nlinks：链接菜单\n\n功能命名：\n\nlogo：标记网站logo标志\n\nbanner：标语、广告条、顶部广告条\n\nlogin：登陆，（例如登录表单：form-login）\n\nloginbar：登录条\n\nregister：注册\n\ntool, toolbar：工具条\n\nsearch：搜索\n\nsearchbar：搜索条\n\nsearchlnput：搜索输入框\n\nshop：功能区，表示现在的\n\nicon：小图标\n\nlabel：商标\n\nhomepage：首页\n\nsubpage：二级页面子页面\n\nhot：热门热点\n\nlist：文章列表，（例如：新闻列表：list-news）\n\nscroll：滚动\n\ntab：标签\n\nsitemap：网站地图\n\nmsg 或 message：提示信息\n\ncurrent：当前的\n\njoinus：加入\n\nstatus：状态\n\nbtn：按钮，（例如：搜索按钮可写成：btn-search）\n\ntips：小技巧\n\nnote：注释\n\nguild：指南\n\narr, arrow：标记箭头\n\nservice：服务\n\nbreadcrumb：(即页面所处位置导航提示）\n\ndownload：下载\n\nvote：投票\n\nsiteinfo：网站信息\n\npartner：合作伙伴\n\nlink, friendlink：友情链接\n\ncopyright：版权信息\n\nsiteinfocredits：信誉\n\nsiteinfolegal：法律信息",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"看不见的html标签",frontmatter:{title:"看不见的html标签",date:"2022-10-31T16:51:11.000Z",permalink:"/pages/d3debc/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/1010100.%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84html%E6%A0%87%E7%AD%BE.html",relativePath:"10.大前端/1010.HTML&CSS/1010100.看不见的html标签.md",key:"v-4ae1c406",path:"/pages/d3debc/",headers:[{level:3,title:"交互实现",slug:"交互实现",normalizedTitle:"交互实现",charIndex:61},{level:4,title:"meta 标签：自动刷新/跳转",slug:"meta-标签-自动刷新-跳转",normalizedTitle:"meta 标签：自动刷新/跳转",charIndex:135},{level:4,title:"title 标签与 Hack 手段：消息提醒",slug:"title-标签与-hack-手段-消息提醒",normalizedTitle:"title 标签与 hack 手段：消息提醒",charIndex:675},{level:3,title:"性能优化",slug:"性能优化",normalizedTitle:"性能优化",charIndex:66},{level:4,title:"script 标签：调整加载顺序提升渲染速度",slug:"script-标签-调整加载顺序提升渲染速度",normalizedTitle:"script 标签：调整加载顺序提升渲染速度",charIndex:1740},{level:4,title:"link 标签：通过预处理提升渲染速度",slug:"link-标签-通过预处理提升渲染速度",normalizedTitle:"link 标签：通过预处理提升渲染速度",charIndex:2652},{level:3,title:"搜索优化",slug:"搜索优化",normalizedTitle:"搜索优化",charIndex:71},{level:4,title:"meta 标签：提取关键信息",slug:"meta-标签-提取关键信息",normalizedTitle:"meta 标签：提取关键信息",charIndex:3287},{level:4,title:"link 标签：减少重复",slug:"link-标签-减少重复",normalizedTitle:"link 标签：减少重复",charIndex:3942},{level:3,title:"延伸内容：OGP（开放图表协议）",slug:"延伸内容-ogp-开放图表协议",normalizedTitle:"延伸内容：ogp（开放图表协议）",charIndex:4305},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:4716}],headersStr:"交互实现 meta 标签：自动刷新/跳转 title 标签与 Hack 手段：消息提醒 性能优化 script 标签：调整加载顺序提升渲染速度 link 标签：通过预处理提升渲染速度 搜索优化 meta 标签：提取关键信息 link 标签：减少重复 延伸内容：OGP（开放图表协议） 总结",content:'有一些非常重要却容易被忽视的标签，这些标签大多数用在页面头部 head 标签内，虽然对用户不可见，但如果在某些场景下，比如交互实现、性能优化、搜索优化，合理利用它们就可以达到事半功倍的效果。\n\n看看那些“看不见”的 HTML 标签及其使用场景。\n\n\n# 交互实现\n\n# meta 标签：自动刷新/跳转\n\n很多人都是第一印象使用定时器或者node-schedule 库来实现\n\n假设要实现一个类似 PPT 自动播放的效果，你很可能会想到使用 JavaScript 定时器控制页面跳转来实现。但其实有更加简洁的实现方法，比如通过 meta 标签来实现：\n\n<meta http-equiv="Refresh" content="5; URL=page2.html">\n\n\n1\n\n\n上面的代码会在 5s 之后自动跳转到同域下的 page2.html 页面。我们要实现 PPT 自动播放的功能，只需要在每个页面的 meta 标签内设置好下一个页面的地址即可。\n\n另一种场景，比如每隔一分钟就需要刷新页面的大屏幕监控，也可以通过 meta 标签来实现，只需去掉后面的 URL 即可：\n\n<meta http-equiv="Refresh" content="60">\n\n\n1\n\n\n在使用它的时候，刷新和跳转操作是不可取消的，所以对刷新时间间隔或者需要手动取消的，还是推荐使用 JavaScript 定时器来实现。\n\n如果你只是想实现页面的定时刷新或跳转（比如某些页面缺乏访问权限，在 x 秒后跳回首页这样的场景）建议你可以实践下 meta 标签的用法。\n\n# title 标签与 Hack 手段：消息提醒\n\n作为前端工程师的你对 B/S 架构肯定不陌生，它有很多的优点，比如版本更新方便、跨平台、跨终端，但在处理某些场景，比如即时通信场景时，就会变得比较麻烦。\n\n因为前后端通信深度依赖 HTTP 协议，而 HTTP 协议采用“请求-响应”模式，这就决定了服务端也只能被动地发送数据。一种低效的解决方案是客户端通过轮询机制获取最新消息（HTML5 下可使用 WebSocket 协议）。\n\n消息提醒功能实现则比较困难，HTML5 标准发布之前，浏览器没有开放图标闪烁、弹出系统消息之类的接口，只能借助一些 Hack 的手段，比如修改 title 标签来达到类似的效果（HTML5 下可使用 Web Notifications API 弹出系统消息）。\n\n下面这段代码中，通过定时修改 title 标签内容，模拟了类似消息提醒的闪烁效果：\n\nlet msgNum = 1 // 消息条数\nlet cnt = 0 // 计数器\nconst inerval = setInterval(() => {\n  cnt = (cnt + 1) % 2\n  if(msgNum===0) {\n    // 通过DOM修改title\n    document.title += `聊天页面`\n    clearInterval(interval)\n    return\n  }\n  const prefix = cnt % 2 ? `新消息(${msgNum})` : \'\'\n  document.title = `${prefix}聊天页面`\n}, 1000)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n实现效果如下图所示，可以看到标签名称上有提示文字在闪烁。\n\n\n\n通过模拟消息闪烁，可以让用户在浏览其他页面的时候，及时得知服务端返回的消息。\n\n定时修改 title 标签内容，除了用来实现闪烁效果之外，还可以制作其他动画效果，比如文字滚动，但需要注意浏览器会对 title 标签文本进行去空格操作。\n\n动态修改 title 标签的用途不仅在于消息提醒，你还可以将一些关键信息显示到标签上（比如下载时的进度、当前操作步骤），从而提升用户体验。\n\n\n# 性能优化\n\n性能优化是前端开发中避不开的问题，性能问题无外乎两方面原因：渲染速度慢、请求时间长。性能优化虽然涉及很多复杂的原因和解决方案，但其实只要通过合理地使用标签，就可以在一定程度上提升渲染速度以及减少请求时间。\n\n# script 标签：调整加载顺序提升渲染速度\n\n由于浏览器的底层运行机制，渲染引擎在解析 HTML 时，若遇到 script 标签引用文件，则会暂停解析过程，同时通知网络线程加载文件，文件加载后会切换至 JavaScript 引擎来执行对应代码，代码执行完成之后切换至渲染引擎继续渲染页面。\n\n在这一过程中可以看到，页面渲染过程中包含了请求文件以及执行文件的时间，但页面的首次渲染可能并不依赖这些文件，这些请求和执行文件的动作反而延长了用户看到页面的时间，从而降低了用户体验。\n\n为了减少这些时间损耗，可以借助 script 标签的 3 个属性来实现。\n\n * async 属性。立即请求文件，但不阻塞渲染引擎，而是文件加载完毕后阻塞渲染引擎并立即执行文件内容。\n * defer 属性。立即请求文件，但不阻塞渲染引擎，等到解析完 HTML 之后再执行文件内容。\n * HTML5 标准 type 属性，对应值为“module”。让浏览器按照 ECMA Script 6 标准将文件当作模块进行解析，默认阻塞效果同 defer，也可以配合 async 在请求完成后立即执行。\n\n具体效果可以参看下图：\n\n\n\n其中，绿色的线表示执行解析 HTML ，蓝色的线表示请求文件，红色的线表示执行文件。\n\n从图中可以得知，采用 3 种属性都能减少请求文件引起的阻塞时间，只有 defer 属性以及 type="module" 情况下能保证渲染引擎的优先执行，从而减少执行文件内容消耗的时间，让用户更快地看见页面（即使这些页面内容可能并没有完全地显示）。\n\n除此之外还应当注意，当渲染引擎解析 HTML 遇到 script 标签引入文件时，会立即进行一次渲染。所以这也就是为什么构建工具会把编译好的引用 JavaScript 代码的 script 标签放入到 body 标签底部，因为当渲染引擎执行到 body 底部时会先将已解析的内容渲染出来，然后再去请求相应的 JavaScript 文件。如果是内联脚本（即不通过 src 属性引用外部脚本文件直接在 HTML 编写 JavaScript 代码的形式），渲染引擎则不会渲染。\n\n# link 标签：通过预处理提升渲染速度\n\n在我们对大型单页应用进行性能优化时，也许会用到按需懒加载的方式，来加载对应的模块，但如果能合理利用 link 标签的 rel 属性值来进行预加载，就能进一步提升渲染速度。\n\n * dns-prefetch。当 link 标签的 rel 属性值为“dns-prefetch”时，浏览器会对某个域名预先进行 DNS 解析并缓存。这样，当浏览器在请求同域名资源的时候，能省去从域名查询 IP 的过程，从而减少时间损耗。下图是淘宝网设置的 DNS 预解析。\n\n\n\n * preconnect。让浏览器在一个 HTTP 请求正式发给服务器前预先执行一些操作，这包括 DNS 解析、TLS 协商、TCP 握手，通过消除往返延迟来为用户节省时间。\n * prefetch/preload。两个值都是让浏览器预先下载并缓存某个资源，但不同的是，prefetch 可能会在浏览器忙时被忽略，而 preload 则是一定会被预先下载。\n * prerender。浏览器不仅会加载资源，还会解析执行页面，进行预渲染。\n\n这几个属性值恰好反映了浏览器获取资源文件的过程，在这里我绘制了一个流程简图，方便你记忆。\n\n\n\n浏览器获取资源文件的流程\n\n\n# 搜索优化\n\n你所写的前端代码，除了要让浏览器更好执行，有时候也要考虑更方便其他程序（如搜索引擎）理解。合理地使用 meta 标签和 link 标签，恰好能让搜索引擎更好地理解和收录我们的页面。\n\n# meta 标签：提取关键信息\n\n通过 meta 标签可以设置页面的描述信息，从而让搜索引擎更好地展示搜索结果。\n\n例如，在百度中搜索“拉勾”，就会发现网站的描述信息，这些描述信息就是通过 meta 标签专门为搜索引擎设置的，目的是方便用户预览搜索到的结果。\n\n\n\n为了让搜索引擎更好地识别页面，除了描述信息之外还可以使用关键字，这样即使页面其他地方没有包含搜索内容，也可以被搜索到（当然搜索引擎有自己的权重和算法，如果滥用关键字是会被降权的，比如 Google 引擎就会对堆砌大量相同关键词的网页进行惩罚，降低它被搜索到的权重）。\n\n当我们搜索关键字“垂直互联网招聘”的时候搜索结果会显示拉勾网的信息，虽然显示的搜索内容上并没有看到“垂直互联网招聘”字样，这就是因为拉勾网页面中设置了这个关键字。\n\n\n\n对应代码如下：\n\n<meta content="拉勾,拉勾网,拉勾招聘,拉钩, 拉钩网 ,互联网招聘,拉勾互联网招聘, 移动互联网招聘, 垂直互联网招聘, 微信招聘, 微博招聘, 拉勾官网, 拉勾百科,跳槽, 高薪职位, 互联网圈子, IT招聘, 职场招聘, 猎头招聘,O2O招聘, LBS招聘, 社交招聘, 校园招聘, 校招,社会招聘,社招" name="keywords">\n\n\n1\n\n\n在实际工作中，推荐使用一些关键字工具来挑选，比如 Google Trends、站长工具。下图是我使用站长工具搜索“招聘”关键字得到的结果，可以看到得到了相当关键的一些信息，比如全网搜索指数、关键词特点。\n\n\n\n# link 标签：减少重复\n\n有时候为了用户访问方便或者出于历史原因，对于同一个页面会有多个网址，又或者存在某些重定向页面，比如：\n\n * https://lagou.com/a.html\n * https://lagou.com/detail?id="abcd"\n\n那么在这些页面中可以这样设置：\n\n<link href="https://lagou.com/a.html" rel="canonical">\n\n\n1\n\n\n这样可以让搜索引擎避免花费时间抓取重复网页。不过需要注意的是，它还有个限制条件，那就是指向的网站不允许跨域。\n\n当然，要合并网址还有其他的方式，比如使用站点地图，或者在 HTTP 请求响应头部添加 rel="canonical"。这里，我就不展开介绍了，道理都是相通的，你平时可以多探索和实践。\n\n\n# 延伸内容：OGP（开放图表协议）\n\n\n\n好了，前面我们说了 HTML5 标准的一些标签和属性，下面再延伸说一说基于 meta 标签扩展属性值实现的第三方协议——OGP（Open Graph Protocal，开放图表协议 ）。\n\nOGP 是 Facebook 公司在 2010 年提出的，目的是通过增加文档信息来提升社交网页在被分享时的预览效果。你只需要在一些分享页面中添加一些 meta 标签及属性，支持 OGP 协议的社交网站就会在解析页面时生成丰富的预览信息，比如站点名称、网页作者、预览图片。具体预览效果会因各个网站而有所变化。\n\n下面是微信文章支持 OGP 协议的代码，可以看到通过 meta 标签属性值声明了：网址、预览图片、描述信息、站点名称、网页类型和作者信息。\n\n\n\n现在百度已经宣布支持，微信文章的不少页面上也添加了相关标签属性，有兴趣的话你可以查看官方网站：https://ogp.me/。\n\n\n# 总结\n\n交互实现、性能优化、搜索优化场景出发，\n\n分别讲解了 meta 标签、title 标签、link 标签，以及 script 标签在这些场景中的重要作用',normalizedContent:'有一些非常重要却容易被忽视的标签，这些标签大多数用在页面头部 head 标签内，虽然对用户不可见，但如果在某些场景下，比如交互实现、性能优化、搜索优化，合理利用它们就可以达到事半功倍的效果。\n\n看看那些“看不见”的 html 标签及其使用场景。\n\n\n# 交互实现\n\n# meta 标签：自动刷新/跳转\n\n很多人都是第一印象使用定时器或者node-schedule 库来实现\n\n假设要实现一个类似 ppt 自动播放的效果，你很可能会想到使用 javascript 定时器控制页面跳转来实现。但其实有更加简洁的实现方法，比如通过 meta 标签来实现：\n\n<meta http-equiv="refresh" content="5; url=page2.html">\n\n\n1\n\n\n上面的代码会在 5s 之后自动跳转到同域下的 page2.html 页面。我们要实现 ppt 自动播放的功能，只需要在每个页面的 meta 标签内设置好下一个页面的地址即可。\n\n另一种场景，比如每隔一分钟就需要刷新页面的大屏幕监控，也可以通过 meta 标签来实现，只需去掉后面的 url 即可：\n\n<meta http-equiv="refresh" content="60">\n\n\n1\n\n\n在使用它的时候，刷新和跳转操作是不可取消的，所以对刷新时间间隔或者需要手动取消的，还是推荐使用 javascript 定时器来实现。\n\n如果你只是想实现页面的定时刷新或跳转（比如某些页面缺乏访问权限，在 x 秒后跳回首页这样的场景）建议你可以实践下 meta 标签的用法。\n\n# title 标签与 hack 手段：消息提醒\n\n作为前端工程师的你对 b/s 架构肯定不陌生，它有很多的优点，比如版本更新方便、跨平台、跨终端，但在处理某些场景，比如即时通信场景时，就会变得比较麻烦。\n\n因为前后端通信深度依赖 http 协议，而 http 协议采用“请求-响应”模式，这就决定了服务端也只能被动地发送数据。一种低效的解决方案是客户端通过轮询机制获取最新消息（html5 下可使用 websocket 协议）。\n\n消息提醒功能实现则比较困难，html5 标准发布之前，浏览器没有开放图标闪烁、弹出系统消息之类的接口，只能借助一些 hack 的手段，比如修改 title 标签来达到类似的效果（html5 下可使用 web notifications api 弹出系统消息）。\n\n下面这段代码中，通过定时修改 title 标签内容，模拟了类似消息提醒的闪烁效果：\n\nlet msgnum = 1 // 消息条数\nlet cnt = 0 // 计数器\nconst inerval = setinterval(() => {\n  cnt = (cnt + 1) % 2\n  if(msgnum===0) {\n    // 通过dom修改title\n    document.title += `聊天页面`\n    clearinterval(interval)\n    return\n  }\n  const prefix = cnt % 2 ? `新消息(${msgnum})` : \'\'\n  document.title = `${prefix}聊天页面`\n}, 1000)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n实现效果如下图所示，可以看到标签名称上有提示文字在闪烁。\n\n\n\n通过模拟消息闪烁，可以让用户在浏览其他页面的时候，及时得知服务端返回的消息。\n\n定时修改 title 标签内容，除了用来实现闪烁效果之外，还可以制作其他动画效果，比如文字滚动，但需要注意浏览器会对 title 标签文本进行去空格操作。\n\n动态修改 title 标签的用途不仅在于消息提醒，你还可以将一些关键信息显示到标签上（比如下载时的进度、当前操作步骤），从而提升用户体验。\n\n\n# 性能优化\n\n性能优化是前端开发中避不开的问题，性能问题无外乎两方面原因：渲染速度慢、请求时间长。性能优化虽然涉及很多复杂的原因和解决方案，但其实只要通过合理地使用标签，就可以在一定程度上提升渲染速度以及减少请求时间。\n\n# script 标签：调整加载顺序提升渲染速度\n\n由于浏览器的底层运行机制，渲染引擎在解析 html 时，若遇到 script 标签引用文件，则会暂停解析过程，同时通知网络线程加载文件，文件加载后会切换至 javascript 引擎来执行对应代码，代码执行完成之后切换至渲染引擎继续渲染页面。\n\n在这一过程中可以看到，页面渲染过程中包含了请求文件以及执行文件的时间，但页面的首次渲染可能并不依赖这些文件，这些请求和执行文件的动作反而延长了用户看到页面的时间，从而降低了用户体验。\n\n为了减少这些时间损耗，可以借助 script 标签的 3 个属性来实现。\n\n * async 属性。立即请求文件，但不阻塞渲染引擎，而是文件加载完毕后阻塞渲染引擎并立即执行文件内容。\n * defer 属性。立即请求文件，但不阻塞渲染引擎，等到解析完 html 之后再执行文件内容。\n * html5 标准 type 属性，对应值为“module”。让浏览器按照 ecma script 6 标准将文件当作模块进行解析，默认阻塞效果同 defer，也可以配合 async 在请求完成后立即执行。\n\n具体效果可以参看下图：\n\n\n\n其中，绿色的线表示执行解析 html ，蓝色的线表示请求文件，红色的线表示执行文件。\n\n从图中可以得知，采用 3 种属性都能减少请求文件引起的阻塞时间，只有 defer 属性以及 type="module" 情况下能保证渲染引擎的优先执行，从而减少执行文件内容消耗的时间，让用户更快地看见页面（即使这些页面内容可能并没有完全地显示）。\n\n除此之外还应当注意，当渲染引擎解析 html 遇到 script 标签引入文件时，会立即进行一次渲染。所以这也就是为什么构建工具会把编译好的引用 javascript 代码的 script 标签放入到 body 标签底部，因为当渲染引擎执行到 body 底部时会先将已解析的内容渲染出来，然后再去请求相应的 javascript 文件。如果是内联脚本（即不通过 src 属性引用外部脚本文件直接在 html 编写 javascript 代码的形式），渲染引擎则不会渲染。\n\n# link 标签：通过预处理提升渲染速度\n\n在我们对大型单页应用进行性能优化时，也许会用到按需懒加载的方式，来加载对应的模块，但如果能合理利用 link 标签的 rel 属性值来进行预加载，就能进一步提升渲染速度。\n\n * dns-prefetch。当 link 标签的 rel 属性值为“dns-prefetch”时，浏览器会对某个域名预先进行 dns 解析并缓存。这样，当浏览器在请求同域名资源的时候，能省去从域名查询 ip 的过程，从而减少时间损耗。下图是淘宝网设置的 dns 预解析。\n\n\n\n * preconnect。让浏览器在一个 http 请求正式发给服务器前预先执行一些操作，这包括 dns 解析、tls 协商、tcp 握手，通过消除往返延迟来为用户节省时间。\n * prefetch/preload。两个值都是让浏览器预先下载并缓存某个资源，但不同的是，prefetch 可能会在浏览器忙时被忽略，而 preload 则是一定会被预先下载。\n * prerender。浏览器不仅会加载资源，还会解析执行页面，进行预渲染。\n\n这几个属性值恰好反映了浏览器获取资源文件的过程，在这里我绘制了一个流程简图，方便你记忆。\n\n\n\n浏览器获取资源文件的流程\n\n\n# 搜索优化\n\n你所写的前端代码，除了要让浏览器更好执行，有时候也要考虑更方便其他程序（如搜索引擎）理解。合理地使用 meta 标签和 link 标签，恰好能让搜索引擎更好地理解和收录我们的页面。\n\n# meta 标签：提取关键信息\n\n通过 meta 标签可以设置页面的描述信息，从而让搜索引擎更好地展示搜索结果。\n\n例如，在百度中搜索“拉勾”，就会发现网站的描述信息，这些描述信息就是通过 meta 标签专门为搜索引擎设置的，目的是方便用户预览搜索到的结果。\n\n\n\n为了让搜索引擎更好地识别页面，除了描述信息之外还可以使用关键字，这样即使页面其他地方没有包含搜索内容，也可以被搜索到（当然搜索引擎有自己的权重和算法，如果滥用关键字是会被降权的，比如 google 引擎就会对堆砌大量相同关键词的网页进行惩罚，降低它被搜索到的权重）。\n\n当我们搜索关键字“垂直互联网招聘”的时候搜索结果会显示拉勾网的信息，虽然显示的搜索内容上并没有看到“垂直互联网招聘”字样，这就是因为拉勾网页面中设置了这个关键字。\n\n\n\n对应代码如下：\n\n<meta content="拉勾,拉勾网,拉勾招聘,拉钩, 拉钩网 ,互联网招聘,拉勾互联网招聘, 移动互联网招聘, 垂直互联网招聘, 微信招聘, 微博招聘, 拉勾官网, 拉勾百科,跳槽, 高薪职位, 互联网圈子, it招聘, 职场招聘, 猎头招聘,o2o招聘, lbs招聘, 社交招聘, 校园招聘, 校招,社会招聘,社招" name="keywords">\n\n\n1\n\n\n在实际工作中，推荐使用一些关键字工具来挑选，比如 google trends、站长工具。下图是我使用站长工具搜索“招聘”关键字得到的结果，可以看到得到了相当关键的一些信息，比如全网搜索指数、关键词特点。\n\n\n\n# link 标签：减少重复\n\n有时候为了用户访问方便或者出于历史原因，对于同一个页面会有多个网址，又或者存在某些重定向页面，比如：\n\n * https://lagou.com/a.html\n * https://lagou.com/detail?id="abcd"\n\n那么在这些页面中可以这样设置：\n\n<link href="https://lagou.com/a.html" rel="canonical">\n\n\n1\n\n\n这样可以让搜索引擎避免花费时间抓取重复网页。不过需要注意的是，它还有个限制条件，那就是指向的网站不允许跨域。\n\n当然，要合并网址还有其他的方式，比如使用站点地图，或者在 http 请求响应头部添加 rel="canonical"。这里，我就不展开介绍了，道理都是相通的，你平时可以多探索和实践。\n\n\n# 延伸内容：ogp（开放图表协议）\n\n\n\n好了，前面我们说了 html5 标准的一些标签和属性，下面再延伸说一说基于 meta 标签扩展属性值实现的第三方协议——ogp（open graph protocal，开放图表协议 ）。\n\nogp 是 facebook 公司在 2010 年提出的，目的是通过增加文档信息来提升社交网页在被分享时的预览效果。你只需要在一些分享页面中添加一些 meta 标签及属性，支持 ogp 协议的社交网站就会在解析页面时生成丰富的预览信息，比如站点名称、网页作者、预览图片。具体预览效果会因各个网站而有所变化。\n\n下面是微信文章支持 ogp 协议的代码，可以看到通过 meta 标签属性值声明了：网址、预览图片、描述信息、站点名称、网页类型和作者信息。\n\n\n\n现在百度已经宣布支持，微信文章的不少页面上也添加了相关标签属性，有兴趣的话你可以查看官方网站：https://ogp.me/。\n\n\n# 总结\n\n交互实现、性能优化、搜索优化场景出发，\n\n分别讲解了 meta 标签、title 标签、link 标签，以及 script 标签在这些场景中的重要作用',charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"项目基础建设 CSS公共样式",frontmatter:{title:"项目基础建设 CSS公共样式",date:"2021-12-16T17:55:30.000Z",permalink:"/pages/b189f2/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101011.%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%20CSS%E5%85%AC%E5%85%B1%E6%A0%B7%E5%BC%8F.html",relativePath:"10.大前端/1010.HTML&CSS/101011.项目基础建设 CSS公共样式.md",key:"v-7760fc46",path:"/pages/b189f2/",headers:[{level:2,title:"样式初始化",slug:"样式初始化",normalizedTitle:"样式初始化",charIndex:2},{level:2,title:"公共样式",slug:"公共样式",normalizedTitle:"公共样式",charIndex:274}],headersStr:"样式初始化 公共样式",content:"# 样式初始化\n\n不再使用Reset CSS 了， 对于有富文本 markdown解析有差异\n\n使用normalize.css\n\n * 与许多CSS重置不同，保留有用的默认值。\n\n * 规范各种元素的样式。\n\n * 更正错误和常见的浏览器不一致问题。\n\n * 通过细微的修改来提高可用性。\n\n * 使用详细注释说明代码的作用。\n\n直接下载：https://necolas.github.io/normalize.css/latest/normalize.css\n\nnpm: npm install --save normalize.css\n\n\n# 公共样式\n\n模拟了bootstrap的一些class，例如：\n\n// Flex 布局\n.d-flex {\n  display: flex !important;\n}\n\n.d-inline-flex {\n  display: inline-flex !important;\n}\n\n.flex-row {\n  flex-direction: row !important;\n}\n\n.flex-column {\n  flex-direction: column !important;\n}\n\n.flex-row-reverse {\n  flex-direction: row-reverse !important;\n}\n\n.flex-column-reverse {\n  flex-direction: column-reverse !important;\n}\n\n.flex-wrap {\n  flex-wrap: wrap !important;\n}\n\n.flex-nowrap {\n  flex-wrap: nowrap !important;\n}\n\n.flex-wrap-reverse {\n  flex-wrap: wrap-reverse !important;\n}\n\n.flex-fill {\n  flex: 1 1 auto !important;\n}\n\n.flex-grow-0 {\n  flex-grow: 0 !important;\n}\n\n.flex-grow-1 {\n  flex-grow: 1 !important;\n}\n\n.flex-shrink-0 {\n  flex-shrink: 0 !important;\n}\n\n.flex-shrink-1 {\n  flex-shrink: 1 !important;\n}\n\n.justify-content-start {\n  justify-content: flex-start !important;\n}\n\n.justify-content-end {\n  justify-content: flex-end !important;\n}\n\n.justify-content-center {\n  justify-content: center !important;\n}\n\n.justify-content-between {\n  justify-content: space-between !important;\n}\n\n.justify-content-around {\n  justify-content: space-around !important;\n}\n\n.align-items-start {\n  align-items: flex-start !important;\n}\n\n.align-items-end {\n  align-items: flex-end !important;\n}\n\n.align-items-center {\n  align-items: center !important;\n}\n\n.align-items-baseline {\n  align-items: baseline !important;\n}\n\n.align-items-stretch {\n  align-items: stretch !important;\n}\n\n.align-content-start {\n  align-content: flex-start !important;\n}\n\n.align-content-end {\n  align-content: flex-end !important;\n}\n\n.align-content-center {\n  align-content: center !important;\n}\n\n.align-content-between {\n  align-content: space-between !important;\n}\n\n.align-content-around {\n  align-content: space-around !important;\n}\n\n.align-content-stretch {\n  align-content: stretch !important;\n}\n\n.align-self-auto {\n  align-self: auto !important;\n}\n\n.align-self-start {\n  align-self: flex-start !important;\n}\n\n.align-self-end {\n  align-self: flex-end !important;\n}\n\n.align-self-center {\n  align-self: center !important;\n}\n\n.align-self-baseline {\n  align-self: baseline !important;\n}\n\n.align-self-stretch {\n  align-self: stretch !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n\n\n除此之外，我也使用Scss的控制指令和ScssScript批量生成了一些样式, 例如：\n\n// 定义内外边距，历遍1-40 取其偶数和5的倍数\n@for $i from 0 through 40 {\n  @if $i % 2==0 or $i % 5==0 {\n    .m-#{$i} {\n      margin: $i + px !important;\n    }\n\n    .p-#{$i} {\n      padding: $i + px !important;\n    }\n\n    @each $short, $long in l left, t top, r right, b bottom, x (left, right),\n      y (top, bottom)\n    {\n      @if $short==x or $short==y {\n        .m#{$short}-#{$i} {\n          @each $direction in $long {\n            margin-#{$direction}: $i + px !important;\n          }\n        }\n\n        .p#{$short}-#{$i} {\n          @each $direction in $long {\n            padding-#{$direction}: $i + px !important;\n          }\n        }\n      } @else {\n        .m#{$short}-#{$i} {\n          margin-#{$long}: $i + px !important;\n        }\n\n        .p#{$short}-#{$i} {\n          padding-#{$long}: $i + px !important;\n        }\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n还有mixin, 例如：\n\n@mixin clearfix {\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n}\n\n@mixin scrollBar {\n  &::-webkit-scrollbar-track-piece {\n    background: #d3dce6;\n  }\n\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: #99a9bf;\n    border-radius: 20px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n差不多就到这里了，最后附上最终代码\n\n * index.scss\n\n@import './variables.scss';\n@import './mixin.scss';\n@import './transition.scss';\n@import './global.scss';\n\n\n1\n2\n3\n4\n\n * variables.scss\n\n// base color\n$blue:#324157;\n$light-blue:#3A71A8;\n$red:#C03639;\n$pink: #E65D6E;\n$green: #30B08F;\n$tiffany: #4AB7BD;\n$yellow:#FEC171;\n$panGreen: #30B08F;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * transition.scss\n\n/* fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.28s;\n}\n\n.fade-enter,\n.fade-leave-active {\n  opacity: 0;\n}\n\n/* fade-transform */\n.fade-transform-leave-active,\n.fade-transform-enter-active {\n  transition: all .5s;\n}\n\n.fade-transform-enter {\n  opacity: 0;\n  transform: translateX(-30px);\n}\n\n.fade-transform-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * mixin.scss\n\n@mixin clearfix {\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n}\n\n@mixin scrollBar {\n  &::-webkit-scrollbar-track-piece {\n    background: #d3dce6;\n  }\n\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: #99a9bf;\n    border-radius: 20px;\n  }\n}\n\n@mixin relative {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n@mixin pct($pct) {\n  width: #{$pct};\n  position: relative;\n  margin: 0 auto;\n}\n\n@mixin triangle($width, $height, $color, $direction) {\n  $width: $width/2;\n  $color-border-style: $height solid $color;\n  $transparent-border-style: $width solid transparent;\n  height: 0;\n  width: 0;\n\n  @if $direction==up {\n    border-bottom: $color-border-style;\n    border-left: $transparent-border-style;\n    border-right: $transparent-border-style;\n  }\n\n  @else if $direction==right {\n    border-left: $color-border-style;\n    border-top: $transparent-border-style;\n    border-bottom: $transparent-border-style;\n  }\n\n  @else if $direction==down {\n    border-top: $color-border-style;\n    border-left: $transparent-border-style;\n    border-right: $transparent-border-style;\n  }\n\n  @else if $direction==left {\n    border-right: $color-border-style;\n    border-top: $transparent-border-style;\n    border-bottom: $transparent-border-style;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n\n\n * common.scss\n\n * global.scss",normalizedContent:"# 样式初始化\n\n不再使用reset css 了， 对于有富文本 markdown解析有差异\n\n使用normalize.css\n\n * 与许多css重置不同，保留有用的默认值。\n\n * 规范各种元素的样式。\n\n * 更正错误和常见的浏览器不一致问题。\n\n * 通过细微的修改来提高可用性。\n\n * 使用详细注释说明代码的作用。\n\n直接下载：https://necolas.github.io/normalize.css/latest/normalize.css\n\nnpm: npm install --save normalize.css\n\n\n# 公共样式\n\n模拟了bootstrap的一些class，例如：\n\n// flex 布局\n.d-flex {\n  display: flex !important;\n}\n\n.d-inline-flex {\n  display: inline-flex !important;\n}\n\n.flex-row {\n  flex-direction: row !important;\n}\n\n.flex-column {\n  flex-direction: column !important;\n}\n\n.flex-row-reverse {\n  flex-direction: row-reverse !important;\n}\n\n.flex-column-reverse {\n  flex-direction: column-reverse !important;\n}\n\n.flex-wrap {\n  flex-wrap: wrap !important;\n}\n\n.flex-nowrap {\n  flex-wrap: nowrap !important;\n}\n\n.flex-wrap-reverse {\n  flex-wrap: wrap-reverse !important;\n}\n\n.flex-fill {\n  flex: 1 1 auto !important;\n}\n\n.flex-grow-0 {\n  flex-grow: 0 !important;\n}\n\n.flex-grow-1 {\n  flex-grow: 1 !important;\n}\n\n.flex-shrink-0 {\n  flex-shrink: 0 !important;\n}\n\n.flex-shrink-1 {\n  flex-shrink: 1 !important;\n}\n\n.justify-content-start {\n  justify-content: flex-start !important;\n}\n\n.justify-content-end {\n  justify-content: flex-end !important;\n}\n\n.justify-content-center {\n  justify-content: center !important;\n}\n\n.justify-content-between {\n  justify-content: space-between !important;\n}\n\n.justify-content-around {\n  justify-content: space-around !important;\n}\n\n.align-items-start {\n  align-items: flex-start !important;\n}\n\n.align-items-end {\n  align-items: flex-end !important;\n}\n\n.align-items-center {\n  align-items: center !important;\n}\n\n.align-items-baseline {\n  align-items: baseline !important;\n}\n\n.align-items-stretch {\n  align-items: stretch !important;\n}\n\n.align-content-start {\n  align-content: flex-start !important;\n}\n\n.align-content-end {\n  align-content: flex-end !important;\n}\n\n.align-content-center {\n  align-content: center !important;\n}\n\n.align-content-between {\n  align-content: space-between !important;\n}\n\n.align-content-around {\n  align-content: space-around !important;\n}\n\n.align-content-stretch {\n  align-content: stretch !important;\n}\n\n.align-self-auto {\n  align-self: auto !important;\n}\n\n.align-self-start {\n  align-self: flex-start !important;\n}\n\n.align-self-end {\n  align-self: flex-end !important;\n}\n\n.align-self-center {\n  align-self: center !important;\n}\n\n.align-self-baseline {\n  align-self: baseline !important;\n}\n\n.align-self-stretch {\n  align-self: stretch !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n\n\n除此之外，我也使用scss的控制指令和scssscript批量生成了一些样式, 例如：\n\n// 定义内外边距，历遍1-40 取其偶数和5的倍数\n@for $i from 0 through 40 {\n  @if $i % 2==0 or $i % 5==0 {\n    .m-#{$i} {\n      margin: $i + px !important;\n    }\n\n    .p-#{$i} {\n      padding: $i + px !important;\n    }\n\n    @each $short, $long in l left, t top, r right, b bottom, x (left, right),\n      y (top, bottom)\n    {\n      @if $short==x or $short==y {\n        .m#{$short}-#{$i} {\n          @each $direction in $long {\n            margin-#{$direction}: $i + px !important;\n          }\n        }\n\n        .p#{$short}-#{$i} {\n          @each $direction in $long {\n            padding-#{$direction}: $i + px !important;\n          }\n        }\n      } @else {\n        .m#{$short}-#{$i} {\n          margin-#{$long}: $i + px !important;\n        }\n\n        .p#{$short}-#{$i} {\n          padding-#{$long}: $i + px !important;\n        }\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n还有mixin, 例如：\n\n@mixin clearfix {\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n}\n\n@mixin scrollbar {\n  &::-webkit-scrollbar-track-piece {\n    background: #d3dce6;\n  }\n\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: #99a9bf;\n    border-radius: 20px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n差不多就到这里了，最后附上最终代码\n\n * index.scss\n\n@import './variables.scss';\n@import './mixin.scss';\n@import './transition.scss';\n@import './global.scss';\n\n\n1\n2\n3\n4\n\n * variables.scss\n\n// base color\n$blue:#324157;\n$light-blue:#3a71a8;\n$red:#c03639;\n$pink: #e65d6e;\n$green: #30b08f;\n$tiffany: #4ab7bd;\n$yellow:#fec171;\n$pangreen: #30b08f;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * transition.scss\n\n/* fade */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.28s;\n}\n\n.fade-enter,\n.fade-leave-active {\n  opacity: 0;\n}\n\n/* fade-transform */\n.fade-transform-leave-active,\n.fade-transform-enter-active {\n  transition: all .5s;\n}\n\n.fade-transform-enter {\n  opacity: 0;\n  transform: translatex(-30px);\n}\n\n.fade-transform-leave-to {\n  opacity: 0;\n  transform: translatex(30px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * mixin.scss\n\n@mixin clearfix {\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n}\n\n@mixin scrollbar {\n  &::-webkit-scrollbar-track-piece {\n    background: #d3dce6;\n  }\n\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: #99a9bf;\n    border-radius: 20px;\n  }\n}\n\n@mixin relative {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n@mixin pct($pct) {\n  width: #{$pct};\n  position: relative;\n  margin: 0 auto;\n}\n\n@mixin triangle($width, $height, $color, $direction) {\n  $width: $width/2;\n  $color-border-style: $height solid $color;\n  $transparent-border-style: $width solid transparent;\n  height: 0;\n  width: 0;\n\n  @if $direction==up {\n    border-bottom: $color-border-style;\n    border-left: $transparent-border-style;\n    border-right: $transparent-border-style;\n  }\n\n  @else if $direction==right {\n    border-left: $color-border-style;\n    border-top: $transparent-border-style;\n    border-bottom: $transparent-border-style;\n  }\n\n  @else if $direction==down {\n    border-top: $color-border-style;\n    border-left: $transparent-border-style;\n    border-right: $transparent-border-style;\n  }\n\n  @else if $direction==left {\n    border-right: $color-border-style;\n    border-top: $transparent-border-style;\n    border-bottom: $transparent-border-style;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n\n\n * common.scss\n\n * global.scss",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"手写css预处理器",frontmatter:{title:"手写css预处理器",date:"2022-10-31T14:09:59.000Z",permalink:"/pages/7499ea/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/1010150.%E6%89%8B%E5%86%99css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8.html",relativePath:"10.大前端/1010.HTML&CSS/1010150.手写css预处理器.md",key:"v-18fed24a",path:"/pages/7499ea/",headers:[{level:3,title:"功能需求",slug:"功能需求",normalizedTitle:"功能需求",charIndex:2},{level:3,title:"编译器",slug:"编译器",normalizedTitle:"编译器",charIndex:932},{level:4,title:"解析",slug:"解析",normalizedTitle:"解析",charIndex:871},{level:4,title:"转换",slug:"转换",normalizedTitle:"转换",charIndex:953},{level:4,title:"代码生成",slug:"代码生成",normalizedTitle:"代码生成",charIndex:1084},{level:3,title:"代码实现",slug:"代码实现",normalizedTitle:"代码实现",charIndex:1877},{level:4,title:"词法分析",slug:"词法分析",normalizedTitle:"词法分析",charIndex:1127},{level:4,title:"语法分析",slug:"语法分析",normalizedTitle:"语法分析",charIndex:1132},{level:4,title:"转换",slug:"转换-2",normalizedTitle:"转换",charIndex:953},{level:4,title:"代码生成",slug:"代码生成-2",normalizedTitle:"代码生成",charIndex:1084}],headersStr:"功能需求 编译器 解析 转换 代码生成 代码实现 词法分析 语法分析 转换 代码生成",content:"# 功能需求\n\n功能可以理解为精简版的 stylus，主要实现的功能有：\n\n * 用空格和换行符替代花括号、冒号和分号；\n * 支持选择器的嵌套组合；\n * 支持以“$”符号开头的变量定义和使用。\n\n如果你对这种风格不是很熟悉也没关系，通过下面这个例子你就能很快明白。\n\n目标 CSS 代码，为 5 条样式规则。第 1 条和第 5 条样式规则是最简单的，使用 1 个选择器，定义了 1 条样式属性；第 2 条规则多用了一个标签选择器，样式属性值为多个字符串组成；第 3 条规则使用了类选择器；第 4 条规则增加了属性选择器，并且样式属性增加为 2 条。\n\ndiv {color:darkkhaki;}\ndiv p {border:1px solid lightgreen;}\ndiv .a-b {background-color:lightyellow;}\ndiv .a-b [data] {padding:15px;font-size:12px;}\n.d-ib {display:inline-block;}\n\n\n1\n2\n3\n4\n5\n\n\n再来看看“源代码”，首先声明了两个变量，然后通过换行缩进定义了上述样式规则中的选择器和样式：\n\n$ib inline-block\n$borderColor lightgreen\ndiv\n  p\n    border 1px solid $borderColor\n  color darkkhaki\n  .a-b\n    background-color lightyellow\n    [data]\n      padding 15px\n      font-size 12px\n.d-ib\n  display $ib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n像上面这种强制缩进换行的风格应用非常广泛，比如编程语言 Python、HTML 模板 pug、预处理器 Sass（以“.sass”为后缀的文件）。\n\n这种风格可能有些工程师并不适应，因为缩进空格数不一致就会导致程序解析失败或执行出错。但它也有一些优点，比如格式整齐，省去了花括号等冗余字符，减少了代码量。推荐大家在项目中使用。\n\n\n# 编译器\n\n对预处理器这种能将一种语言（法）转换成另一种语言（法）的程序一般称之为“编译器”。我们平常所知的高级语言都离不开编译器，比如 C++、Java、JavaScript。\n\n不同语言的编译器的工作流程有些差异，但大体上可以分成三个步骤：解析（Parsing）、转换（Transformation）及代码生成（Code Generation）。\n\n# 解析\n\n解析步骤一般分为两个阶段：词法分析和语法分析。\n\n词法分析就是将接收到的源代码转换成令牌（Token），完成这个过程的函数或工具被称之为词法分析器（Tokenizer 或 Lexer）。\n\n令牌由一些代码语句的碎片生成，它们可以是数字、标签、标点符号、运算符，或者其他任何东西。\n\n将代码令牌化之后会进入语法分析，这个过程会将之前生成的令牌转换成一种带有令牌关系描述的抽象表示，这种抽象的表示称之为抽象语法树（Abstract Syntax Tree，AST）。完成这个过程的函数或工具被称为语法分析器（Parser）。\n\n抽象语法树通常是一个深度嵌套的对象，这种数据结构不仅更贴合代码逻辑，在后面的操作效率方面相对于令牌数组也更有优势。\n\n可以回想一下，我们在第 06 讲中提到的解析 HTML 流程也包括了这两个步骤。\n\n# 转换\n\n解析完成之后的下一步就是转换，即把 AST 拿过来然后做一些修改，完成这个过程的函数或工具被称之为转换器（Transformer）。\n\n在这个过程中，AST 中的节点可以被修改和删除，也可以新增节点。根本目的就是为了代码生成的时候更加方便。\n\n# 代码生成\n\n编译器的最后一步就是根据转换后的 AST 来生成目标代码，这个阶段做的事情有时候会和转换重叠，但是代码生成最主要的部分还是根据转换后的 AST 来输出代码。完成这个过程的函数或工具被称之为生成器（Generator）。\n\n代码生成有几种不同的工作方式，有些编译器将会重用之前生成的令牌，有些会创建独立代码\n\n表示，以便于线性地输出代码。但是接下来我们还是着重于使用之前生成好的 AST。\n\n代码生成器必须知道如何“打印”转换后的 AST 中所有类型的节点，然后递归地调用自身，直到所有代码都被打印到一个很长的字符串中。\n\n\n# 代码实现\n\n学习了编译器相关知识之后，我们再来按照上述步骤编写代码。\n\n# 词法分析\n\n在进行词法分析之前，首先要考虑字符串可以被拆分成多少种类型的令牌，然后再确定令牌的判断条件及解析方式。\n\n通过分析源代码，可以将字符串分为变量、变量值、选择器、属性、属性值 5 种类型。但其中属性值和变量可以合并成一类进行处理，为了方便后面语法分析，变量可以拆分成变量定义和变量引用。\n\n由于缩进会对语法分析产生影响（样式规则缩进空格数决定了属于哪个选择器），所以也要加入令牌对象。\n\n因此一个令牌对象结构如下，type 属性表示令牌类型，value 属性存储令牌字符内容，indent 属性记录缩进空格数：\n\n{\n  type: \"variableDef\" | \"variableRef\" | \"selector\" | \"property\" | \"value\", //枚举值，分别对应变量定义、变量引用、选择器、属性、值\n  value: string, // token字符值，即被分解的字符串\n  indent: number // 缩进空格数，需要根据它判断从属关系\n}\n\n\n1\n2\n3\n4\n5\n\n\n然后确定各种类型令牌的判断条件：\n\n * variableDef，以“$”符号开头，该行前面无其他非空字符串；\n * variableRef，以“$”符号开头，该行前面有非空字符串；\n * selector，独占一行，该行无其他非空字符串；\n * property，以字母开头，该行前面无其他非空字符串；\n * value，非该行第一个字符串，且该行第一个字符串为 property 或 variableDef 类型。\n\n最后再来确定令牌解析方式。\n\n一般进行词法解析的时候，可以逐个字符进行解析判断，但考虑到源代码语法的特殊性——换行符和空格缩进会影响语法解析，所以可以考虑逐行逐个单词进行解析。\n\n词法分析代码如下所示：\n\nfunction tokenize(text) {\n  return text.trim().split(/\\n|\\r\\n/).reduce((tokens, line, idx) => {\n    const spaces = line.match(/^\\s+/) || ['']\n    const indent = spaces[0].length\n    const input = line.trim()\n    const words = input.split(/\\s/)\n    let value = words.shift()\n    if (words.length === 0) {\n      tokens.push({\n        type: 'selector',\n        value,\n        indent\n      })\n    } else {\n      let type = ''\n      if (/^\\$/.test(value)) {\n        type = 'variableDef'\n      } else if (/^[a-zA-Z-]+$/.test(value)) {\n        type = 'property'\n      } else {\n        throw new Error(`Tokenize error:Line ${idx} \"${value}\" is not a vairable or property!`)\n      }\n      tokens.push({\n        type,\n        value,\n        indent\n      })\n      while (value = words.shift()) {\n        tokens.push({\n          type: /^\\$/.test(value) ? 'variableRef' : 'value',\n          value,\n          indent: 0\n        })\n      }\n    }\n    return tokens;\n  }, [])\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n# 语法分析\n\n现在我们来分析如何将上一步生成的令牌数组转化成抽象语法树，树结构相对于数组而言，最大的特点是具有层级关系，哪些令牌具有层级关系呢？\n\n从缩进中不难看出，选择器与选择器、选择器与属性都存在层级关系，那么我们可以分别通过 children 属性和 rules 属性来描述这两类层级关系。\n\n要判断层级关系需要借助缩进空格数，所以节点需要增加一个属性 indent。\n\n考虑到构建树时可能会产生回溯，那么可以设置一个数组来记录当前构建路径。当遇到非父子关系的节点时，沿着当前路径往上找到其父节点。\n\n最后为了简化树结构，这一步也可以将变量值进行替换，从而减少变量节点。\n\n所以抽象语法树可以写成如下结构。首先定义一个根节点，在其 children 属性中添加选择器节点，选择器节点相对令牌而言增加了 2 个属性：\n\n * rules，存储当前选择器的样式属性和值组成的对象，其中值以字符串数组的形式存储；\n * children，子选择器节点。\n\n{\n  type: 'root',\n  children: [{\n    type: 'selector',\n    value: string\n    rules: [{\n      property: string,\n      value: string[],\n    }],\n    indent: number,\n    children: []\n  }]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n由于考虑到一个属性的值可能会由多个令牌组成，比如 border 属性的值由“1px” “solid” “$borderColor” 3 个令牌组成，所以将 value 属性设置为字符串数组。\n\n语法分析代码如下所示。首先定义一个根节点，然后按照先进先出的方式遍历令牌数组，遇到变量定义时，将变量名和对应的值存入到缓存对象中；当遇到属性时，插入到当前选择器节点的 rules 属性中，遇到值和变量引用时都将插入到当前选择器节点 rules 属性数组最后一个对象的 value 数组中，但是变量引用在插入之前需要借助缓存对象的变量值进行替换。当遇到选择器节点时，则需要往对应的父选择器节点 children 属性中插入，并将指针指向被插入的节点，同时记得将被插入的节点添加到用于存储遍历路径的数组中：\n\nfunction parse(tokens) {\n  var ast = {\n    type: 'root',\n    children: [],\n    indent: -1\n  };\n  let path = [ast]\n  let preNode = ast\n  let node\n  let vDict = {}\n  while (node = tokens.shift()) {\n    if (node.type === 'variableDef') {\n      if (tokens[0] &amp;&amp; tokens[0].type === 'value') {\n        const vNode = tokens.shift()\n        vDict[node.value] = vNode.value\n      } else {\n        preNode.rules[preNode.rules.length - 1].value = vDict[node.value]\n      }\n      continue;\n    }\n    if (node.type === 'property') {\n      if (node.indent > preNode.indent) {\n        preNode.rules.push({\n          property: node.value,\n          value: []\n        })\n      } else {\n        let parent = path.pop()\n        while (node.indent &lt;= parent.indent) {\n          parent = path.pop()\n        }\n        parent.rules.push({\n          property: node.value,\n          value: []\n        })\n        preNode = parent\n        path.push(parent)\n      }\n      continue;\n    }\n    if (node.type === 'value') {\n      try {\n        preNode.rules[preNode.rules.length - 1].value.push(node.value);\n      } catch (e) {\n        console.error(preNode)\n      }\n      continue;\n    }\n    if (node.type === 'variableRef') {\n      preNode.rules[preNode.rules.length - 1].value.push(vDict[node.value]);\n      continue;\n    }\n    if (node.type === 'selector') {\n      const item = {\n        type: 'selector',\n        value: node.value,\n        indent: node.indent,\n        rules: [],\n        children: []\n      }\n      if (node.indent > preNode.indent) {\n        path[path.length - 1].indent === node.indent &amp;&amp; path.pop()\n        path.push(item)\n        preNode.children.push(item);\n        preNode = item;\n      } else {\n        let parent = path.pop()\n        while (node.indent &lt;= parent.indent) {\n          parent = path.pop()\n        }\n        parent.children.push(item)\n        path.push(item)\n      }\n    }\n  }\n  return ast;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n\n\n# 转换\n\n在转换之前我们先来看看要生成的目标代码结构，其更像是一个由一条条样式规则组成的数组，所以我们考虑将抽象语法树转换成“抽象语法数组”。\n\n在遍历树节点时，需要记录当前遍历路径，以方便选择器的拼接；同时可以考虑将“值”类型的节点拼接在一起。最后形成下面的数组结构，数组中每个元素对象包括两个属性，selector 属性值为当前规则的选择器，rules 属性为数组，数组中每个元素对象包含 property 和 value 属性：\n\n{\n  selector: string,\n  rules: {\n    property: string,\n    value: string\n  }[]\n}[]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n具体代码实现如下，递归遍历抽象语法树，遍历的时候完成选择器拼接以及属性值的拼接，最终返回一个与 CSS 样式规则相对应的数组：\n\nfunction transform(ast) {\n  let newAst = [];\n  function traverse(node, result, prefix) {\n    let selector = ''\n    if (node.type === 'selector') {\n      selector = [...prefix, node.value];\n      result.push({\n        selector: selector.join(' '),\n        rules: node.rules.reduce((acc, rule) => {\n          acc.push({\n            property: rule.property,\n            value: rule.value.join(' ')\n          })\n          return acc;\n        }, [])\n      })\n    }\n    for (let i = 0; i &lt; node.children.length; i++) {\n      traverse(node.children[i], result, selector)\n    }\n  }\n  traverse(ast, newAst, [])\n  return newAst;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n实现方式比较简单，通过函数递归遍历树，然后重新拼接选择器和属性的值，最终返回数组结构。\n\n# 代码生成\n\n有了新的“抽象语法数组”，生成目标代码就只需要通过 map 操作对数组进行遍历，然后将选择器、属性、值拼接成字符串返回即可。\n\n具体代码如下：\n\nfunction generate(nodes) {\n  return nodes.map(n => {\n    let rules = n.rules.reduce((acc, item) => acc += `${item.property}:${item.value};`, '')\n    return `${n.selector} {${rules}}`\n  }).join('\\n')\n}\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"# 功能需求\n\n功能可以理解为精简版的 stylus，主要实现的功能有：\n\n * 用空格和换行符替代花括号、冒号和分号；\n * 支持选择器的嵌套组合；\n * 支持以“$”符号开头的变量定义和使用。\n\n如果你对这种风格不是很熟悉也没关系，通过下面这个例子你就能很快明白。\n\n目标 css 代码，为 5 条样式规则。第 1 条和第 5 条样式规则是最简单的，使用 1 个选择器，定义了 1 条样式属性；第 2 条规则多用了一个标签选择器，样式属性值为多个字符串组成；第 3 条规则使用了类选择器；第 4 条规则增加了属性选择器，并且样式属性增加为 2 条。\n\ndiv {color:darkkhaki;}\ndiv p {border:1px solid lightgreen;}\ndiv .a-b {background-color:lightyellow;}\ndiv .a-b [data] {padding:15px;font-size:12px;}\n.d-ib {display:inline-block;}\n\n\n1\n2\n3\n4\n5\n\n\n再来看看“源代码”，首先声明了两个变量，然后通过换行缩进定义了上述样式规则中的选择器和样式：\n\n$ib inline-block\n$bordercolor lightgreen\ndiv\n  p\n    border 1px solid $bordercolor\n  color darkkhaki\n  .a-b\n    background-color lightyellow\n    [data]\n      padding 15px\n      font-size 12px\n.d-ib\n  display $ib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n像上面这种强制缩进换行的风格应用非常广泛，比如编程语言 python、html 模板 pug、预处理器 sass（以“.sass”为后缀的文件）。\n\n这种风格可能有些工程师并不适应，因为缩进空格数不一致就会导致程序解析失败或执行出错。但它也有一些优点，比如格式整齐，省去了花括号等冗余字符，减少了代码量。推荐大家在项目中使用。\n\n\n# 编译器\n\n对预处理器这种能将一种语言（法）转换成另一种语言（法）的程序一般称之为“编译器”。我们平常所知的高级语言都离不开编译器，比如 c++、java、javascript。\n\n不同语言的编译器的工作流程有些差异，但大体上可以分成三个步骤：解析（parsing）、转换（transformation）及代码生成（code generation）。\n\n# 解析\n\n解析步骤一般分为两个阶段：词法分析和语法分析。\n\n词法分析就是将接收到的源代码转换成令牌（token），完成这个过程的函数或工具被称之为词法分析器（tokenizer 或 lexer）。\n\n令牌由一些代码语句的碎片生成，它们可以是数字、标签、标点符号、运算符，或者其他任何东西。\n\n将代码令牌化之后会进入语法分析，这个过程会将之前生成的令牌转换成一种带有令牌关系描述的抽象表示，这种抽象的表示称之为抽象语法树（abstract syntax tree，ast）。完成这个过程的函数或工具被称为语法分析器（parser）。\n\n抽象语法树通常是一个深度嵌套的对象，这种数据结构不仅更贴合代码逻辑，在后面的操作效率方面相对于令牌数组也更有优势。\n\n可以回想一下，我们在第 06 讲中提到的解析 html 流程也包括了这两个步骤。\n\n# 转换\n\n解析完成之后的下一步就是转换，即把 ast 拿过来然后做一些修改，完成这个过程的函数或工具被称之为转换器（transformer）。\n\n在这个过程中，ast 中的节点可以被修改和删除，也可以新增节点。根本目的就是为了代码生成的时候更加方便。\n\n# 代码生成\n\n编译器的最后一步就是根据转换后的 ast 来生成目标代码，这个阶段做的事情有时候会和转换重叠，但是代码生成最主要的部分还是根据转换后的 ast 来输出代码。完成这个过程的函数或工具被称之为生成器（generator）。\n\n代码生成有几种不同的工作方式，有些编译器将会重用之前生成的令牌，有些会创建独立代码\n\n表示，以便于线性地输出代码。但是接下来我们还是着重于使用之前生成好的 ast。\n\n代码生成器必须知道如何“打印”转换后的 ast 中所有类型的节点，然后递归地调用自身，直到所有代码都被打印到一个很长的字符串中。\n\n\n# 代码实现\n\n学习了编译器相关知识之后，我们再来按照上述步骤编写代码。\n\n# 词法分析\n\n在进行词法分析之前，首先要考虑字符串可以被拆分成多少种类型的令牌，然后再确定令牌的判断条件及解析方式。\n\n通过分析源代码，可以将字符串分为变量、变量值、选择器、属性、属性值 5 种类型。但其中属性值和变量可以合并成一类进行处理，为了方便后面语法分析，变量可以拆分成变量定义和变量引用。\n\n由于缩进会对语法分析产生影响（样式规则缩进空格数决定了属于哪个选择器），所以也要加入令牌对象。\n\n因此一个令牌对象结构如下，type 属性表示令牌类型，value 属性存储令牌字符内容，indent 属性记录缩进空格数：\n\n{\n  type: \"variabledef\" | \"variableref\" | \"selector\" | \"property\" | \"value\", //枚举值，分别对应变量定义、变量引用、选择器、属性、值\n  value: string, // token字符值，即被分解的字符串\n  indent: number // 缩进空格数，需要根据它判断从属关系\n}\n\n\n1\n2\n3\n4\n5\n\n\n然后确定各种类型令牌的判断条件：\n\n * variabledef，以“$”符号开头，该行前面无其他非空字符串；\n * variableref，以“$”符号开头，该行前面有非空字符串；\n * selector，独占一行，该行无其他非空字符串；\n * property，以字母开头，该行前面无其他非空字符串；\n * value，非该行第一个字符串，且该行第一个字符串为 property 或 variabledef 类型。\n\n最后再来确定令牌解析方式。\n\n一般进行词法解析的时候，可以逐个字符进行解析判断，但考虑到源代码语法的特殊性——换行符和空格缩进会影响语法解析，所以可以考虑逐行逐个单词进行解析。\n\n词法分析代码如下所示：\n\nfunction tokenize(text) {\n  return text.trim().split(/\\n|\\r\\n/).reduce((tokens, line, idx) => {\n    const spaces = line.match(/^\\s+/) || ['']\n    const indent = spaces[0].length\n    const input = line.trim()\n    const words = input.split(/\\s/)\n    let value = words.shift()\n    if (words.length === 0) {\n      tokens.push({\n        type: 'selector',\n        value,\n        indent\n      })\n    } else {\n      let type = ''\n      if (/^\\$/.test(value)) {\n        type = 'variabledef'\n      } else if (/^[a-za-z-]+$/.test(value)) {\n        type = 'property'\n      } else {\n        throw new error(`tokenize error:line ${idx} \"${value}\" is not a vairable or property!`)\n      }\n      tokens.push({\n        type,\n        value,\n        indent\n      })\n      while (value = words.shift()) {\n        tokens.push({\n          type: /^\\$/.test(value) ? 'variableref' : 'value',\n          value,\n          indent: 0\n        })\n      }\n    }\n    return tokens;\n  }, [])\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n# 语法分析\n\n现在我们来分析如何将上一步生成的令牌数组转化成抽象语法树，树结构相对于数组而言，最大的特点是具有层级关系，哪些令牌具有层级关系呢？\n\n从缩进中不难看出，选择器与选择器、选择器与属性都存在层级关系，那么我们可以分别通过 children 属性和 rules 属性来描述这两类层级关系。\n\n要判断层级关系需要借助缩进空格数，所以节点需要增加一个属性 indent。\n\n考虑到构建树时可能会产生回溯，那么可以设置一个数组来记录当前构建路径。当遇到非父子关系的节点时，沿着当前路径往上找到其父节点。\n\n最后为了简化树结构，这一步也可以将变量值进行替换，从而减少变量节点。\n\n所以抽象语法树可以写成如下结构。首先定义一个根节点，在其 children 属性中添加选择器节点，选择器节点相对令牌而言增加了 2 个属性：\n\n * rules，存储当前选择器的样式属性和值组成的对象，其中值以字符串数组的形式存储；\n * children，子选择器节点。\n\n{\n  type: 'root',\n  children: [{\n    type: 'selector',\n    value: string\n    rules: [{\n      property: string,\n      value: string[],\n    }],\n    indent: number,\n    children: []\n  }]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n由于考虑到一个属性的值可能会由多个令牌组成，比如 border 属性的值由“1px” “solid” “$bordercolor” 3 个令牌组成，所以将 value 属性设置为字符串数组。\n\n语法分析代码如下所示。首先定义一个根节点，然后按照先进先出的方式遍历令牌数组，遇到变量定义时，将变量名和对应的值存入到缓存对象中；当遇到属性时，插入到当前选择器节点的 rules 属性中，遇到值和变量引用时都将插入到当前选择器节点 rules 属性数组最后一个对象的 value 数组中，但是变量引用在插入之前需要借助缓存对象的变量值进行替换。当遇到选择器节点时，则需要往对应的父选择器节点 children 属性中插入，并将指针指向被插入的节点，同时记得将被插入的节点添加到用于存储遍历路径的数组中：\n\nfunction parse(tokens) {\n  var ast = {\n    type: 'root',\n    children: [],\n    indent: -1\n  };\n  let path = [ast]\n  let prenode = ast\n  let node\n  let vdict = {}\n  while (node = tokens.shift()) {\n    if (node.type === 'variabledef') {\n      if (tokens[0] &amp;&amp; tokens[0].type === 'value') {\n        const vnode = tokens.shift()\n        vdict[node.value] = vnode.value\n      } else {\n        prenode.rules[prenode.rules.length - 1].value = vdict[node.value]\n      }\n      continue;\n    }\n    if (node.type === 'property') {\n      if (node.indent > prenode.indent) {\n        prenode.rules.push({\n          property: node.value,\n          value: []\n        })\n      } else {\n        let parent = path.pop()\n        while (node.indent &lt;= parent.indent) {\n          parent = path.pop()\n        }\n        parent.rules.push({\n          property: node.value,\n          value: []\n        })\n        prenode = parent\n        path.push(parent)\n      }\n      continue;\n    }\n    if (node.type === 'value') {\n      try {\n        prenode.rules[prenode.rules.length - 1].value.push(node.value);\n      } catch (e) {\n        console.error(prenode)\n      }\n      continue;\n    }\n    if (node.type === 'variableref') {\n      prenode.rules[prenode.rules.length - 1].value.push(vdict[node.value]);\n      continue;\n    }\n    if (node.type === 'selector') {\n      const item = {\n        type: 'selector',\n        value: node.value,\n        indent: node.indent,\n        rules: [],\n        children: []\n      }\n      if (node.indent > prenode.indent) {\n        path[path.length - 1].indent === node.indent &amp;&amp; path.pop()\n        path.push(item)\n        prenode.children.push(item);\n        prenode = item;\n      } else {\n        let parent = path.pop()\n        while (node.indent &lt;= parent.indent) {\n          parent = path.pop()\n        }\n        parent.children.push(item)\n        path.push(item)\n      }\n    }\n  }\n  return ast;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n\n\n# 转换\n\n在转换之前我们先来看看要生成的目标代码结构，其更像是一个由一条条样式规则组成的数组，所以我们考虑将抽象语法树转换成“抽象语法数组”。\n\n在遍历树节点时，需要记录当前遍历路径，以方便选择器的拼接；同时可以考虑将“值”类型的节点拼接在一起。最后形成下面的数组结构，数组中每个元素对象包括两个属性，selector 属性值为当前规则的选择器，rules 属性为数组，数组中每个元素对象包含 property 和 value 属性：\n\n{\n  selector: string,\n  rules: {\n    property: string,\n    value: string\n  }[]\n}[]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n具体代码实现如下，递归遍历抽象语法树，遍历的时候完成选择器拼接以及属性值的拼接，最终返回一个与 css 样式规则相对应的数组：\n\nfunction transform(ast) {\n  let newast = [];\n  function traverse(node, result, prefix) {\n    let selector = ''\n    if (node.type === 'selector') {\n      selector = [...prefix, node.value];\n      result.push({\n        selector: selector.join(' '),\n        rules: node.rules.reduce((acc, rule) => {\n          acc.push({\n            property: rule.property,\n            value: rule.value.join(' ')\n          })\n          return acc;\n        }, [])\n      })\n    }\n    for (let i = 0; i &lt; node.children.length; i++) {\n      traverse(node.children[i], result, selector)\n    }\n  }\n  traverse(ast, newast, [])\n  return newast;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n实现方式比较简单，通过函数递归遍历树，然后重新拼接选择器和属性的值，最终返回数组结构。\n\n# 代码生成\n\n有了新的“抽象语法数组”，生成目标代码就只需要通过 map 操作对数组进行遍历，然后将选择器、属性、值拼接成字符串返回即可。\n\n具体代码如下：\n\nfunction generate(nodes) {\n  return nodes.map(n => {\n    let rules = n.rules.reduce((acc, item) => acc += `${item.property}:${item.value};`, '')\n    return `${n.selector} {${rules}}`\n  }).join('\\n')\n}\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"iframe",frontmatter:{title:"iframe",date:"2021-12-30T13:35:15.000Z",permalink:"/pages/10481f/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101020.iframe.html",relativePath:"10.大前端/1010.HTML&CSS/101020.iframe.md",key:"v-53879af9",path:"/pages/10481f/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"grid vs flex布局",frontmatter:{title:"grid vs flex布局",date:"2023-03-30T15:26:38.000Z",permalink:"/pages/933422/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/1010200.grid%20vs%20flex%E5%B8%83%E5%B1%80.html",relativePath:"10.大前端/1010.HTML&CSS/1010200.grid vs flex布局.md",key:"v-2147514e",path:"/pages/933422/",headers:[{level:2,title:"居中",slug:"居中",normalizedTitle:"居中",charIndex:2}],headersStr:"居中",content:"# 居中\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n\n1\n2\n3\n\n\n\n\n\n1\n",normalizedContent:"# 居中\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n\n1\n2\n3\n\n\n\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"css 变量使用",frontmatter:{title:"css 变量使用",date:"2022-01-26T18:38:17.000Z",permalink:"/pages/749ce2/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101030.css%20%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8.html",relativePath:"10.大前端/1010.HTML&CSS/101030.css 变量使用.md",key:"v-375f6543",path:"/pages/749ce2/",headers:[{level:2,title:"js",slug:"js",normalizedTitle:"js",charIndex:2}],headersStr:"js",content:'# js\n\n// 获取一个 Dom 节点上的 CSS 变量\nelement.style.getPropertyValue("--my-var");\n\n// 获取任意 Dom 节点上的 CSS 变量\ngetComputedStyle(element).getPropertyValue("--my-var");\n\n// 修改一个 Dom 节点上的 CSS 变量\nelement.style.setProperty("--my-var", jsVar + 4);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意点：\n\ncss变量需要提前定义，若是在需要时才使用js修改设置变量则不生效。',normalizedContent:'# js\n\n// 获取一个 dom 节点上的 css 变量\nelement.style.getpropertyvalue("--my-var");\n\n// 获取任意 dom 节点上的 css 变量\ngetcomputedstyle(element).getpropertyvalue("--my-var");\n\n// 修改一个 dom 节点上的 css 变量\nelement.style.setproperty("--my-var", jsvar + 4);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意点：\n\ncss变量需要提前定义，若是在需要时才使用js修改设置变量则不生效。',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"css常见但不常用的属性",frontmatter:{title:"css常见但不常用的属性",date:"2022-02-16T17:41:37.000Z",permalink:"/pages/14d171/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101031.css%E5%B8%B8%E8%A7%81%E4%BD%86%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B1%9E%E6%80%A7.html",relativePath:"10.大前端/1010.HTML&CSS/101031.css常见但不常用的属性.md",key:"v-b41db4aa",path:"/pages/14d171/",headersStr:null,content:" * pointer-events",normalizedContent:" * pointer-events",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"躺着旋转动画",frontmatter:{title:"躺着旋转动画",date:"2022-02-17T10:32:35.000Z",permalink:"/pages/dbb200/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101032.%E8%BA%BA%E7%9D%80%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB.html",relativePath:"10.大前端/1010.HTML&CSS/101032.躺着旋转动画.md",key:"v-7f25d5ce",path:"/pages/dbb200/",headers:[{level:2,title:"目的",slug:"目的",normalizedTitle:"目的",charIndex:2},{level:2,title:"实现过程",slug:"实现过程",normalizedTitle:"实现过程",charIndex:33}],headersStr:"目的 实现过程",content:"# 目的\n\n实现效果如下 3d 下面两个底盘相向旋转\n\n\n\n\n# 实现过程\n\n * 定义两个平面相向旋转，然后3d x轴旋转一定的角度即可\n * 实现代码如下\n   * 封装scss函数 mixin\n\n@mixin round-ani($img, $rx: 60deg, $isReverse: false) {\n  transform: rotateX($rx);\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-image: $img;\n    background-size: 100% 100%;\n    // animation: round-ani 3s linear infinite;\n    @if $isReverse {\n      animation-name: -round-ani;\n    } @else {\n      animation-name: round-ani;\n    }\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-duration: 3s;\n  }\n\n  @keyframes round-ani {\n    0% {\n      transform: rotate(0);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes -round-ani {\n    0% {\n      transform: rotate(0);\n    }\n    100% {\n      transform: rotate(-360deg);\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n * 使用\n\nsection {\n  ...\n  position: relative;       \n  .rotate_el {\n    height: 200px;\n    width: 200px;\n    position: absolute;\n    left: 50%;\n    // transform: translateX(-50%);\n    margin-left: -100px;\n    top: -36px;\n    @include round-ani(url('../../../../../assets/img/monitor/5661645013638_.pic.jpg'));\n  }\n  .rotate_el2 {\n    position: absolute;\n    width: 200px;\n    height: 200px;\n    left: 50%;\n    // transform: translateX(-50%);\n    margin-left: -100px;\n    top: -32px;\n    @include round-ani(\n      url('../../../../../assets/img/monitor/5671645013638_.pic.jpg'),\n      60deg,\n      true\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n",normalizedContent:"# 目的\n\n实现效果如下 3d 下面两个底盘相向旋转\n\n\n\n\n# 实现过程\n\n * 定义两个平面相向旋转，然后3d x轴旋转一定的角度即可\n * 实现代码如下\n   * 封装scss函数 mixin\n\n@mixin round-ani($img, $rx: 60deg, $isreverse: false) {\n  transform: rotatex($rx);\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-image: $img;\n    background-size: 100% 100%;\n    // animation: round-ani 3s linear infinite;\n    @if $isreverse {\n      animation-name: -round-ani;\n    } @else {\n      animation-name: round-ani;\n    }\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-duration: 3s;\n  }\n\n  @keyframes round-ani {\n    0% {\n      transform: rotate(0);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes -round-ani {\n    0% {\n      transform: rotate(0);\n    }\n    100% {\n      transform: rotate(-360deg);\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n * 使用\n\nsection {\n  ...\n  position: relative;       \n  .rotate_el {\n    height: 200px;\n    width: 200px;\n    position: absolute;\n    left: 50%;\n    // transform: translatex(-50%);\n    margin-left: -100px;\n    top: -36px;\n    @include round-ani(url('../../../../../assets/img/monitor/5661645013638_.pic.jpg'));\n  }\n  .rotate_el2 {\n    position: absolute;\n    width: 200px;\n    height: 200px;\n    left: 50%;\n    // transform: translatex(-50%);\n    margin-left: -100px;\n    top: -32px;\n    @include round-ani(\n      url('../../../../../assets/img/monitor/5671645013638_.pic.jpg'),\n      60deg,\n      true\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"边框渐变（圆形）",frontmatter:{title:"边框渐变（圆形）",date:"2022-02-23T11:36:26.000Z",permalink:"/pages/7e3052/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101033.%E8%BE%B9%E6%A1%86%E6%B8%90%E5%8F%98%EF%BC%88%E5%9C%86%E5%BD%A2%EF%BC%89.html",relativePath:"10.大前端/1010.HTML&CSS/101033.边框渐变（圆形）.md",key:"v-44031c04",path:"/pages/7e3052/",headersStr:null,content:"⚠️注意点：通过 border-image 设置渐变色 border 是最简单的方法，但不支持设置 border-radius。",normalizedContent:"⚠️注意点：通过 border-image 设置渐变色 border 是最简单的方法，但不支持设置 border-radius。",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"float 布局",frontmatter:{title:"float 布局",date:"2022-01-11T18:30:56.000Z",permalink:"/pages/3aded5/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101050.float%20%E5%B8%83%E5%B1%80.html",relativePath:"10.大前端/1010.HTML&CSS/101050.float 布局.md",key:"v-9fd0a9a2",path:"/pages/3aded5/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"在 Javascript 和 Sass（或 CSS！）之间共享变量的方法",frontmatter:{title:"在 Javascript 和 Sass（或 CSS！）之间共享变量的方法",date:"2022-01-25T11:43:09.000Z",permalink:"/pages/2a8bd5/",categories:["大前端","HTML&CSS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/101060.%E5%9C%A8%20Javascript%20%E5%92%8C%20Sass%EF%BC%88%E6%88%96%20CSS%EF%BC%81%EF%BC%89%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95.html",relativePath:"10.大前端/1010.HTML&CSS/101060.在 Javascript 和 Sass（或 CSS！）之间共享变量的方法.md",key:"v-7d4a4db9",path:"/pages/2a8bd5/",headersStr:null,content:"随着大型单页应用程序的兴起，Javascript 和 CSS 越来越交织在一起。通常会在两者之间复制值（例如，与 React 的CSSTransitionGroup一起使用的动画持续时间或将品牌颜色传递到图形库中）。但是，维护相同值的两个副本不可避免地会导致只更新一个并最终导致令人沮丧的错误。幸运的是，使用webpack和CSS 模块，有更好的方法。\n\n第一步是安装我们的依赖项：\n\nnpm install sass-loader node-sass webpack --save-dev\n\n\n1\n\n\n接下来，我们需要配置 webpack 以使用，sass-loader以便我们可以从 Javascript 访问我们的 Sass 代码。\n\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader', 'sass-loader']\n      }\n    ]\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在是有趣的部分。我们在 Sass 中定义实际变量值并将其导出到 Javascript。CSS 模块有一个简洁的实用程序，称为:export. 该:export指令的工作原理基本上类似于 ES6 的export关键字。您的 Sass 代码将导出一个对象，其中包含要在 Javascript 中使用的变量名称及其相关值。这些值都导出为字符串。\n\n// styles/animation.scss\n$animation-length: 250;\n$animation-length-ms: $animation-length + 0ms;\n\n:export {\n  animationMillis: $animation-length-ms;\n}\n\n.component-enter {\n  ...\n\n  transition: all $animation-length-ms ease-in;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n你会注意到我们首先在一个变量中声明整数值，然后在另一个变量中添加0ms它。这允许我们只导出\"250\"而不是\"250ms\"在 Javascript 端更容易解析的那个（添加0ms数字将其“类型”强制转换为ms）。\n\n现在，在 Javascript 中，我们只需要从样式表中导入样式，并从我们导出的变量中解析一个 int ！\n\n// js/animation.js\nimport styles from '../styles/animation.scss'\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'\n\nconst millis = parseInt(styles.animationMillis)\n\n...\n\n<CSSTransitionGroup\n  transitionName=\"component\"\n  transitionEnterTimeout={millis}\n  transitionLeaveTimeout={millis}\n/>\n\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n这种方法非常简单，但是当您避免在 Javascript 和 Sass 之间同步更改的麻烦时，它会得到回报。",normalizedContent:"随着大型单页应用程序的兴起，javascript 和 css 越来越交织在一起。通常会在两者之间复制值（例如，与 react 的csstransitiongroup一起使用的动画持续时间或将品牌颜色传递到图形库中）。但是，维护相同值的两个副本不可避免地会导致只更新一个并最终导致令人沮丧的错误。幸运的是，使用webpack和css 模块，有更好的方法。\n\n第一步是安装我们的依赖项：\n\nnpm install sass-loader node-sass webpack --save-dev\n\n\n1\n\n\n接下来，我们需要配置 webpack 以使用，sass-loader以便我们可以从 javascript 访问我们的 sass 代码。\n\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader', 'sass-loader']\n      }\n    ]\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在是有趣的部分。我们在 sass 中定义实际变量值并将其导出到 javascript。css 模块有一个简洁的实用程序，称为:export. 该:export指令的工作原理基本上类似于 es6 的export关键字。您的 sass 代码将导出一个对象，其中包含要在 javascript 中使用的变量名称及其相关值。这些值都导出为字符串。\n\n// styles/animation.scss\n$animation-length: 250;\n$animation-length-ms: $animation-length + 0ms;\n\n:export {\n  animationmillis: $animation-length-ms;\n}\n\n.component-enter {\n  ...\n\n  transition: all $animation-length-ms ease-in;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n你会注意到我们首先在一个变量中声明整数值，然后在另一个变量中添加0ms它。这允许我们只导出\"250\"而不是\"250ms\"在 javascript 端更容易解析的那个（添加0ms数字将其“类型”强制转换为ms）。\n\n现在，在 javascript 中，我们只需要从样式表中导入样式，并从我们导出的变量中解析一个 int ！\n\n// js/animation.js\nimport styles from '../styles/animation.scss'\nimport csstransitiongroup from 'react-transition-group/csstransitiongroup'\n\nconst millis = parseint(styles.animationmillis)\n\n...\n\n<csstransitiongroup\n  transitionname=\"component\"\n  transitionentertimeout={millis}\n  transitionleavetimeout={millis}\n/>\n\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n这种方法非常简单，但是当您避免在 javascript 和 sass 之间同步更改的麻烦时，它会得到回报。",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Scss语言学习实用心得",frontmatter:{title:"Scss语言学习实用心得",date:"2020-12-11T11:15:53.000Z",permalink:"/pages/1110/",categories:["大前端","HTML&CSS","Scss语言学习实用心得"],tags:["HTML&CSS"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1010.HTML&CSS/1110.Scss%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%AE%9E%E7%94%A8%E5%BF%83%E5%BE%97.html",relativePath:"10.大前端/1010.HTML&CSS/1110.Scss语言学习实用心得.md",key:"v-2a7ec60c",path:"/pages/1110/",headers:[{level:2,title:"数据类型",slug:"数据类型",normalizedTitle:"数据类型",charIndex:2},{level:3,title:"字符串",slug:"字符串",normalizedTitle:"字符串",charIndex:11},{level:3,title:"数组列表",slug:"数组列表",normalizedTitle:"数组列表",charIndex:366},{level:4,title:"访问",slug:"访问",normalizedTitle:"访问",charIndex:374},{level:4,title:"查看",slug:"查看",normalizedTitle:"查看",charIndex:475},{level:4,title:"添加",slug:"添加",normalizedTitle:"添加",charIndex:482},{level:3,title:"map 对象",slug:"map-对象",normalizedTitle:"map 对象",charIndex:1288},{level:4,title:"查询",slug:"查询",normalizedTitle:"查询",charIndex:1298},{level:4,title:"循环",slug:"循环",normalizedTitle:"循环",charIndex:1529},{level:4,title:"添加",slug:"添加-2",normalizedTitle:"添加",charIndex:482},{level:4,title:"合并",slug:"合并",normalizedTitle:"合并",charIndex:2399}],headersStr:"数据类型 字符串 数组列表 访问 查看 添加 map 对象 查询 循环 添加 合并",content:'# 数据类型\n\n\n# 字符串\n\n@use "sass:string";\n$prefix: ms;\n\n.test {\n    font-size: -#{$prefix}-flex; // -ms-flex;\n    font-size: \\1F46D;  // 👭;\n    font-size: \\21; // \\!;\n    font-size: string.length(\\7Fx); // 5;\n    font-size: string.slice("Roboto Mono", -4); // "Mono";\n    font-size: string.index("Helvetica Neue", "Helvetica"); // 1;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 数组列表\n\n# 访问\n\n@use "sass:list";\n\n.test {\n    font-size: list.nth(10px 12px 16px, 2); // 12px\n}\n\n\n1\n2\n3\n4\n5\n\n\n# 查看\n\n不需要添加@use "sass:list";\n\n$sizes: 40px, 50px, 80px;\n\n@each $size in $sizes {\n  .icon-#{$size} {\n    font-size: $size;\n    height: $size;\n    width: $size;\n  }\n}\n\n// 编译后\n.icon-40px {\n  font-size: 40px;\n  height: 40px;\n  width: 40px;\n}\n\n.icon-50px {\n  font-size: 50px;\n  height: 50px;\n  width: 50px;\n}\n\n.icon-80px {\n  font-size: 80px;\n  height: 80px;\n  width: 80px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n# 添加\n\n@use "sass:list";\n\n.test {\n    // font-size: list.nth(10px 12px 16px, 2); // 12px\n    // font-size: list.nth([line1, line2, line3], -1); // line3\n    \n    font-size: list.index(1px solid red, 1px); // 1\n    font-size:  list.index(1px solid red, solid); // 2\n    font-size:  list.index(1px solid red, dashed); // null 不会显示这个样式\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# map 对象\n\n# 查询\n\n@use "sass:map";\n$font-weights: ("regular": 400, "medium": 500, "bold": 700);\n\n.test {\n    font-size: map.get($font-weights, "medium"); // 500;\n    font-size: map.get($font-weights, "extra-bold"); // null\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 循环\n\n$icons: ("eye": "\\f112", "start": "\\f12e", "stop": "\\f12f");\n\n@each $name, $glyph in $icons {\n  .icon-#{$name}:before {\n    display: inline-block;\n    font-family: "Icon Font";\n    content: $glyph;\n  }\n}\n\n// 编译\n.icon-eye:before {\n  display: inline-block;\n  font-family: "Icon Font";\n  content: "";\n}\n\n.icon-start:before {\n  display: inline-block;\n  font-family: "Icon Font";\n  content: "";\n}\n\n.icon-stop:before {\n  display: inline-block;\n  font-family: "Icon Font";\n  content: "";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n# 添加\n\n@use "sass:map";\n\n$font-weights: ("regular": 400, "medium": 500, "bold": 700);\n\nmap.set($font-weights, "extra-bold", 900); // ("regular": 400, "medium": 500, "bold": 700, "extra-bold": 900)\n\nmap.set($font-weights, "bold", 900);// ("regular": 400, "medium": 500, "bold": 900)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 合并\n\n@use "sass:map";\n\n$light-weights: ("lightest": 100, "light": 300);\n$heavy-weights: ("medium": 500, "bold": 700);\n\nmap.merge($light-weights, $heavy-weights); // ("lightest": 100, "light": 300, "medium": 500, "bold": 700)\n\n\n$weights: ("light": 300, "medium": 500);\nmap.merge($weights, ("medium": 700)); // ("light": 300, "medium": 700)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',normalizedContent:'# 数据类型\n\n\n# 字符串\n\n@use "sass:string";\n$prefix: ms;\n\n.test {\n    font-size: -#{$prefix}-flex; // -ms-flex;\n    font-size: \\1f46d;  // 👭;\n    font-size: \\21; // \\!;\n    font-size: string.length(\\7fx); // 5;\n    font-size: string.slice("roboto mono", -4); // "mono";\n    font-size: string.index("helvetica neue", "helvetica"); // 1;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 数组列表\n\n# 访问\n\n@use "sass:list";\n\n.test {\n    font-size: list.nth(10px 12px 16px, 2); // 12px\n}\n\n\n1\n2\n3\n4\n5\n\n\n# 查看\n\n不需要添加@use "sass:list";\n\n$sizes: 40px, 50px, 80px;\n\n@each $size in $sizes {\n  .icon-#{$size} {\n    font-size: $size;\n    height: $size;\n    width: $size;\n  }\n}\n\n// 编译后\n.icon-40px {\n  font-size: 40px;\n  height: 40px;\n  width: 40px;\n}\n\n.icon-50px {\n  font-size: 50px;\n  height: 50px;\n  width: 50px;\n}\n\n.icon-80px {\n  font-size: 80px;\n  height: 80px;\n  width: 80px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n# 添加\n\n@use "sass:list";\n\n.test {\n    // font-size: list.nth(10px 12px 16px, 2); // 12px\n    // font-size: list.nth([line1, line2, line3], -1); // line3\n    \n    font-size: list.index(1px solid red, 1px); // 1\n    font-size:  list.index(1px solid red, solid); // 2\n    font-size:  list.index(1px solid red, dashed); // null 不会显示这个样式\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# map 对象\n\n# 查询\n\n@use "sass:map";\n$font-weights: ("regular": 400, "medium": 500, "bold": 700);\n\n.test {\n    font-size: map.get($font-weights, "medium"); // 500;\n    font-size: map.get($font-weights, "extra-bold"); // null\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 循环\n\n$icons: ("eye": "\\f112", "start": "\\f12e", "stop": "\\f12f");\n\n@each $name, $glyph in $icons {\n  .icon-#{$name}:before {\n    display: inline-block;\n    font-family: "icon font";\n    content: $glyph;\n  }\n}\n\n// 编译\n.icon-eye:before {\n  display: inline-block;\n  font-family: "icon font";\n  content: "";\n}\n\n.icon-start:before {\n  display: inline-block;\n  font-family: "icon font";\n  content: "";\n}\n\n.icon-stop:before {\n  display: inline-block;\n  font-family: "icon font";\n  content: "";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n# 添加\n\n@use "sass:map";\n\n$font-weights: ("regular": 400, "medium": 500, "bold": 700);\n\nmap.set($font-weights, "extra-bold", 900); // ("regular": 400, "medium": 500, "bold": 700, "extra-bold": 900)\n\nmap.set($font-weights, "bold", 900);// ("regular": 400, "medium": 500, "bold": 900)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 合并\n\n@use "sass:map";\n\n$light-weights: ("lightest": 100, "light": 300);\n$heavy-weights: ("medium": 500, "bold": 700);\n\nmap.merge($light-weights, $heavy-weights); // ("lightest": 100, "light": 300, "medium": 500, "bold": 700)\n\n\n$weights: ("light": 300, "medium": 500);\nmap.merge($weights, ("medium": 700)); // ("light": 300, "medium": 700)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',charsets:{cjk:!0},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"缓缓滚动到顶部实现方式",frontmatter:{title:"缓缓滚动到顶部实现方式",date:"2021-11-29T22:23:18.000Z",permalink:"/pages/a31c06/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102000.%E7%BC%93%E7%BC%93%E6%BB%9A%E5%8A%A8%E5%88%B0%E9%A1%B6%E9%83%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102000.缓缓滚动到顶部实现方式.md",key:"v-34453bd6",path:"/pages/a31c06/",headersStr:null,content:"scrollToTop() {\n  const cubic = value => Math.pow(value, 3);\n  const easeInOutCubic = value => (value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2);\n  const beginTime = Date.now();\n  const beginValue = this.scrollToTopNum;\n  // const rAF = wx.requestAnimationFrame || (func => setTimeout(func, 16));\n  const rAF = func => setTimeout(func, 16);\n  const frameFunc = () => {\n    const progress = (Date.now() - beginTime) / 500;\n    if (progress < 1) {\n      this.scrollToTopNum = beginValue * (1 - easeInOutCubic(progress));\n      rAF(frameFunc);\n    } else {\n      this.scrollToTopNum = 0;\n    }\n  };\n  rAF(frameFunc);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n",normalizedContent:"scrolltotop() {\n  const cubic = value => math.pow(value, 3);\n  const easeinoutcubic = value => (value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2);\n  const begintime = date.now();\n  const beginvalue = this.scrolltotopnum;\n  // const raf = wx.requestanimationframe || (func => settimeout(func, 16));\n  const raf = func => settimeout(func, 16);\n  const framefunc = () => {\n    const progress = (date.now() - begintime) / 500;\n    if (progress < 1) {\n      this.scrolltotopnum = beginvalue * (1 - easeinoutcubic(progress));\n      raf(framefunc);\n    } else {\n      this.scrolltotopnum = 0;\n    }\n  };\n  raf(framefunc);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"js 精准和模糊获取dom",frontmatter:{title:"js 精准和模糊获取dom",date:"2022-01-26T15:14:33.000Z",permalink:"/pages/9ee936/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102001.js%20%E7%B2%BE%E5%87%86%E5%92%8C%E6%A8%A1%E7%B3%8A%E8%8E%B7%E5%8F%96dom.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102001.js 精准和模糊获取dom.md",key:"v-0489726b",path:"/pages/9ee936/",headers:[{level:2,title:"精准",slug:"精准",normalizedTitle:"精准",charIndex:158},{level:2,title:"模糊获取",slug:"模糊获取",normalizedTitle:"模糊获取",charIndex:264}],headersStr:"精准 模糊获取",content:'举例，获取如下dom\n\n<div id="__qiankun_microapp_wrapper_for_tsl_aipark_1643181250430_34__" data-name="tsl-aipark" data-version="2.5.1" data-qiankun="tsl-aipark">\n\n\n# 精准\n\n\n\n * js路径：document.querySelector("#__qiankun_microapp_wrapper_for_tsl_aipark_1643181250430_34__")\n\n\n# 模糊获取\n\n * 以**开头匹配\n\ndocument.querySelector("div[id^=\'*_qiankun_microapp_wrapper_for_tsl_aipark*\']")\n\n * 以**结尾\n   \n   * 只需要把上述^ 符号换成 $ 即可',normalizedContent:'举例，获取如下dom\n\n<div id="__qiankun_microapp_wrapper_for_tsl_aipark_1643181250430_34__" data-name="tsl-aipark" data-version="2.5.1" data-qiankun="tsl-aipark">\n\n\n# 精准\n\n\n\n * js路径：document.queryselector("#__qiankun_microapp_wrapper_for_tsl_aipark_1643181250430_34__")\n\n\n# 模糊获取\n\n * 以**开头匹配\n\ndocument.queryselector("div[id^=\'*_qiankun_microapp_wrapper_for_tsl_aipark*\']")\n\n * 以**结尾\n   \n   * 只需要把上述^ 符号换成 $ 即可',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"js 使用技巧",frontmatter:{title:"js 使用技巧",date:"2023-01-24T11:22:52.000Z",permalink:"/pages/cb116f/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020015.js%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020015.js 使用技巧.md",key:"v-44ae2d74",path:"/pages/cb116f/",headersStr:null,content:" * 使用 Object.create(null)就能创建一个没有原型链的纯对象\n\n * 正则表达式中 ^符号如果没有在[]中, 很可能代表的意思是一个空格",normalizedContent:" * 使用 object.create(null)就能创建一个没有原型链的纯对象\n\n * 正则表达式中 ^符号如果没有在[]中, 很可能代表的意思是一个空格",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"前端开发这些年碰到不常见的api（不论新旧 持续更新）",frontmatter:{title:"前端开发这些年碰到不常见的api（不论新旧 持续更新）",date:"2023-09-17T19:50:21.000Z",permalink:"/pages/b19749/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020015.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%BF%99%E4%BA%9B%E5%B9%B4%E7%A2%B0%E5%88%B0%E4%B8%8D%E5%B8%B8%E8%A7%81%E7%9A%84api%EF%BC%88%E4%B8%8D%E8%AE%BA%E6%96%B0%E6%97%A7%20%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020015.前端开发这些年碰到不常见的api（不论新旧 持续更新）.md",key:"v-68accd9a",path:"/pages/b19749/",headers:[{level:2,title:"数组",slug:"数组",normalizedTitle:"数组",charIndex:26},{level:3,title:"splice 方法-添加元素到数组的任何位置",slug:"splice-方法-添加元素到数组的任何位置",normalizedTitle:"splice 方法-添加元素到数组的任何位置",charIndex:33}],headersStr:"数组 splice 方法-添加元素到数组的任何位置",content:'# HTML\n\n\n# JavaScript\n\n\n# 数组\n\n\n# splice 方法-添加元素到数组的任何位置\n\nsplice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n\narray.splice(start[, deleteCount[, item1[, item2[, ...]]]])\n\nconst months = [\'Jan\', \'March\', \'April\', \'June\'];\nmonths.splice(1, 0, \'Feb\');\n// inserts at index 1\nconsole.log(months);\n// expected output: Array ["Jan", "Feb", "March", "April", "June"]\n\nmonths.splice(4, 1, \'May\');\n// replaces 1 element at index 4\nconsole.log(months);\n// expected output: Array ["Jan", "Feb", "March", "April", "May"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# CSS',normalizedContent:'# html\n\n\n# javascript\n\n\n# 数组\n\n\n# splice 方法-添加元素到数组的任何位置\n\nsplice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n\narray.splice(start[, deletecount[, item1[, item2[, ...]]]])\n\nconst months = [\'jan\', \'march\', \'april\', \'june\'];\nmonths.splice(1, 0, \'feb\');\n// inserts at index 1\nconsole.log(months);\n// expected output: array ["jan", "feb", "march", "april", "june"]\n\nmonths.splice(4, 1, \'may\');\n// replaces 1 element at index 4\nconsole.log(months);\n// expected output: array ["jan", "feb", "march", "april", "may"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# css',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"js api常用详解",frontmatter:{title:"js api常用详解",date:"2023-01-24T11:30:12.000Z",permalink:"/pages/a09c96/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020018.js%20api%E5%B8%B8%E7%94%A8%E8%AF%A6%E8%A7%A3.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020018.js api常用详解.md",key:"v-898894de",path:"/pages/a09c96/",headersStr:null,content:" * indexOf(searchString, position)\n   \n   position 可选\n   \n   该方法返回指定子字符串在大于或等于 position 位置的第一次出现的索引，默认为 0。如果 position 大于调用字符串的长度，则该方法根本不搜索调用字符串。如果 position 小于零，该方法的行为就像 position 为 0 时一样。\n   \n   * hello world hello'.indexOf('o', -5) 返回 4——因为它使该方法的行为类似于第二个参数为 0，并且 o 在大于或等于 0 位置的第一次出现是在 4 位置。\n   * 'hello world hello'.indexOf('world', 12) 返回 -1——因为，虽然子字符串 world 确实出现在索引 6 处，但该位置不大于或等于 12。\n   * 'hello world hello'.indexOf('o', 99) 返回 -1——因为 99 大于 hello world hello 的长度，这会导致方法根本不搜索字符串。",normalizedContent:" * indexof(searchstring, position)\n   \n   position 可选\n   \n   该方法返回指定子字符串在大于或等于 position 位置的第一次出现的索引，默认为 0。如果 position 大于调用字符串的长度，则该方法根本不搜索调用字符串。如果 position 小于零，该方法的行为就像 position 为 0 时一样。\n   \n   * hello world hello'.indexof('o', -5) 返回 4——因为它使该方法的行为类似于第二个参数为 0，并且 o 在大于或等于 0 位置的第一次出现是在 4 位置。\n   * 'hello world hello'.indexof('world', 12) 返回 -1——因为，虽然子字符串 world 确实出现在索引 6 处，但该位置不大于或等于 12。\n   * 'hello world hello'.indexof('o', 99) 返回 -1——因为 99 大于 hello world hello 的长度，这会导致方法根本不搜索字符串。",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"iframe 笔记",frontmatter:{title:"iframe 笔记",date:"2021-12-24T18:22:55.000Z",permalink:"/pages/c466bf/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102002.iframe%20%E7%AC%94%E8%AE%B0.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102002.iframe 笔记.md",key:"v-a5598ff0",path:"/pages/c466bf/",headers:[{level:2,title:"获取iframewindow对象",slug:"获取iframewindow对象",normalizedTitle:"获取iframewindow对象",charIndex:2},{level:3,title:"模拟点击事件",slug:"模拟点击事件",normalizedTitle:"模拟点击事件",charIndex:101},{level:2,title:"iframe加载完成",slug:"iframe加载完成",normalizedTitle:"iframe加载完成",charIndex:523}],headersStr:"获取iframewindow对象 模拟点击事件 iframe加载完成",content:'# 获取iframewindow对象\n\nconst \niframe.contentDocument || window.frames.iframeWrapper.document\n\n\n1\n2\n\n\n\n# 模拟点击事件\n\nfunction trigger(node, event){\n    if(document.all) {\n        node.click();\n    }else {\n        var e = document.createEvent("MouseEvents");\n        e.initEvent(event, true, true);　　　　　　　　　　　　　　\n        node.dispatchEvent(e);　　　\n    }   \n}\ndocument.getElementById("resource").addEventListener("click", function(e){\n\t\ttrigger(document.getElementById("target"), "click");\n},false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# iframe加载完成\n\n<iframe id="ifra" name="ifra" width="100%" height="500" src="http://xxxxx">\n</iframe>\nconst iframe = document.querySelector(\'#ifra\')\nif (iframe.attachEvent) {    \n  iframe.attachEvent("onload", function() {    \n    const iframeNode = window.frames["ifra"].document\n    self.getDom(iframeNode)\t\t\t\n  });    \n} else {    \n  iframe.onload = function() {    \n    const iframeNode = window.frames["ifra"].document\n    self.getDom(iframeNode)\n  };    \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',normalizedContent:'# 获取iframewindow对象\n\nconst \niframe.contentdocument || window.frames.iframewrapper.document\n\n\n1\n2\n\n\n\n# 模拟点击事件\n\nfunction trigger(node, event){\n    if(document.all) {\n        node.click();\n    }else {\n        var e = document.createevent("mouseevents");\n        e.initevent(event, true, true);　　　　　　　　　　　　　　\n        node.dispatchevent(e);　　　\n    }   \n}\ndocument.getelementbyid("resource").addeventlistener("click", function(e){\n\t\ttrigger(document.getelementbyid("target"), "click");\n},false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# iframe加载完成\n\n<iframe id="ifra" name="ifra" width="100%" height="500" src="http://xxxxx">\n</iframe>\nconst iframe = document.queryselector(\'#ifra\')\nif (iframe.attachevent) {    \n  iframe.attachevent("onload", function() {    \n    const iframenode = window.frames["ifra"].document\n    self.getdom(iframenode)\t\t\t\n  });    \n} else {    \n  iframe.onload = function() {    \n    const iframenode = window.frames["ifra"].document\n    self.getdom(iframenode)\n  };    \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"文件上传安全问题",frontmatter:{title:"文件上传安全问题",date:"2022-01-13T16:22:46.000Z",permalink:"/pages/b3a05e/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102003.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102003.文件上传安全问题.md",key:"v-b89e91da",path:"/pages/b3a05e/",headers:[{level:2,title:"攻击手段及原理",slug:"攻击手段及原理",normalizedTitle:"攻击手段及原理",charIndex:49},{level:2,title:"客户端问题(非第三方工具 NC Fidder等上传工具)",slug:"客户端问题-非第三方工具-nc-fidder等上传工具",normalizedTitle:"客户端问题(非第三方工具 nc fidder等上传工具)",charIndex:334},{level:2,title:"抵御方法",slug:"抵御方法",normalizedTitle:"抵御方法",charIndex:559}],headersStr:"攻击手段及原理 客户端问题(非第三方工具 NC Fidder等上传工具) 抵御方法",content:"@[toc] 漏洞只能减少, 无法根除, 本文只初步介绍常见的攻击手段及客户端的基本防御\n\n\n# 攻击手段及原理\n\n * 上传文件是WebShell时，攻击者可通过这些网页后门执行命令并控制服务器；\n\n * 上传文件是其他恶意脚本时，攻击者可直接执行脚本进行攻击；\n\n * 上传文件是恶意图片时，图片中可能包含了脚本，加载或者点击这些图片时脚本会悄无声息的执行；\n\n * 上传文件是伪装成正常后缀的恶意脚本时，攻击者可借助本地文件包含漏洞(Local File Include)执行该文件。如将bad.php文件改名为bad.doc上传到服务器，再通过PHP的include，include_once，require，require_once等函数包含执行。\n\n\n# 客户端问题(非第三方工具 NC Fidder等上传工具)\n\n * 文件上传检查不严, 没有进行文件格式检查\n   * 例如: .php .Php .pHp等\n * 文件名没有检查\n   * 例如: xxx.php%00.jpg, (%00为十六进制的0x00字符, 对于服务器来说，因为%00字符截断的关系，最终上传的文件变成了xxx.php)\n * 有修改文件名功能是带了后缀( 先传输.jpg后, 改文件名是把文件后缀更换为 .php)\n\n\n# 抵御方法\n\n * 检查文件名后缀(注意大小写, 可先统一转换小写或是大写)\n * 重构文件名称(防止 xxx.php%00.jpg这种类型)\n * 若是图片, 使用resize函数, 压缩方式更改其大小, 这样就算是脚本, 里面的代码也会被破坏导致无法使用\n * 不可修改文件名后缀",normalizedContent:"@[toc] 漏洞只能减少, 无法根除, 本文只初步介绍常见的攻击手段及客户端的基本防御\n\n\n# 攻击手段及原理\n\n * 上传文件是webshell时，攻击者可通过这些网页后门执行命令并控制服务器；\n\n * 上传文件是其他恶意脚本时，攻击者可直接执行脚本进行攻击；\n\n * 上传文件是恶意图片时，图片中可能包含了脚本，加载或者点击这些图片时脚本会悄无声息的执行；\n\n * 上传文件是伪装成正常后缀的恶意脚本时，攻击者可借助本地文件包含漏洞(local file include)执行该文件。如将bad.php文件改名为bad.doc上传到服务器，再通过php的include，include_once，require，require_once等函数包含执行。\n\n\n# 客户端问题(非第三方工具 nc fidder等上传工具)\n\n * 文件上传检查不严, 没有进行文件格式检查\n   * 例如: .php .php .php等\n * 文件名没有检查\n   * 例如: xxx.php%00.jpg, (%00为十六进制的0x00字符, 对于服务器来说，因为%00字符截断的关系，最终上传的文件变成了xxx.php)\n * 有修改文件名功能是带了后缀( 先传输.jpg后, 改文件名是把文件后缀更换为 .php)\n\n\n# 抵御方法\n\n * 检查文件名后缀(注意大小写, 可先统一转换小写或是大写)\n * 重构文件名称(防止 xxx.php%00.jpg这种类型)\n * 若是图片, 使用resize函数, 压缩方式更改其大小, 这样就算是脚本, 里面的代码也会被破坏导致无法使用\n * 不可修改文件名后缀",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"时间处理",frontmatter:{title:"时间处理",date:"2022-05-08T23:31:17.000Z",permalink:"/pages/5a1e99/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102004.%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102004.时间处理.md",key:"v-22022594",path:"/pages/5a1e99/",headersStr:null,content:" * 时间长度(s) 转 时:分:秒\n\nfunction formatTime(time) {\n\tif (typeof time !== 'number' || time < 0) {\n\t\treturn time\n\t}\n\n\tvar hour = parseInt(time / 3600)\n\ttime = time % 3600\n\tvar minute = parseInt(time / 60)\n\ttime = time % 60\n\tvar second = time\n\n\treturn ([hour, minute, second]).map(function(n) {\n\t\tn = n.toString()\n\t\treturn n[1] ? n : '0' + n\n\t}).join(':')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",normalizedContent:" * 时间长度(s) 转 时:分:秒\n\nfunction formattime(time) {\n\tif (typeof time !== 'number' || time < 0) {\n\t\treturn time\n\t}\n\n\tvar hour = parseint(time / 3600)\n\ttime = time % 3600\n\tvar minute = parseint(time / 60)\n\ttime = time % 60\n\tvar second = time\n\n\treturn ([hour, minute, second]).map(function(n) {\n\t\tn = n.tostring()\n\t\treturn n[1] ? n : '0' + n\n\t}).join(':')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"搭建typescript环境刷LeetCode算法",frontmatter:{title:"搭建typescript环境刷LeetCode算法",date:"2022-05-09T14:21:44.000Z",permalink:"/pages/8b5aea/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020052.%E6%90%AD%E5%BB%BAtypescript%E7%8E%AF%E5%A2%83%E5%88%B7LeetCode%E7%AE%97%E6%B3%95.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020052.搭建typescript环境刷LeetCode算法.md",key:"v-b3ac3d9e",path:"/pages/8b5aea/",headersStr:null,content:"本文记录 本地搭建 node typescript jest环境来刷LeetCode算法题\n\n优势\n\n * 记录保存自己的算法\n * 本地可以快速测试，不用在线上排队等待\n * 本地可以debug断点调试，享有vip待遇\n * 可以使用js 和 ts 语言",normalizedContent:"本文记录 本地搭建 node typescript jest环境来刷leetcode算法题\n\n优势\n\n * 记录保存自己的算法\n * 本地可以快速测试，不用在线上排队等待\n * 本地可以debug断点调试，享有vip待遇\n * 可以使用js 和 ts 语言",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"typescript 类型联动",frontmatter:{title:"typescript 类型联动",date:"2022-08-04T23:04:37.000Z",permalink:"/pages/12d678/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020055.typescript%20%E7%B1%BB%E5%9E%8B%E8%81%94%E5%8A%A8.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020055.typescript 类型联动.md",key:"v-6d299f3c",path:"/pages/12d678/",headers:[{level:3,title:"Partial",slug:"partial",normalizedTitle:"partial",charIndex:1008},{level:4,title:"pick",slug:"pick",normalizedTitle:"pick",charIndex:1019},{level:4,title:"omit",slug:"omit",normalizedTitle:"omit",charIndex:1363}],headersStr:"Partial pick omit",content:"enum MyEnum { A, B, C };\n\n\n1\n\n\n如果我想要另一种类型，即该枚举的键的联合字符串，我可以执行以下操作:\n\ntype MyEnumKeysAsStrings = keyof typeof MyEnum;  // \"A\" | \"B\" | \"C\"\n\n\n1\n\n\ntype Person = { age: number; name: string; alive: boolean };\n \ntype I2 = Person[keyof Person];\n//type I2 = string | number | boolean\n\n\n1\n2\n3\n4\n\n\nconst RestfulMethod = {\n  get: 'GET',\n  post: 'POST',\n  put: 'PUT',\n  delete: 'DELETE'\n} as const\n\n\ntype IRestfulMethod = typeof RestfulMethod\ntype TypeRestfulMethod = IRestfulMethod[keyof IRestfulMethod]\n// type TypeRestfulMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ntype Person = { age: number; name: string; alive: boolean };\n \ntype I2 = keyof Person\n//type I2 = 'age' | 'name' | 'alive'\n\n\n1\n2\n3\n4\n\n\nlet obj = {\n  name: 'hello',\n  age: 18, \n  eat () {\n    return 'food'\n  },\n  link () {\n    return 'dog'\n  }\n}\n\ntype methodsPick<T> = {[K in keyof T]: T[K] extends Function ? K : never}[keyof T];\n// T1 = 'eat' | 'link'\ntype T1 = methodsPick<typeof obj>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# Partial\n\n# pick\n\n通过从 Type 中选择一组属性 Keys（字符串文字或字符串文字的联合）来构造一个类型。\n\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n \ntype TodoPreview = Pick<Todo, \"title\" | \"completed\">;\n \nconst todo: TodoPreview = {\n  title: \"Clean room\",\n  completed: false,\n};\n\ntodo;\n \nconst todo: TodoPreview\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n# omit\n\n与pick相反，通过从 Type 中选择所有属性然后删除 Keys（字符串文字或字符串文字的联合）来构造一个类型。\n\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n  createdAt: number;\n}\n \ntype TodoPreview = Omit<Todo, \"description\">;\n \nconst todo: TodoPreview = {\n  title: \"Clean room\",\n  completed: false,\n  createdAt: 1615544252770,\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",normalizedContent:"enum myenum { a, b, c };\n\n\n1\n\n\n如果我想要另一种类型，即该枚举的键的联合字符串，我可以执行以下操作:\n\ntype myenumkeysasstrings = keyof typeof myenum;  // \"a\" | \"b\" | \"c\"\n\n\n1\n\n\ntype person = { age: number; name: string; alive: boolean };\n \ntype i2 = person[keyof person];\n//type i2 = string | number | boolean\n\n\n1\n2\n3\n4\n\n\nconst restfulmethod = {\n  get: 'get',\n  post: 'post',\n  put: 'put',\n  delete: 'delete'\n} as const\n\n\ntype irestfulmethod = typeof restfulmethod\ntype typerestfulmethod = irestfulmethod[keyof irestfulmethod]\n// type typerestfulmethod = 'get' | 'post' | 'put' | 'delete'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ntype person = { age: number; name: string; alive: boolean };\n \ntype i2 = keyof person\n//type i2 = 'age' | 'name' | 'alive'\n\n\n1\n2\n3\n4\n\n\nlet obj = {\n  name: 'hello',\n  age: 18, \n  eat () {\n    return 'food'\n  },\n  link () {\n    return 'dog'\n  }\n}\n\ntype methodspick<t> = {[k in keyof t]: t[k] extends function ? k : never}[keyof t];\n// t1 = 'eat' | 'link'\ntype t1 = methodspick<typeof obj>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# partial\n\n# pick\n\n通过从 type 中选择一组属性 keys（字符串文字或字符串文字的联合）来构造一个类型。\n\ninterface todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n \ntype todopreview = pick<todo, \"title\" | \"completed\">;\n \nconst todo: todopreview = {\n  title: \"clean room\",\n  completed: false,\n};\n\ntodo;\n \nconst todo: todopreview\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n# omit\n\n与pick相反，通过从 type 中选择所有属性然后删除 keys（字符串文字或字符串文字的联合）来构造一个类型。\n\ninterface todo {\n  title: string;\n  description: string;\n  completed: boolean;\n  createdat: number;\n}\n \ntype todopreview = omit<todo, \"description\">;\n \nconst todo: todopreview = {\n  title: \"clean room\",\n  completed: false,\n  createdat: 1615544252770,\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"js lodash深度比较两个对象值 并输出相应key value",frontmatter:{title:"js lodash深度比较两个对象值 并输出相应key value",date:"2023-09-17T15:40:01.000Z",permalink:"/pages/b41fe4/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020061.js%20lodash%E6%B7%B1%E5%BA%A6%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%80%BC%20%E5%B9%B6%E8%BE%93%E5%87%BA%E7%9B%B8%E5%BA%94key%20value.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020061.js lodash深度比较两个对象值 并输出相应key value.md",key:"v-28a47994",path:"/pages/b41fe4/",headersStr:null,content:"https://gist.github.com/Yimiprod/7ee176597fef230d1451\n\n/**\n * Deep diff between two object-likes\n * @param  {Object} fromObject the original object\n * @param  {Object} toObject   the updated object\n * @return {Object}            a new object which represents the diff\n */\nfunction deepDiff(fromObject, toObject) {\n    const changes = {};\n\n    const buildPath = (path, obj, key) =>\n        _.isUndefined(path) ? key : `${path}.${key}`;\n\n    const walk = (fromObject, toObject, path) => {\n        for (const key of _.keys(fromObject)) {\n            const currentPath = buildPath(path, fromObject, key);\n            if (!_.has(toObject, key)) {\n                changes[currentPath] = {from: _.get(fromObject, key)};\n            }\n        }\n\n        for (const [key, to] of _.entries(toObject)) {\n            const currentPath = buildPath(path, toObject, key);\n            if (!_.has(fromObject, key)) {\n                changes[currentPath] = {to};\n            } else {\n                const from = _.get(fromObject, key);\n                if (!_.isEqual(from, to)) {\n                    if (_.isObjectLike(to) && _.isObjectLike(from)) {\n                        walk(from, to, currentPath);\n                    } else {\n                        changes[currentPath] = {from, to};\n                    }\n                }\n            }\n        }\n    };\n\n    walk(fromObject, toObject);\n\n    return changes;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n",normalizedContent:"https://gist.github.com/yimiprod/7ee176597fef230d1451\n\n/**\n * deep diff between two object-likes\n * @param  {object} fromobject the original object\n * @param  {object} toobject   the updated object\n * @return {object}            a new object which represents the diff\n */\nfunction deepdiff(fromobject, toobject) {\n    const changes = {};\n\n    const buildpath = (path, obj, key) =>\n        _.isundefined(path) ? key : `${path}.${key}`;\n\n    const walk = (fromobject, toobject, path) => {\n        for (const key of _.keys(fromobject)) {\n            const currentpath = buildpath(path, fromobject, key);\n            if (!_.has(toobject, key)) {\n                changes[currentpath] = {from: _.get(fromobject, key)};\n            }\n        }\n\n        for (const [key, to] of _.entries(toobject)) {\n            const currentpath = buildpath(path, toobject, key);\n            if (!_.has(fromobject, key)) {\n                changes[currentpath] = {to};\n            } else {\n                const from = _.get(fromobject, key);\n                if (!_.isequal(from, to)) {\n                    if (_.isobjectlike(to) && _.isobjectlike(from)) {\n                        walk(from, to, currentpath);\n                    } else {\n                        changes[currentpath] = {from, to};\n                    }\n                }\n            }\n        }\n    };\n\n    walk(fromobject, toobject);\n\n    return changes;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n",charsets:{},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"前端避免一直try...catch...(ts装饰器)",frontmatter:{title:"前端避免一直try...catch...(ts装饰器)",date:"2023-09-17T19:51:12.000Z",permalink:"/pages/4fff79/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020061.%E5%89%8D%E7%AB%AF%E9%81%BF%E5%85%8D%E4%B8%80%E7%9B%B4try...catch...(ts%E8%A3%85%E9%A5%B0%E5%99%A8).html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020061.前端避免一直try...catch...(ts装饰器).md",key:"v-38446c96",path:"/pages/4fff79/",headersStr:null,content:"一个ts装饰器的demo\n\nconst userInfo: any = undefined\n\nclass Test {\n  getName() {\n    return userInfo.name\n  }\n}\n\nconst test = new Test()\ntest.getName()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n因为userInfo中没有name属性, 会报错TypeError: Cannot read property 'name' of undefined\n\n使用try...catch...\n\ngetName() {\n    try {\n      return userInfo.name;\n    } catch (error) {\n      console.log(\"name 不存在\");\n    }\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果还有其他方法那么每个都需要写 try...catch...代码变得很长\n\n用方法装饰器解决**try...catch...**\n\n/*\n * @Description: 装饰器demo\n * @Author: 仲灏<izhaong 164165005@qq.com>\n * @Date: 2020-09-23 11:53:53\n * @LastEditors: 仲灏<izhaong 164165005@qq.com>\n * @LastEditTime: 2020-09-23 17:18:57\n */\nconst userInfo: any = undefined;\n\nfunction catchError(target: any, key: string, descriptor: PropertyDescriptor) {\n  const fn = descriptor.value;\n  descriptor.value = function () {\n    try {\n      fn();\n    } catch (error) {\n      console.log(\"userInfo 有问题\");\n    }\n  };\n}\n\nclass Test {\n  @catchError\n  getName() {\n    return userInfo.name;\n  }\n}\n\nconst test = new Test();\ntest.getName();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n再使用工厂模式,准确输出信息\n\n/*\n * @Description: 装饰器demo\n * @Author: 仲灏<izhaong 164165005@qq.com>\n * @Date: 2020-09-23 11:53:53\n * @LastEditors: 仲灏<izhaong 164165005@qq.com>\n * @LastEditTime: 2020-09-23 17:22:23\n */\nconst userInfo: any = undefined;\n\nfunction catchError(msg: string) {\n  return function (target: any, key: string, descriptor: PropertyDescriptor) {\n    const fn = descriptor.value;\n    descriptor.value = function () {\n      try {\n        fn();\n      } catch (error) {\n        console.log(msg);\n      }\n    };\n  }\n}\n\nclass Test {\n  @catchError('userInfo.name 不存在')\n  getName() {\n    return userInfo.name;\n  }\n\n  @catchError('userInfo.age 不存在')\n  getAge() {\n    return userInfo.age;\n  }\n}\n\nconst test = new Test();\ntest.getName();\ntest.getAge();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n",normalizedContent:"一个ts装饰器的demo\n\nconst userinfo: any = undefined\n\nclass test {\n  getname() {\n    return userinfo.name\n  }\n}\n\nconst test = new test()\ntest.getname()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n因为userinfo中没有name属性, 会报错typeerror: cannot read property 'name' of undefined\n\n使用try...catch...\n\ngetname() {\n    try {\n      return userinfo.name;\n    } catch (error) {\n      console.log(\"name 不存在\");\n    }\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果还有其他方法那么每个都需要写 try...catch...代码变得很长\n\n用方法装饰器解决**try...catch...**\n\n/*\n * @description: 装饰器demo\n * @author: 仲灏<izhaong 164165005@qq.com>\n * @date: 2020-09-23 11:53:53\n * @lasteditors: 仲灏<izhaong 164165005@qq.com>\n * @lastedittime: 2020-09-23 17:18:57\n */\nconst userinfo: any = undefined;\n\nfunction catcherror(target: any, key: string, descriptor: propertydescriptor) {\n  const fn = descriptor.value;\n  descriptor.value = function () {\n    try {\n      fn();\n    } catch (error) {\n      console.log(\"userinfo 有问题\");\n    }\n  };\n}\n\nclass test {\n  @catcherror\n  getname() {\n    return userinfo.name;\n  }\n}\n\nconst test = new test();\ntest.getname();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n再使用工厂模式,准确输出信息\n\n/*\n * @description: 装饰器demo\n * @author: 仲灏<izhaong 164165005@qq.com>\n * @date: 2020-09-23 11:53:53\n * @lasteditors: 仲灏<izhaong 164165005@qq.com>\n * @lastedittime: 2020-09-23 17:22:23\n */\nconst userinfo: any = undefined;\n\nfunction catcherror(msg: string) {\n  return function (target: any, key: string, descriptor: propertydescriptor) {\n    const fn = descriptor.value;\n    descriptor.value = function () {\n      try {\n        fn();\n      } catch (error) {\n        console.log(msg);\n      }\n    };\n  }\n}\n\nclass test {\n  @catcherror('userinfo.name 不存在')\n  getname() {\n    return userinfo.name;\n  }\n\n  @catcherror('userinfo.age 不存在')\n  getage() {\n    return userinfo.age;\n  }\n}\n\nconst test = new test();\ntest.getname();\ntest.getage();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"Web H5 接入海康录像机 (rtsp转flv)",frontmatter:{title:"Web H5 接入海康录像机 (rtsp转flv)",date:"2021-12-24T18:02:54.000Z",permalink:"/pages/ea13c1/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102010.Web%20H5%20%E6%8E%A5%E5%85%A5%E6%B5%B7%E5%BA%B7%E5%BD%95%E5%83%8F%E6%9C%BA%20(rtsp%E8%BD%ACflv).html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102010.Web H5 接入海康录像机 (rtsp转flv).md",key:"v-117d00e4",path:"/pages/ea13c1/",headers:[{level:2,title:"最终效果",slug:"最终效果",normalizedTitle:"最终效果",charIndex:2},{level:2,title:"私网映射为公网",slug:"私网映射为公网",normalizedTitle:"私网映射为公网",charIndex:19},{level:2,title:"搭建转流服务器(RTSP => RTMP)",slug:"搭建转流服务器-rtsp-rtmp",normalizedTitle:"搭建转流服务器(rtsp =&gt; rtmp)",charIndex:null},{level:2,title:"服务端相关命令",slug:"服务端相关命令",normalizedTitle:"服务端相关命令",charIndex:327},{level:3,title:"添加视频流",slug:"添加视频流",normalizedTitle:"添加视频流",charIndex:339},{level:2,title:"前端对接",slug:"前端对接",normalizedTitle:"前端对接",charIndex:1321},{level:3,title:"说明事项(最终转流为flv格式)",slug:"说明事项-最终转流为flv格式",normalizedTitle:"说明事项(最终转流为flv格式)",charIndex:1330},{level:3,title:"Vue 接入",slug:"vue-接入",normalizedTitle:"vue 接入",charIndex:1850}],headersStr:"最终效果 私网映射为公网 搭建转流服务器(RTSP => RTMP) 服务端相关命令 添加视频流 前端对接 说明事项(最终转流为flv格式) Vue 接入",content:"# 最终效果\n\n\n\n开始了~\n\n\n# 私网映射为公网\n\n * 如果你需要非局域网内访问就需要做这一步\n * 映射好公网后 ip 可能会变动 建议用域名做动态映射\n\n\n\n\n# 搭建转流服务器(RTSP => RTMP)\n\n * 可参考其他方法\n\n通过FFmpeg将rtsp流摄像头视频转码为rtmp播放 https://blog.csdn.net/u012492535/article/details/79220398\n\n * 我用的现成的docker镜像部署的服务 原理一样的\n\n * * GitHub地址: https://github.com/ossrs/srs\n   * 搭建好后就可以通过服务器地址:8380默认端口 查看了\n * * \n\n\n# 服务端相关命令\n\n\n# 添加视频流\n\n直播\n\n * 在容器外执行srs容器内的命令\n\ndocker exec -it ${你的srs容器地址} /bin/bash -c ffmpeg -rtsp_transport tcp -i rtsp://${账号:密码}@${映射为公网的ip或者域名地址ztzyjc.3322.org}:${端口 默认9002}/Streaming/channels/${你的摄像头通道地址}0${主流1 子流2}  -c:v libx264 -crf 300 -acodec aac -f flv rtmp://127.0.0.1:1935/live/mystream${地址要不一样的, 我的是通道地址}\n\n\n1\n\n\n以我的地址为例: 在9.20的服务器上部署的srs 命令为\n\ndocker exec e5e1135e7cf6 /bin/bash -c 'ffmpeg -rtsp_transport tcp -i rtsp://admin:******@www.***.com:9002/Streaming/channels/2001  -c:v libx264  -acodec aac -f flv rtmp://127.0.0.1:1935/live/mystream20'\n\n\n1\n\n * 这样前端就能通过地址rtmp://192.168.9.20:8380/live/mystream20 或者 http://192.168.9.20:8380/live/mystream20\n\n回放\n\n * 命令docker exec e5e1135e7cf6 /bin/bash -c 'ffmpeg -rtsp_transport tcp -i \"rtsp://admin:******@www.***.com:9002/Streaming/tracks/2001?starttime=20201214t000000z&endtime=20201214t000000z\" -c copy -f flv rtmp://127.0.0.1:1935/live/mytrack20201214t000000z'\n\n * * 相应的前端播放地址: http://192.168.9.20:8380/live/mytrack20201214t000000z\n\n\n# 前端对接\n\n\n# 说明事项(最终转流为flv格式)\n\n * RTMP 需要 flash 插件播放(以下有说明), chrome 在2020年12月后已经不再支持, 现在相关api接口都已经关闭了, 需要操作flash本身去调用浏览器相关接口(放弃了)\n\n * * https://segmentfault.com/a/1190000018582436\n   * RTMP(Real Time Messaging Protocol)实时消息传送协议是Adobe Systems公司为Flash播放器和服务器之间音频、视频和数据传输开发的私有协议。\n * * RTMP是一个应用层协议，有多路复用的特点，传输内容有视频、音频、控制命令\n   * RTMP 在音视频相关的协议中，它的突出特点是：连接可靠、低延时\n\n * 使用flv\n\n * * 视频加载快比hls的m3u8格式快得多(可能是个人情况,未作深究)\n\n * 前端添加设备需要写服务端cmd脚本, 我这边也是使用的 nodejs 的express搭建了权限校验和docker的添加视频流命令\n\n * * 附上地址: https://gitee.com/Izhaong/node-srs-cmd\n\n\n# Vue 接入\n\n我使用了 **Dplayer**播放器, 附上链接: http://dplayer.js.org/zh/guide.html#flv\n\n 1. public/index.js引入<script src=\"https://cdn.bootcdn.net/ajax/libs/flv.js/1.5.0/flv.min.js\"><\/script>\n\n 2. 1. 可以使用其他的cdn\n\n 3. cmd 运行cnpm i dplayer -S\n\n 4. 视频加载页面(单个视频)\n\n...\n<div id=\"dplayer\"></div>\n...\n\nimport DPlayer from 'dplayer'\n\ndata: { dp: undefined }\nmounted() { this.initPlayer() }\nmethods: {\n\tinitPlayer() {\n\t\tthis.$nextTick(() => {\n        const liveBaseUrl = 'http://192.168.9.20:8380' // 你的srs服务地址\n        // const url = live ? `${liveBaseUrl}/live/mystream${channelNo}.flv` : `${liveBaseUrl}/live/mytrack${this.datetimeValue[0]}.flv` // 回放后面再说\n        const url = `${liveBaseUrl}/live/mystream${channelNo}.flv` // 直播地址\n        // 测试flx地址: https://sf1-hscdn-tos.pstatp.com/obj/media-fe/xgplayer_doc_video/flv/xgplayer-demo-360p.flv\n        this.dp = new DPlayer({\n          container: document.getElementById('dplayer'),\n          video: {\n            url,\n            type: 'flv'\n          },\n          // mutex: false, // api自己查查 不描述了 \n          autoplay: true,\n          live\n        })\n      })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\na. 多个视频自己琢磨吧~我给个大概思路, 数组嘛~简单 如下循环就好了\n\n\n\n到此应该就差不多了, 肯定还有很多遗漏 不想写了 累~",normalizedContent:"# 最终效果\n\n\n\n开始了~\n\n\n# 私网映射为公网\n\n * 如果你需要非局域网内访问就需要做这一步\n * 映射好公网后 ip 可能会变动 建议用域名做动态映射\n\n\n\n\n# 搭建转流服务器(rtsp => rtmp)\n\n * 可参考其他方法\n\n通过ffmpeg将rtsp流摄像头视频转码为rtmp播放 https://blog.csdn.net/u012492535/article/details/79220398\n\n * 我用的现成的docker镜像部署的服务 原理一样的\n\n * * github地址: https://github.com/ossrs/srs\n   * 搭建好后就可以通过服务器地址:8380默认端口 查看了\n * * \n\n\n# 服务端相关命令\n\n\n# 添加视频流\n\n直播\n\n * 在容器外执行srs容器内的命令\n\ndocker exec -it ${你的srs容器地址} /bin/bash -c ffmpeg -rtsp_transport tcp -i rtsp://${账号:密码}@${映射为公网的ip或者域名地址ztzyjc.3322.org}:${端口 默认9002}/streaming/channels/${你的摄像头通道地址}0${主流1 子流2}  -c:v libx264 -crf 300 -acodec aac -f flv rtmp://127.0.0.1:1935/live/mystream${地址要不一样的, 我的是通道地址}\n\n\n1\n\n\n以我的地址为例: 在9.20的服务器上部署的srs 命令为\n\ndocker exec e5e1135e7cf6 /bin/bash -c 'ffmpeg -rtsp_transport tcp -i rtsp://admin:******@www.***.com:9002/streaming/channels/2001  -c:v libx264  -acodec aac -f flv rtmp://127.0.0.1:1935/live/mystream20'\n\n\n1\n\n * 这样前端就能通过地址rtmp://192.168.9.20:8380/live/mystream20 或者 http://192.168.9.20:8380/live/mystream20\n\n回放\n\n * 命令docker exec e5e1135e7cf6 /bin/bash -c 'ffmpeg -rtsp_transport tcp -i \"rtsp://admin:******@www.***.com:9002/streaming/tracks/2001?starttime=20201214t000000z&endtime=20201214t000000z\" -c copy -f flv rtmp://127.0.0.1:1935/live/mytrack20201214t000000z'\n\n * * 相应的前端播放地址: http://192.168.9.20:8380/live/mytrack20201214t000000z\n\n\n# 前端对接\n\n\n# 说明事项(最终转流为flv格式)\n\n * rtmp 需要 flash 插件播放(以下有说明), chrome 在2020年12月后已经不再支持, 现在相关api接口都已经关闭了, 需要操作flash本身去调用浏览器相关接口(放弃了)\n\n * * https://segmentfault.com/a/1190000018582436\n   * rtmp(real time messaging protocol)实时消息传送协议是adobe systems公司为flash播放器和服务器之间音频、视频和数据传输开发的私有协议。\n * * rtmp是一个应用层协议，有多路复用的特点，传输内容有视频、音频、控制命令\n   * rtmp 在音视频相关的协议中，它的突出特点是：连接可靠、低延时\n\n * 使用flv\n\n * * 视频加载快比hls的m3u8格式快得多(可能是个人情况,未作深究)\n\n * 前端添加设备需要写服务端cmd脚本, 我这边也是使用的 nodejs 的express搭建了权限校验和docker的添加视频流命令\n\n * * 附上地址: https://gitee.com/izhaong/node-srs-cmd\n\n\n# vue 接入\n\n我使用了 **dplayer**播放器, 附上链接: http://dplayer.js.org/zh/guide.html#flv\n\n 1. public/index.js引入<script src=\"https://cdn.bootcdn.net/ajax/libs/flv.js/1.5.0/flv.min.js\"><\/script>\n\n 2. 1. 可以使用其他的cdn\n\n 3. cmd 运行cnpm i dplayer -s\n\n 4. 视频加载页面(单个视频)\n\n...\n<div id=\"dplayer\"></div>\n...\n\nimport dplayer from 'dplayer'\n\ndata: { dp: undefined }\nmounted() { this.initplayer() }\nmethods: {\n\tinitplayer() {\n\t\tthis.$nexttick(() => {\n        const livebaseurl = 'http://192.168.9.20:8380' // 你的srs服务地址\n        // const url = live ? `${livebaseurl}/live/mystream${channelno}.flv` : `${livebaseurl}/live/mytrack${this.datetimevalue[0]}.flv` // 回放后面再说\n        const url = `${livebaseurl}/live/mystream${channelno}.flv` // 直播地址\n        // 测试flx地址: https://sf1-hscdn-tos.pstatp.com/obj/media-fe/xgplayer_doc_video/flv/xgplayer-demo-360p.flv\n        this.dp = new dplayer({\n          container: document.getelementbyid('dplayer'),\n          video: {\n            url,\n            type: 'flv'\n          },\n          // mutex: false, // api自己查查 不描述了 \n          autoplay: true,\n          live\n        })\n      })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\na. 多个视频自己琢磨吧~我给个大概思路, 数组嘛~简单 如下循环就好了\n\n\n\n到此应该就差不多了, 肯定还有很多遗漏 不想写了 累~",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"用好DOM事件",frontmatter:{title:"用好DOM事件",date:"2020-11-01T11:25:51.000Z",permalink:"/pages/e6b2bf/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020104.%E7%94%A8%E5%A5%BDDOM%E4%BA%8B%E4%BB%B6.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020104.用好DOM事件.md",key:"v-1b4aa252",path:"/pages/e6b2bf/",headers:[{level:4,title:"防抖",slug:"防抖",normalizedTitle:"防抖",charIndex:2},{level:4,title:"节流",slug:"节流",normalizedTitle:"节流",charIndex:2094},{level:4,title:"代理",slug:"代理",normalizedTitle:"代理",charIndex:4754},{level:4,title:"DOM 事件标准",slug:"dom-事件标准",normalizedTitle:"dom 事件标准",charIndex:6466}],headersStr:"防抖 节流 代理 DOM 事件标准",content:"# 防抖\n\nconst ipt = document.querySelector('input')\nipt.addEventListener('input', e => {\n  search(e.target.value).then(resp => {\n    // ...\n  }, e => {\n    // ...\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n但其实这样的写法很容易造成性能问题。每一次输入都会触发搜索, 实际上，只有最后一次搜索结果是用户想要的，前面进行了多次无效查询，浪费了网络带宽和服务器资源。\n\n所以对于这类连续触发的事件，需要添加一个**“防抖”功能**，为函数的执行设置一个合理的时间间隔，避免事件在时间间隔内频繁触发，同时又保证用户输入后能即时看到搜索结果。\n\n要实现这样一个功能我们很容易想到使用 setTimeout() 函数来让函数延迟执行。就像下面的伪代码，当每次调用函数时，先判断 timeout 实例是否存在，如果存在则销毁，然后创建一个新的定时器。\n\n// 代码1\nconst ipt = document.querySelector('input')\nlet timeout = null\nipt.addEventListener('input', e => {\n  if(timeout) {\n    clearTimeout(timeout)\n    timeout = null\n  }\n  timeout = setTimeout(() => {\n    search(e.target.value).then(resp => {\n      // ...\n    }, e => {\n      // ...\n    })\n  }, 500)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n问题确实是解决了，但这并不是最优答案，或者说我们需对这个防抖操作进行一些“优化”。\n\n试想一下，如果另一个搜索框也需要添加防抖，是不是也要把 timeout 相关的代码再编写一次？而其实这个操作是完全可以抽取成公共函数的。\n\n在抽取成公共函数的同时，还需要考虑更复杂的情况：\n\n * 参数和返回值如何传递？\n * 防抖化之后的函数是否可以立即执行？\n * 防抖化的函数是否可以手动取消？\n * 等等\n\n具体代码如下所示\n\n// 代码2\nconst debounce = (func, wait = 0) => {\n  let timeout = null\n  let args\n  function debounced(...arg) {\n    args = arg\n    if(timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n    // 以Promise的形式返回函数执行结果\n    return new Promise((res, rej) => {\n      timeout = setTimeout(async () => {\n        try {\n          const result = await func.apply(this, args)\n          res(result)\n        } catch(e) {\n          rej(e)\n        }\n      }, wait)\n    })\n  }\n  // 允许取消\n  function cancel() {\n    clearTimeout(timeout)\n    timeout = null\n  }\n  // 允许立即执行\n  function flush() {\n    cancel()\n    return func.apply(this, args)\n  }\n  debounced.cancel = cancel\n  debounced.flush = flush\n  return debounced\n}\n// 防抖处理之后的事件绑定\nconst ipt = document.querySelector('input')\nipt.addEventListener('input', debounce(e => {\n  search(e.target.value).then(resp => {\n    // ...\n  }, e => {\n    // ...\n  })\n}, 500))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n关于防抖函数还有功能更丰富的版本，比如 lodash 的 debounce() 函数。\n\n# 节流\n\n现在来考虑另外一个场景，一个左右两列布局的查看文章页面，左侧为文章大纲结构，右侧为文章内容。现在需要添加一个功能，就是当用户滚动阅读右侧文章内容时，左侧大纲相对应部分高亮显示，提示用户当前阅读位置。\n\n这个功能的实现思路比较简单，滚动前先记录大纲中各个章节的垂直距离，然后监听 scroll 事件的滚动距离，根据距离的比较来判断需要高亮的章节。伪代码如下：\n\n// 监听scroll事件\nwrap.addEventListener('scroll', e => {\n  let highlightId = ''\n  // 遍历大纲章节位置，与滚动距离比较，得到当前高亮章节id\n  for (let id in offsetMap) {\n    if (e.target.scrollTop <= offsetMap[id].offsetTop) {\n      highlightId = id\n      break\n    }\n  }\n  const lastDom = document.querySelector('.highlight')\n  const currentElem = document.querySelector(`a[href=\"#${highlightId}\"]`)\n  // 修改高亮样式\n  if (lastDom && lastDom.id !== highlightId) {\n    lastDom.classList.remove('highlight')\n    currentElem.classList.add('highlight')\n  } else {\n    currentElem.classList.add('highlight')\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n功能是实现了，但这并不是最优方法，因为滚动事件的触发频率是很高的，持续调用判断函数很可能会影响渲染性能。实际上也不需要过于频繁地调用，因为当鼠标滚动 1 像素的时候，很有可能当前章节的阅读并没有发生变化。所以我们可以设置在指定一段时间内只调用一次函数，从而降低函数调用频率，这种方式我们称之为“节流”。\n\n实现节流函数的过程和防抖函数有些类似，只是对于节流函数而言，有两种执行方式，在调用函数时执行最先一次调用还是最近一次调用，所以需要设置时间戳加以判断。我们可以基于 debounce() 函数加以修改，代码如下所示：\n\nconst throttle = (func, wait = 0, execFirstCall) => {\n  let timeout = null\n  let args\n  let firstCallTimestamp\n  function throttled(...arg) {\n    if (!firstCallTimestamp) firstCallTimestamp = new Date().getTime()\n    if (!execFirstCall || !args) {\n      console.log('set args:', arg)\n      args = arg\n    }\n\n    if (timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n\n    // 以Promise的形式返回函数执行结果\n    return new Promise(async (res, rej) => {\n      if (new Date().getTime() - firstCallTimestamp >= wait) {\n        try {\n          const result = await func.apply(this, args)\n          res(result)\n        } catch (e) {\n          rej(e)\n        } finally {\n          cancel()\n        }\n      } else {\n        timeout = setTimeout(async () => {\n          try {\n            const result = await func.apply(this, args)\n\n            res(result)\n          } catch (e) {\n            rej(e)\n          } finally {\n            cancel()\n          }\n        }, firstCallTimestamp + wait - new Date().getTime())\n      }\n    })\n  }\n\n  // 允许取消\n  function cancel() {\n    clearTimeout(timeout)\n    args = null\n    timeout = null\n    firstCallTimestamp = null\n  }\n\n  // 允许立即执行\n  function flush() {\n    cancel()\n    return func.apply(this, args)\n  }\n  \n  throttled.cancel = cancel\n  throttled.flush = flush\n  return throttled\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n节流与防抖都是通过延迟执行，减少调用次数，来优化频繁调用函数时的性能。不同的是，对于一段时间内的频繁调用，防抖是延迟执行后一次调用，节流是延迟定时多次调用。\n\n# 代理\n\n下面的 HTML 代码是一个简单的无序列表，现在希望点击每个项目的时候调用 getInfo() 函数，当点击“编辑”时，调用一个 edit() 函数，当点击“删除”时，调用一个 del() 函数。\n\n<ul class=\"list\">\n  <li class=\"item\" id=\"item1\">项目1<span class=\"edit\">编辑</span><span class=\"delete\">删除</span></li>\n  <li class=\"item\" id=\"item2\">项目2<span class=\"edit\">编辑</span><span class=\"delete\" >删除</span></li>\n  <li class=\"item\" id=\"item3\">项目3<span class=\"edit\">编辑</span><span class=\"delete\">删除</span></li>\n  ...\n</ul>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要实现这个功能并不难，只需要对列表中每一项，分别监听 3 个元素的 click 事件即可。\n\n但如果数据量一旦增大，事件绑定占用的内存以及执行时间将会成线性增加，而其实这些事件监听函数逻辑一致，只是参数不同而已。此时我们可以以事件代理或事件委托来进行优化。不过在此之前，我们必须先复习一下 DOM 事件的触发流程。\n\n事件触发流程如图 1 所示，主要分为 3 个阶段：\n\n * 捕获，事件对象 Window 传播到目标的父对象，图 1 的红色过程；\n * 目标，事件对象到达事件对象的事件目标，图 1 的蓝色过程；\n * 冒泡，事件对象从目标的父节点开始传播到 Window，图 1 的绿色过程。\n\n\n\n例如，在下面的代码中，虽然我们第二次进行事件监听时设置为捕获阶段，但点击事件时仍会按照监听顺序进行执行。\n\n<body>\n  <button>click</button>\n</body>\n<script>\ndocument.querySelector('button').addEventListener('click', function () {\n  console.log('bubble')\n})\ndocument.querySelector('button').addEventListener('click', function () {\n  console.log('capture')\n}, true)\n// 执行结果\n// buble\n// capture\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n我们再回到事件代理，事件代理的实现原理就是利用上述 DOM 事件的触发流程来对一类事件进行统一处理。比如对于上面的列表，我们在 ul 元素上绑定事件统一处理，通过得到的事件对象来获取参数，调用对应的函数。\n\nconst ul = document.querySelector('.list')\nul.addEventListener('click', e => {\n  const t = e.target || e.srcElement\n  if (t.classList.contains('item')) {\n    getInfo(t.id)\n  } else {\n    id = t.parentElement.id\n    if (t.classList.contains('edit')) {\n      edit(id)\n    } else if (t.classList.contains('delete')) {\n      del(id)\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n虽然这里我们选择了默认在冒泡阶段监听事件，但和捕获阶段监听并没有区别。对于其他情况还需要具体情况具体细分析，比如有些列表项目需要在目标阶段进行一些预处理操作，那么可以选择冒泡阶段进行事件代理。\n\n# DOM 事件标准\n\n// 方式1\n<input type=\"text\" onclick=\"click()\"/>\n// 方式2\ndocument.querySelector('input').onClick = function(e) {\n  // ...\n}\n// 方式3\ndocument.querySelector('input').addEventListener('click', function(e) {\n  //...\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n方式 1 和方式 2 同属于 DOM0 标准，通过这种方式进行事件监会覆盖之前的事件监听函数。\n\n方式 3 属于 DOM2 标准，推荐使用这种方式。同一元素上的事件监听函数互不影响，而且可以独立取消，调用顺序和监听顺序一致。",normalizedContent:"# 防抖\n\nconst ipt = document.queryselector('input')\nipt.addeventlistener('input', e => {\n  search(e.target.value).then(resp => {\n    // ...\n  }, e => {\n    // ...\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n但其实这样的写法很容易造成性能问题。每一次输入都会触发搜索, 实际上，只有最后一次搜索结果是用户想要的，前面进行了多次无效查询，浪费了网络带宽和服务器资源。\n\n所以对于这类连续触发的事件，需要添加一个**“防抖”功能**，为函数的执行设置一个合理的时间间隔，避免事件在时间间隔内频繁触发，同时又保证用户输入后能即时看到搜索结果。\n\n要实现这样一个功能我们很容易想到使用 settimeout() 函数来让函数延迟执行。就像下面的伪代码，当每次调用函数时，先判断 timeout 实例是否存在，如果存在则销毁，然后创建一个新的定时器。\n\n// 代码1\nconst ipt = document.queryselector('input')\nlet timeout = null\nipt.addeventlistener('input', e => {\n  if(timeout) {\n    cleartimeout(timeout)\n    timeout = null\n  }\n  timeout = settimeout(() => {\n    search(e.target.value).then(resp => {\n      // ...\n    }, e => {\n      // ...\n    })\n  }, 500)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n问题确实是解决了，但这并不是最优答案，或者说我们需对这个防抖操作进行一些“优化”。\n\n试想一下，如果另一个搜索框也需要添加防抖，是不是也要把 timeout 相关的代码再编写一次？而其实这个操作是完全可以抽取成公共函数的。\n\n在抽取成公共函数的同时，还需要考虑更复杂的情况：\n\n * 参数和返回值如何传递？\n * 防抖化之后的函数是否可以立即执行？\n * 防抖化的函数是否可以手动取消？\n * 等等\n\n具体代码如下所示\n\n// 代码2\nconst debounce = (func, wait = 0) => {\n  let timeout = null\n  let args\n  function debounced(...arg) {\n    args = arg\n    if(timeout) {\n      cleartimeout(timeout)\n      timeout = null\n    }\n    // 以promise的形式返回函数执行结果\n    return new promise((res, rej) => {\n      timeout = settimeout(async () => {\n        try {\n          const result = await func.apply(this, args)\n          res(result)\n        } catch(e) {\n          rej(e)\n        }\n      }, wait)\n    })\n  }\n  // 允许取消\n  function cancel() {\n    cleartimeout(timeout)\n    timeout = null\n  }\n  // 允许立即执行\n  function flush() {\n    cancel()\n    return func.apply(this, args)\n  }\n  debounced.cancel = cancel\n  debounced.flush = flush\n  return debounced\n}\n// 防抖处理之后的事件绑定\nconst ipt = document.queryselector('input')\nipt.addeventlistener('input', debounce(e => {\n  search(e.target.value).then(resp => {\n    // ...\n  }, e => {\n    // ...\n  })\n}, 500))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n关于防抖函数还有功能更丰富的版本，比如 lodash 的 debounce() 函数。\n\n# 节流\n\n现在来考虑另外一个场景，一个左右两列布局的查看文章页面，左侧为文章大纲结构，右侧为文章内容。现在需要添加一个功能，就是当用户滚动阅读右侧文章内容时，左侧大纲相对应部分高亮显示，提示用户当前阅读位置。\n\n这个功能的实现思路比较简单，滚动前先记录大纲中各个章节的垂直距离，然后监听 scroll 事件的滚动距离，根据距离的比较来判断需要高亮的章节。伪代码如下：\n\n// 监听scroll事件\nwrap.addeventlistener('scroll', e => {\n  let highlightid = ''\n  // 遍历大纲章节位置，与滚动距离比较，得到当前高亮章节id\n  for (let id in offsetmap) {\n    if (e.target.scrolltop <= offsetmap[id].offsettop) {\n      highlightid = id\n      break\n    }\n  }\n  const lastdom = document.queryselector('.highlight')\n  const currentelem = document.queryselector(`a[href=\"#${highlightid}\"]`)\n  // 修改高亮样式\n  if (lastdom && lastdom.id !== highlightid) {\n    lastdom.classlist.remove('highlight')\n    currentelem.classlist.add('highlight')\n  } else {\n    currentelem.classlist.add('highlight')\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n功能是实现了，但这并不是最优方法，因为滚动事件的触发频率是很高的，持续调用判断函数很可能会影响渲染性能。实际上也不需要过于频繁地调用，因为当鼠标滚动 1 像素的时候，很有可能当前章节的阅读并没有发生变化。所以我们可以设置在指定一段时间内只调用一次函数，从而降低函数调用频率，这种方式我们称之为“节流”。\n\n实现节流函数的过程和防抖函数有些类似，只是对于节流函数而言，有两种执行方式，在调用函数时执行最先一次调用还是最近一次调用，所以需要设置时间戳加以判断。我们可以基于 debounce() 函数加以修改，代码如下所示：\n\nconst throttle = (func, wait = 0, execfirstcall) => {\n  let timeout = null\n  let args\n  let firstcalltimestamp\n  function throttled(...arg) {\n    if (!firstcalltimestamp) firstcalltimestamp = new date().gettime()\n    if (!execfirstcall || !args) {\n      console.log('set args:', arg)\n      args = arg\n    }\n\n    if (timeout) {\n      cleartimeout(timeout)\n      timeout = null\n    }\n\n    // 以promise的形式返回函数执行结果\n    return new promise(async (res, rej) => {\n      if (new date().gettime() - firstcalltimestamp >= wait) {\n        try {\n          const result = await func.apply(this, args)\n          res(result)\n        } catch (e) {\n          rej(e)\n        } finally {\n          cancel()\n        }\n      } else {\n        timeout = settimeout(async () => {\n          try {\n            const result = await func.apply(this, args)\n\n            res(result)\n          } catch (e) {\n            rej(e)\n          } finally {\n            cancel()\n          }\n        }, firstcalltimestamp + wait - new date().gettime())\n      }\n    })\n  }\n\n  // 允许取消\n  function cancel() {\n    cleartimeout(timeout)\n    args = null\n    timeout = null\n    firstcalltimestamp = null\n  }\n\n  // 允许立即执行\n  function flush() {\n    cancel()\n    return func.apply(this, args)\n  }\n  \n  throttled.cancel = cancel\n  throttled.flush = flush\n  return throttled\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n节流与防抖都是通过延迟执行，减少调用次数，来优化频繁调用函数时的性能。不同的是，对于一段时间内的频繁调用，防抖是延迟执行后一次调用，节流是延迟定时多次调用。\n\n# 代理\n\n下面的 html 代码是一个简单的无序列表，现在希望点击每个项目的时候调用 getinfo() 函数，当点击“编辑”时，调用一个 edit() 函数，当点击“删除”时，调用一个 del() 函数。\n\n<ul class=\"list\">\n  <li class=\"item\" id=\"item1\">项目1<span class=\"edit\">编辑</span><span class=\"delete\">删除</span></li>\n  <li class=\"item\" id=\"item2\">项目2<span class=\"edit\">编辑</span><span class=\"delete\" >删除</span></li>\n  <li class=\"item\" id=\"item3\">项目3<span class=\"edit\">编辑</span><span class=\"delete\">删除</span></li>\n  ...\n</ul>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要实现这个功能并不难，只需要对列表中每一项，分别监听 3 个元素的 click 事件即可。\n\n但如果数据量一旦增大，事件绑定占用的内存以及执行时间将会成线性增加，而其实这些事件监听函数逻辑一致，只是参数不同而已。此时我们可以以事件代理或事件委托来进行优化。不过在此之前，我们必须先复习一下 dom 事件的触发流程。\n\n事件触发流程如图 1 所示，主要分为 3 个阶段：\n\n * 捕获，事件对象 window 传播到目标的父对象，图 1 的红色过程；\n * 目标，事件对象到达事件对象的事件目标，图 1 的蓝色过程；\n * 冒泡，事件对象从目标的父节点开始传播到 window，图 1 的绿色过程。\n\n\n\n例如，在下面的代码中，虽然我们第二次进行事件监听时设置为捕获阶段，但点击事件时仍会按照监听顺序进行执行。\n\n<body>\n  <button>click</button>\n</body>\n<script>\ndocument.queryselector('button').addeventlistener('click', function () {\n  console.log('bubble')\n})\ndocument.queryselector('button').addeventlistener('click', function () {\n  console.log('capture')\n}, true)\n// 执行结果\n// buble\n// capture\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n我们再回到事件代理，事件代理的实现原理就是利用上述 dom 事件的触发流程来对一类事件进行统一处理。比如对于上面的列表，我们在 ul 元素上绑定事件统一处理，通过得到的事件对象来获取参数，调用对应的函数。\n\nconst ul = document.queryselector('.list')\nul.addeventlistener('click', e => {\n  const t = e.target || e.srcelement\n  if (t.classlist.contains('item')) {\n    getinfo(t.id)\n  } else {\n    id = t.parentelement.id\n    if (t.classlist.contains('edit')) {\n      edit(id)\n    } else if (t.classlist.contains('delete')) {\n      del(id)\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n虽然这里我们选择了默认在冒泡阶段监听事件，但和捕获阶段监听并没有区别。对于其他情况还需要具体情况具体细分析，比如有些列表项目需要在目标阶段进行一些预处理操作，那么可以选择冒泡阶段进行事件代理。\n\n# dom 事件标准\n\n// 方式1\n<input type=\"text\" onclick=\"click()\"/>\n// 方式2\ndocument.queryselector('input').onclick = function(e) {\n  // ...\n}\n// 方式3\ndocument.queryselector('input').addeventlistener('click', function(e) {\n  //...\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n方式 1 和方式 2 同属于 dom0 标准，通过这种方式进行事件监会覆盖之前的事件监听函数。\n\n方式 3 属于 dom2 标准，推荐使用这种方式。同一元素上的事件监听函数互不影响，而且可以独立取消，调用顺序和监听顺序一致。",charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"高效操作DOM",frontmatter:{title:"高效操作DOM",date:"2022-11-01T17:58:22.000Z",permalink:"/pages/20832d/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020102.%E9%AB%98%E6%95%88%E6%93%8D%E4%BD%9CDOM.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020102.高效操作DOM.md",key:"v-3339066d",path:"/pages/20832d/",headers:[{level:3,title:"什么是 DOM",slug:"什么是-dom",normalizedTitle:"什么是 dom",charIndex:2},{level:3,title:"为什么说 DOM 操作耗时",slug:"为什么说-dom-操作耗时",normalizedTitle:"为什么说 dom 操作耗时",charIndex:131},{level:4,title:"线程切换",slug:"线程切换",normalizedTitle:"线程切换",charIndex:185},{level:4,title:"重新渲染",slug:"重新渲染",normalizedTitle:"重新渲染",charIndex:1084},{level:3,title:"如何高效操作 DOM",slug:"如何高效操作-dom",normalizedTitle:"如何高效操作 dom",charIndex:2315},{level:4,title:"在循环外操作元素",slug:"在循环外操作元素",normalizedTitle:"在循环外操作元素",charIndex:2376},{level:4,title:"批量操作元素",slug:"批量操作元素",normalizedTitle:"批量操作元素",charIndex:2883},{level:4,title:"缓存元素集合",slug:"缓存元素集合",normalizedTitle:"缓存元素集合",charIndex:5068},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:5587}],headersStr:"什么是 DOM 为什么说 DOM 操作耗时 线程切换 重新渲染 如何高效操作 DOM 在循环外操作元素 批量操作元素 缓存元素集合 总结",content:"# 什么是 DOM\n\nDOM（Document Object Model，文档对象模型）。。。等\n\n如果你查看过 DOM V3 标准，会发现包含多个内容，但归纳起来常用的主要由 3 个部分组成：\n\n * DOM 节点\n * DOM 事件\n * 选择区域\n\n\n# 为什么说 DOM 操作耗时\n\n要解释 DOM 操作带来的性能问题，我们不得不提一下浏览器的工作机制。\n\n# 线程切换\n\n浏览器包含渲染引擎（也称浏览器内核）和 JavaScript 引擎，它们都是单线程运行。\n\n单线程的优势是开发方便，避免多线程下的死锁、竞争等问题，劣势是失去了并发能力。\n\n浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况，增加了另外一个机制，这两个引擎具有互斥性，也就是说在某个时刻只有一个引擎在运行，另一个引擎会被阻塞。操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称上下文切换。而这个操作相对而言是比较耗时的。\n\n每次 DOM 操作就会引发线程的上下文切换——从 JavaScript 引擎切换到渲染引擎执行对应操作，然后再切换回 JavaScript 引擎继续执行，这就带来了性能损耗。单次切换消耗的时间是非常少的，但是如果频繁地大量切换，那么就会产生性能问题。\n\n比如下面的测试代码，循环读取一百万次 DOM 中的 body 元素的耗时是读取 JSON 对象耗时的 10 倍。\n\n// 测试次数：一百万次\nconst times = 1000000\n\n// 缓存body元素\nconsole.time('object')\nlet body = document.body\n// 循环赋值对象作为对照参考\nfor(let i=0;i<times;i++) {\n  let tmp = body\n}\nconsole.timeEnd('object')// object: 1.77197265625ms\n\nconsole.time('dom')\n// 循环读取body元素引发线程切换\nfor(let i=0;i<times;i++) {\n  let tmp = document.body\n}\nconsole.timeEnd('dom')// dom: 18.302001953125ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n虽然这个例子比较极端，循环次数有些夸张，但如果在循环中包含一些复杂的逻辑或者说涉及到多个元素时，就会造成不可忽视的性能损耗。\n\n# 重新渲染\n\n另一个更加耗时的因素是元素及样式变化引起的再次渲染，在渲染过程中最耗时的两个步骤为重排（Reflow）与重绘（Repaint）。\n\n浏览器在渲染页面时会将 HTML 和 CSS 分别解析成 DOM 树和 CSSOM 树，然后合并进行排布，再绘制成我们可见的页面。如果在操作 DOM 时涉及到元素、样式的修改，就会引起渲染引擎重新计算样式生成 CSSOM 树，同时还有可能触发对元素的重新排布（简称“重排”）和重新绘制（简称“重绘”）。\n\n可能会影响到其他元素排布的操作就会引起重排，继而引发重绘，比如：\n\n * 修改元素边距、大小\n * 添加、删除元素\n * 改变窗口大小\n\n与之相反的操作则只会引起重绘，比如：\n\n * 设置背景图片\n * 修改字体颜色\n * 改变 visibility 属性值\n\n如果想了解更多关于重绘和重排的样式属性，可以参看这个网址：https://csstriggers.com/。\n\n下面是两段验证代码，我们通过 Chrome 提供的性能分析工具来对渲染耗时进行分析。\n\n第一段代码，通过修改 div 元素的边距来触发重排，渲染耗时（粗略地认为渲染耗时为紫色 Rendering 事件和绿色 Painting 事件耗时之和）3045 毫秒。\n\nconst times = 100000\nlet html = ''\nfor(let i=0;i<times;i++) {\n  html+= `<div>${i}</div>`\n}\ndocument.body.innerHTML += html\nconst divs = document.querySelectorAll('div')\nArray.prototype.forEach.call(divs, (div, i) => {\n  div.style.margin = i % 2 ? '10px' : 0;\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n第二段代码，修改 div 元素字体颜色来触发重绘，得到渲染耗时 2359 ms。\n\nconst times = 100000\nlet html = ''\nfor(let i=0;i<times;i++) {\n  html+= `<div>${i}</div>`\n}\ndocument.body.innerHTML += html\nconst divs = document.querySelectorAll('div')\nArray.prototype.forEach.call(divs, (div, i) => {\n  div.style.color = i % 2 ? 'red' : 'green';\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n从两段测试代码中可以看出，重排渲染耗时明显高于重绘，同时两者的 Painting 事件耗时接近，也印证了重排会导致重绘。\n\n\n# 如何高效操作 DOM\n\n明白了 DOM 操作耗时之处后，要提升性能就变得很简单了，反其道而行之，减少这些操作即可。\n\n# 在循环外操作元素\n\n比如下面两段测试代码对比了读取 1000 次 JSON 对象以及访问 1000 次 body 元素的耗时差异，相差一个数量级。\n\nconst times = 10000;\nconsole.time('switch')\nfor (let i = 0; i < times; i++) {\n  document.body === 1 ? console.log(1) : void 0;\n}\nconsole.timeEnd('switch') // 1.873046875ms\nvar body = JSON.stringify(document.body)\nconsole.time('batch')\nfor (let i = 0; i < times; i++) {\n  body === 1 ? console.log(1) : void 0;\n}\nconsole.timeEnd('batch') // 0.846923828125ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n当然即使在循环外也要尽量减少操作元素，因为不知道他人调用你的代码时是否处于循环中。\n\n# 批量操作元素\n\n比如说要创建 1 万个 div 元素，在循环中直接创建再添加到父元素上耗时会非常多。如果采用字符串拼接的形式，先将 1 万个 div 元素的 html 字符串拼接成一个完整字符串，然后赋值给 body 元素的 innerHTML 属性就可以明显减少耗时。\n\nconst times = 10000;\nconsole.time('createElement')\nfor (let i = 0; i < times; i++) {\n  const div = document.createElement('div')\n  document.body.appendChild(div)\n}\nconsole.timeEnd('createElement')// 54.964111328125ms\nconsole.time('innerHTML')\nlet html=''\nfor (let i = 0; i < times; i++) {\n  html+='<div></div>'\n}\ndocument.body.innerHTML += html // 31.919921875ms\nconsole.timeEnd('innerHTML')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n虽然通过修改 innerHTML 来实现批量操作的方式效率很高，但它并不是万能的。比如要在此基础上实现事件监听就会略微麻烦，只能通过事件代理或者重新选取元素再进行单独绑定。\n\n批量操作除了用在创建元素外也可以用于修改元素属性样式，比如下面的例子。\n\n创建 2 万个 div 元素，以单节点树结构进行排布，每个元素有一个对应的序号作为文本内容。现在通过 style 属性对第 1 个 div 元素进行 2 万次样式调整。下面是直接操作 style 属性的代码：\n\nconst times = 20000;\nlet html = ''\nfor (let i = 0; i < times; i++) {\n  html = `<div>${i}${html}</div>`\n}\ndocument.body.innerHTML += html\nconst div = document.querySelector('div')\nfor (let i = 0; i < times; i++) {\n  div.style.fontSize = (i % 12) + 12 + 'px'\n  div.style.color = i % 2 ? 'red' : 'green'\n  div.style.margin = (i % 12) + 12 + 'px'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n如果将需要修改的样式属性放入 JavaScript 数组，然后对这些修改进行 reduce 操作，得到最终需要的样式之后再设置元素属性，那么性能会提升很多。代码如下：\n\nconst times = 20000\nlet html = ''\nfor (let i = 0; i < times; i++) {\n  html = `<div>${i}${html}</div>`\n}\ndocument.body.innerHTML += html\n\nlet queue = [] //  创建缓存样式的数组\nlet microTask // 执行修改样式的微任务\n\nconst st = () => {\n  const div = document.querySelector('div')\n  \n  // 合并样式\n  const style = queue.reduce((acc, cur) => ({ ...acc, ...cur }), {})\n  for (let prop in style) {\n    div.style[prop] = style[prop]\n  }\n  queue = []\n  microTask = null\n}\n\nconst setStyle = (style) => {\n  queue.push(style)\n  // 创建微任务\n  if (!microTask) microTask = Promise.resolve().then(st)\n}\n\nfor (let i = 0; i < times; i++) {\n  const style = {\n    fontSize: (i % 12) + 12 + 'px',\n    color: i % 2 ? 'red' : 'green',\n    margin: (i % 12) + 12 + 'px'\n  }\n  setStyle(style)\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n从下面的耗时占比图可以看到，紫色 Rendering 事件耗时有所减少。\n\n\n\nvirtualDOM 之所以号称高性能，其实现原理就与此类似。\n\n# 缓存元素集合\n\n比如将通过选择器函数获取到的 DOM 元素赋值给变量，之后通过变量操作而不是再次使用选择器函数来获取。\n\n下面举例说明，假设我们现在要将上面代码所创建的 1 万个 div 元素的文本内容进行修改。每次重复使用获取选择器函数来获取元素，代码以及时间消耗如下所示。\n\nfor (let i = 0; i < document.querySelectorAll('div').length; i++) {\n  document.querySelectorAll(`div`)[i].innerText = i\n}\n\n\n1\n2\n3\n\n\n\n\n如果能够将元素集合赋值给 JavaScript 变量，每次通过变量去修改元素，那么性能将会得到不小的提升。\n\nconst divs = document.querySelectorAll('div')\nfor (let i = 0; i < divs.length; i++) {\n  divs[i].innerText = i\n}\n\n\n1\n2\n3\n4\n\n\n\n\n对比两者耗时占比图可以看到，两者的渲染时间较为接近。但缓存元素的方式在黄色的 Scripting 耗时上具有明显优势。\n\n\n# 总结\n\n深入理解 DOM ，分析 DOM 操作耗时的原因，最后针对这些原因提出了可行的解决方法。\n\n除了这些方法之外，还有一些原则也可能帮助我们提升渲染性能，比如：\n\n * 尽量不要使用复杂的匹配规则和复杂的样式，从而减少渲染引擎计算样式规则生成 CSSOM 树的时间；\n * 尽量减少重排和重绘影响的区域；\n * 使用 CSS3 特性来实现动画效果。",normalizedContent:"# 什么是 dom\n\ndom（document object model，文档对象模型）。。。等\n\n如果你查看过 dom v3 标准，会发现包含多个内容，但归纳起来常用的主要由 3 个部分组成：\n\n * dom 节点\n * dom 事件\n * 选择区域\n\n\n# 为什么说 dom 操作耗时\n\n要解释 dom 操作带来的性能问题，我们不得不提一下浏览器的工作机制。\n\n# 线程切换\n\n浏览器包含渲染引擎（也称浏览器内核）和 javascript 引擎，它们都是单线程运行。\n\n单线程的优势是开发方便，避免多线程下的死锁、竞争等问题，劣势是失去了并发能力。\n\n浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况，增加了另外一个机制，这两个引擎具有互斥性，也就是说在某个时刻只有一个引擎在运行，另一个引擎会被阻塞。操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称上下文切换。而这个操作相对而言是比较耗时的。\n\n每次 dom 操作就会引发线程的上下文切换——从 javascript 引擎切换到渲染引擎执行对应操作，然后再切换回 javascript 引擎继续执行，这就带来了性能损耗。单次切换消耗的时间是非常少的，但是如果频繁地大量切换，那么就会产生性能问题。\n\n比如下面的测试代码，循环读取一百万次 dom 中的 body 元素的耗时是读取 json 对象耗时的 10 倍。\n\n// 测试次数：一百万次\nconst times = 1000000\n\n// 缓存body元素\nconsole.time('object')\nlet body = document.body\n// 循环赋值对象作为对照参考\nfor(let i=0;i<times;i++) {\n  let tmp = body\n}\nconsole.timeend('object')// object: 1.77197265625ms\n\nconsole.time('dom')\n// 循环读取body元素引发线程切换\nfor(let i=0;i<times;i++) {\n  let tmp = document.body\n}\nconsole.timeend('dom')// dom: 18.302001953125ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n虽然这个例子比较极端，循环次数有些夸张，但如果在循环中包含一些复杂的逻辑或者说涉及到多个元素时，就会造成不可忽视的性能损耗。\n\n# 重新渲染\n\n另一个更加耗时的因素是元素及样式变化引起的再次渲染，在渲染过程中最耗时的两个步骤为重排（reflow）与重绘（repaint）。\n\n浏览器在渲染页面时会将 html 和 css 分别解析成 dom 树和 cssom 树，然后合并进行排布，再绘制成我们可见的页面。如果在操作 dom 时涉及到元素、样式的修改，就会引起渲染引擎重新计算样式生成 cssom 树，同时还有可能触发对元素的重新排布（简称“重排”）和重新绘制（简称“重绘”）。\n\n可能会影响到其他元素排布的操作就会引起重排，继而引发重绘，比如：\n\n * 修改元素边距、大小\n * 添加、删除元素\n * 改变窗口大小\n\n与之相反的操作则只会引起重绘，比如：\n\n * 设置背景图片\n * 修改字体颜色\n * 改变 visibility 属性值\n\n如果想了解更多关于重绘和重排的样式属性，可以参看这个网址：https://csstriggers.com/。\n\n下面是两段验证代码，我们通过 chrome 提供的性能分析工具来对渲染耗时进行分析。\n\n第一段代码，通过修改 div 元素的边距来触发重排，渲染耗时（粗略地认为渲染耗时为紫色 rendering 事件和绿色 painting 事件耗时之和）3045 毫秒。\n\nconst times = 100000\nlet html = ''\nfor(let i=0;i<times;i++) {\n  html+= `<div>${i}</div>`\n}\ndocument.body.innerhtml += html\nconst divs = document.queryselectorall('div')\narray.prototype.foreach.call(divs, (div, i) => {\n  div.style.margin = i % 2 ? '10px' : 0;\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n第二段代码，修改 div 元素字体颜色来触发重绘，得到渲染耗时 2359 ms。\n\nconst times = 100000\nlet html = ''\nfor(let i=0;i<times;i++) {\n  html+= `<div>${i}</div>`\n}\ndocument.body.innerhtml += html\nconst divs = document.queryselectorall('div')\narray.prototype.foreach.call(divs, (div, i) => {\n  div.style.color = i % 2 ? 'red' : 'green';\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n从两段测试代码中可以看出，重排渲染耗时明显高于重绘，同时两者的 painting 事件耗时接近，也印证了重排会导致重绘。\n\n\n# 如何高效操作 dom\n\n明白了 dom 操作耗时之处后，要提升性能就变得很简单了，反其道而行之，减少这些操作即可。\n\n# 在循环外操作元素\n\n比如下面两段测试代码对比了读取 1000 次 json 对象以及访问 1000 次 body 元素的耗时差异，相差一个数量级。\n\nconst times = 10000;\nconsole.time('switch')\nfor (let i = 0; i < times; i++) {\n  document.body === 1 ? console.log(1) : void 0;\n}\nconsole.timeend('switch') // 1.873046875ms\nvar body = json.stringify(document.body)\nconsole.time('batch')\nfor (let i = 0; i < times; i++) {\n  body === 1 ? console.log(1) : void 0;\n}\nconsole.timeend('batch') // 0.846923828125ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n当然即使在循环外也要尽量减少操作元素，因为不知道他人调用你的代码时是否处于循环中。\n\n# 批量操作元素\n\n比如说要创建 1 万个 div 元素，在循环中直接创建再添加到父元素上耗时会非常多。如果采用字符串拼接的形式，先将 1 万个 div 元素的 html 字符串拼接成一个完整字符串，然后赋值给 body 元素的 innerhtml 属性就可以明显减少耗时。\n\nconst times = 10000;\nconsole.time('createelement')\nfor (let i = 0; i < times; i++) {\n  const div = document.createelement('div')\n  document.body.appendchild(div)\n}\nconsole.timeend('createelement')// 54.964111328125ms\nconsole.time('innerhtml')\nlet html=''\nfor (let i = 0; i < times; i++) {\n  html+='<div></div>'\n}\ndocument.body.innerhtml += html // 31.919921875ms\nconsole.timeend('innerhtml')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n虽然通过修改 innerhtml 来实现批量操作的方式效率很高，但它并不是万能的。比如要在此基础上实现事件监听就会略微麻烦，只能通过事件代理或者重新选取元素再进行单独绑定。\n\n批量操作除了用在创建元素外也可以用于修改元素属性样式，比如下面的例子。\n\n创建 2 万个 div 元素，以单节点树结构进行排布，每个元素有一个对应的序号作为文本内容。现在通过 style 属性对第 1 个 div 元素进行 2 万次样式调整。下面是直接操作 style 属性的代码：\n\nconst times = 20000;\nlet html = ''\nfor (let i = 0; i < times; i++) {\n  html = `<div>${i}${html}</div>`\n}\ndocument.body.innerhtml += html\nconst div = document.queryselector('div')\nfor (let i = 0; i < times; i++) {\n  div.style.fontsize = (i % 12) + 12 + 'px'\n  div.style.color = i % 2 ? 'red' : 'green'\n  div.style.margin = (i % 12) + 12 + 'px'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n如果将需要修改的样式属性放入 javascript 数组，然后对这些修改进行 reduce 操作，得到最终需要的样式之后再设置元素属性，那么性能会提升很多。代码如下：\n\nconst times = 20000\nlet html = ''\nfor (let i = 0; i < times; i++) {\n  html = `<div>${i}${html}</div>`\n}\ndocument.body.innerhtml += html\n\nlet queue = [] //  创建缓存样式的数组\nlet microtask // 执行修改样式的微任务\n\nconst st = () => {\n  const div = document.queryselector('div')\n  \n  // 合并样式\n  const style = queue.reduce((acc, cur) => ({ ...acc, ...cur }), {})\n  for (let prop in style) {\n    div.style[prop] = style[prop]\n  }\n  queue = []\n  microtask = null\n}\n\nconst setstyle = (style) => {\n  queue.push(style)\n  // 创建微任务\n  if (!microtask) microtask = promise.resolve().then(st)\n}\n\nfor (let i = 0; i < times; i++) {\n  const style = {\n    fontsize: (i % 12) + 12 + 'px',\n    color: i % 2 ? 'red' : 'green',\n    margin: (i % 12) + 12 + 'px'\n  }\n  setstyle(style)\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n从下面的耗时占比图可以看到，紫色 rendering 事件耗时有所减少。\n\n\n\nvirtualdom 之所以号称高性能，其实现原理就与此类似。\n\n# 缓存元素集合\n\n比如将通过选择器函数获取到的 dom 元素赋值给变量，之后通过变量操作而不是再次使用选择器函数来获取。\n\n下面举例说明，假设我们现在要将上面代码所创建的 1 万个 div 元素的文本内容进行修改。每次重复使用获取选择器函数来获取元素，代码以及时间消耗如下所示。\n\nfor (let i = 0; i < document.queryselectorall('div').length; i++) {\n  document.queryselectorall(`div`)[i].innertext = i\n}\n\n\n1\n2\n3\n\n\n\n\n如果能够将元素集合赋值给 javascript 变量，每次通过变量去修改元素，那么性能将会得到不小的提升。\n\nconst divs = document.queryselectorall('div')\nfor (let i = 0; i < divs.length; i++) {\n  divs[i].innertext = i\n}\n\n\n1\n2\n3\n4\n\n\n\n\n对比两者耗时占比图可以看到，两者的渲染时间较为接近。但缓存元素的方式在黄色的 scripting 耗时上具有明显优势。\n\n\n# 总结\n\n深入理解 dom ，分析 dom 操作耗时的原因，最后针对这些原因提出了可行的解决方法。\n\n除了这些方法之外，还有一些原则也可能帮助我们提升渲染性能，比如：\n\n * 尽量不要使用复杂的匹配规则和复杂的样式，从而减少渲染引擎计算样式规则生成 cssom 树的时间；\n * 尽量减少重排和重绘影响的区域；\n * 使用 css3 特性来实现动画效果。",charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"全局数据",frontmatter:{title:"全局数据",date:"2022-01-09T16:59:59.000Z",permalink:"/pages/9bf063/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102020.%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102020.全局数据.md",key:"v-3d4665d4",path:"/pages/9bf063/",headersStr:null,content:"全spa应用中，全局状态管理是重中之重的\n\n很多时候都放在window下面，或者定义一个大对象。这样在大型应用中管理起来就比较混乱了\n\n * 数据不能及时响应\n * 数据修改无法追踪\n\n在前端有很多状态管理工具，比较出名的就是\n\n * vuex\n * redux\n * mobx\n\n原理大同小异\n\n * 定义一个类似object的对象\n * 只能通过特定的方法去修改它",normalizedContent:"全spa应用中，全局状态管理是重中之重的\n\n很多时候都放在window下面，或者定义一个大对象。这样在大型应用中管理起来就比较混乱了\n\n * 数据不能及时响应\n * 数据修改无法追踪\n\n在前端有很多状态管理工具，比较出名的就是\n\n * vuex\n * redux\n * mobx\n\n原理大同小异\n\n * 定义一个类似object的对象\n * 只能通过特定的方法去修改它",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"持久化数据",frontmatter:{title:"持久化数据",date:"2022-01-13T13:51:17.000Z",permalink:"/pages/b035dd/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102021.%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102021.持久化数据.md",key:"v-e72f1de0",path:"/pages/b035dd/",headers:[{level:2,title:"全局变量代理",slug:"全局变量代理",normalizedTitle:"全局变量代理",charIndex:16},{level:2,title:"监听localStorage变化",slug:"监听localstorage变化",normalizedTitle:"监听localstorage变化",charIndex:380},{level:3,title:"重写localStorage",slug:"重写localstorage",normalizedTitle:"重写localstorage",charIndex:401}],headersStr:"全局变量代理 监听localStorage变化 重写localStorage",content:'更良好的读取持久化数据\n\n\n# 全局变量代理\n\n做一个全局变量代理 放在运存中\n\n这里全局变量举例 window._theme\n\n * 读\n   \n   const getTheme = () => {\n     return window._theme || window.localStorage.getItem(\'theme\') || \'default\'\n   }\n   \n   \n   1\n   2\n   3\n   \n\n * 写\n   \n   const setTheme = (value) => {\n     window.localStorage.setItem(\'theme\': value)\n     return window._theme = value\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# 监听localStorage变化\n\n\n# 重写localStorage\n\nvar orignalSetItem = localStorage.setItem;\nlocalStorage.setItem = function(key,newValue){\n      var setItemEvent = new Event("setItemEvent");\n      setItemEvent.newValue = newValue;\n      window.dispatchEvent(setItemEvent);\n      orignalSetItem.apply(this,arguments);\n}\nwindow.addEventListener("setItemEvent", function (e) {\n    alert(e.newValue);\n});\nlocalStorage.setItem("name","wang");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',normalizedContent:'更良好的读取持久化数据\n\n\n# 全局变量代理\n\n做一个全局变量代理 放在运存中\n\n这里全局变量举例 window._theme\n\n * 读\n   \n   const gettheme = () => {\n     return window._theme || window.localstorage.getitem(\'theme\') || \'default\'\n   }\n   \n   \n   1\n   2\n   3\n   \n\n * 写\n   \n   const settheme = (value) => {\n     window.localstorage.setitem(\'theme\': value)\n     return window._theme = value\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# 监听localstorage变化\n\n\n# 重写localstorage\n\nvar orignalsetitem = localstorage.setitem;\nlocalstorage.setitem = function(key,newvalue){\n      var setitemevent = new event("setitemevent");\n      setitemevent.newvalue = newvalue;\n      window.dispatchevent(setitemevent);\n      orignalsetitem.apply(this,arguments);\n}\nwindow.addeventlistener("setitemevent", function (e) {\n    alert(e.newvalue);\n});\nlocalstorage.setitem("name","wang");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"理解 AST 实现和编译原理",frontmatter:{title:"理解 AST 实现和编译原理",date:"2023-02-12T23:40:56.000Z",permalink:"/pages/1c1a0c/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020212.%E7%90%86%E8%A7%A3%20AST%20%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020212.理解 AST 实现和编译原理.md",key:"v-5b29bf2e",path:"/pages/1c1a0c/",headers:[{level:3,title:"AST 基础知识",slug:"ast-基础知识",normalizedTitle:"ast 基础知识",charIndex:120},{level:4,title:"AST 初体验",slug:"ast-初体验",normalizedTitle:"ast 初体验",charIndex:507},{level:4,title:"acorn 解析",slug:"acorn-解析",normalizedTitle:"acorn 解析",charIndex:741},{level:3,title:"AST 实战演练——实现一个简易 Tree Shaking 脚本",slug:"ast-实战演练-实现一个简易-tree-shaking-脚本",normalizedTitle:"ast 实战演练——实现一个简易 tree shaking 脚本",charIndex:3243}],headersStr:"AST 基础知识 AST 初体验 acorn 解析 AST 实战演练——实现一个简易 Tree Shaking 脚本",content:"AST 技术是现代化前端基建和工程化建设的基石：Babel、Webpack、ESLint、代码压缩工具等耳熟能详的工程化基建工具或流程，都离不开 AST 技术；Vue、React 等经典前端框架，也离不开基于 AST 技术的编译。\n\n\n# AST 基础知识\n\n先对 AST 下一个定义，AST 是 Abstract Syntax Tree 的缩写，表示抽象语法树：\n\n> 在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax Tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似 if-condition-then 这样的条件跳转语句，可以使用带有三个分支的节点来表示。\n\nAST 的应用场景经常出现在源代码的编译过程中：一般语法分析器创建出 AST，然后 AST 在语义分析阶段添加一些信息，甚至修改 AST 内容，最终产出编译后代码。\n\n# AST 初体验\n\n了解了 AST 基本概念，对 AST 进行一个“感官认知”。这里提供给你一个平台：AST explorer，在这个平台中，可以实时看到 JavaScript 代码转换为 AST 之后的产出结果。如下图所示：\n\n\n\nAST 在线分析结果图\n\n可以看到，经过 AST 转换，的 JavaScript 代码（左侧）变成了一种 ESTree 规范的数据结构（右侧），这种数据结构就是 AST。\n\n这个平台实际使用了 acorn 作为 AST 解析器。\n\n# acorn 解析\n\n实际上，社区上多项著名项目都依赖的 acorn 的能力（比如 ESLint、Babel、Vue.js 等），acorn 的介绍为：\n\n> A tiny, fast JavaScript parser, written completely in JavaScript.\n\n由此可知，acorn 是一个完全使用 JavaScript 实现的、小型且快速的 JavaScript 解析器。基本用法非常简单，代码如下：\n\nlet acorn = require('acorn')\nlet code = 1 + 2\nconsole.log(acorn.parse(code))\n\n\n1\n2\n3\n\n\n更多使用方式不再一一列举。你可以结合相关源码进一步学习。\n\n将视线更多地聚焦 acorn 的内部实现中。对所有语法解析器来说，实现流程上很简单，如下图所示：\n\n\n\nacorn 工作流程图\n\n源代码经过词法分析，即分词得到 Token 序列，对 Token 序列进行语法分析，得到最终 AST 结果。但 acorn 稍有不同的是：acorn 将词法分析和语法分析交替进行，只需要扫描一遍代码即可得到最终 AST 结果。\n\nacorn 的 Parser 类源码形如：\n\nexport class Parser {\n  constructor(options, input, startPos) {\n    //...\n  }\n  parse() {\n    // ...\n  }\n  // 判断所处 context\n  get inFunction() { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 }\n  get inGenerator() { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 }\n  get inAsync() { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 }\n  get allowSuper() { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 }\n  get allowDirectSuper() { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 }\n  get treatFunctionsAsVar() { return this.treatFunctionsAsVarInScope(this.currentScope()) }\n  get inNonArrowFunction() { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 }\n  static extend(...plugins) {\n    // ...\n  }\n  // 解析入口\n  static parse(input, options) {\n    return new this(options, input).parse()\n  }\n  static parseExpressionAt(input, pos, options) {\n    let parser = new this(options, input, pos)\n    parser.nextToken()\n    return parser.parseExpression()\n  }\n  // 分词入口\n  static tokenizer(input, options) {\n    return new this(options, input)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n稍做解释：\n\n * type 表示当前 Token 类型；\n * pos 表示当前 Token 所在源代码中的位置；\n * startNode 方法返回当前 AST 节点；\n * nextToken 方法从源代码中读取下一个 Token；\n * parseTopLevel 方法实现递归向下组装 AST 树。\n\n这是 acorn 实现解析 AST 的入口骨架，实际的分词环节主要解决以下问题。\n\n 1. 明确需要分析哪些 Token 类型。\n\n * 关键字：import，function，return 等\n * 变量名称\n * 运算符号\n * 结束符号\n\n 1. 状态机：简单来讲就是消费每一个源代码中的字符，对字符意义进行状态机判断。以“对于/的处理”为例，对于3/10的源代码，/就表示一个运算符号；对于var re = /ab+c/源代码来说，/就表示正则运算的起始字符了。\n\n在分词过程中，实现者往往使用一个 Context 来表达一个上下文，实际上Context 是一个栈数据结果（这一部分源码你可以点击这里阅读）。\n\nacorn 在语法解析阶段主要完成 AST 的封装以及错误抛出。在这个过程中，需要你了解，一段源代码可以用：\n\n * Program——整个程序\n * Statement——语句\n * Expression——表达式\n\n来描述。\n\n当然，Program 包含了多段 Statement，Statement 又由多个 Expression 或者 Statement 组成。这三种大元素，就构成了遵循 ESTree 规范的 AST。最终的 AST 产出，也是这三种元素的数据结构拼合。具体实现代码不再探究。\n\n下面通过 acorn 以及一个脚本，来实现非常简易的 Tree Shaking 能力。\n\n\n# AST 实战演练——实现一个简易 Tree Shaking 脚本\n\n实现一个简单的 DCE（dead code elimination）。\n\n目标如下，实现一个 Node.js 脚本 treeShaking.js，执行命令：\n\nnode treeShaking test.js\n\n\n1\n\n\n可以将test.js中的 dead code 消除。使用test.js测试代码如下：\n\nfunction add(a, b) {\n    return a + b\n}\nfunction multiple(a, b) {\n    return a * b\n}\nvar firstOp = 9\nvar secondOp = 10\nadd(firstOp, secondOp)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n理论上讲，上述代码中的multiple方法可以被“摇掉”。\n\n进入实现环节，首先请看下图，了解整体架构流程：\n\n\n\n基于 AST 的 tree-shaking 简易实现\n\n设计 JSEmitter 类，用于根据 AST 产出 JavaScript 代码（js-emitter.js 文件内容）：\n\nclass JSEmitter {\n    // 访问变量声明，以下都是工具方法\n    visitVariableDeclaration(node) {\n        let str = ''\n        str += node.kind + ' '\n        str += this.visitNodes(node.declarations)\n        return str + '\\n'\n    }\n    visitVariableDeclarator(node, kind) {\n        let str = ''\n        str += kind ? kind + ' ' : str\n        str += this.visitNode(node.id)\n        str += '='\n        str += this.visitNode(node.init)\n        return str + ';' + '\\n'\n    }\n    visitIdentifier(node) {\n        return node.name\n    }\n    visitLiteral(node) {\n        return node.raw\n    }\n    visitBinaryExpression(node) {\n        let str = ''\n        str += this.visitNode(node.left)\n        str += node.operator\n        str += this.visitNode(node.right)\n        return str + '\\n'\n    }\n    visitFunctionDeclaration(node) {\n        let str = 'function '\n        str += this.visitNode(node.id)\n        str += '('\n        for (let param = 0; param < node.params.length; param++) {\n            str += this.visitNode(node.params[param])\n            str += ((node.params[param] == undefined) ? '' : ',')\n        }\n        str = str.slice(0, str.length - 1)\n        str += '){'\n        str += this.visitNode(node.body)\n        str += '}'\n        return str + '\\n'\n    }\n    visitBlockStatement(node) {\n        let str = ''\n        str += this.visitNodes(node.body)\n        return str\n    }\n    visitCallExpression(node) {\n        let str = ''\n        const callee = this.visitIdentifier(node.callee)\n        str += callee + '('\n        for (const arg of node.arguments) {\n            str += this.visitNode(arg) + ','\n        }\n        str = str.slice(0, str.length - 1)\n        str += ');'\n        return str + '\\n'\n    }\n    visitReturnStatement(node) {\n        let str = 'return ';\n        str += this.visitNode(node.argument)\n        return str + '\\n'\n    }\n    visitExpressionStatement(node) {\n        return this.visitNode(node.expression)\n    }\n    visitNodes(nodes) {\n        let str = ''\n        for (const node of nodes) {\n            str += this.visitNode(node)\n        }\n        return str\n    }\n    // 根据类型，执行相关处理函数\n    visitNode(node) {\n        let str = ''\n        switch (node.type) {\n            case 'VariableDeclaration':\n                str += this.visitVariableDeclaration(node)\n                break;\n            case 'VariableDeclarator':\n                str += this.visitVariableDeclarator(node)\n                break;\n            case 'Literal':\n                str += this.visitLiteral(node)\n                break;\n            case 'Identifier':\n                str += this.visitIdentifier(node)\n                break;\n            case 'BinaryExpression':\n                str += this.visitBinaryExpression(node)\n                break;\n            case 'FunctionDeclaration':\n                str += this.visitFunctionDeclaration(node)\n                break;\n            case 'BlockStatement':\n                str += this.visitBlockStatement(node)\n                break;\n            case \"CallExpression\":\n                str += this.visitCallExpression(node)\n                break;\n            case \"ReturnStatement\":\n                str += this.visitReturnStatement(node)\n                break;\n            case \"ExpressionStatement\":\n                str += this.visitExpressionStatement(node)\n                break;\n        }\n        return str\n    }\n    // 入口\n    run(body) {\n        let str = ''\n        str += this.visitNodes(body)\n        return str\n    }\n}\nmodule.exports = JSEmitter\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n\n\n来具体分析一下，JSEmitter 类中创建了很多 visitXXX 方法，他们最终都会产出 JavaScript 代码。继续结合treeShaking.js的实现来理解：\n\nconst acorn = require(\"acorn\")\nconst l = console.log\nconst JSEmitter = require('./js-emitter')\nconst fs = require('fs')\n// 获取命令行参数\nconst args = process.argv[2]\nconst buffer = fs.readFileSync(args).toString()\nconst body = acorn.parse(buffer).body\nconst jsEmitter = new JSEmitter()\nlet decls = new Map()\nlet calledDecls = []\nlet code = []\n// 遍历处理\nbody.forEach(function(node) {\n    if (node.type == \"FunctionDeclaration\") {\n        const code = jsEmitter.run([node])\n        decls.set(jsEmitter.visitNode(node.id), code)\n        return;\n    }\n    if (node.type == \"ExpressionStatement\") {\n        if (node.expression.type == \"CallExpression\") {\n            const callNode = node.expression\n            calledDecls.push(jsEmitter.visitIdentifier(callNode.callee))\n            const args = callNode.arguments\n            for (const arg of args) {\n                if (arg.type == \"Identifier\") {\n                    calledDecls.push(jsEmitter.visitNode(arg))\n                }\n            }\n        }\n    }\n    if (node.type == \"VariableDeclaration\") {\n        const kind = node.kind\n        for (const decl of node.declarations) {\n            decls.set(jsEmitter.visitNode(decl.id), jsEmitter.visitVariableDeclarator(decl, kind))\n        }\n        return\n    }\n    if (node.type == \"Identifier\") {\n        calledDecls.push(node.name)\n    }\n    code.push(jsEmitter.run([node]))\n});\n// 生成 code\ncode = calledDecls.map(c => {\n    return decls.get(c)\n}).concat([code]).join('')\nfs.writeFileSync('test.shaked.js', code)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n对于上面代码分析，首先通过process.argv获取到目标文件，对于目标文件通过fs.readFileSync()方法读出字符串形式的内容buffer，对于这个buffer变量，使用acorn.parse进行解析，并对产出内容进行遍历。\n\n在遍历过程中，对于不同的节点类型，调用 JS Emitter 实例不同的处理方法。在整个过程中，维护了：\n\n * decls——Map 类型\n * calledDecls——数组类型\n * code——数组类型\n\n三个关键变量。decls存储所有的函数或变量声明类型节点，calledDecls则存储了代码中真正使用到的数或变量声明，code存储了其他所有没有被节点类型匹配的 AST 部分。\n\n下面来分析具体的遍历过程。\n\n * 在遍历过程中，对所有函数和变量的声明，都维护到decls中。\n * 接着，对所有的 CallExpression 和 IDentifier 进行检测。因为 CallExpression 代表了一次函数调用，因此在该 if 条件分支内，将相关函数节点调用情况推入到calledDecls数组中，同时对于该函数的参数变量也推入到calledDecls数组。因为 IDentifier 代表了一个变量的取值，也推入到calledDecls数组。\n\n经过整个 AST 遍历，就可以只遍历calledDecls数组，并从decls变量中获取使用到的变量和函数声明，最终使用concat方法合并带入code变量中，使用join方法转化为字符串类型。",normalizedContent:"ast 技术是现代化前端基建和工程化建设的基石：babel、webpack、eslint、代码压缩工具等耳熟能详的工程化基建工具或流程，都离不开 ast 技术；vue、react 等经典前端框架，也离不开基于 ast 技术的编译。\n\n\n# ast 基础知识\n\n先对 ast 下一个定义，ast 是 abstract syntax tree 的缩写，表示抽象语法树：\n\n> 在计算机科学中，抽象语法树（abstract syntax tree，ast），或简称语法树（syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似 if-condition-then 这样的条件跳转语句，可以使用带有三个分支的节点来表示。\n\nast 的应用场景经常出现在源代码的编译过程中：一般语法分析器创建出 ast，然后 ast 在语义分析阶段添加一些信息，甚至修改 ast 内容，最终产出编译后代码。\n\n# ast 初体验\n\n了解了 ast 基本概念，对 ast 进行一个“感官认知”。这里提供给你一个平台：ast explorer，在这个平台中，可以实时看到 javascript 代码转换为 ast 之后的产出结果。如下图所示：\n\n\n\nast 在线分析结果图\n\n可以看到，经过 ast 转换，的 javascript 代码（左侧）变成了一种 estree 规范的数据结构（右侧），这种数据结构就是 ast。\n\n这个平台实际使用了 acorn 作为 ast 解析器。\n\n# acorn 解析\n\n实际上，社区上多项著名项目都依赖的 acorn 的能力（比如 eslint、babel、vue.js 等），acorn 的介绍为：\n\n> a tiny, fast javascript parser, written completely in javascript.\n\n由此可知，acorn 是一个完全使用 javascript 实现的、小型且快速的 javascript 解析器。基本用法非常简单，代码如下：\n\nlet acorn = require('acorn')\nlet code = 1 + 2\nconsole.log(acorn.parse(code))\n\n\n1\n2\n3\n\n\n更多使用方式不再一一列举。你可以结合相关源码进一步学习。\n\n将视线更多地聚焦 acorn 的内部实现中。对所有语法解析器来说，实现流程上很简单，如下图所示：\n\n\n\nacorn 工作流程图\n\n源代码经过词法分析，即分词得到 token 序列，对 token 序列进行语法分析，得到最终 ast 结果。但 acorn 稍有不同的是：acorn 将词法分析和语法分析交替进行，只需要扫描一遍代码即可得到最终 ast 结果。\n\nacorn 的 parser 类源码形如：\n\nexport class parser {\n  constructor(options, input, startpos) {\n    //...\n  }\n  parse() {\n    // ...\n  }\n  // 判断所处 context\n  get infunction() { return (this.currentvarscope().flags & scope_function) > 0 }\n  get ingenerator() { return (this.currentvarscope().flags & scope_generator) > 0 }\n  get inasync() { return (this.currentvarscope().flags & scope_async) > 0 }\n  get allowsuper() { return (this.currentthisscope().flags & scope_super) > 0 }\n  get allowdirectsuper() { return (this.currentthisscope().flags & scope_direct_super) > 0 }\n  get treatfunctionsasvar() { return this.treatfunctionsasvarinscope(this.currentscope()) }\n  get innonarrowfunction() { return (this.currentthisscope().flags & scope_function) > 0 }\n  static extend(...plugins) {\n    // ...\n  }\n  // 解析入口\n  static parse(input, options) {\n    return new this(options, input).parse()\n  }\n  static parseexpressionat(input, pos, options) {\n    let parser = new this(options, input, pos)\n    parser.nexttoken()\n    return parser.parseexpression()\n  }\n  // 分词入口\n  static tokenizer(input, options) {\n    return new this(options, input)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n稍做解释：\n\n * type 表示当前 token 类型；\n * pos 表示当前 token 所在源代码中的位置；\n * startnode 方法返回当前 ast 节点；\n * nexttoken 方法从源代码中读取下一个 token；\n * parsetoplevel 方法实现递归向下组装 ast 树。\n\n这是 acorn 实现解析 ast 的入口骨架，实际的分词环节主要解决以下问题。\n\n 1. 明确需要分析哪些 token 类型。\n\n * 关键字：import，function，return 等\n * 变量名称\n * 运算符号\n * 结束符号\n\n 1. 状态机：简单来讲就是消费每一个源代码中的字符，对字符意义进行状态机判断。以“对于/的处理”为例，对于3/10的源代码，/就表示一个运算符号；对于var re = /ab+c/源代码来说，/就表示正则运算的起始字符了。\n\n在分词过程中，实现者往往使用一个 context 来表达一个上下文，实际上context 是一个栈数据结果（这一部分源码你可以点击这里阅读）。\n\nacorn 在语法解析阶段主要完成 ast 的封装以及错误抛出。在这个过程中，需要你了解，一段源代码可以用：\n\n * program——整个程序\n * statement——语句\n * expression——表达式\n\n来描述。\n\n当然，program 包含了多段 statement，statement 又由多个 expression 或者 statement 组成。这三种大元素，就构成了遵循 estree 规范的 ast。最终的 ast 产出，也是这三种元素的数据结构拼合。具体实现代码不再探究。\n\n下面通过 acorn 以及一个脚本，来实现非常简易的 tree shaking 能力。\n\n\n# ast 实战演练——实现一个简易 tree shaking 脚本\n\n实现一个简单的 dce（dead code elimination）。\n\n目标如下，实现一个 node.js 脚本 treeshaking.js，执行命令：\n\nnode treeshaking test.js\n\n\n1\n\n\n可以将test.js中的 dead code 消除。使用test.js测试代码如下：\n\nfunction add(a, b) {\n    return a + b\n}\nfunction multiple(a, b) {\n    return a * b\n}\nvar firstop = 9\nvar secondop = 10\nadd(firstop, secondop)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n理论上讲，上述代码中的multiple方法可以被“摇掉”。\n\n进入实现环节，首先请看下图，了解整体架构流程：\n\n\n\n基于 ast 的 tree-shaking 简易实现\n\n设计 jsemitter 类，用于根据 ast 产出 javascript 代码（js-emitter.js 文件内容）：\n\nclass jsemitter {\n    // 访问变量声明，以下都是工具方法\n    visitvariabledeclaration(node) {\n        let str = ''\n        str += node.kind + ' '\n        str += this.visitnodes(node.declarations)\n        return str + '\\n'\n    }\n    visitvariabledeclarator(node, kind) {\n        let str = ''\n        str += kind ? kind + ' ' : str\n        str += this.visitnode(node.id)\n        str += '='\n        str += this.visitnode(node.init)\n        return str + ';' + '\\n'\n    }\n    visitidentifier(node) {\n        return node.name\n    }\n    visitliteral(node) {\n        return node.raw\n    }\n    visitbinaryexpression(node) {\n        let str = ''\n        str += this.visitnode(node.left)\n        str += node.operator\n        str += this.visitnode(node.right)\n        return str + '\\n'\n    }\n    visitfunctiondeclaration(node) {\n        let str = 'function '\n        str += this.visitnode(node.id)\n        str += '('\n        for (let param = 0; param < node.params.length; param++) {\n            str += this.visitnode(node.params[param])\n            str += ((node.params[param] == undefined) ? '' : ',')\n        }\n        str = str.slice(0, str.length - 1)\n        str += '){'\n        str += this.visitnode(node.body)\n        str += '}'\n        return str + '\\n'\n    }\n    visitblockstatement(node) {\n        let str = ''\n        str += this.visitnodes(node.body)\n        return str\n    }\n    visitcallexpression(node) {\n        let str = ''\n        const callee = this.visitidentifier(node.callee)\n        str += callee + '('\n        for (const arg of node.arguments) {\n            str += this.visitnode(arg) + ','\n        }\n        str = str.slice(0, str.length - 1)\n        str += ');'\n        return str + '\\n'\n    }\n    visitreturnstatement(node) {\n        let str = 'return ';\n        str += this.visitnode(node.argument)\n        return str + '\\n'\n    }\n    visitexpressionstatement(node) {\n        return this.visitnode(node.expression)\n    }\n    visitnodes(nodes) {\n        let str = ''\n        for (const node of nodes) {\n            str += this.visitnode(node)\n        }\n        return str\n    }\n    // 根据类型，执行相关处理函数\n    visitnode(node) {\n        let str = ''\n        switch (node.type) {\n            case 'variabledeclaration':\n                str += this.visitvariabledeclaration(node)\n                break;\n            case 'variabledeclarator':\n                str += this.visitvariabledeclarator(node)\n                break;\n            case 'literal':\n                str += this.visitliteral(node)\n                break;\n            case 'identifier':\n                str += this.visitidentifier(node)\n                break;\n            case 'binaryexpression':\n                str += this.visitbinaryexpression(node)\n                break;\n            case 'functiondeclaration':\n                str += this.visitfunctiondeclaration(node)\n                break;\n            case 'blockstatement':\n                str += this.visitblockstatement(node)\n                break;\n            case \"callexpression\":\n                str += this.visitcallexpression(node)\n                break;\n            case \"returnstatement\":\n                str += this.visitreturnstatement(node)\n                break;\n            case \"expressionstatement\":\n                str += this.visitexpressionstatement(node)\n                break;\n        }\n        return str\n    }\n    // 入口\n    run(body) {\n        let str = ''\n        str += this.visitnodes(body)\n        return str\n    }\n}\nmodule.exports = jsemitter\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n\n\n来具体分析一下，jsemitter 类中创建了很多 visitxxx 方法，他们最终都会产出 javascript 代码。继续结合treeshaking.js的实现来理解：\n\nconst acorn = require(\"acorn\")\nconst l = console.log\nconst jsemitter = require('./js-emitter')\nconst fs = require('fs')\n// 获取命令行参数\nconst args = process.argv[2]\nconst buffer = fs.readfilesync(args).tostring()\nconst body = acorn.parse(buffer).body\nconst jsemitter = new jsemitter()\nlet decls = new map()\nlet calleddecls = []\nlet code = []\n// 遍历处理\nbody.foreach(function(node) {\n    if (node.type == \"functiondeclaration\") {\n        const code = jsemitter.run([node])\n        decls.set(jsemitter.visitnode(node.id), code)\n        return;\n    }\n    if (node.type == \"expressionstatement\") {\n        if (node.expression.type == \"callexpression\") {\n            const callnode = node.expression\n            calleddecls.push(jsemitter.visitidentifier(callnode.callee))\n            const args = callnode.arguments\n            for (const arg of args) {\n                if (arg.type == \"identifier\") {\n                    calleddecls.push(jsemitter.visitnode(arg))\n                }\n            }\n        }\n    }\n    if (node.type == \"variabledeclaration\") {\n        const kind = node.kind\n        for (const decl of node.declarations) {\n            decls.set(jsemitter.visitnode(decl.id), jsemitter.visitvariabledeclarator(decl, kind))\n        }\n        return\n    }\n    if (node.type == \"identifier\") {\n        calleddecls.push(node.name)\n    }\n    code.push(jsemitter.run([node]))\n});\n// 生成 code\ncode = calleddecls.map(c => {\n    return decls.get(c)\n}).concat([code]).join('')\nfs.writefilesync('test.shaked.js', code)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n对于上面代码分析，首先通过process.argv获取到目标文件，对于目标文件通过fs.readfilesync()方法读出字符串形式的内容buffer，对于这个buffer变量，使用acorn.parse进行解析，并对产出内容进行遍历。\n\n在遍历过程中，对于不同的节点类型，调用 js emitter 实例不同的处理方法。在整个过程中，维护了：\n\n * decls——map 类型\n * calleddecls——数组类型\n * code——数组类型\n\n三个关键变量。decls存储所有的函数或变量声明类型节点，calleddecls则存储了代码中真正使用到的数或变量声明，code存储了其他所有没有被节点类型匹配的 ast 部分。\n\n下面来分析具体的遍历过程。\n\n * 在遍历过程中，对所有函数和变量的声明，都维护到decls中。\n * 接着，对所有的 callexpression 和 identifier 进行检测。因为 callexpression 代表了一次函数调用，因此在该 if 条件分支内，将相关函数节点调用情况推入到calleddecls数组中，同时对于该函数的参数变量也推入到calleddecls数组。因为 identifier 代表了一个变量的取值，也推入到calleddecls数组。\n\n经过整个 ast 遍历，就可以只遍历calleddecls数组，并从decls变量中获取使用到的变量和函数声明，最终使用concat方法合并带入code变量中，使用join方法转化为字符串类型。",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"常用正则",frontmatter:{title:"常用正则",date:"2022-05-06T23:48:17.000Z",permalink:"/pages/8a752b/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020400.%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020400.常用正则.md",key:"v-0bc9b511",path:"/pages/8a752b/",headersStr:null,content:' * 手机中间****代替：17628388888.replace(/(\\d{3})(\\d{4})(\\d{4})/, "$1****$3")',normalizedContent:' * 手机中间****代替：17628388888.replace(/(\\d{3})(\\d{4})(\\d{4})/, "$1****$3")',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"typescript 类型库",frontmatter:{title:"typescript 类型库",date:"2022-01-08T16:50:36.000Z",permalink:"/pages/447c40/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102050.typescript%20%E7%B1%BB%E5%9E%8B%E5%BA%93.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102050.typescript 类型库.md",key:"v-02700e14",path:"/pages/447c40/",headers:[{level:2,title:"css",slug:"css",normalizedTitle:"css",charIndex:2},{level:3,title:"样式类型定义",slug:"样式类型定义",normalizedTitle:"样式类型定义",charIndex:10}],headersStr:"css 样式类型定义",content:"# css\n\n\n# 样式类型定义\n\n * CSSType\n\nCSS 的 TypeScript 和 Flow 定义，由 MDN 的数据生成。它为 CSS 属性和值提供自动完成和类型检查",normalizedContent:"# css\n\n\n# 样式类型定义\n\n * csstype\n\ncss 的 typescript 和 flow 定义，由 mdn 的数据生成。它为 css 属性和值提供自动完成和类型检查",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"type",frontmatter:{title:"type",date:"2022-01-24T11:34:04.000Z",permalink:"/pages/963e31/",categories:["大前端","JavaScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/102051.type.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/102051.type.md",key:"v-74fc53b5",path:"/pages/963e31/",headers:[{level:2,title:"类型定义",slug:"类型定义",normalizedTitle:"类型定义",charIndex:2}],headersStr:"类型定义",content:"# 类型定义\n\n * 使用 type。\n * 使用 interface。\n * 使用 class、enum 等等，其中 class、enum 可以既为值，又为类型。",normalizedContent:"# 类型定义\n\n * 使用 type。\n * 使用 interface。\n * 使用 class、enum 等等，其中 class、enum 可以既为值，又为类型。",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"js面试技能拼图 this",frontmatter:{title:"js面试技能拼图 this",date:"2022-06-21T15:22:25.000Z",permalink:"/pages/0bc29e/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020600.js%E9%9D%A2%E8%AF%95%E6%8A%80%E8%83%BD%E6%8B%BC%E5%9B%BE%20this.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020600.js面试技能拼图 this.md",key:"v-616e898c",path:"/pages/0bc29e/",headers:[{level:3,title:"this",slug:"this",normalizedTitle:"this",charIndex:2}],headersStr:"this",content:"# this\n\n箭头函数与普通函数的区别\n\n * 箭头函数没有argumens\n * 箭头函数的this指向的是父级作用域\n * 箭头函数不能被 call bind apply 修改this指向\n * 某些箭头函数是难以阅读的，比如函数嵌套函数\n\n不适用的情况\n\n * 对象方法\n   \n   const obj = {\n     name: 'test',\n     getName: () => {\n       return this.name // 空的\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 原型方法\n   \n   const obj = {\n     name: 'test'\n   }\n   \n   obj.__proto__.getName = () => {\n     return this.name // empty\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 构造函数\n   \n   const Foo = (name, age) => {\n     this.name = name\n     this.age = age\n   }\n   const f = new Foo('zhangsan', 20) // VM133:5 Uncaught TypeError: Foo is not a constructor\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 动态上下文中的回调函数\n   \n   const btn1 = document.getElementById('btn1')\n   btn1.addEventListener('click', () => {\n     this.innerHTML = 'clicked' // this = window\n   })\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * Vue 生命周期和 method\n   \n   * vue 组件本质上就是一个 js 对象\n   * react 是可以的， react 组件是一个Class 类",normalizedContent:"# this\n\n箭头函数与普通函数的区别\n\n * 箭头函数没有argumens\n * 箭头函数的this指向的是父级作用域\n * 箭头函数不能被 call bind apply 修改this指向\n * 某些箭头函数是难以阅读的，比如函数嵌套函数\n\n不适用的情况\n\n * 对象方法\n   \n   const obj = {\n     name: 'test',\n     getname: () => {\n       return this.name // 空的\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 原型方法\n   \n   const obj = {\n     name: 'test'\n   }\n   \n   obj.__proto__.getname = () => {\n     return this.name // empty\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 构造函数\n   \n   const foo = (name, age) => {\n     this.name = name\n     this.age = age\n   }\n   const f = new foo('zhangsan', 20) // vm133:5 uncaught typeerror: foo is not a constructor\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 动态上下文中的回调函数\n   \n   const btn1 = document.getelementbyid('btn1')\n   btn1.addeventlistener('click', () => {\n     this.innerhtml = 'clicked' // this = window\n   })\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * vue 生命周期和 method\n   \n   * vue 组件本质上就是一个 js 对象\n   * react 是可以的， react 组件是一个class 类",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"for...in for...of 区别",frontmatter:{title:"for...in for...of 区别",date:"2022-06-21T16:14:34.000Z",permalink:"/pages/dd5f5e/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020605.for...in%20for...of%20%E5%8C%BA%E5%88%AB.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020605.for...in for...of 区别.md",key:"v-015fc979",path:"/pages/dd5f5e/",headers:[{level:2,title:"for...in for...of 区别",slug:"for-in-for-of-区别",normalizedTitle:"for...in for...of 区别",charIndex:2},{level:3,title:"适用于不同的数据类型",slug:"适用于不同的数据类型",normalizedTitle:"适用于不同的数据类型",charIndex:27},{level:3,title:"可枚举 vS 可迭代",slug:"可枚举-vs-可迭代",normalizedTitle:"可枚举 vs 可迭代",charIndex:152},{level:3,title:"答案",slug:"答案",normalizedTitle:"答案",charIndex:717},{level:2,title:"连环问：for await...of 有什么作用？",slug:"连环问-for-await-of-有什么作用",normalizedTitle:"连环问：for await...of 有什么作用？",charIndex:801}],headersStr:"for...in for...of 区别 适用于不同的数据类型 可枚举 vS 可迭代 答案 连环问：for await...of 有什么作用？",content:'# for...in for...of 区别\n\n\n# 适用于不同的数据类型\n\n * 遍历对象：for..in 可以，for..of 不可以\n * 遍历 Map Set:for...of 可以，for.in 不可以\n * 遍历 generator : for...of 可以，for.in 不可以\n\n\n# 可枚举 vS 可迭代\n\n * for...in 用于可枚举数据，如对象、数组、字符串\n * for...of 用于可迭代数据、如数组、字符串、Map、 Set\n\n可枚举\n\nconst obj1 = { foo: \'bar\' }\nObject.getOwnPropertyDescriptors(obj1)\n\n{foo: {…}}foo: \n\tconfigurable: true\n\tenumerable: true\n\tvalue: "bar"\n\twritable: true\n  [[Prototype]]: Object\n [[Prototype]]: Object\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nenumerable 为 true 基本就是可枚举的数据\n\n可迭代\n\nconst arr1 = [1, 2, 3]\n\narr1[Symbol.iterator]()\nArray Iterator {}\n[[Prototype]]: Array Iterator\n  next: ƒ next()\n  Symbol(Symbol.toStringTag): "Array Iterator"\n  [[Prototype]]: Object\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n看看是否有next对象\n\n\n# 答案\n\nfor.in 用于可枚举数据，如对象、数组、字符传，得到 key for...of 用于可迭代数据、如数组、字符传、Map、 Set，得到 value\n\n\n# 连环问：for await...of 有什么作用？\n\nfor await...of 用于遍历多个 Promise',normalizedContent:'# for...in for...of 区别\n\n\n# 适用于不同的数据类型\n\n * 遍历对象：for..in 可以，for..of 不可以\n * 遍历 map set:for...of 可以，for.in 不可以\n * 遍历 generator : for...of 可以，for.in 不可以\n\n\n# 可枚举 vs 可迭代\n\n * for...in 用于可枚举数据，如对象、数组、字符串\n * for...of 用于可迭代数据、如数组、字符串、map、 set\n\n可枚举\n\nconst obj1 = { foo: \'bar\' }\nobject.getownpropertydescriptors(obj1)\n\n{foo: {…}}foo: \n\tconfigurable: true\n\tenumerable: true\n\tvalue: "bar"\n\twritable: true\n  [[prototype]]: object\n [[prototype]]: object\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nenumerable 为 true 基本就是可枚举的数据\n\n可迭代\n\nconst arr1 = [1, 2, 3]\n\narr1[symbol.iterator]()\narray iterator {}\n[[prototype]]: array iterator\n  next: ƒ next()\n  symbol(symbol.tostringtag): "array iterator"\n  [[prototype]]: object\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n看看是否有next对象\n\n\n# 答案\n\nfor.in 用于可枚举数据，如对象、数组、字符传，得到 key for...of 用于可迭代数据、如数组、字符传、map、 set，得到 value\n\n\n# 连环问：for await...of 有什么作用？\n\nfor await...of 用于遍历多个 promise',charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"js 获取元素大小",frontmatter:{title:"js 获取元素大小",date:"2022-06-21T16:56:49.000Z",permalink:"/pages/8167f9/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/1020606.js%20%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8F.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/1020606.js 获取元素大小.md",key:"v-a3882fd8",path:"/pages/8167f9/",headers:[{level:3,title:"计算规则",slug:"计算规则",normalizedTitle:"计算规则",charIndex:2},{level:3,title:"HTMLCollection 和 NodeList 区别",slug:"htmlcollection-和-nodelist-区别",normalizedTitle:"htmlcollection 和 nodelist 区别",charIndex:156},{level:4,title:"Node 和 Element",slug:"node-和-element",normalizedTitle:"node 和 element",charIndex:188}],headersStr:"计算规则 HTMLCollection 和 NodeList 区别 Node 和 Element",content:"# 计算规则\n\noffsetHeight offsetWidth : border + padding + content\n\nclientHeight clientWidth : padding + content\n\nscrollHeight scrollWidth : padding +实际内容尺寸\n\n\n# HTMLCollection 和 NodeList 区别\n\n# Node 和 Element\n\n * DOM 是一棵树，所有节点都是 Node\n * Node 是 Element 的基类\n * Element 是其他 HTML 元素的基类，如 HTMLDivElement\n\n\n\n * HTMLCollection 是 Element 的集合\n * NodeList 是 Node 集合\n\n划重点\n\n * 获取 Node 和 Element 的返回结果可能不一样\n * 如 elem.childNodes 和 elem.children 不一样\n * 前者会包含 Text 和 Comment 节点，后者不会",normalizedContent:"# 计算规则\n\noffsetheight offsetwidth : border + padding + content\n\nclientheight clientwidth : padding + content\n\nscrollheight scrollwidth : padding +实际内容尺寸\n\n\n# htmlcollection 和 nodelist 区别\n\n# node 和 element\n\n * dom 是一棵树，所有节点都是 node\n * node 是 element 的基类\n * element 是其他 html 元素的基类，如 htmldivelement\n\n\n\n * htmlcollection 是 element 的集合\n * nodelist 是 node 集合\n\n划重点\n\n * 获取 node 和 element 的返回结果可能不一样\n * 如 elem.childnodes 和 elem.children 不一样\n * 前者会包含 text 和 comment 节点，后者不会",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"typescript 万金油",frontmatter:{title:"typescript 万金油",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/6effaf/",categories:["大前端","JavaScript&TypeScript"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1020.JavaScript&TypeScript/10252.typescript%20%E4%B8%87%E9%87%91%E6%B2%B9.html",relativePath:"10.大前端/1020.JavaScript&TypeScript/10252.typescript 万金油.md",key:"v-5c20f059",path:"/pages/6effaf/",headers:[{level:2,title:"单行忽略",slug:"单行忽略",normalizedTitle:"单行忽略",charIndex:2}],headersStr:"单行忽略",content:'# 单行忽略\n\n// @ts-ignore 在错误行的上面添加即可\n\n如果你使用了eslint 校验，那么可能需要关掉 停用ts注释功能ban-ts-comment 或者再加上// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\n.eslintrc.cjs\n\nmodule.exports = {\n  "rules": {\n    "@typescript-eslint/ban-ts-comment": "off"\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n其他的注视指令有：\n\n// @ts-expect-error\n// @ts-ignore\n// @ts-nocheck\n// @ts-check\n\n\n1\n2\n3\n4\n',normalizedContent:'# 单行忽略\n\n// @ts-ignore 在错误行的上面添加即可\n\n如果你使用了eslint 校验，那么可能需要关掉 停用ts注释功能ban-ts-comment 或者再加上// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\n.eslintrc.cjs\n\nmodule.exports = {\n  "rules": {\n    "@typescript-eslint/ban-ts-comment": "off"\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n其他的注视指令有：\n\n// @ts-expect-error\n// @ts-ignore\n// @ts-nocheck\n// @ts-check\n\n\n1\n2\n3\n4\n',charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"nvm 使用",frontmatter:{title:"nvm 使用",date:"2021-12-31T11:25:04.000Z",permalink:"/pages/febcd5/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103001.nvm%20%E4%BD%BF%E7%94%A8.html",relativePath:"10.大前端/1030.Node/103001.nvm 使用.md",key:"v-0db1ba4c",path:"/pages/febcd5/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:38},{level:3,title:"下载",slug:"下载",normalizedTitle:"下载",charIndex:45},{level:3,title:"配置环境变量",slug:"配置环境变量",normalizedTitle:"配置环境变量",charIndex:376},{level:3,title:"验证",slug:"验证",normalizedTitle:"验证",charIndex:701},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:390},{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:971}],headersStr:"安装 下载 配置环境变量 验证 使用 常用命令",content:'这里以 mac 为例，linux 系统大差不差，window 同理\n\n\n# 安装\n\n\n# 下载\n\n * curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash 或者\n * wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n\n如果下载慢或者超时不成功之类的，就需要**上网，代理一下了 我用的 clash 复制命令export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n\n\n# 配置环境变量\n\n这个取决于你使用的终端\n\n在这个文件夹下配置 (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)\n\nexport NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh" # This loads nvm\n\n\n1\n2\n\n\n以我的 oh-my-zsh 为例,\n\n步骤：cd ~ ll -a vim .zshrc\n\n\n\n\n# 验证\n\nnvm -v\n\n\n\n\n# 使用\n\n$ nvm use 16\nNow using node v16.9.1 (npm v7.21.1)\n$ node -v\nv16.9.1\n$ nvm use 14\nNow using node v14.18.0 (npm v6.14.15)\n$ node -v\nv14.18.0\n$ nvm install 12\nNow using node v12.22.6 (npm v6.14.5)\n$ node -v\nv12.22.6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n\n# 常用命令\n\n\tnvm install [<version>]                     下载并安装 <版本>。用途。nvmrc (如果可用) 和版本省略。\n   \t以下可选参数 (如果提供) 必须直接出现在 “nvm安装” 之后:\n    -s                                       跳过二进制下载，仅从源代码安装。\n    -b                                       跳过源下载，仅从二进制安装。\n    --reinstall-packages-from=<version>       安装时，重新安装 <node | iojs | node版本号> 中安装的包\n    --lts                                     安装时，仅从LTS (长期支持) 版本中选择\n    --lts=<LTS name>                          安装时，仅从特定LTS行的版本中进行选择\n    --skip-default-packages                   安装时，跳过默认包文件 (如果存在)\n    --latest-npm                              安装后，尝试升级到给定节点版本上的最新工作npm\n    --no-progress                             禁用任何下载的进度条\n    --alias=<name>                            安装后，将指定的别名设置为指定的版本。(与nvm别名 <名称> <版本> 相同)\n    --default                                 安装后，将default alias设置为指定的版本。(与nvm alias default <version> 相同)\n  nvm uninstall <version>                     卸载版本\n  nvm uninstall --lts                         使用自动LTS (长期支持) 别名 \'lts/* \'卸载 (如果可用)。\n  nvm uninstall --lts=<LTS name>              使用提供的LTS行的自动别名卸载 (如果可用)。\n  nvm use [<version>]                        修改路径以使用 <版本>。用途。nvmrc (如果可用) 和版本省略。\n  nvm current                                 显示节点的当前激活版本\n  nvm ls [<version>]                          列出已安装的版本，匹配给定的 <版本> (如果提供)\n\n  nvm ls-remote [<version>]                   列出可安装的远程版本，匹配给定的 <版本>\n  nvm version <version>                       将给定描述解析为单个本地版本\n  nvm version-remote <version>                将给定描述解析为单个远程版本\n    --lts                                     上市时，仅从LTS (长期支持) 版本中选择\n    --lts=<LTS name>                          列出时，仅从特定LTS行的版本中进行选择\n\n  nvm alias <name> <version>                  设置名为 <name> 指向 <version> 的别名\n  nvm unalias <name>                          删除名为 <name> 的别名\n  nvm install-latest-npm                      尝试升级到当前节点版本上的最新工作 “npm”\n  nvm reinstall-packages <version>            将 <版本> 中包含的全局 \'npm\' 包重新安装到当前版本\n  nvm unload                                  从shell卸载 \'nvm\'\n\n  nvm which [current | <version>]             显示已安装节点版本的路径。用途。nvmrc (如果可用) 和版本省略。\n    --silent                                  省略版本时静音stdout/stderr输出\n\n  nvm cache dir                               显示nvm的缓存目录的路径\n  nvm cache clear                             nvm的空缓存目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n',normalizedContent:'这里以 mac 为例，linux 系统大差不差，window 同理\n\n\n# 安装\n\n\n# 下载\n\n * curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash 或者\n * wget -qo- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n\n如果下载慢或者超时不成功之类的，就需要**上网，代理一下了 我用的 clash 复制命令export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890\n\n\n# 配置环境变量\n\n这个取决于你使用的终端\n\n在这个文件夹下配置 (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)\n\nexport nvm_dir="$([ -z "${xdg_config_home-}" ] && printf %s "${home}/.nvm" || printf %s "${xdg_config_home}/nvm")"\n[ -s "$nvm_dir/nvm.sh" ] && \\. "$nvm_dir/nvm.sh" # this loads nvm\n\n\n1\n2\n\n\n以我的 oh-my-zsh 为例,\n\n步骤：cd ~ ll -a vim .zshrc\n\n\n\n\n# 验证\n\nnvm -v\n\n\n\n\n# 使用\n\n$ nvm use 16\nnow using node v16.9.1 (npm v7.21.1)\n$ node -v\nv16.9.1\n$ nvm use 14\nnow using node v14.18.0 (npm v6.14.15)\n$ node -v\nv14.18.0\n$ nvm install 12\nnow using node v12.22.6 (npm v6.14.5)\n$ node -v\nv12.22.6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n\n# 常用命令\n\n\tnvm install [<version>]                     下载并安装 <版本>。用途。nvmrc (如果可用) 和版本省略。\n   \t以下可选参数 (如果提供) 必须直接出现在 “nvm安装” 之后:\n    -s                                       跳过二进制下载，仅从源代码安装。\n    -b                                       跳过源下载，仅从二进制安装。\n    --reinstall-packages-from=<version>       安装时，重新安装 <node | iojs | node版本号> 中安装的包\n    --lts                                     安装时，仅从lts (长期支持) 版本中选择\n    --lts=<lts name>                          安装时，仅从特定lts行的版本中进行选择\n    --skip-default-packages                   安装时，跳过默认包文件 (如果存在)\n    --latest-npm                              安装后，尝试升级到给定节点版本上的最新工作npm\n    --no-progress                             禁用任何下载的进度条\n    --alias=<name>                            安装后，将指定的别名设置为指定的版本。(与nvm别名 <名称> <版本> 相同)\n    --default                                 安装后，将default alias设置为指定的版本。(与nvm alias default <version> 相同)\n  nvm uninstall <version>                     卸载版本\n  nvm uninstall --lts                         使用自动lts (长期支持) 别名 \'lts/* \'卸载 (如果可用)。\n  nvm uninstall --lts=<lts name>              使用提供的lts行的自动别名卸载 (如果可用)。\n  nvm use [<version>]                        修改路径以使用 <版本>。用途。nvmrc (如果可用) 和版本省略。\n  nvm current                                 显示节点的当前激活版本\n  nvm ls [<version>]                          列出已安装的版本，匹配给定的 <版本> (如果提供)\n\n  nvm ls-remote [<version>]                   列出可安装的远程版本，匹配给定的 <版本>\n  nvm version <version>                       将给定描述解析为单个本地版本\n  nvm version-remote <version>                将给定描述解析为单个远程版本\n    --lts                                     上市时，仅从lts (长期支持) 版本中选择\n    --lts=<lts name>                          列出时，仅从特定lts行的版本中进行选择\n\n  nvm alias <name> <version>                  设置名为 <name> 指向 <version> 的别名\n  nvm unalias <name>                          删除名为 <name> 的别名\n  nvm install-latest-npm                      尝试升级到当前节点版本上的最新工作 “npm”\n  nvm reinstall-packages <version>            将 <版本> 中包含的全局 \'npm\' 包重新安装到当前版本\n  nvm unload                                  从shell卸载 \'nvm\'\n\n  nvm which [current | <version>]             显示已安装节点版本的路径。用途。nvmrc (如果可用) 和版本省略。\n    --silent                                  省略版本时静音stdout/stderr输出\n\n  nvm cache dir                               显示nvm的缓存目录的路径\n  nvm cache clear                             nvm的空缓存目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"nvm 深度使用解析",frontmatter:{title:"nvm 深度使用解析",date:"2022-01-04T11:40:53.000Z",permalink:"/pages/b378af/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103002.nvm%20%E6%B7%B1%E5%BA%A6%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90.html",relativePath:"10.大前端/1030.Node/103002.nvm 深度使用解析.md",key:"v-e11d5338",path:"/pages/b378af/",headers:[{level:2,title:"安装目录解析",slug:"安装目录解析",normalizedTitle:"安装目录解析",charIndex:2}],headersStr:"安装目录解析",content:"# 安装目录解析\n\n可以看到在安装之后，安装目录中的 node 下载位置，及 node 里面的全局安装的 package\n\n\n\n那么我门就能手动的去上传调整 node 和 npm 了\n\n> 在官网去下载你想要的版本 https://nodejs.org/dist/\n\n比如我现在想要下载最新的稳定版本\n\n\n\n那我就去 16 里面去找， mac inter 平台就需要下载 darwin-x64 的压缩包了\n\n",normalizedContent:"# 安装目录解析\n\n可以看到在安装之后，安装目录中的 node 下载位置，及 node 里面的全局安装的 package\n\n\n\n那么我门就能手动的去上传调整 node 和 npm 了\n\n> 在官网去下载你想要的版本 https://nodejs.org/dist/\n\n比如我现在想要下载最新的稳定版本\n\n\n\n那我就去 16 里面去找， mac inter 平台就需要下载 darwin-x64 的压缩包了\n\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"安装npm的过程中发生了什么",frontmatter:{title:"安装npm的过程中发生了什么",date:"2023-01-10T13:14:42.000Z",permalink:"/pages/30de9a/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030071.%E5%AE%89%E8%A3%85npm%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html",relativePath:"10.大前端/1030.Node/1030071.安装npm的过程中发生了什么.md",key:"v-756e0e40",path:"/pages/30de9a/",headersStr:null,content:"最近逛社区, 发现有些火热的铁子, 其中就有一个这个问题\n\n浅谈一下我的理解, 项目中安装原理更为简单\n\n当你全局安装npm报的时候,如 npm i @vue/cli -g\n\n 1. 会把npm包下载下来,放到 usr/node...../node_modules下面\n 2. 解析 npm 包中的 package.json 中的 bin 字段, 如果有字段属性, 就在 node/bin 下面创建一个同样名称的软连接, 软连接指向的就是npm包的bin指向的执行文件\n\n操作系统问什么能直接识别全局包的命令, 如上🌰: vue create ....啥的, 为什么能直接执行vue 这命令\n\n答案: 执行 vue 等同于 执行 which vue 在环境变量中去找, 如图: (我这里用了nvm, 所以路径是跟普通安装方法是不一样的, 不影响)\n\n",normalizedContent:"最近逛社区, 发现有些火热的铁子, 其中就有一个这个问题\n\n浅谈一下我的理解, 项目中安装原理更为简单\n\n当你全局安装npm报的时候,如 npm i @vue/cli -g\n\n 1. 会把npm包下载下来,放到 usr/node...../node_modules下面\n 2. 解析 npm 包中的 package.json 中的 bin 字段, 如果有字段属性, 就在 node/bin 下面创建一个同样名称的软连接, 软连接指向的就是npm包的bin指向的执行文件\n\n操作系统问什么能直接识别全局包的命令, 如上🌰: vue create ....啥的, 为什么能直接执行vue 这命令\n\n答案: 执行 vue 等同于 执行 which vue 在环境变量中去找, 如图: (我这里用了nvm, 所以路径是跟普通安装方法是不一样的, 不影响)\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"想用而找不到的 npm 插件",frontmatter:{title:"想用而找不到的 npm 插件",date:"2023-09-17T19:54:46.000Z",permalink:"/pages/5565db/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030100.%E6%83%B3%E7%94%A8%E8%80%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%20npm%20%E6%8F%92%E4%BB%B6.html",relativePath:"10.大前端/1030.Node/1030100.想用而找不到的 npm 插件.md",key:"v-c9c3d120",path:"/pages/5565db/",headers:[{level:2,title:"cross-env",slug:"cross-env",normalizedTitle:"cross-env",charIndex:2},{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:16},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:140},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:34},{level:2,title:"concurrently",slug:"concurrently",normalizedTitle:"concurrently",charIndex:316},{level:3,title:"介绍",slug:"介绍-2",normalizedTitle:"介绍",charIndex:16},{level:3,title:"安装",slug:"安装-2",normalizedTitle:"安装",charIndex:140},{level:3,title:"使用",slug:"使用-2",normalizedTitle:"使用",charIndex:34},{level:2,title:"wait-on",slug:"wait-on",normalizedTitle:"wait-on",charIndex:592},{level:3,title:"介绍",slug:"介绍-3",normalizedTitle:"介绍",charIndex:16},{level:3,title:"安装",slug:"安装-3",normalizedTitle:"安装",charIndex:140},{level:3,title:"使用",slug:"使用-3",normalizedTitle:"使用",charIndex:34}],headersStr:"cross-env 介绍 安装 使用 concurrently 介绍 安装 使用 wait-on 介绍 安装 使用",content:'# cross-env\n\n\n# 介绍\n\nCross-env使得您可以使用单个命令，而不必担心为平台正确设置或使用环境变量。只要像在POSIX系统上运行时那样设置它，跨环境将负责正确设置它。\n\nhttps://www.npmjs.com/package/cross-env\n\n\n# 安装\n\nnpm install --save-dev cross-env\n\n\n1\n\n\n\n# 使用\n\n{\n  "scripts": {\n    "build": "cross-env NODE_ENV=production webpack --config build/webpack.config.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# concurrently\n\n\n# 介绍\n\n同时运行多个命令。\n\nhttps://www.npmjs.com/package/concurrently\n\n\n# 安装\n\nnpm install concurrently --save\n\n\n1\n\n\n\n# 使用\n\nconcurrently "command1 arg" "command2 arg"\n\n\n1\n\n\nIn package.json, escape quotes:"start"``: ``"concurrently \\"command1 arg\\" \\"command2 arg\\""\n\n\n\n\n# wait-on\n\n\n# 介绍\n\nhttps://www.npmjs.com/package/wait-on\n\nwait-on是一个跨平台的命令行实用程序，它将等待文件、端口、套接字和http资源变得可用(或使用反向模式不可用)。功能也可以通过Node.js API获得。跨平台-运行Node.js运行的所有地方(linux, unix, mac OS X, windows)\n\n\n# 安装\n\nnpm install wait-on ``# local version\n\n\n1\n\n\n\n# 使用\n\nwait-on file1 && NEXT_CMD # wait for file1, then exec NEXT_CMD wait-on f1 f2 && NEXT_CMD # wait for both f1 and f2, the exec NEXT_CMD wait-on http://localhost:8000/foo && NEXT_CMD # wait for http 2XX HEAD wait-on https://myserver/foo && NEXT_CMD # wait for https 2XX HEAD wait-on http-get://localhost:8000/foo && NEXT_CMD # wait for http 2XX GET wait-on https-get://myserver/foo && NEXT_CMD # wait for https 2XX GET wait-on tcp:4000 && NEXT_CMD # wait for service to listen on a TCP port wait-on socket:/path/mysock # wait for service to listen on domain socket wait-on http://unix:/var/SOCKPATH:/a/foo # wait for http HEAD on domain socket wait-on http-get://unix:/var/SOCKPATH:/a/foo # wait for http GET on domain socket\n\n\n1\n',normalizedContent:'# cross-env\n\n\n# 介绍\n\ncross-env使得您可以使用单个命令，而不必担心为平台正确设置或使用环境变量。只要像在posix系统上运行时那样设置它，跨环境将负责正确设置它。\n\nhttps://www.npmjs.com/package/cross-env\n\n\n# 安装\n\nnpm install --save-dev cross-env\n\n\n1\n\n\n\n# 使用\n\n{\n  "scripts": {\n    "build": "cross-env node_env=production webpack --config build/webpack.config.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# concurrently\n\n\n# 介绍\n\n同时运行多个命令。\n\nhttps://www.npmjs.com/package/concurrently\n\n\n# 安装\n\nnpm install concurrently --save\n\n\n1\n\n\n\n# 使用\n\nconcurrently "command1 arg" "command2 arg"\n\n\n1\n\n\nin package.json, escape quotes:"start"``: ``"concurrently \\"command1 arg\\" \\"command2 arg\\""\n\n\n\n\n# wait-on\n\n\n# 介绍\n\nhttps://www.npmjs.com/package/wait-on\n\nwait-on是一个跨平台的命令行实用程序，它将等待文件、端口、套接字和http资源变得可用(或使用反向模式不可用)。功能也可以通过node.js api获得。跨平台-运行node.js运行的所有地方(linux, unix, mac os x, windows)\n\n\n# 安装\n\nnpm install wait-on ``# local version\n\n\n1\n\n\n\n# 使用\n\nwait-on file1 && next_cmd # wait for file1, then exec next_cmd wait-on f1 f2 && next_cmd # wait for both f1 and f2, the exec next_cmd wait-on http://localhost:8000/foo && next_cmd # wait for http 2xx head wait-on https://myserver/foo && next_cmd # wait for https 2xx head wait-on http-get://localhost:8000/foo && next_cmd # wait for http 2xx get wait-on https-get://myserver/foo && next_cmd # wait for https 2xx get wait-on tcp:4000 && next_cmd # wait for service to listen on a tcp port wait-on socket:/path/mysock # wait for service to listen on domain socket wait-on http://unix:/var/sockpath:/a/foo # wait for http head on domain socket wait-on http-get://unix:/var/sockpath:/a/foo # wait for http get on domain socket\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"node全局脚本原理解析",frontmatter:{title:"node全局脚本原理解析",date:"2022-08-28T22:14:49.000Z",permalink:"/pages/f3d9dd/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030101.node%E5%85%A8%E5%B1%80%E8%84%9A%E6%9C%AC%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html",relativePath:"10.大前端/1030.Node/1030101.node全局脚本原理解析.md",key:"v-59bbb9a4",path:"/pages/f3d9dd/",headers:[{level:5,title:"为什么全局安装@vue/cli后会添加vue的命令？",slug:"为什么全局安装-vue-cli后会添加vue的命令",normalizedTitle:"为什么全局安装@vue/cli后会添加vue的命令？",charIndex:13},{level:5,title:"绑定管理在哪里指定的呢？",slug:"绑定管理在哪里指定的呢",normalizedTitle:"绑定管理在哪里指定的呢？",charIndex:329},{level:5,title:"全局安装@vue/cli时发生了什么？",slug:"全局安装-vue-cli时发生了什么",normalizedTitle:"全局安装@vue/cli时发生了什么？",charIndex:581},{level:5,title:"vue执行一个js文件，为什么可以执行它？",slug:"vue执行一个js文件-为什么可以执行它",normalizedTitle:"vue执行一个js文件，为什么可以执行它？",charIndex:722},{level:5,title:"自定义一条命令",slug:"自定义一条命令",normalizedTitle:"自定义一条命令",charIndex:1352},{level:3,title:"脚手架开发难点",slug:"脚手架开发难点",normalizedTitle:"脚手架开发难点",charIndex:1651},{level:3,title:"创建一个脚手架",slug:"创建一个脚手架",normalizedTitle:"创建一个脚手架",charIndex:2206},{level:3,title:"通过yargs创建一个最简单的脚手架工具",slug:"通过yargs创建一个最简单的脚手架工具",normalizedTitle:"通过yargs创建一个最简单的脚手架工具",charIndex:2690},{level:3,title:"严格模式: strict",slug:"严格模式-strict",normalizedTitle:"严格模式: strict",charIndex:3096},{level:3,title:"用法提示: usage",slug:"用法提示-usage",normalizedTitle:"用法提示: usage",charIndex:3186},{level:3,title:"最少输入的command个数: demandCommand",slug:"最少输入的command个数-demandcommand",normalizedTitle:"最少输入的command个数: demandcommand",charIndex:3472},{level:3,title:"设置command别名: alias",slug:"设置command别名-alias",normalizedTitle:"设置command别名: alias",charIndex:3635},{level:3,title:"设置输出内容的宽度: wrap",slug:"设置输出内容的宽度-wrap",normalizedTitle:"设置输出内容的宽度: wrap",charIndex:3833},{level:3,title:"设置结尾显示的内容: epilogue",slug:"设置结尾显示的内容-epilogue",normalizedTitle:"设置结尾显示的内容: epilogue",charIndex:4078},{level:3,title:"为全局command添加选项: options",slug:"为全局command添加选项-options",normalizedTitle:"为全局command添加选项: options",charIndex:4302},{level:3,title:"将选项分组: group",slug:"将选项分组-group",normalizedTitle:"将选项分组: group",charIndex:4926},{level:3,title:"命令纠错提示：recommendCommands()",slug:"命令纠错提示-recommendcommands",normalizedTitle:"命令纠错提示：recommendcommands()",charIndex:5545},{level:3,title:"自定义错误信息: fail((err,msg) => {...})",slug:"自定义错误信息-fail-err-msg",normalizedTitle:"自定义错误信息: fail((err,msg) =&gt; {...})",charIndex:null},{level:2,title:"dedent库",slug:"dedent库",normalizedTitle:"dedent库",charIndex:5641},{level:5,title:"parse",slug:"parse",normalizedTitle:"parse",charIndex:7956},{level:6,title:"npm本地包引用方法",slug:"npm本地包引用方法",normalizedTitle:"npm本地包引用方法",charIndex:8598},{level:3,title:"项目初始化",slug:"项目初始化",normalizedTitle:"项目初始化",charIndex:8705},{level:3,title:"创建package",slug:"创建package",normalizedTitle:"创建package",charIndex:8829},{level:3,title:"发布前的准备",slug:"发布前的准备",normalizedTitle:"发布前的准备",charIndex:9142},{level:3,title:"发布",slug:"发布",normalizedTitle:"发布",charIndex:1640}],headersStr:"为什么全局安装@vue/cli后会添加vue的命令？ 绑定管理在哪里指定的呢？ 全局安装@vue/cli时发生了什么？ vue执行一个js文件，为什么可以执行它？ 自定义一条命令 脚手架开发难点 创建一个脚手架 通过yargs创建一个最简单的脚手架工具 严格模式: strict 用法提示: usage 最少输入的command个数: demandCommand 设置command别名: alias 设置输出内容的宽度: wrap 设置结尾显示的内容: epilogue 为全局command添加选项: options 将选项分组: group 命令纠错提示：recommendCommands() 自定义错误信息: fail((err,msg) => {...}) dedent库 parse npm本地包引用方法 项目初始化 创建package 发布前的准备 发布",content:"# 脚手架实现原理\n\n# 为什么全局安装@vue/cli后会添加vue的命令？\n\nnpm install -g @vue/cli\n\n\n1\n\n\n查看vue实际文件路径\n\n> which vue\n/usr/local/bin/vue\n\n\n1\n2\n\n\nbin目录下存放的是可执行文件\n\n> cd /usr/local/bin\n> ll\nlrwxr-xr-x  1 song  admin    39B 12 28 21:48 vue -> ../lib/node_modules/@vue/cli/bin/vue.js\n\n\n1\n2\n3\n\n\n可以看到vue实际是一个软链接，指向：../lib/node_modules/@vue/cli/bin/vue.js\n\n# 绑定管理在哪里指定的呢？\n\n进入到@vue/cli安装目录\n\n> cd /usr/local/lib/node_modules/@vue/cli\n> ll\n-rw-r--r--    1 song  admin   2.5K 12 28 21:48 package.json\n\n\n1\n2\n3\n\n\n在package.json中有一个bin的配置\n\n \"bin\": {\n    \"vue\": \"bin/vue.js\"\n  },\n\n\n1\n2\n3\n\n\n这里配置了安装完之后的软链接名称，以及指向的实际文件\n\n# 全局安装@vue/cli时发生了什么？\n\nnpm install -g @vue/cli\n\n * 第一步：会把@vue/cli下载到node node_modules中\n * 第二步：下载成功后会解析package.json 中的 bin 配置，有这个配置就会创建一个软链接\n\n# vue执行一个js文件，为什么可以执行它？\n\n * 执行vue命令时，系统会执行which vue在环境变量中找vue的注册并执行文件\n   \n   # 这两条命令执行是等价的\n   > vue\n   >/usr/local/bin/vue\n   \n   \n   1\n   2\n   3\n   \n\n * 执行的真实文件是vue对应的软链接：../lib/node_modules/@vue/cli/bin/vue.js\n   \n   直接执行一个xx.js执行不了的，vue.js又是怎么执行的呢？\n   \n   js文件需要一个解释器(node)来执行 vue.js源码第一行\n   \n   #!/usr/bin/env node\n   \n   \n   1\n   \n   \n   自己创建一个js文件,test.js中第一行加入此代码，通过 ./test.js也能直接执行。\n   \n   为什么能直接执行？\n   \n   这句话的意思是，告诉系统在环境变量中去找node命令，来执行此文件\n   \n   > /usr/bin/env node # 会将node命令执行起来，与直接执行node是一样的效果\n   \n   \n   1\n   \n   \n   所以./test.js等于 /usr/bin/env node test.js 等于 node test.js\n   \n   chmod 777 test.js 设置文件为可执行文件\n   \n   # 自定义一条命令\n   \n   思路：在环境变量中创建一个软链接，执行 test.js即可 (软链接可以嵌套) 在 /usr/local/bin下执行\n   \n   >  ln -s <路径>/test/index.js <name> #删除软链接 rm <name>\n   \n   \n   1\n   \n\n\n# 脚手架的开发流程\n\n * 创建npm项目\n\n * 创建脚手架入口文件，最上方添加：\n   \n   #!/usr/bin/env node\n   \n   \n   1\n   \n\n * 配置package.json 添加bin属性\n\n * 编写脚手架代码\n\n * 将脚手架发布到npm\n\n\n# 脚手架开发难点\n\n * 分包： 将复杂系统拆分成若干个模块\n\n * 命令注册：\n   \n   vue create\n   vue add \n   vue invoke\n   \n   \n   1\n   2\n   3\n   \n\n * 参数解析\n   \n   vue command [options] <params>\n   \n   \n   1\n   \n   \n   options全称：--version、--help options简写： -V、-h\n\n * 帮助文档\n\n * 命令行交互\n\n * 日志打印\n\n * 命令行文字变色\n\n * 网络通信：HTTP/WebSocket\n\n * 文件处理 ....\n\n理解npm link\n\n * npm link your-lib：将当前项目中 node_modules 下指定的库文件链接到 node全局node_modules下的库文件\n * npm link: 将当前项目链接到node全局node_modules中作为一个库文件，并解析bin配置创建可执行文件\n\n理解npm unlink\n\n * npm unlink：将当前项目从node全局node_modules中移除\n * npm unlink your-li：将当前项目中的库文件依赖移除\n\n\n# 创建一个脚手架\n\n> mkdir cli-test # 创建一个文件夹\n> npm init -y # 初始化\n\n\n1\n2\n\n\ncli-test 目录: -- package.json -- bin\n\n * |-- inde.js\n\nindex.js 文件:\n\n#!/usr/bin/env node\nconsole.log('Hello cli')\n\n\n1\n2\n\n\npackage.json文件：\n\n{\n  ...\n  \"main\": \"index.js\",\n  \"bin\":  {\n        \"cli-test\": \"bin/index.js\"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n将脚手架发布到npm\n\n> npm login # 登录npm\n> npm publish # 发布\n\n\n1\n2\n\n\n在cli-test目录下，进行全局安装 npm install -g cli-test 就会建立一个软链接，方便进行本地调试， 通过npm link 也可。\n\n\n# yargs入门\n\nYargs通过解析参数来帮助您构建脚手架的工具。\n\n\n# 通过yargs创建一个最简单的脚手架工具\n\n定义文件index.js\n\n#!/usr/bin/env node\n\nconst yargs = require('yargs/yargs')\nconst { hideBin } = require('yargs/helpers')\n\nconst arg = hideBin(process.argv)\nyargs(arg)\n     .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n执行\n\n> ./index.js --help\n选项：\n  --help     显示帮助信息                                                 [布尔]\n  --version  显示版本号                                                   [布尔]\n\n\n1\n2\n3\n4\n\n\n\n# 严格模式: strict\n\nyargs(arg)\n    .strict()\n    .argv\n\n\n1\n2\n3\n\n\n加入strict，如果有无法识别的参数，将会给出提示\n\n\n# 用法提示: usage\n\nyargs(arg)\n    .usage('Usage: test [command] <options>')\n    .strict()\n    .argv\n\n\n1\n2\n3\n4\n\n\n使用--help将会打印出使用信息\n\n> ./index.js --help\ntest [command] <options>\n\n选项：\n  --help     显示帮助信息                                                 [布尔]\n  --version  显示版本号\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 最少输入的command个数: demandCommand\n\nyargs(arg)\n    .usage('Usage: test [command] <options>')\n    .demandCommand(1, '最少输入一个参数')\n    .strict()\n    .argv\n\n\n1\n2\n3\n4\n5\n\n\n\n# 设置command别名: alias\n\nyargs(arg)\n    .usage('Usage: test [command] <options>')\n    .demandCommand(1, '最少输入一个参数')\n    .strict()\n    .alias('h', 'help') //-h 和  --help 效果一样\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 设置输出内容的宽度: wrap\n\nconst cli = yargs(arg)\ncli.usage('Usage: test [command] <options>')\n    .demandCommand(1, '最少输入一个参数')\n    .strict()\n    .alias('h', 'help')\n    .wrap(cli.terminalWidth()) // terminalWidth返回当前窗口的宽度\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 设置结尾显示的内容: epilogue\n\ncli.usage('Usage: test [command] <options>')\n    .demandCommand(1, '最少输入一个参数')\n    .strict()\n    .alias('h', 'help')\n    .wrap(cli.terminalWidth())\n    .epilogue('结尾显示的话')\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 为全局command添加选项: options\n\ncli.usage('Usage: test [command] <options>')\n    .alias('h', 'help')\n    .options({\n        debug: { // 添加的选项名\n            type: 'boolean',\n            describe: 'debug mode',\n            alias: 'd'  // 别名\n        }\n    })\n    .argv\n// options('name', {}) 一个一个设置的用法\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n执行效果\n\n> ./index.js -h\nUsage: test [command] <options>\n\n选项：\n      --version  显示版本号                                               [布尔]\n  -d, --debug    debug mode                                              [布尔]\n  -h, --help     显示帮助信息                                             [布尔]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 将选项分组: group\n\ncli.usage('Usage: test [command] <options>')\n    .alias('h', 'help')\n    .options({\n        debug: {\n            type: 'boolean',\n            describe: 'debug mode',\n            alias: 'd'\n        }\n    })\n    .group(['debug'], 'Dev Options:')\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n执行效果\n\n> ./index.js -h\nUsage: test [command] <options>\n\nDev Options:\n  -d, --debug  debug mode                                                [布尔]\n\n选项：\n      --version  显示版本号                                               [布尔]\n  -h, --help     显示帮助信息                                             [布尔]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 命令纠错提示：recommendCommands()\n\n会根据当前输入的command去找最相似的进行提示\n\n\n# 自定义错误信息: fail((err,msg) => {...})\n\n\n# dedent库\n\n去除每行顶部空格，方便多行字符串的输出\n\nconst dedent = require('dedent')\nconsole.log(dedent`\n    第一行，\n    第二行\n`)\n// 将会订购显示输出\n/**\n第一行，\n第二行\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 自定义命令\n\n官方示例\n\n#!/usr/bin/env node\nconst yargs = require('yargs/yargs')\nconst { hideBin } = require('yargs/helpers')\n\nyargs(hideBin(process.argv))\n    .command(\n        'serve [port]', // serve 脚手架后面输入的名，[port]定义的option\n        'start the server', // 描述\n        (yargs) => { //builder，在执行这个command之前做的事情\n            yargs\n                .positional('port', {\n                    describe: 'port to bind on',\n                    default: 5000\n                })\n        }, \n        (argv) => { // handler，执行comand 的行为\n            if (argv.verbose) console.info(`start server on :${argv.port}`)\n            serve(argv.port)\n        }\n    )\n    .option('verbose', {\n        alias: 'v',\n        type: 'boolean',\n        description: 'Run with verbose logging'\n    })\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n自定义\n\ncli.usage('Usage: test [command] <options>')\n    .alias('h', 'help')\n    .options({\n        debug: {\n            type: 'boolean',\n            describe: 'debug mode',\n            alias: 'd'\n        }\n    })\n    .group(['debug'], 'Dev Options:')\n    .command('init [name]', '初始化的命令', (yargs) => {\n        yargs.option('name', {\n            type: 'string',\n            describe: 'init的option',\n            alias: 'n'\n        })\n    }, (argv) => {\n        console.log(argv)\n    })\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n执行效果\n\n> ./index.js init  \n{ _: [ 'init' ], '$0': 'index.js' }\n\n> ./index.js init -h \nndex.js init [name]\n\n初始化的命令\n\nDev Options:\n  -d, --debug  debug mode                                                 [布尔]\n\n选项：\n      --version  显示版本号                                               [布尔]\n  -n, --name     init的option                                           [字符串]\n  -h, --help     显示帮助信息                                             [布尔]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n使用对象方式定义\n\n    ...\n    .command({\n        command: 'list',\n        aliases: ['ls', 'la', 'll'],\n        describe: 'list 的描述',\n        builder: (yargs) => {\n\n        },\n        handler: (argv) => {\n            console.log(argv)\n        }\n    })\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# parse\n\n解析命令参数，合并传入的参数，合并完作为一个新的参数注入到脚手架中\n\n#!/usr/bin/env node\n\nconst yargs = require('yargs/yargs')\nconst pkg = require('../package.json')\n\nconst argv = process.argv.splice(2)\nconst context = {\n    testVersion: pkg.version\n}\n\nyargs()\n    .command({\n        command: 'list',\n        aliases: ['ls', 'la', 'll'],\n        describe: 'list 的描述',\n        builder: (yargs) => {},\n        handler: (argv) => {\n            console.log(argv)\n        }\n    })\n    .parse(argv, context)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n执行效果\n\n> ./index.js list\n{ _: [ 'list' ], testVersion: '1.0.5', '$0': 'index.js' }\n\n\n1\n2\n\n\n\n# Lerna初始化过程\n\n\n\n# npm本地包引用方法\n\n除了npm link 还可以通过file:\n\n@lerna/global-options:\"file:../global-options\"\n\n\n1\n\n\n\n# Lerna创建发布流程\n\n\n# 项目初始化\n\n> mkdir my-cli-dev # 创建项目文件\n> npm init -y # 在项目目录下初始化\n> npm i -g lerna # 全局安装lerna\n> lerna init # 初始化\n\n\n1\n2\n3\n4\n\n\n\n# 创建package\n\n> lerna create core # package name 为 @my-cli-dev/core\n> lerna create utils # package name 为 @my-cli-dev/utils\n\n\n1\n2\n\n\npackage.json中name为@my-cli-dev/core这种方式，my-cli-dev则为组织名称，需要在npm上创建一个对应的组织，可以避免名字的重复。若包发布不上去检查下这个组织是否已经建立。 core/package.json 中dependencies 添加@my-cli-dev/utils的依赖。 通过lerna link链接到本地库\n\n\n# 发布前的准备\n\n1、创建git仓库\n\n> git remote add origin https://xx/cli.git # 添加仓库的链接\n# 代码提交到仓库\n> git add .\n> git commit -m 'init' \n> git push origin master --set-upstream\n\n\n1\n2\n3\n4\n5\n\n\n2、需要npm login 3、根目录下添加LICENSE.md文件 4、package.json中添加publishConfig设置为公有库\n\n\n# 发布\n\n> lerna publish\n\n\n1\n\n\n错误问题\n\nlerna ERR! E403 [no_perms] Private mode enable, only admin can publish this module\n\n\n1\n\n\n出现原因：使用的是淘宝源cnpm,登陆到的是cnpm 解决方法：切换到npmjs的网址，代码如下 npm config set registry http://registry.npmjs.org/ 切换过去之后记得npm login",normalizedContent:"# 脚手架实现原理\n\n# 为什么全局安装@vue/cli后会添加vue的命令？\n\nnpm install -g @vue/cli\n\n\n1\n\n\n查看vue实际文件路径\n\n> which vue\n/usr/local/bin/vue\n\n\n1\n2\n\n\nbin目录下存放的是可执行文件\n\n> cd /usr/local/bin\n> ll\nlrwxr-xr-x  1 song  admin    39b 12 28 21:48 vue -> ../lib/node_modules/@vue/cli/bin/vue.js\n\n\n1\n2\n3\n\n\n可以看到vue实际是一个软链接，指向：../lib/node_modules/@vue/cli/bin/vue.js\n\n# 绑定管理在哪里指定的呢？\n\n进入到@vue/cli安装目录\n\n> cd /usr/local/lib/node_modules/@vue/cli\n> ll\n-rw-r--r--    1 song  admin   2.5k 12 28 21:48 package.json\n\n\n1\n2\n3\n\n\n在package.json中有一个bin的配置\n\n \"bin\": {\n    \"vue\": \"bin/vue.js\"\n  },\n\n\n1\n2\n3\n\n\n这里配置了安装完之后的软链接名称，以及指向的实际文件\n\n# 全局安装@vue/cli时发生了什么？\n\nnpm install -g @vue/cli\n\n * 第一步：会把@vue/cli下载到node node_modules中\n * 第二步：下载成功后会解析package.json 中的 bin 配置，有这个配置就会创建一个软链接\n\n# vue执行一个js文件，为什么可以执行它？\n\n * 执行vue命令时，系统会执行which vue在环境变量中找vue的注册并执行文件\n   \n   # 这两条命令执行是等价的\n   > vue\n   >/usr/local/bin/vue\n   \n   \n   1\n   2\n   3\n   \n\n * 执行的真实文件是vue对应的软链接：../lib/node_modules/@vue/cli/bin/vue.js\n   \n   直接执行一个xx.js执行不了的，vue.js又是怎么执行的呢？\n   \n   js文件需要一个解释器(node)来执行 vue.js源码第一行\n   \n   #!/usr/bin/env node\n   \n   \n   1\n   \n   \n   自己创建一个js文件,test.js中第一行加入此代码，通过 ./test.js也能直接执行。\n   \n   为什么能直接执行？\n   \n   这句话的意思是，告诉系统在环境变量中去找node命令，来执行此文件\n   \n   > /usr/bin/env node # 会将node命令执行起来，与直接执行node是一样的效果\n   \n   \n   1\n   \n   \n   所以./test.js等于 /usr/bin/env node test.js 等于 node test.js\n   \n   chmod 777 test.js 设置文件为可执行文件\n   \n   # 自定义一条命令\n   \n   思路：在环境变量中创建一个软链接，执行 test.js即可 (软链接可以嵌套) 在 /usr/local/bin下执行\n   \n   >  ln -s <路径>/test/index.js <name> #删除软链接 rm <name>\n   \n   \n   1\n   \n\n\n# 脚手架的开发流程\n\n * 创建npm项目\n\n * 创建脚手架入口文件，最上方添加：\n   \n   #!/usr/bin/env node\n   \n   \n   1\n   \n\n * 配置package.json 添加bin属性\n\n * 编写脚手架代码\n\n * 将脚手架发布到npm\n\n\n# 脚手架开发难点\n\n * 分包： 将复杂系统拆分成若干个模块\n\n * 命令注册：\n   \n   vue create\n   vue add \n   vue invoke\n   \n   \n   1\n   2\n   3\n   \n\n * 参数解析\n   \n   vue command [options] <params>\n   \n   \n   1\n   \n   \n   options全称：--version、--help options简写： -v、-h\n\n * 帮助文档\n\n * 命令行交互\n\n * 日志打印\n\n * 命令行文字变色\n\n * 网络通信：http/websocket\n\n * 文件处理 ....\n\n理解npm link\n\n * npm link your-lib：将当前项目中 node_modules 下指定的库文件链接到 node全局node_modules下的库文件\n * npm link: 将当前项目链接到node全局node_modules中作为一个库文件，并解析bin配置创建可执行文件\n\n理解npm unlink\n\n * npm unlink：将当前项目从node全局node_modules中移除\n * npm unlink your-li：将当前项目中的库文件依赖移除\n\n\n# 创建一个脚手架\n\n> mkdir cli-test # 创建一个文件夹\n> npm init -y # 初始化\n\n\n1\n2\n\n\ncli-test 目录: -- package.json -- bin\n\n * |-- inde.js\n\nindex.js 文件:\n\n#!/usr/bin/env node\nconsole.log('hello cli')\n\n\n1\n2\n\n\npackage.json文件：\n\n{\n  ...\n  \"main\": \"index.js\",\n  \"bin\":  {\n        \"cli-test\": \"bin/index.js\"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n将脚手架发布到npm\n\n> npm login # 登录npm\n> npm publish # 发布\n\n\n1\n2\n\n\n在cli-test目录下，进行全局安装 npm install -g cli-test 就会建立一个软链接，方便进行本地调试， 通过npm link 也可。\n\n\n# yargs入门\n\nyargs通过解析参数来帮助您构建脚手架的工具。\n\n\n# 通过yargs创建一个最简单的脚手架工具\n\n定义文件index.js\n\n#!/usr/bin/env node\n\nconst yargs = require('yargs/yargs')\nconst { hidebin } = require('yargs/helpers')\n\nconst arg = hidebin(process.argv)\nyargs(arg)\n     .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n执行\n\n> ./index.js --help\n选项：\n  --help     显示帮助信息                                                 [布尔]\n  --version  显示版本号                                                   [布尔]\n\n\n1\n2\n3\n4\n\n\n\n# 严格模式: strict\n\nyargs(arg)\n    .strict()\n    .argv\n\n\n1\n2\n3\n\n\n加入strict，如果有无法识别的参数，将会给出提示\n\n\n# 用法提示: usage\n\nyargs(arg)\n    .usage('usage: test [command] <options>')\n    .strict()\n    .argv\n\n\n1\n2\n3\n4\n\n\n使用--help将会打印出使用信息\n\n> ./index.js --help\ntest [command] <options>\n\n选项：\n  --help     显示帮助信息                                                 [布尔]\n  --version  显示版本号\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 最少输入的command个数: demandcommand\n\nyargs(arg)\n    .usage('usage: test [command] <options>')\n    .demandcommand(1, '最少输入一个参数')\n    .strict()\n    .argv\n\n\n1\n2\n3\n4\n5\n\n\n\n# 设置command别名: alias\n\nyargs(arg)\n    .usage('usage: test [command] <options>')\n    .demandcommand(1, '最少输入一个参数')\n    .strict()\n    .alias('h', 'help') //-h 和  --help 效果一样\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 设置输出内容的宽度: wrap\n\nconst cli = yargs(arg)\ncli.usage('usage: test [command] <options>')\n    .demandcommand(1, '最少输入一个参数')\n    .strict()\n    .alias('h', 'help')\n    .wrap(cli.terminalwidth()) // terminalwidth返回当前窗口的宽度\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 设置结尾显示的内容: epilogue\n\ncli.usage('usage: test [command] <options>')\n    .demandcommand(1, '最少输入一个参数')\n    .strict()\n    .alias('h', 'help')\n    .wrap(cli.terminalwidth())\n    .epilogue('结尾显示的话')\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 为全局command添加选项: options\n\ncli.usage('usage: test [command] <options>')\n    .alias('h', 'help')\n    .options({\n        debug: { // 添加的选项名\n            type: 'boolean',\n            describe: 'debug mode',\n            alias: 'd'  // 别名\n        }\n    })\n    .argv\n// options('name', {}) 一个一个设置的用法\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n执行效果\n\n> ./index.js -h\nusage: test [command] <options>\n\n选项：\n      --version  显示版本号                                               [布尔]\n  -d, --debug    debug mode                                              [布尔]\n  -h, --help     显示帮助信息                                             [布尔]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 将选项分组: group\n\ncli.usage('usage: test [command] <options>')\n    .alias('h', 'help')\n    .options({\n        debug: {\n            type: 'boolean',\n            describe: 'debug mode',\n            alias: 'd'\n        }\n    })\n    .group(['debug'], 'dev options:')\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n执行效果\n\n> ./index.js -h\nusage: test [command] <options>\n\ndev options:\n  -d, --debug  debug mode                                                [布尔]\n\n选项：\n      --version  显示版本号                                               [布尔]\n  -h, --help     显示帮助信息                                             [布尔]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 命令纠错提示：recommendcommands()\n\n会根据当前输入的command去找最相似的进行提示\n\n\n# 自定义错误信息: fail((err,msg) => {...})\n\n\n# dedent库\n\n去除每行顶部空格，方便多行字符串的输出\n\nconst dedent = require('dedent')\nconsole.log(dedent`\n    第一行，\n    第二行\n`)\n// 将会订购显示输出\n/**\n第一行，\n第二行\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 自定义命令\n\n官方示例\n\n#!/usr/bin/env node\nconst yargs = require('yargs/yargs')\nconst { hidebin } = require('yargs/helpers')\n\nyargs(hidebin(process.argv))\n    .command(\n        'serve [port]', // serve 脚手架后面输入的名，[port]定义的option\n        'start the server', // 描述\n        (yargs) => { //builder，在执行这个command之前做的事情\n            yargs\n                .positional('port', {\n                    describe: 'port to bind on',\n                    default: 5000\n                })\n        }, \n        (argv) => { // handler，执行comand 的行为\n            if (argv.verbose) console.info(`start server on :${argv.port}`)\n            serve(argv.port)\n        }\n    )\n    .option('verbose', {\n        alias: 'v',\n        type: 'boolean',\n        description: 'run with verbose logging'\n    })\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n自定义\n\ncli.usage('usage: test [command] <options>')\n    .alias('h', 'help')\n    .options({\n        debug: {\n            type: 'boolean',\n            describe: 'debug mode',\n            alias: 'd'\n        }\n    })\n    .group(['debug'], 'dev options:')\n    .command('init [name]', '初始化的命令', (yargs) => {\n        yargs.option('name', {\n            type: 'string',\n            describe: 'init的option',\n            alias: 'n'\n        })\n    }, (argv) => {\n        console.log(argv)\n    })\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n执行效果\n\n> ./index.js init  \n{ _: [ 'init' ], '$0': 'index.js' }\n\n> ./index.js init -h \nndex.js init [name]\n\n初始化的命令\n\ndev options:\n  -d, --debug  debug mode                                                 [布尔]\n\n选项：\n      --version  显示版本号                                               [布尔]\n  -n, --name     init的option                                           [字符串]\n  -h, --help     显示帮助信息                                             [布尔]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n使用对象方式定义\n\n    ...\n    .command({\n        command: 'list',\n        aliases: ['ls', 'la', 'll'],\n        describe: 'list 的描述',\n        builder: (yargs) => {\n\n        },\n        handler: (argv) => {\n            console.log(argv)\n        }\n    })\n    .argv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# parse\n\n解析命令参数，合并传入的参数，合并完作为一个新的参数注入到脚手架中\n\n#!/usr/bin/env node\n\nconst yargs = require('yargs/yargs')\nconst pkg = require('../package.json')\n\nconst argv = process.argv.splice(2)\nconst context = {\n    testversion: pkg.version\n}\n\nyargs()\n    .command({\n        command: 'list',\n        aliases: ['ls', 'la', 'll'],\n        describe: 'list 的描述',\n        builder: (yargs) => {},\n        handler: (argv) => {\n            console.log(argv)\n        }\n    })\n    .parse(argv, context)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n执行效果\n\n> ./index.js list\n{ _: [ 'list' ], testversion: '1.0.5', '$0': 'index.js' }\n\n\n1\n2\n\n\n\n# lerna初始化过程\n\n\n\n# npm本地包引用方法\n\n除了npm link 还可以通过file:\n\n@lerna/global-options:\"file:../global-options\"\n\n\n1\n\n\n\n# lerna创建发布流程\n\n\n# 项目初始化\n\n> mkdir my-cli-dev # 创建项目文件\n> npm init -y # 在项目目录下初始化\n> npm i -g lerna # 全局安装lerna\n> lerna init # 初始化\n\n\n1\n2\n3\n4\n\n\n\n# 创建package\n\n> lerna create core # package name 为 @my-cli-dev/core\n> lerna create utils # package name 为 @my-cli-dev/utils\n\n\n1\n2\n\n\npackage.json中name为@my-cli-dev/core这种方式，my-cli-dev则为组织名称，需要在npm上创建一个对应的组织，可以避免名字的重复。若包发布不上去检查下这个组织是否已经建立。 core/package.json 中dependencies 添加@my-cli-dev/utils的依赖。 通过lerna link链接到本地库\n\n\n# 发布前的准备\n\n1、创建git仓库\n\n> git remote add origin https://xx/cli.git # 添加仓库的链接\n# 代码提交到仓库\n> git add .\n> git commit -m 'init' \n> git push origin master --set-upstream\n\n\n1\n2\n3\n4\n5\n\n\n2、需要npm login 3、根目录下添加license.md文件 4、package.json中添加publishconfig设置为公有库\n\n\n# 发布\n\n> lerna publish\n\n\n1\n\n\n错误问题\n\nlerna err! e403 [no_perms] private mode enable, only admin can publish this module\n\n\n1\n\n\n出现原因：使用的是淘宝源cnpm,登陆到的是cnpm 解决方法：切换到npmjs的网址，代码如下 npm config set registry http://registry.npmjs.org/ 切换过去之后记得npm login",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"转-commander",frontmatter:{title:"转-commander",date:"2023-02-11T15:40:32.000Z",permalink:"/pages/e7db5c/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030103.%E8%BD%AC-commander.html",relativePath:"10.大前端/1030.Node/1030103.转-commander.md",key:"v-4f5baf9f",path:"/pages/e7db5c/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:86},{level:2,title:"快速开始",slug:"快速开始",normalizedTitle:"快速开始",charIndex:94},{level:2,title:"声明 program 变量",slug:"声明-program-变量",normalizedTitle:"声明 program 变量",charIndex:104},{level:2,title:"选项",slug:"选项",normalizedTitle:"选项",charIndex:123},{level:3,title:"常用选项类型，boolean 型选项和带参数选项",slug:"常用选项类型-boolean-型选项和带参数选项",normalizedTitle:"常用选项类型，boolean 型选项和带参数选项",charIndex:3812},{level:3,title:"选项的默认值",slug:"选项的默认值",normalizedTitle:"选项的默认值",charIndex:166},{level:3,title:"其他的选项类型，取反选项，以及可选参数的选项",slug:"其他的选项类型-取反选项-以及可选参数的选项",normalizedTitle:"其他的选项类型，取反选项，以及可选参数的选项",charIndex:180},{level:3,title:"必填选项",slug:"必填选项",normalizedTitle:"必填选项",charIndex:210},{level:3,title:"变长参数选项",slug:"变长参数选项",normalizedTitle:"变长参数选项",charIndex:222},{level:3,title:"版本选项",slug:"版本选项",normalizedTitle:"版本选项",charIndex:236},{level:3,title:"其他选项配置",slug:"其他选项配置",normalizedTitle:"其他选项配置",charIndex:248},{level:3,title:"自定义选项处理",slug:"自定义选项处理",normalizedTitle:"自定义选项处理",charIndex:262},{level:2,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:30},{level:3,title:"命令参数",slug:"命令参数",normalizedTitle:"命令参数",charIndex:285},{level:4,title:"其他参数配置",slug:"其他参数配置",normalizedTitle:"其他参数配置",charIndex:299},{level:4,title:"自定义参数处理",slug:"自定义参数处理",normalizedTitle:"自定义参数处理",charIndex:315},{level:3,title:"处理函数",slug:"处理函数",normalizedTitle:"处理函数",charIndex:330},{level:3,title:"独立的可执行（子）命令",slug:"独立的可执行-子-命令",normalizedTitle:"独立的可执行（子）命令",charIndex:342},{level:3,title:"生命周期钩子",slug:"生命周期钩子",normalizedTitle:"生命周期钩子",charIndex:361},{level:2,title:"自动化帮助信息",slug:"自动化帮助信息",normalizedTitle:"自动化帮助信息",charIndex:373},{level:3,title:"自定义帮助",slug:"自定义帮助",normalizedTitle:"自定义帮助",charIndex:388},{level:3,title:"在出错后展示帮助信息",slug:"在出错后展示帮助信息",normalizedTitle:"在出错后展示帮助信息",charIndex:401},{level:3,title:"使用代码展示帮助信息",slug:"使用代码展示帮助信息",normalizedTitle:"使用代码展示帮助信息",charIndex:419},{level:3,title:".name",slug:"name",normalizedTitle:".name",charIndex:437},{level:3,title:".usage",slug:"usage",normalizedTitle:".usage",charIndex:450},{level:3,title:".description 和 .summary",slug:"description-和-summary",normalizedTitle:".description 和 .summary",charIndex:464},{level:3,title:".helpOption(flags, description)",slug:"helpoption-flags-description",normalizedTitle:".helpoption(flags, description)",charIndex:495},{level:3,title:".addHelpCommand()",slug:"addhelpcommand",normalizedTitle:".addhelpcommand()",charIndex:534},{level:3,title:"其他帮助配置",slug:"其他帮助配置",normalizedTitle:"其他帮助配置",charIndex:559},{level:2,title:"自定义事件监听",slug:"自定义事件监听",normalizedTitle:"自定义事件监听",charIndex:571},{level:2,title:"零碎知识",slug:"零碎知识",normalizedTitle:"零碎知识",charIndex:584},{level:3,title:".parse() 和 .parseAsync()",slug:"parse-和-parseasync",normalizedTitle:".parse() 和 .parseasync()",charIndex:596},{level:3,title:"解析配置",slug:"解析配置",normalizedTitle:"解析配置",charIndex:628},{level:3,title:"作为属性的遗留选项",slug:"作为属性的遗留选项",normalizedTitle:"作为属性的遗留选项",charIndex:640},{level:3,title:"TypeScript",slug:"typescript",normalizedTitle:"typescript",charIndex:657},{level:3,title:"createCommand()",slug:"createcommand",normalizedTitle:"createcommand()",charIndex:675},{level:3,title:"Node 选项，如 --harmony",slug:"node-选项-如-harmony",normalizedTitle:"node 选项，如 --harmony",charIndex:698},{level:3,title:"调试子命令",slug:"调试子命令",normalizedTitle:"调试子命令",charIndex:725},{level:3,title:"显示错误",slug:"显示错误",normalizedTitle:"显示错误",charIndex:738},{level:3,title:"重写退出和输出",slug:"重写退出和输出",normalizedTitle:"重写退出和输出",charIndex:750},{level:3,title:"其他文档",slug:"其他文档",normalizedTitle:"其他文档",charIndex:765},{level:2,title:"支持",slug:"支持",normalizedTitle:"支持",charIndex:775},{level:3,title:"企业使用 Commander",slug:"企业使用-commander",normalizedTitle:"企业使用 commander",charIndex:785}],headersStr:"安装 快速开始 声明 program 变量 选项 常用选项类型，boolean 型选项和带参数选项 选项的默认值 其他的选项类型，取反选项，以及可选参数的选项 必填选项 变长参数选项 版本选项 其他选项配置 自定义选项处理 命令 命令参数 其他参数配置 自定义参数处理 处理函数 独立的可执行（子）命令 生命周期钩子 自动化帮助信息 自定义帮助 在出错后展示帮助信息 使用代码展示帮助信息 .name .usage .description 和 .summary .helpOption(flags, description) .addHelpCommand() 其他帮助配置 自定义事件监听 零碎知识 .parse() 和 .parseAsync() 解析配置 作为属性的遗留选项 TypeScript createCommand() Node 选项，如 --harmony 调试子命令 显示错误 重写退出和输出 其他文档 支持 企业使用 Commander",content:"# Commander.js\n\n\n\n完整的 node.js 命令行解决方案。\n\n使用其他语言阅读：English | 简体中文\n\n * Commander.js\n   * 安装\n   * 快速开始\n   * 声明 program 变量\n   * 选项\n     * 常用选项类型，boolean 型选项和带参数的选项\n     * 选项的默认值\n     * 其他的选项类型，取反选项，以及可选参数的选项\n     * 必填选项\n     * 变长参数选项\n     * 版本选项\n     * 其他选项配置\n     * 自定义选项处理\n   * 命令\n     * 命令参数\n       * 其他参数配置\n       * 自定义参数处理\n     * 处理函数\n     * 独立的可执行（子）命令\n     * 生命周期钩子\n   * 自动化帮助信息\n     * 自定义帮助\n     * 在出错后展示帮助信息\n     * 使用代码展示帮助信息\n     * .name\n     * .usage\n     * .description 和 .summary\n     * .helpOption(flags, description)\n     * .addHelpCommand()\n     * 其他帮助配置\n   * 自定义事件监听\n   * 零碎知识\n     * .parse() 和 .parseAsync()\n     * 解析配置\n     * 作为属性的遗留选项\n     * TypeScript\n     * createCommand()\n     * Node 选项，如 --harmony\n     * 调试子命令\n     * 显示错误\n     * 重写退出和输出\n     * 其他文档\n   * 支持\n     * 企业使用 Commander\n\n关于本文档中使用的术语，请见术语表\n\n\n# 安装\n\nnpm install commander\n\n\n1\n\n\n\n# 快速开始\n\n编写代码来描述你的命令行界面。 Commander 负责将参数解析为选项和命令参数，为问题显示使用错误，并实现一个有帮助的系统。\n\nCommander 是严格的，并且会针对无法识别的选项显示错误。 两种最常用的选项类型是布尔选项，和从参数中获取值的选项。\n\n示例代码：split.js\n\nconst { program } = require('commander');\n\nprogram\n  .option('--first')\n  .option('-s, --separator <char>');\n\nprogram.parse();\n\nconst options = program.opts();\nconst limit = options.first ? 1 : undefined;\nconsole.log(program.args[0].split(options.separator, limit));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n$ node split.js -s / --fits a/b/c\nerror: unknown option '--fits'\n(Did you mean --first?)\n$ node split.js -s / --first a/b/c\n[ 'a' ]\n\n\n1\n2\n3\n4\n5\n\n\n这是一个使用子命令并带有帮助描述的更完整的程序。在多命令程序中，每个命令（或命令的独立可执行文件）都有一个操作处理程序。\n\n示例代码：string-util.js\n\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .name('string-util')\n  .description('CLI to some JavaScript string utilities')\n  .version('0.8.0');\n\nprogram.command('split')\n  .description('Split a string into substrings and display as an array')\n  .argument('<string>', 'string to split')\n  .option('--first', 'display just the first substring')\n  .option('-s, --separator <char>', 'separator character', ',')\n  .action((str, options) => {\n    const limit = options.first ? 1 : undefined;\n    console.log(str.split(options.separator, limit));\n  });\n\nprogram.parse();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n$ node string-util.js help split\nUsage: string-util split [options] <string>\n\nSplit a string into substrings and display as an array.\n\nArguments:\n  string                  string to split\n\nOptions:\n  --first                 display just the first substring\n  -s, --separator <char>  separator character (default: \",\")\n  -h, --help              display help for command\n\n$ node string-util.js split --separator=/ a/b/c\n[ 'a', 'b', 'c' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n更多示例可以在 examples 目录中找到。\n\n\n# 声明 program 变量\n\n为简化使用，Commander 提供了一个全局对象。本文档的示例代码均按此方法使用：\n\n// CommonJS (.cjs)\nconst { program } = require('commander');\n\n\n1\n2\n\n\n如果程序较为复杂，用户需要以多种方式来使用 Commander，如单元测试等。创建本地 Command 对象是一种更好的方式：\n\n// CommonJS (.cjs)\nconst { Command } = require('commander');\nconst program = new Command();\n\n\n1\n2\n3\n\n\n// ECMAScript (.mjs)\nimport { Command } from 'commander';\nconst program = new Command();\n\n\n1\n2\n3\n\n\n// TypeScript (.ts)\nimport { Command } from 'commander';\nconst program = new Command();\n\n\n1\n2\n3\n\n\n\n# 选项\n\nCommander 使用.option()方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（--后面接一个或多个单词），使用逗号、空格或|分隔。\n\n解析后的选项可以通过Command对象上的.opts()方法获取，同时会被传递给命令处理函数。\n\n对于多个单词的长选项，选项名会转为驼峰命名法（camel-case），例如--template-engine选项可通过program.opts().templateEngine获取。\n\n选项及其选项参数可以用空格分隔，也可以组合成同一个参数。选项参数可以直接跟在短选项之后，也可以在长选项后面加上 =。\n\nserve -p 80\nserve -p80\nserve --port 80\nserve --port=80\n\n\n1\n2\n3\n4\n\n\n--可以标记选项的结束，后续的参数均不会被命令解释，可以正常使用。\n\n默认情况下，选项在命令行中的顺序不固定，一个选项可以在其他参数之前或之后指定。\n\n当.opts()不够用时，还有其他相关方法：\n\n * .optsWithGlobals()返回合并的本地和全局选项值\n * .getOptionValue()和.setOptionValue()操作单个选项的值\n * .getOptionValueSource()和.setOptionValueWithSource()包括选项值的来源\n\n\n# 常用选项类型，boolean 型选项和带参数选项\n\n有两种最常用的选项，一类是 boolean 型选项，选项无需配置参数，另一类选项则可以设置参数（使用尖括号声明在该选项后，如--expect <value>）。如果在命令行中不指定具体的选项及参数，则会被定义为undefined。\n\n示例代码：options-common.js\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n多个布尔短选项可以在破折号之后组合在一起，并且可以跟一个取值的单一选项。 例如 -d -s -p cheese 可以写成 -ds -p cheese 甚至 -dsp cheese。\n\n具有预期选项参数的选项是贪婪的，并且无论值如何，都会消耗参数。 所以 --id -xyz 读取 -xyz 作为选项参数。\n\n通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中。该方法的参数是可选的，默认值为process.argv。\n\n\n# 选项的默认值\n\n选项可以设置一个默认值。\n\n示例代码：options-defaults.js\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n\n\n1\n2\n3\n4\n5\n6\n\n\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n\n\n1\n2\n3\n4\n\n\n\n# 其他的选项类型，取反选项，以及可选参数的选项\n\n可以定义一个以no-开头的 boolean 型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带no-的选项，未定义对应不带no-的选项时，该选项的默认值会被置为true。\n\n如果已经定义了--foo，那么再定义--no-foo并不会改变它本来的默认值。\n\n示例代码：options-negatable.js\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n选项的参数使用方括号声明表示参数是可选参数（如--optional [value]）。该选项在不带参数时可用作 boolean 选项，在带有参数时则从参数中得到值。\n\n示例代码：options-boolean-or-value.js\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n\n\n1\n2\n3\n4\n5\n6\n\n\n带有可选选项参数的选项不是贪婪的，并且会忽略以破折号开头的参数。因此对于--id -5，id表现为布尔选项，但如果需要，您可以使用组合形式，例如 --id=-5。\n\n关于可能有歧义的用例，请见可变参数的选项。\n\n\n# 必填选项\n\n通过.requiredOption()方法可以设置选项为必填。必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与.option()一致。\n\n示例代码：options-required.js\n\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n\n\n1\n2\n3\n4\n\n\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n\n\n1\n2\n\n\n\n# 变长参数选项\n\n定义选项时，可以通过使用...来设置参数为可变长参数。在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或--开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过--标记当前命令的结束。\n\n示例代码：options-variadic.js\n\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n关于可能有歧义的用例，请见可变参数的选项。\n\n\n# 版本选项\n\n.version()方法可以设置版本，其默认选项为-V和--version，设置了版本后，命令行会输出当前的版本号。\n\nprogram.version('0.0.1');\n\n\n1\n\n\n$ ./examples/pizza -V\n0.0.1\n\n\n1\n2\n\n\n版本选项也支持自定义设置选项名称，可以在.version()方法里再传递一些参数（长选项名称、描述信息），用法与.option()方法类似。\n\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n\n\n1\n\n\n\n# 其他选项配置\n\n大多数情况下，选项均可通过.option()方法添加。但对某些不常见的用例，也可以直接构造Option对象，对选项进行更详尽的配置。\n\n示例代码：options-extra.js, options-env.js, options-conflicts.js, options-implies.js\n\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))\n  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))\n  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat))\n  .addOption(new Option('--disable-server', 'disables the server').conflicts('port'))\n  .addOption(new Option('--free-drink', 'small drink included free ').implies({ drink: 'small' }));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -p, --port <number>    port number (env: PORT)\n  --donate [amount]      optional donation in dollars (preset: \"20\")\n  --disable-server       disables the server\n  --free-drink           small drink included free\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n\n$ PORT=80 extra --donate --free-drink\nOptions:  { timeout: 60, donate: 20, port: '80', freeDrink: true, drink: 'small' }\n\n$ extra --disable-server --port 8000\nerror: option '--disable-server' cannot be used with option '-p, --port <number>'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 自定义选项处理\n\n选项的参数可以通过自定义函数来处理，该函数接收两个参数，即用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。\n\n自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。\n\n可以在自定义函数的后面设置选项参数的默认值或初始值（例如参数用列表暂存时需要设置一个初始空列表)。\n\n示例代码：options-custom-processing.js\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt 参数为字符串和进制数\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 命令\n\n通过.command()或.addCommand()可以配置命令，有两种实现方式：为命令绑定处理函数，或者将命令单独写成一个可执行文件（详述见后文）。子命令支持嵌套（示例代码）。\n\n.command()的第一个参数为命令名称。命令参数可以跟在名称后面，也可以用.argument()单独指定。参数可为必选的（尖括号表示）、可选的（方括号表示）或变长参数（点号表示，如果使用，只能是最后一个参数）。\n\n使用.addCommand()向program增加配置好的子命令。\n\n例如:\n\n// 通过绑定处理函数实现命令（这里的指令描述为放在`.command`中）\n// 返回新生成的命令（即该子命令）以供继续配置\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// 通过独立的的可执行文件实现命令 (注意这里指令描述是作为`.command`的第二个参数)\n// 返回最顶层的命令以供继续添加子命令\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// 分别装配命令\n// 返回最顶层的命令以供继续添加子命令\nprogram\n  .addCommand(build.makeBuildCommand());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n使用.command()和addCommand()来指定选项的相关设置。当设置hidden: true时，该命令不会打印在帮助信息里。当设置isDefault: true时，若没有指定其他子命令，则会默认执行这个命令（样例）。\n\n\n# 命令参数\n\n如上所述，子命令的参数可以通过.command()指定。对于有独立可执行文件的子命令来说，参数只能以这种方法指定。而对其他子命令，参数也可用以下方法。\n\n在Command对象上使用.argument()来按次序指定命令参数。该方法接受参数名称和参数描述。参数可为必选的（尖括号表示，例如<required>）或可选的（方括号表示，例如[optional]）。\n\n示例代码：argument.js\n\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n在参数名后加上...来声明可变参数，且只有最后一个参数支持这种用法。可变参数会以数组的形式传递给处理函数。例如：\n\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n有一种便捷方式可以一次性指定多个参数，但不包含参数描述：\n\nprogram\n  .arguments('<username> <password>');\n\n\n1\n2\n\n\n# 其他参数配置\n\n有少数附加功能可以直接构造Argument对象，对参数进行更详尽的配置。\n\n示例代码：arguments-extra.js\n\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n\n\n1\n2\n3\n\n\n# 自定义参数处理\n\n选项的参数可以通过自定义函数来处理（与处理选项参数时类似），该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的命令参数值。\n\n处理后的参数值会传递给命令处理函数，同时可通过.processedArgs获取。\n\n可以在自定义函数的后面设置命令参数的默认值或初始值。\n\n示例代码：arguments-custom-processing.js\n\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 处理函数\n\n命令处理函数的参数，为该命令声明的所有参数，除此之外还会附加两个额外参数：一个是解析出的选项，另一个则是该命令对象自身。\n\n示例代码：thank.js\n\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果你愿意，你可以跳过为处理函数声明参数直接使用 command。 this 关键字设置为运行命令，可以在函数表达式中使用（但不能从箭头函数中使用）。\n\n示例代码：action-this.js\n\nprogram\n  .command('serve')\n  .argument('<script>')\n  .option('-p, --port <number>', 'port number', 80)\n  .action(function() {\n    console.error('Run script %s on port %s', this.args[0], this.opts().port);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n处理函数支持async，相应的，需要使用.parseAsync代替.parse。\n\nasync function run() { /* 在这里编写代码 */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用命令时，所给的选项和命令参数会被验证是否有效。凡是有未知的选项，或缺少所需的命令参数，都会报错。 如要允许使用未知的选项，可以调用.allowUnknownOption()。默认情况下，传入过多的参数并不报错，但也可以通过调用.allowExcessArguments(false)来启用过多参数的报错。\n\n\n# 独立的可执行（子）命令\n\n当.command()带有描述参数时，就意味着使用独立的可执行文件作为子命令。 Commander 会尝试在入口脚本的目录中搜索名称组合为 command-subcommand 的文件，如以下示例中的 pm-install 或 pm-search。搜索包括尝试常见的文件扩展名，如.js。 你可以使用 executableFile 配置选项指定自定义名称（和路径）。 你可以使用 .executableDir() 为子命令指定自定义搜索目录。\n\n你可以在可执行文件里处理（子）命令的选项，而不必在顶层声明它们。\n\n示例代码：pm\n\nprogram\n  .name('pm')\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果该命令需要支持全局安装，请确保有对应的权限，例如755。\n\n\n# 生命周期钩子\n\n可以在命令的生命周期事件上设置回调函数。\n\n示例代码：hook.js\n\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n钩子函数支持async，相应的，需要使用.parseAsync代替.parse。一个事件上可以添加多个钩子。\n\n支持的事件有：\n\n事件名称                    触发时机                 参数列表\npreAction, postAction   本命令或其子命令的处理函数执行前/后   (thisCommand, actionCommand)\npreSubcommand           在其直接子命令解析之前调用        (thisCommand, subcommand)\n\n\n# 自动化帮助信息\n\n帮助信息是 Commander 基于你的程序自动生成的，默认的帮助选项是-h,--help。\n\n示例代码：pizza\n\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果你的命令中包含了子命令，会默认添加help命令，它可以单独使用，也可以与子命令一起使用来提示更多帮助信息。用法与shell程序类似：\n\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n\n\n1\n2\n3\n4\n5\n\n\n\n# 自定义帮助\n\n可以添加额外的帮助信息，与内建的帮助一同展示。\n\n示例代码：custom-help\n\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n将会输出以下的帮助信息：\n\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n位置参数对应的展示方式如下：\n\n * beforeAll：作为全局标头栏展示\n * before：在内建帮助信息之前展示\n * after：在内建帮助信息之后展示\n * afterAll：作为全局末尾栏展示\n\nbeforeAll和afterAll两个参数作用于命令及其所有的子命令。\n\n第二个参数可以是一个字符串，也可以是一个返回字符串的函数。对后者而言，为便于使用，该函数可以接受一个上下文对象，它有如下属性：\n\n * error：boolean 值，代表该帮助信息是否由于不当使用而展示\n * command：代表展示该帮助信息的Command对象\n\n\n# 在出错后展示帮助信息\n\n默认情况下，出现命令用法错误时只会显示错误信息。可以选择在出错后展示完整的帮助或自定义的帮助信息。\n\nprogram.showHelpAfterError();\n// 或者\nprogram.showHelpAfterError('(add --help for additional information)');\n\n\n1\n2\n3\n\n\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n\n\n1\n2\n3\n\n\n默认行为是在出现未知命令或选项错误后建议正确拼写。你可以禁用此功能。\n\nprogram.showSuggestionAfterError(false);\n\n\n1\n\n\n$ pizza --hepl\nerror: unknown option '--hepl'\n(Did you mean --help?)\n\n\n1\n2\n3\n\n\n\n# 使用代码展示帮助信息\n\n.help()：展示帮助信息并退出。可以通过传入{ error: true }来让帮助信息从 stderr 输出，并以代表错误的状态码退出程序。\n\n.outputHelp()：只展示帮助信息，不退出程序。传入{ error: true }可以让帮助信息从 stderr 输出。\n\n.helpInformation()：得到字符串形式的内建的帮助信息，以便用于自定义的处理及展示。\n\n\n# .name\n\n命令名称出现在帮助中，也用于定位独立的可执行子命令。\n\n你可以使用 .name() 或在 Command 构造函数中指定程序名称。对于 program ，Commander 会使用传递给 .parse() 的完整参数中的脚本名称。但是，脚本名称会根据程序的启动方式而有所不同，因此您可能希望明确指定它。\n\nprogram.name('pizza');\nconst pm = new Command('pm');\n\n\n1\n2\n\n\n使用 .command() 指定时，子命令会获得名称。如果您自己创建子命令以与 .addCommand() 一起使用，则使用 .name() 或在 Command 构造函数中设置名称。\n\n\n# .usage\n\n通过这个选项可以修改帮助信息的首行提示，例如：\n\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n\n\n1\n2\n3\n\n\n帮助信息开头如下：\n\nUsage: my-command [global options] command\n\n\n1\n\n\n\n# .description 和 .summary\n\ndescription 出现在命令的帮助中。当列为程序的子命令时，你可以选择提供更短的 summary 以供使用。\n\nprogram\n  .command(\"duplicate\")\n  .summary(\"make a copy\")\n  .description(`Make a copy of the current project.\nThis may require additional disk space.\n  `);\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# .helpOption(flags, description)\n\n每一个命令都带有一个默认的帮助选项。你可以改变 flags 和 description 参数。传入 false 则会禁用内建的帮助信息。\n\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n\n\n1\n2\n\n\n\n# .addHelpCommand()\n\n如果一个命令拥有子命令，它也将有一个默认的帮助子命令。使用.addHelpCommand()和.addHelpCommand(false)可以打开或关闭默认的帮助子命令。\n\n也可以自定义名字和描述：\n\nprogram.addHelpCommand('assist [command]', 'show assistance');\n\n\n1\n\n\n\n# 其他帮助配置\n\n内建帮助信息通过Help类进行格式化。如有需要，可以使用.configureHelp()来更改其数据属性和方法，或使用.createHelp()来创建子类，从而配置Help类的行为。\n\n数据属性包括：\n\n * helpWidth：指明帮助信息的宽度。可在单元测试中使用。\n * sortSubcommands：以字母序排列子命令\n * sortOptions：以字母序排列选项\n\n可以得到可视化的参数列表，选项列表，以及子命令列表。列表的每个元素都具有_term_和_description_属性，并可以对其进行格式化。关于其使用方式，请参考.formatHelp()。\n\n示例代码：configure-help.js\n\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // 显示名称，而非用法\n});\n\n\n1\n2\n3\n4\n\n\n\n# 自定义事件监听\n\n监听命令和选项可以执行自定义函数。\n\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n\n\n1\n2\n3\n\n\n\n# 零碎知识\n\n\n# .parse() 和 .parseAsync()\n\n.parse的第一个参数是要解析的字符串数组，也可以省略参数而使用process.argv。\n\n如果参数遵循与 node 不同的约定，可以在第二个参数中传递from选项：\n\n * node：默认值，argv[0]是应用，argv[1]是要跑的脚本，后续为用户参数；\n * electron：argv[1]根据 electron 应用是否打包而变化；\n * user：来自用户的所有参数。\n\n例如：\n\nprogram.parse(process.argv); // 指明，按 node 约定\nprogram.parse(); // 默认，自动识别 electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n\n\n1\n2\n3\n\n\n\n# 解析配置\n\n当默认的解析方式无法满足需要，Commander 也提供了其他的解析行为。\n\n默认情况下，程序的选项在子命令前后均可被识别。如要只允许选项出现在子命令之前，可以使用.enablePositionalOptions()。这样可以在命令和子命令中使用意义不同的同名选项。\n\n示例代码：positional-options.js\n\n当启用了带顺序的选项解析，以下程序中，-b选项在第一行中将被解析为程序顶层的选项，而在第二行中则被解析为子命令的选项：\n\nprogram -b subcommand\nprogram subcommand -b\n\n\n1\n2\n\n\n默认情况下，选项在命令参数前后均可被识别。如要使选项仅在命令参数前被识别，可以使用.passThroughOptions()。这样可以把参数和跟随的选项传递给另一程序，而无需使用--来终止选项解析。 如要在子命令中使用此功能，必须首先启用带顺序的选项解析。\n\n示例代码：pass-through-options.js\n\n当启用此功能时，以下程序中，--port=80在第一行中会被解析为程序的选项，而在第二行中则会被解析为一个命令参数：\n\nprogram --port=80 arg\nprogram arg --port=80\n\n\n1\n2\n\n\n默认情况下，使用未知选项会提示错误。如要将未知选项视作普通命令参数，并继续处理其他部分，可以使用.allowUnknownOption()。这样可以混用已知和未知的选项。\n\n默认情况下，传入过多的命令参数并不会报错。可以使用.allowExcessArguments(false)来启用这一检查。\n\n\n# 作为属性的遗留选项\n\n在 Commander 7 以前，选项的值是作为属性存储在命令对象上的。 这种处理方式便于实现，但缺点在于，选项可能会与Command的已有属性相冲突。通过使用.storeOptionsAsProperties()，可以恢复到这种旧的处理方式，并可以不加改动地继续运行遗留代码。\n\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# TypeScript\n\n如果你使用 ts-node，并有.ts文件作为独立可执行文件，那么需要用 node 运行你的程序以使子命令能正确调用，例如：\n\nnode -r ts-node/register pm.ts\n\n\n1\n\n\n\n# createCommand()\n\n使用这个工厂方法可以创建新命令，此时不需要使用new，如\n\nconst { createCommand } = require('commander');\nconst program = createCommand();\n\n\n1\n2\n\n\ncreateCommand同时也是Command对象的一个方法，可以创建一个新的命令（而非子命令），使用.command()创建子命令时内部会调用该方法，具体使用方式可参考 custom-command-class.js。\n\n\n# Node 选项，如 --harmony\n\n要使用--harmony等选项有以下两种方式：\n\n * 在子命令脚本中加上#!/usr/bin/env node --harmony。注：Windows 系统不支持；\n * 调用时加上--harmony参数，例如node --harmony examples/pm publish。--harmony选项在开启子进程时仍会保留。\n\n\n# 调试子命令\n\n一个可执行的子命令会作为单独的子进程执行。\n\n如果使用 node inspector 的node -inspect等命令来调试可执行命令，对于生成的子命令，inspector 端口会递增 1。\n\n如果想使用 VSCode 调试，则需要在launch.json配置文件里设置\"autoAttachChildProcesses\": true。\n\n\n# 显示错误\n\n你可用于针对自己的错误情况调用 Commander 错误处理。（另请参阅下一节有关退出处理的内容）\n\n除了错误消息，你还可以选择指定 exitCode（与 process.exit 一起使用）和 code（与 CommanderError 一起使用）\n\nprogram.error('Password must be longer than four characters');\nprogram.error('Custom processing has failed', { exitCode: 2, code: 'my.custom.error' });\n\n\n1\n2\n\n\n\n# 重写退出和输出\n\n默认情况下，在检测到错误、打印帮助信息或版本信息时 Commander 会调用process.exit方法。其默认实现会抛出一个CommanderError，可以重写该方法并提供一个回调函数（可选）。\n\n回调函数的参数为CommanderError，属性包括 Number 型的exitCode、String 型的code和message。子命令完成调用后会开始异步处理。正常情况下，打印错误信息、帮助信息或版本信息不会被重写影响，因为重写会发生在打印之后。\n\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // 自定义处理...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nCommander 默认用作命令行应用，其输出写入 stdout 和 stderr。 对于其他应用类型，这一行为可以修改。并且可以修改错误信息的展示方式。\n\n示例代码：configure-output.js\n\nfunction errorColor(str) {\n  // 添加 ANSI 转义字符，以将文本输出为红色\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // 此处使输出变得容易区分\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // 将错误高亮显示\n    outputError: (str, write) => write(errorColor(str))\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 其他文档\n\n请参考关于如下话题的其他文档：\n\n * 不再推荐使用的功能。这些功能仍受到支持，以保证向后兼容。\n * 可变参数的选项\n\n\n# 支持\n\n当前版本的 Commander 在 LTS 版本的 Node.js 上完全支持。并且至少需要 v14。 （使用更低版本 Node.js 的用户建议安装更低版本的 Commander）\n\n社区支持请访问项目的 Issues。\n\n\n# 企业使用 Commander\n\n作为 Tidelift 订阅的一部分。\n\nCommander 和很多其他包的维护者已与 Tidelift 合作，面向企业提供开源依赖的商业支持与维护。企业可以向相关依赖包的维护者支付一定的费用，帮助企业节省时间，降低风险，改进代码运行情况。了解更多",normalizedContent:"# commander.js\n\n\n\n完整的 node.js 命令行解决方案。\n\n使用其他语言阅读：english | 简体中文\n\n * commander.js\n   * 安装\n   * 快速开始\n   * 声明 program 变量\n   * 选项\n     * 常用选项类型，boolean 型选项和带参数的选项\n     * 选项的默认值\n     * 其他的选项类型，取反选项，以及可选参数的选项\n     * 必填选项\n     * 变长参数选项\n     * 版本选项\n     * 其他选项配置\n     * 自定义选项处理\n   * 命令\n     * 命令参数\n       * 其他参数配置\n       * 自定义参数处理\n     * 处理函数\n     * 独立的可执行（子）命令\n     * 生命周期钩子\n   * 自动化帮助信息\n     * 自定义帮助\n     * 在出错后展示帮助信息\n     * 使用代码展示帮助信息\n     * .name\n     * .usage\n     * .description 和 .summary\n     * .helpoption(flags, description)\n     * .addhelpcommand()\n     * 其他帮助配置\n   * 自定义事件监听\n   * 零碎知识\n     * .parse() 和 .parseasync()\n     * 解析配置\n     * 作为属性的遗留选项\n     * typescript\n     * createcommand()\n     * node 选项，如 --harmony\n     * 调试子命令\n     * 显示错误\n     * 重写退出和输出\n     * 其他文档\n   * 支持\n     * 企业使用 commander\n\n关于本文档中使用的术语，请见术语表\n\n\n# 安装\n\nnpm install commander\n\n\n1\n\n\n\n# 快速开始\n\n编写代码来描述你的命令行界面。 commander 负责将参数解析为选项和命令参数，为问题显示使用错误，并实现一个有帮助的系统。\n\ncommander 是严格的，并且会针对无法识别的选项显示错误。 两种最常用的选项类型是布尔选项，和从参数中获取值的选项。\n\n示例代码：split.js\n\nconst { program } = require('commander');\n\nprogram\n  .option('--first')\n  .option('-s, --separator <char>');\n\nprogram.parse();\n\nconst options = program.opts();\nconst limit = options.first ? 1 : undefined;\nconsole.log(program.args[0].split(options.separator, limit));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n$ node split.js -s / --fits a/b/c\nerror: unknown option '--fits'\n(did you mean --first?)\n$ node split.js -s / --first a/b/c\n[ 'a' ]\n\n\n1\n2\n3\n4\n5\n\n\n这是一个使用子命令并带有帮助描述的更完整的程序。在多命令程序中，每个命令（或命令的独立可执行文件）都有一个操作处理程序。\n\n示例代码：string-util.js\n\nconst { command } = require('commander');\nconst program = new command();\n\nprogram\n  .name('string-util')\n  .description('cli to some javascript string utilities')\n  .version('0.8.0');\n\nprogram.command('split')\n  .description('split a string into substrings and display as an array')\n  .argument('<string>', 'string to split')\n  .option('--first', 'display just the first substring')\n  .option('-s, --separator <char>', 'separator character', ',')\n  .action((str, options) => {\n    const limit = options.first ? 1 : undefined;\n    console.log(str.split(options.separator, limit));\n  });\n\nprogram.parse();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n$ node string-util.js help split\nusage: string-util split [options] <string>\n\nsplit a string into substrings and display as an array.\n\narguments:\n  string                  string to split\n\noptions:\n  --first                 display just the first substring\n  -s, --separator <char>  separator character (default: \",\")\n  -h, --help              display help for command\n\n$ node string-util.js split --separator=/ a/b/c\n[ 'a', 'b', 'c' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n更多示例可以在 examples 目录中找到。\n\n\n# 声明 program 变量\n\n为简化使用，commander 提供了一个全局对象。本文档的示例代码均按此方法使用：\n\n// commonjs (.cjs)\nconst { program } = require('commander');\n\n\n1\n2\n\n\n如果程序较为复杂，用户需要以多种方式来使用 commander，如单元测试等。创建本地 command 对象是一种更好的方式：\n\n// commonjs (.cjs)\nconst { command } = require('commander');\nconst program = new command();\n\n\n1\n2\n3\n\n\n// ecmascript (.mjs)\nimport { command } from 'commander';\nconst program = new command();\n\n\n1\n2\n3\n\n\n// typescript (.ts)\nimport { command } from 'commander';\nconst program = new command();\n\n\n1\n2\n3\n\n\n\n# 选项\n\ncommander 使用.option()方法来定义选项，同时可以附加选项的简介。每个选项可以定义一个短选项名称（-后面接单个字符）和一个长选项名称（--后面接一个或多个单词），使用逗号、空格或|分隔。\n\n解析后的选项可以通过command对象上的.opts()方法获取，同时会被传递给命令处理函数。\n\n对于多个单词的长选项，选项名会转为驼峰命名法（camel-case），例如--template-engine选项可通过program.opts().templateengine获取。\n\n选项及其选项参数可以用空格分隔，也可以组合成同一个参数。选项参数可以直接跟在短选项之后，也可以在长选项后面加上 =。\n\nserve -p 80\nserve -p80\nserve --port 80\nserve --port=80\n\n\n1\n2\n3\n4\n\n\n--可以标记选项的结束，后续的参数均不会被命令解释，可以正常使用。\n\n默认情况下，选项在命令行中的顺序不固定，一个选项可以在其他参数之前或之后指定。\n\n当.opts()不够用时，还有其他相关方法：\n\n * .optswithglobals()返回合并的本地和全局选项值\n * .getoptionvalue()和.setoptionvalue()操作单个选项的值\n * .getoptionvaluesource()和.setoptionvaluewithsource()包括选项值的来源\n\n\n# 常用选项类型，boolean 型选项和带参数选项\n\n有两种最常用的选项，一类是 boolean 型选项，选项无需配置参数，另一类选项则可以设置参数（使用尖括号声明在该选项后，如--expect <value>）。如果在命令行中不指定具体的选项及参数，则会被定义为undefined。\n\n示例代码：options-common.js\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzatype) console.log(`- ${options.pizzatype}`);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzatype: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n多个布尔短选项可以在破折号之后组合在一起，并且可以跟一个取值的单一选项。 例如 -d -s -p cheese 可以写成 -ds -p cheese 甚至 -dsp cheese。\n\n具有预期选项参数的选项是贪婪的，并且无论值如何，都会消耗参数。 所以 --id -xyz 读取 -xyz 作为选项参数。\n\n通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中。该方法的参数是可选的，默认值为process.argv。\n\n\n# 选项的默认值\n\n选项可以设置一个默认值。\n\n示例代码：options-defaults.js\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n\n\n1\n2\n3\n4\n5\n6\n\n\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n\n\n1\n2\n3\n4\n\n\n\n# 其他的选项类型，取反选项，以及可选参数的选项\n\n可以定义一个以no-开头的 boolean 型长选项。在命令行中使用该选项时，会将对应选项的值置为false。当只定义了带no-的选项，未定义对应不带no-的选项时，该选项的默认值会被置为true。\n\n如果已经定义了--foo，那么再定义--no-foo并不会改变它本来的默认值。\n\n示例代码：options-negatable.js\n\nprogram\n  .option('--no-sauce', 'remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst saucestr = options.sauce ? 'sauce' : 'no sauce';\nconst cheesestr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`you ordered a pizza with ${saucestr} and ${cheesestr}`);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n$ pizza-options\nyou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nyou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nyou ordered a pizza with no sauce and no cheese\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n选项的参数使用方括号声明表示参数是可选参数（如--optional [value]）。该选项在不带参数时可用作 boolean 选项，在带有参数时则从参数中得到值。\n\n示例代码：options-boolean-or-value.js\n\nprogram\n  .option('-c, --cheese [type]', 'add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n\n\n1\n2\n3\n4\n5\n6\n\n\n带有可选选项参数的选项不是贪婪的，并且会忽略以破折号开头的参数。因此对于--id -5，id表现为布尔选项，但如果需要，您可以使用组合形式，例如 --id=-5。\n\n关于可能有歧义的用例，请见可变参数的选项。\n\n\n# 必填选项\n\n通过.requiredoption()方法可以设置选项为必填。必填选项要么设有默认值，要么必须在命令行中输入，对应的属性字段在解析时必定会有赋值。该方法其余参数与.option()一致。\n\n示例代码：options-required.js\n\nprogram\n  .requiredoption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n\n\n1\n2\n3\n4\n\n\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n\n\n1\n2\n\n\n\n# 变长参数选项\n\n定义选项时，可以通过使用...来设置参数为可变长参数。在命令行中，用户可以输入多个参数，解析后会以数组形式存储在对应属性字段中。在输入下一个选项前（-或--开头），用户输入的指令均会被视作变长参数。与普通参数一样的是，可以通过--标记当前命令的结束。\n\n示例代码：options-variadic.js\n\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('options: ', program.opts());\nconsole.log('remaining arguments: ', program.args);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$ collect -n 1 2 3 --letter a b c\noptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nremaining arguments:  []\n$ collect --letter=a -n80 operand\noptions:  { number: [ '80' ], letter: [ 'a' ] }\nremaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\noptions:  { number: [ '1', '2', '3' ], letter: true }\nremaining arguments:  [ 'operand' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n关于可能有歧义的用例，请见可变参数的选项。\n\n\n# 版本选项\n\n.version()方法可以设置版本，其默认选项为-v和--version，设置了版本后，命令行会输出当前的版本号。\n\nprogram.version('0.0.1');\n\n\n1\n\n\n$ ./examples/pizza -v\n0.0.1\n\n\n1\n2\n\n\n版本选项也支持自定义设置选项名称，可以在.version()方法里再传递一些参数（长选项名称、描述信息），用法与.option()方法类似。\n\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n\n\n1\n\n\n\n# 其他选项配置\n\n大多数情况下，选项均可通过.option()方法添加。但对某些不常见的用例，也可以直接构造option对象，对选项进行更详尽的配置。\n\n示例代码：options-extra.js, options-env.js, options-conflicts.js, options-implies.js\n\nprogram\n  .addoption(new option('-s, --secret').hidehelp())\n  .addoption(new option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addoption(new option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))\n  .addoption(new option('-p, --port <number>', 'port number').env('port'))\n  .addoption(new option('--donate [amount]', 'optional donation in dollars').preset('20').argparser(parsefloat))\n  .addoption(new option('--disable-server', 'disables the server').conflicts('port'))\n  .addoption(new option('--free-drink', 'small drink included free ').implies({ drink: 'small' }));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$ extra --help\nusage: help [options]\n\noptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -p, --port <number>    port number (env: port)\n  --donate [amount]      optional donation in dollars (preset: \"20\")\n  --disable-server       disables the server\n  --free-drink           small drink included free\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. allowed choices are small, medium, large.\n\n$ port=80 extra --donate --free-drink\noptions:  { timeout: 60, donate: 20, port: '80', freedrink: true, drink: 'small' }\n\n$ extra --disable-server --port 8000\nerror: option '--disable-server' cannot be used with option '-p, --port <number>'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 自定义选项处理\n\n选项的参数可以通过自定义函数来处理，该函数接收两个参数，即用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的选项参数值。\n\n自定义函数适用场景包括参数类型转换，参数暂存，或者其他自定义处理的场景。\n\n可以在自定义函数的后面设置选项参数的默认值或初始值（例如参数用列表暂存时需要设置一个初始空列表)。\n\n示例代码：options-custom-processing.js\n\nfunction myparseint(value, dummyprevious) {\n  // parseint 参数为字符串和进制数\n  const parsedvalue = parseint(value, 10);\n  if (isnan(parsedvalue)) {\n    throw new commander.invalidargumenterror('not a number.');\n  }\n  return parsedvalue;\n}\n\nfunction increaseverbosity(dummyvalue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaseparatedlist(value, dummyprevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parsefloat)\n  .option('-i, --integer <number>', 'integer argument', myparseint)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseverbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaseparatedlist)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 命令\n\n通过.command()或.addcommand()可以配置命令，有两种实现方式：为命令绑定处理函数，或者将命令单独写成一个可执行文件（详述见后文）。子命令支持嵌套（示例代码）。\n\n.command()的第一个参数为命令名称。命令参数可以跟在名称后面，也可以用.argument()单独指定。参数可为必选的（尖括号表示）、可选的（方括号表示）或变长参数（点号表示，如果使用，只能是最后一个参数）。\n\n使用.addcommand()向program增加配置好的子命令。\n\n例如:\n\n// 通过绑定处理函数实现命令（这里的指令描述为放在`.command`中）\n// 返回新生成的命令（即该子命令）以供继续配置\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// 通过独立的的可执行文件实现命令 (注意这里指令描述是作为`.command`的第二个参数)\n// 返回最顶层的命令以供继续添加子命令\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// 分别装配命令\n// 返回最顶层的命令以供继续添加子命令\nprogram\n  .addcommand(build.makebuildcommand());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n使用.command()和addcommand()来指定选项的相关设置。当设置hidden: true时，该命令不会打印在帮助信息里。当设置isdefault: true时，若没有指定其他子命令，则会默认执行这个命令（样例）。\n\n\n# 命令参数\n\n如上所述，子命令的参数可以通过.command()指定。对于有独立可执行文件的子命令来说，参数只能以这种方法指定。而对其他子命令，参数也可用以下方法。\n\n在command对象上使用.argument()来按次序指定命令参数。该方法接受参数名称和参数描述。参数可为必选的（尖括号表示，例如<required>）或可选的（方括号表示，例如[optional]）。\n\n示例代码：argument.js\n\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n在参数名后加上...来声明可变参数，且只有最后一个参数支持这种用法。可变参数会以数组的形式传递给处理函数。例如：\n\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.foreach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n有一种便捷方式可以一次性指定多个参数，但不包含参数描述：\n\nprogram\n  .arguments('<username> <password>');\n\n\n1\n2\n\n\n# 其他参数配置\n\n有少数附加功能可以直接构造argument对象，对参数进行更详尽的配置。\n\n示例代码：arguments-extra.js\n\nprogram\n  .addargument(new commander.argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addargument(new commander.argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n\n\n1\n2\n3\n\n\n# 自定义参数处理\n\n选项的参数可以通过自定义函数来处理（与处理选项参数时类似），该函数接收两个参数：用户新输入的参数值和当前已有的参数值（即上一次调用自定义处理函数后的返回值），返回新的命令参数值。\n\n处理后的参数值会传递给命令处理函数，同时可通过.processedargs获取。\n\n可以在自定义函数的后面设置命令参数的默认值或初始值。\n\n示例代码：arguments-custom-processing.js\n\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myparseint)\n  .argument('[second]', 'integer argument', myparseint, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 处理函数\n\n命令处理函数的参数，为该命令声明的所有参数，除此之外还会附加两个额外参数：一个是解析出的选项，另一个则是该命令对象自身。\n\n示例代码：thank.js\n\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`thank-you ${title}${name}`);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果你愿意，你可以跳过为处理函数声明参数直接使用 command。 this 关键字设置为运行命令，可以在函数表达式中使用（但不能从箭头函数中使用）。\n\n示例代码：action-this.js\n\nprogram\n  .command('serve')\n  .argument('<script>')\n  .option('-p, --port <number>', 'port number', 80)\n  .action(function() {\n    console.error('run script %s on port %s', this.args[0], this.opts().port);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n处理函数支持async，相应的，需要使用.parseasync代替.parse。\n\nasync function run() { /* 在这里编写代码 */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseasync(process.argv);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用命令时，所给的选项和命令参数会被验证是否有效。凡是有未知的选项，或缺少所需的命令参数，都会报错。 如要允许使用未知的选项，可以调用.allowunknownoption()。默认情况下，传入过多的参数并不报错，但也可以通过调用.allowexcessarguments(false)来启用过多参数的报错。\n\n\n# 独立的可执行（子）命令\n\n当.command()带有描述参数时，就意味着使用独立的可执行文件作为子命令。 commander 会尝试在入口脚本的目录中搜索名称组合为 command-subcommand 的文件，如以下示例中的 pm-install 或 pm-search。搜索包括尝试常见的文件扩展名，如.js。 你可以使用 executablefile 配置选项指定自定义名称（和路径）。 你可以使用 .executabledir() 为子命令指定自定义搜索目录。\n\n你可以在可执行文件里处理（子）命令的选项，而不必在顶层声明它们。\n\n示例代码：pm\n\nprogram\n  .name('pm')\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executablefile: 'myupdatesubcommand' })\n  .command('list', 'list packages installed', { isdefault: true });\n\nprogram.parse(process.argv);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果该命令需要支持全局安装，请确保有对应的权限，例如755。\n\n\n# 生命周期钩子\n\n可以在命令的生命周期事件上设置回调函数。\n\n示例代码：hook.js\n\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preaction', (thiscommand, actioncommand) => {\n    if (thiscommand.opts().trace) {\n      console.log(`about to call action handler for subcommand: ${actioncommand.name()}`);\n      console.log('arguments: %o', actioncommand.args);\n      console.log('options: %o', actioncommand.opts());\n    }\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n钩子函数支持async，相应的，需要使用.parseasync代替.parse。一个事件上可以添加多个钩子。\n\n支持的事件有：\n\n事件名称                    触发时机                 参数列表\npreaction, postaction   本命令或其子命令的处理函数执行前/后   (thiscommand, actioncommand)\npresubcommand           在其直接子命令解析之前调用        (thiscommand, subcommand)\n\n\n# 自动化帮助信息\n\n帮助信息是 commander 基于你的程序自动生成的，默认的帮助选项是-h,--help。\n\n示例代码：pizza\n\n$ node ./examples/pizza --help\nusage: pizza [options]\n\nan application for pizza ordering\n\noptions:\n  -p, --peppers        add peppers\n  -c, --cheese <type>  add the specified type of cheese (default: \"marble\")\n  -c, --no-cheese      you do not want any cheese\n  -h, --help           display help for command\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果你的命令中包含了子命令，会默认添加help命令，它可以单独使用，也可以与子命令一起使用来提示更多帮助信息。用法与shell程序类似：\n\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n\n\n1\n2\n3\n4\n5\n\n\n\n# 自定义帮助\n\n可以添加额外的帮助信息，与内建的帮助一同展示。\n\n示例代码：custom-help\n\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addhelptext('after', `\n\nexample call:\n  $ custom-help --help`);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n将会输出以下的帮助信息：\n\nusage: custom-help [options]\n\noptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nexample call:\n  $ custom-help --help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n位置参数对应的展示方式如下：\n\n * beforeall：作为全局标头栏展示\n * before：在内建帮助信息之前展示\n * after：在内建帮助信息之后展示\n * afterall：作为全局末尾栏展示\n\nbeforeall和afterall两个参数作用于命令及其所有的子命令。\n\n第二个参数可以是一个字符串，也可以是一个返回字符串的函数。对后者而言，为便于使用，该函数可以接受一个上下文对象，它有如下属性：\n\n * error：boolean 值，代表该帮助信息是否由于不当使用而展示\n * command：代表展示该帮助信息的command对象\n\n\n# 在出错后展示帮助信息\n\n默认情况下，出现命令用法错误时只会显示错误信息。可以选择在出错后展示完整的帮助或自定义的帮助信息。\n\nprogram.showhelpaftererror();\n// 或者\nprogram.showhelpaftererror('(add --help for additional information)');\n\n\n1\n2\n3\n\n\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n\n\n1\n2\n3\n\n\n默认行为是在出现未知命令或选项错误后建议正确拼写。你可以禁用此功能。\n\nprogram.showsuggestionaftererror(false);\n\n\n1\n\n\n$ pizza --hepl\nerror: unknown option '--hepl'\n(did you mean --help?)\n\n\n1\n2\n3\n\n\n\n# 使用代码展示帮助信息\n\n.help()：展示帮助信息并退出。可以通过传入{ error: true }来让帮助信息从 stderr 输出，并以代表错误的状态码退出程序。\n\n.outputhelp()：只展示帮助信息，不退出程序。传入{ error: true }可以让帮助信息从 stderr 输出。\n\n.helpinformation()：得到字符串形式的内建的帮助信息，以便用于自定义的处理及展示。\n\n\n# .name\n\n命令名称出现在帮助中，也用于定位独立的可执行子命令。\n\n你可以使用 .name() 或在 command 构造函数中指定程序名称。对于 program ，commander 会使用传递给 .parse() 的完整参数中的脚本名称。但是，脚本名称会根据程序的启动方式而有所不同，因此您可能希望明确指定它。\n\nprogram.name('pizza');\nconst pm = new command('pm');\n\n\n1\n2\n\n\n使用 .command() 指定时，子命令会获得名称。如果您自己创建子命令以与 .addcommand() 一起使用，则使用 .name() 或在 command 构造函数中设置名称。\n\n\n# .usage\n\n通过这个选项可以修改帮助信息的首行提示，例如：\n\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n\n\n1\n2\n3\n\n\n帮助信息开头如下：\n\nusage: my-command [global options] command\n\n\n1\n\n\n\n# .description 和 .summary\n\ndescription 出现在命令的帮助中。当列为程序的子命令时，你可以选择提供更短的 summary 以供使用。\n\nprogram\n  .command(\"duplicate\")\n  .summary(\"make a copy\")\n  .description(`make a copy of the current project.\nthis may require additional disk space.\n  `);\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# .helpoption(flags, description)\n\n每一个命令都带有一个默认的帮助选项。你可以改变 flags 和 description 参数。传入 false 则会禁用内建的帮助信息。\n\nprogram\n  .helpoption('-e, --help', 'read more information');\n\n\n1\n2\n\n\n\n# .addhelpcommand()\n\n如果一个命令拥有子命令，它也将有一个默认的帮助子命令。使用.addhelpcommand()和.addhelpcommand(false)可以打开或关闭默认的帮助子命令。\n\n也可以自定义名字和描述：\n\nprogram.addhelpcommand('assist [command]', 'show assistance');\n\n\n1\n\n\n\n# 其他帮助配置\n\n内建帮助信息通过help类进行格式化。如有需要，可以使用.configurehelp()来更改其数据属性和方法，或使用.createhelp()来创建子类，从而配置help类的行为。\n\n数据属性包括：\n\n * helpwidth：指明帮助信息的宽度。可在单元测试中使用。\n * sortsubcommands：以字母序排列子命令\n * sortoptions：以字母序排列选项\n\n可以得到可视化的参数列表，选项列表，以及子命令列表。列表的每个元素都具有_term_和_description_属性，并可以对其进行格式化。关于其使用方式，请参考.formathelp()。\n\n示例代码：configure-help.js\n\nprogram.configurehelp({\n  sortsubcommands: true,\n  subcommandterm: (cmd) => cmd.name() // 显示名称，而非用法\n});\n\n\n1\n2\n3\n4\n\n\n\n# 自定义事件监听\n\n监听命令和选项可以执行自定义函数。\n\nprogram.on('option:verbose', function () {\n  process.env.verbose = this.opts().verbose;\n});\n\n\n1\n2\n3\n\n\n\n# 零碎知识\n\n\n# .parse() 和 .parseasync()\n\n.parse的第一个参数是要解析的字符串数组，也可以省略参数而使用process.argv。\n\n如果参数遵循与 node 不同的约定，可以在第二个参数中传递from选项：\n\n * node：默认值，argv[0]是应用，argv[1]是要跑的脚本，后续为用户参数；\n * electron：argv[1]根据 electron 应用是否打包而变化；\n * user：来自用户的所有参数。\n\n例如：\n\nprogram.parse(process.argv); // 指明，按 node 约定\nprogram.parse(); // 默认，自动识别 electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n\n\n1\n2\n3\n\n\n\n# 解析配置\n\n当默认的解析方式无法满足需要，commander 也提供了其他的解析行为。\n\n默认情况下，程序的选项在子命令前后均可被识别。如要只允许选项出现在子命令之前，可以使用.enablepositionaloptions()。这样可以在命令和子命令中使用意义不同的同名选项。\n\n示例代码：positional-options.js\n\n当启用了带顺序的选项解析，以下程序中，-b选项在第一行中将被解析为程序顶层的选项，而在第二行中则被解析为子命令的选项：\n\nprogram -b subcommand\nprogram subcommand -b\n\n\n1\n2\n\n\n默认情况下，选项在命令参数前后均可被识别。如要使选项仅在命令参数前被识别，可以使用.passthroughoptions()。这样可以把参数和跟随的选项传递给另一程序，而无需使用--来终止选项解析。 如要在子命令中使用此功能，必须首先启用带顺序的选项解析。\n\n示例代码：pass-through-options.js\n\n当启用此功能时，以下程序中，--port=80在第一行中会被解析为程序的选项，而在第二行中则会被解析为一个命令参数：\n\nprogram --port=80 arg\nprogram arg --port=80\n\n\n1\n2\n\n\n默认情况下，使用未知选项会提示错误。如要将未知选项视作普通命令参数，并继续处理其他部分，可以使用.allowunknownoption()。这样可以混用已知和未知的选项。\n\n默认情况下，传入过多的命令参数并不会报错。可以使用.allowexcessarguments(false)来启用这一检查。\n\n\n# 作为属性的遗留选项\n\n在 commander 7 以前，选项的值是作为属性存储在命令对象上的。 这种处理方式便于实现，但缺点在于，选项可能会与command的已有属性相冲突。通过使用.storeoptionsasproperties()，可以恢复到这种旧的处理方式，并可以不加改动地继续运行遗留代码。\n\nprogram\n  .storeoptionsasproperties()\n  .option('-d, --debug')\n  .action((commandandoptions) => {\n    if (commandandoptions.debug) {\n      console.error(`called ${commandandoptions.name()}`);\n    }\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# typescript\n\n如果你使用 ts-node，并有.ts文件作为独立可执行文件，那么需要用 node 运行你的程序以使子命令能正确调用，例如：\n\nnode -r ts-node/register pm.ts\n\n\n1\n\n\n\n# createcommand()\n\n使用这个工厂方法可以创建新命令，此时不需要使用new，如\n\nconst { createcommand } = require('commander');\nconst program = createcommand();\n\n\n1\n2\n\n\ncreatecommand同时也是command对象的一个方法，可以创建一个新的命令（而非子命令），使用.command()创建子命令时内部会调用该方法，具体使用方式可参考 custom-command-class.js。\n\n\n# node 选项，如 --harmony\n\n要使用--harmony等选项有以下两种方式：\n\n * 在子命令脚本中加上#!/usr/bin/env node --harmony。注：windows 系统不支持；\n * 调用时加上--harmony参数，例如node --harmony examples/pm publish。--harmony选项在开启子进程时仍会保留。\n\n\n# 调试子命令\n\n一个可执行的子命令会作为单独的子进程执行。\n\n如果使用 node inspector 的node -inspect等命令来调试可执行命令，对于生成的子命令，inspector 端口会递增 1。\n\n如果想使用 vscode 调试，则需要在launch.json配置文件里设置\"autoattachchildprocesses\": true。\n\n\n# 显示错误\n\n你可用于针对自己的错误情况调用 commander 错误处理。（另请参阅下一节有关退出处理的内容）\n\n除了错误消息，你还可以选择指定 exitcode（与 process.exit 一起使用）和 code（与 commandererror 一起使用）\n\nprogram.error('password must be longer than four characters');\nprogram.error('custom processing has failed', { exitcode: 2, code: 'my.custom.error' });\n\n\n1\n2\n\n\n\n# 重写退出和输出\n\n默认情况下，在检测到错误、打印帮助信息或版本信息时 commander 会调用process.exit方法。其默认实现会抛出一个commandererror，可以重写该方法并提供一个回调函数（可选）。\n\n回调函数的参数为commandererror，属性包括 number 型的exitcode、string 型的code和message。子命令完成调用后会开始异步处理。正常情况下，打印错误信息、帮助信息或版本信息不会被重写影响，因为重写会发生在打印之后。\n\nprogram.exitoverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // 自定义处理...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\ncommander 默认用作命令行应用，其输出写入 stdout 和 stderr。 对于其他应用类型，这一行为可以修改。并且可以修改错误信息的展示方式。\n\n示例代码：configure-output.js\n\nfunction errorcolor(str) {\n  // 添加 ansi 转义字符，以将文本输出为红色\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureoutput({\n    // 此处使输出变得容易区分\n    writeout: (str) => process.stdout.write(`[out] ${str}`),\n    writeerr: (str) => process.stdout.write(`[err] ${str}`),\n    // 将错误高亮显示\n    outputerror: (str, write) => write(errorcolor(str))\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 其他文档\n\n请参考关于如下话题的其他文档：\n\n * 不再推荐使用的功能。这些功能仍受到支持，以保证向后兼容。\n * 可变参数的选项\n\n\n# 支持\n\n当前版本的 commander 在 lts 版本的 node.js 上完全支持。并且至少需要 v14。 （使用更低版本 node.js 的用户建议安装更低版本的 commander）\n\n社区支持请访问项目的 issues。\n\n\n# 企业使用 commander\n\n作为 tidelift 订阅的一部分。\n\ncommander 和很多其他包的维护者已与 tidelift 合作，面向企业提供开源依赖的商业支持与维护。企业可以向相关依赖包的维护者支付一定的费用，帮助企业节省时间，降低风险，改进代码运行情况。了解更多",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"lerna",frontmatter:{title:"lerna",date:"2023-01-17T13:09:01.000Z",permalink:"/pages/147a7a/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030108.lerna.html",relativePath:"10.大前端/1030.Node/1030108.lerna.md",key:"v-7e248577",path:"/pages/147a7a/",headers:[{level:2,title:"解决的问题",slug:"解决的问题",normalizedTitle:"解决的问题",charIndex:2},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:144}],headersStr:"解决的问题 使用",content:"# 解决的问题\n\n重复性\n\n * 多package 本地link\n * 多 package 依赖安装\n * 多 package 单元测试\n * 多 package 代码提交\n * 多 package 代码发布\n\n版本一致性\n\n * 发布时版本一致性\n * 发布后相互依赖版本升级\n\n\n# 使用\n\n全局或者开发依赖中安装lerna\n\nnpm init 初始化node项目后, 使用lerna init初始化\n\nlerna strapboot: 安装所有依赖\n\nlearn link: 为相互应用的包添加软连接, 如:\n\nlerna exec: 在每个包的跟路径下执行命令: 如lerna exec -- rm -rf node_modules\n\nlerna run: 执行npm命令\n\n发布上线\n\nlerna version: 版本升级, 需要提交并且需要有远程主分支\n\n\n\n如果遇到升级问题: 删除项目跟路径下的package-lock.json, 再lerna clear lerna init lerna bootstrap 提交代码, 最后在lerna version , 或者需要在.gitignore文件下放出*# packages/**/package-lock.json*\n\nlerna changed: 查看哪些包内容变更, 如图:\n\nlerna diff:",normalizedContent:"# 解决的问题\n\n重复性\n\n * 多package 本地link\n * 多 package 依赖安装\n * 多 package 单元测试\n * 多 package 代码提交\n * 多 package 代码发布\n\n版本一致性\n\n * 发布时版本一致性\n * 发布后相互依赖版本升级\n\n\n# 使用\n\n全局或者开发依赖中安装lerna\n\nnpm init 初始化node项目后, 使用lerna init初始化\n\nlerna strapboot: 安装所有依赖\n\nlearn link: 为相互应用的包添加软连接, 如:\n\nlerna exec: 在每个包的跟路径下执行命令: 如lerna exec -- rm -rf node_modules\n\nlerna run: 执行npm命令\n\n发布上线\n\nlerna version: 版本升级, 需要提交并且需要有远程主分支\n\n\n\n如果遇到升级问题: 删除项目跟路径下的package-lock.json, 再lerna clear lerna init lerna bootstrap 提交代码, 最后在lerna version , 或者需要在.gitignore文件下放出*# packages/**/package-lock.json*\n\nlerna changed: 查看哪些包内容变更, 如图:\n\nlerna diff:",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"制作自己的npm包",frontmatter:{title:"制作自己的npm包",date:"2022-08-28T22:42:48.000Z",permalink:"/pages/34a68b/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030105.%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84npm%E5%8C%85.html",relativePath:"10.大前端/1030.Node/1030105.制作自己的npm包.md",key:"v-2718b826",path:"/pages/34a68b/",headers:[{level:3,title:"开发技巧",slug:"开发技巧",normalizedTitle:"开发技巧",charIndex:663}],headersStr:"开发技巧",content:"在编写脚本使, 在文件开始位置添加#!/usr/bin/env node 以告诉系统以node 来运行改脚本文件\n\nnode test.js 等价于 /usr/bin/env node test.js\n\n可以以软连接的形式创建你特有的全局命令, 到/Users/izhaong/.nvm/versions/node/v14.18.2/bin下ln -s /..*/.....test.js izhaong , 这样就可以直接运行izhaong以执行test.js 文件了\n\n可以为全局命令创建别名: 到usr/node/bin下 :ls ./izhaong izhaong2 ls 旧脚本地址 新脚本名字\n\n在node/bin目录下(我的是/Users/izhaong/.nvm/versions/node/v14.18.2/bin , ll就能看到所有的命令以及它的软连接\n\n本地开发调试: 进入路径(包含包名称), 全局安装该包, 会把软连接指向当前目录下的包; 第二种方式就是cmd进入包中, 输入npm link, 就会创建软连接指向该包\n\n开发调试技巧: 当你项目存在多个包时, 通过npm i *** -g 添加软链, 也可以通过在包下npm link , 然后直接在项目中npm link **, 代码引用即可, 记得包加上 package/main入口文件, 当想要取消掉本地的包时, 需要在包下 npm unlink , 确保没有问题, 去 usr/node/node_modules/ 下面去看看\n\n\n# 开发技巧\n\n链接本地库\n\ncd your-lib-dir\nnpm link\t\n\n\n1\n2\n\n\n取消链接本地库文件:\n\ncd your-1ib-dir \nnpm unlink\ncd your-cli-dir\n\n# link 存在\nnpm unlink your-lib \n\n# link 不存在\nrm -rf node modules \nnpm instal1 you-lib -S\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n理解 npm link:\n\n * npm link your-lib:将当前项目中 node modules 下指定的库文件链接到 node 全局 node modules下的库文件\n\n * npm link:将当前项目链接到 node 全局 node_ modules 中作为一个库文件,并解析 bin 配置创建可执行文件\n\n理解 npm unlink:\n\n * npm unlink:将当前项目从 node 全局 node_ modules 中移除\n\n * npm unlink your-1ib:将当前项目中的库文件依赖移除",normalizedContent:"在编写脚本使, 在文件开始位置添加#!/usr/bin/env node 以告诉系统以node 来运行改脚本文件\n\nnode test.js 等价于 /usr/bin/env node test.js\n\n可以以软连接的形式创建你特有的全局命令, 到/users/izhaong/.nvm/versions/node/v14.18.2/bin下ln -s /..*/.....test.js izhaong , 这样就可以直接运行izhaong以执行test.js 文件了\n\n可以为全局命令创建别名: 到usr/node/bin下 :ls ./izhaong izhaong2 ls 旧脚本地址 新脚本名字\n\n在node/bin目录下(我的是/users/izhaong/.nvm/versions/node/v14.18.2/bin , ll就能看到所有的命令以及它的软连接\n\n本地开发调试: 进入路径(包含包名称), 全局安装该包, 会把软连接指向当前目录下的包; 第二种方式就是cmd进入包中, 输入npm link, 就会创建软连接指向该包\n\n开发调试技巧: 当你项目存在多个包时, 通过npm i *** -g 添加软链, 也可以通过在包下npm link , 然后直接在项目中npm link **, 代码引用即可, 记得包加上 package/main入口文件, 当想要取消掉本地的包时, 需要在包下 npm unlink , 确保没有问题, 去 usr/node/node_modules/ 下面去看看\n\n\n# 开发技巧\n\n链接本地库\n\ncd your-lib-dir\nnpm link\t\n\n\n1\n2\n\n\n取消链接本地库文件:\n\ncd your-1ib-dir \nnpm unlink\ncd your-cli-dir\n\n# link 存在\nnpm unlink your-lib \n\n# link 不存在\nrm -rf node modules \nnpm instal1 you-lib -s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n理解 npm link:\n\n * npm link your-lib:将当前项目中 node modules 下指定的库文件链接到 node 全局 node modules下的库文件\n\n * npm link:将当前项目链接到 node 全局 node_ modules 中作为一个库文件,并解析 bin 配置创建可执行文件\n\n理解 npm unlink:\n\n * npm unlink:将当前项目从 node 全局 node_ modules 中移除\n\n * npm unlink your-1ib:将当前项目中的库文件依赖移除",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"lerna - Lerna an Nx",frontmatter:{title:"lerna - Lerna an Nx",date:"2023-02-08T11:35:33.000Z",permalink:"/pages/8c0e85/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030109.lerna%20-%20Lerna%20an%20Nx.html",relativePath:"10.大前端/1030.Node/1030109.lerna - Lerna an Nx.md",key:"v-3046ee2f",path:"/pages/8c0e85/",headers:[{level:2,title:"Lerna",slug:"lerna",normalizedTitle:"lerna",charIndex:2},{level:3,title:"功能",slug:"功能",normalizedTitle:"功能",charIndex:12},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:92},{level:2,title:"Nx",slug:"nx",normalizedTitle:"nx",charIndex:181},{level:3,title:"功能",slug:"功能-2",normalizedTitle:"功能",charIndex:12},{level:3,title:"安装",slug:"安装-2",normalizedTitle:"安装",charIndex:92},{level:2,title:"Nx Cloud",slug:"nx-cloud",normalizedTitle:"nx cloud",charIndex:407},{level:3,title:"功能",slug:"功能-3",normalizedTitle:"功能",charIndex:12},{level:3,title:"费用",slug:"费用",normalizedTitle:"费用",charIndex:467},{level:3,title:"安装",slug:"安装-3",normalizedTitle:"安装",charIndex:92}],headersStr:"Lerna 功能 安装 Nx 功能 安装 Nx Cloud 功能 费用 安装",content:"# Lerna\n\n\n# 功能\n\n 1. 版本 - 自动增加包的版本，生成更新日志信息，创建Github版本等。\n 2. 部署 - 自动创建标记并将包发布到包注册中心，如npm\n\n\n# 安装\n\n * npm install lerna\n * npc lerna init\n\n----------------------------------------\n\n\n# Nx\n\n\n# 功能\n\n 1. 只运行受代码更改影响的任务\n 2. 首先运行必备任务\n 3. 本地缓存任务结果\n 4. 可视化项目图\n 5. Nx Console-Visual Studio代码插件\n\n\n# 安装\n\n * npx lerna add-caching\n * 继续像往常一样使用Lerna\n\n> note\n> \n> lerna run 的一些命令将与旧版本的lerna表现不同。更多细节请参见使用Lerna(由Nx支持)来运行任务。\n\n\n# Nx Cloud\n\n\n# 功能\n\n 1. 跨组织共享缓存的任务结果\n 2. 在代理计算机之间高效地分配任务执行\n\n\n# 费用\n\n对于闭源存储库，每月前500个计算小时是免费的。大多数存储库都不会超过这个限制。之后每计算小时$1。\n\n\n# 安装\n\n * npx nx connect-to-nx-cloud\n * nx generate @nrwl/workspace:ci-workflow(或手动设置CI)\n * 继续像往常一样使用Lerna\n\n\n# 功能",normalizedContent:"# lerna\n\n\n# 功能\n\n 1. 版本 - 自动增加包的版本，生成更新日志信息，创建github版本等。\n 2. 部署 - 自动创建标记并将包发布到包注册中心，如npm\n\n\n# 安装\n\n * npm install lerna\n * npc lerna init\n\n----------------------------------------\n\n\n# nx\n\n\n# 功能\n\n 1. 只运行受代码更改影响的任务\n 2. 首先运行必备任务\n 3. 本地缓存任务结果\n 4. 可视化项目图\n 5. nx console-visual studio代码插件\n\n\n# 安装\n\n * npx lerna add-caching\n * 继续像往常一样使用lerna\n\n> note\n> \n> lerna run 的一些命令将与旧版本的lerna表现不同。更多细节请参见使用lerna(由nx支持)来运行任务。\n\n\n# nx cloud\n\n\n# 功能\n\n 1. 跨组织共享缓存的任务结果\n 2. 在代理计算机之间高效地分配任务执行\n\n\n# 费用\n\n对于闭源存储库，每月前500个计算小时是免费的。大多数存储库都不会超过这个限制。之后每计算小时$1。\n\n\n# 安装\n\n * npx nx connect-to-nx-cloud\n * nx generate @nrwl/workspace:ci-workflow(或手动设置ci)\n * 继续像往常一样使用lerna\n\n\n# 功能",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"lerna - 功能点",frontmatter:{title:"lerna - 功能点",date:"2023-02-08T11:53:38.000Z",permalink:"/pages/6bc0b9/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030110.lerna%20-%20%E5%8A%9F%E8%83%BD%E7%82%B9.html",relativePath:"10.大前端/1030.Node/1030110.lerna - 功能点.md",key:"v-6f25eb68",path:"/pages/6bc0b9/",headers:[{level:2,title:"运行任务",slug:"运行任务",normalizedTitle:"运行任务",charIndex:2},{level:3,title:"定义",slug:"定义",normalizedTitle:"定义",charIndex:75},{level:3,title:"示例仓库",slug:"示例仓库",normalizedTitle:"示例仓库",charIndex:240},{level:3,title:"运行内容",slug:"运行内容",normalizedTitle:"运行内容",charIndex:273},{level:3,title:"同时运行多个任务",slug:"同时运行多个任务",normalizedTitle:"同时运行多个任务",charIndex:699},{level:3,title:"为单个包运行任务",slug:"为单个包运行任务",normalizedTitle:"为单个包运行任务",charIndex:850},{level:3,title:"运行受PR影响的任务",slug:"运行受pr影响的任务",normalizedTitle:"运行受pr影响的任务",charIndex:955},{level:3,title:"控制任务的运行方式",slug:"控制任务的运行方式",normalizedTitle:"控制任务的运行方式",charIndex:1056},{level:3,title:"自动加载 .env文件",slug:"自动加载-env文件",normalizedTitle:"自动加载 .env文件",charIndex:1147},{level:2,title:"版本和发布",slug:"版本和发布",normalizedTitle:"版本和发布",charIndex:1349},{level:3,title:"版本控制",slug:"版本控制",normalizedTitle:"版本控制",charIndex:1696},{level:3,title:"发布到NPM",slug:"发布到npm",normalizedTitle:"发布到npm",charIndex:2604},{level:3,title:"版本控制策略",slug:"版本控制策略",normalizedTitle:"版本控制策略",charIndex:3347},{level:4,title:"固定/锁定模式（默认[）](https://lerna.js.org/docs/features/version-and-publish#fixedlocked-mode-default)",slug:"固定-锁定模式-默认",normalizedTitle:'固定/锁定模式（默认<a href="https://lerna.js.org/docs/features/version-and-publish#fixedlocked-mode-default" target="_blank" rel="noopener noreferrer">）<outboundlink/></a>',charIndex:null},{level:4,title:"独立模式",slug:"独立模式",normalizedTitle:"独立模式",charIndex:3692}],headersStr:"运行任务 定义 示例仓库 运行内容 同时运行多个任务 为单个包运行任务 运行受PR影响的任务 控制任务的运行方式 自动加载 .env文件 版本和发布 版本控制 发布到NPM 版本控制策略 固定/锁定模式（默认[）](https://lerna.js.org/docs/features/version-and-publish#fixedlocked-mode-default) 独立模式",content:'# 运行任务\n\nMonorepos可以有数百甚至数千个项目，所以能够对所有(或部分)项目运行npm脚本是Lerna这样的工具的一个关键特性。\n\n\n# 定义\n\n * Command - 开发者在终端中键入的任何内容 （e.g., lerna run build --scope=header --concurrency=5）\n * Target - npm脚本的名称(e.g., build)\n * Task - npm脚本的调用(e.g., header:build).\n\n\n# 示例仓库\n\n> 例子基于 this repository\n\n\n# 运行内容\n\n每个项目都定义了test和build脚本。\n\nrun:\n\nnpx lerna run build\n\n这将以正确的顺序构建项目: footer and header and then remixapp.\n\n    ✔  header:build (501ms)\n    ✔  footer:build (503ms)\n    ✔  remixapp:build (670ms)\n\n —————————————————————————————————————————————————————————————————————————————\n\n >  Lerna (powered by Nx)   Successfully ran target build for 3 projects (1s)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n请注意，Lerna并不关心每个构建脚本的作用。名称build也不特殊：它只是npm脚本的名称。\n\n\n# 同时运行多个任务\n\n您可以传递一个逗号分隔的目标列表，其中列出了您希望触发并发运行的目标。\n\nnpx lerna run test,build,lint\n\n例如，如果您的任务之间存在依赖关系，例如需要在测试特定包之前运行构建，那么只要您配置了适当的任务管道配置，任务运行器就会为您协调这一点。\n\n\n# 为单个包运行任务\n\n在开发时，您很少运行所有构建或所有测试。相反，您通常只针对正在更改的项目进行操作。例如，您可以这样运行头测试：\n\nnpx lerna run test --scope=header\n\n\n# 运行受PR影响的任务\n\n您还可以为PR中受影响的所有项目运行命令，如下所示：\n\nnpx lerna run test --since=origin/main\n\nLearn more here.\n\n\n# 控制任务的运行方式\n\n要更好地控制执行任务的顺序，请编辑Task Pipeline Configuration。\n\n要加快任务执行速度，请了解如何缓存任务结果和分配任务执行\n\n\n# 自动加载 .env文件\n\n默认情况下，由 Nx 提供支持的现代任务运行器将自动.env为您加载文件。--load-env-files如果您出于任何原因想要禁用此行为，您可以设置为 false。\n\n有关.env默认加载哪些文件的更多详细信息，请参阅：https://nx.dev/recipes/environment-variables/define-environment-variables\n\n\n# 版本和发布\n\nLerna 可以增加您的包的版本以及将您的包发布到 NPM，它提供了多种选项以确保可以适应任何工作流程。\n\n为了展示 Lerna 是如何做到的，我们将查看这个存储库。\n\n> 如果您通过实践学得更好，请克隆 repo 并继续学习。\n\n回购协议包含三个包或项目：\n\n * header（React 组件库）\n * footer（React 组件库）\n * remixapp（使用依赖于header和的 Remix 框架编写的应用程序footer）\n\n我们将发布header和footer包。\n\n> 只发布项目的一个子集是很常见的。有些项目可以是私有的（例如，仅用于测试），有些可以是演示应用程序。在这个 repo 中，remixapp它不是私有的，它只是没有发布到 NPM。\n\n\n# 版本控制\n\nLerna 附带一个version命令，允许您增加包的版本号、提交更改并相应地标记它们。\n\nlerna version --no-private\n\n\n1\n\n\n你会得到以下输出：\n\nlerna notice cli v5.1.2\nlerna info current version 1.0.0\nlerna info Assuming all packages changed\n? Select a new version (currently 1.0.0) (Use arrow keys)\n❯ Patch (1.0.1)\n  Minor (1.1.0)\n  Major (2.0.0)\n  Prepatch (1.0.1-alpha.0)\n  Preminor (1.1.0-alpha.0)\n  Premajor (2.0.0-alpha.0)\n  Custom Prerelease\n  Custom Version\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n信息\n\n请注意，通过传递，我们排除了在其文件--no-private中标记的所有包。private``package.json\n\nLerna 检测当前包，识别当前版本并建议下一个选择。请注意，您也可以像lerna version 1.0.0. 有关版本文档详细信息的更多信息。一旦选择了给定的版本，Lerna 就会package.json用版本号更新，提交更改，添加相应的版本标签（例如v1.0.0）并将提交和标签推送到远程存储库。\n\n包/页脚/package.json\n\n{\n  "name": "footer",\n  "version": "1.0.1",\n  "main": "dist/index.js",\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n请注意，上述操作不会将包推送到任何 NPM 存储库。相反，如果我们还希望 Lerna 负责发布过程，我们可以使用lerna publishinstead。\n\n信息\n\nlerna使用in的version属性lerna.json来判断当前使用的版本\n\n\n# 发布到NPM\n\n如果我们跑\n\nlerna publish --no-private\n\n\n1\n\n\nLerna 执行版本递增工作流（与 相同lerna version），此外还将包推送到 NPM。您应该得到以下输出：\n\n终端输出\n\nlerna notice cli v5.1.2\nlerna info current version 1.0.0\nlerna info Assuming all packages changed\n? Select a new version (currently 1.0.0) Patch (1.0.1)\n\nChanges:\n - footer: 1.0.0 => 1.0.1\n - header: 1.0.0 => 1.0.1\n\n? Are you sure you want to publish these packages? Yes\nlerna info execute Skipping releases\nlerna info git Pushing tags...\nlerna info publish Publishing packages to npm...\n...\nlerna success published header 1.0.1\n...\nlerna success published footer 1.0.1\n...\nSuccessfully published:\n - footer@1.0.1\n - header@1.0.1\nlerna success published 2 packages\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 版本控制策略\n\nLerna 允许您使用两种模式之一来管理您的项目：固定或独立。\n\n# 固定/锁定模式（默认）\n\n固定模式 Lerna 项目在单个版本行上运行。该版本保存在lerna.json项目根目录下的文件中version。当您运行 时lerna publish，如果模块自上次发布以来已更新，它将更新为您发布的新版本。这意味着您只在需要时发布包的新版本。\n\n> 注意：如果您的主要版本为零，则所有更新都被视为中断。因此，lerna publish以零主版本运行并选择任何非预发布版本号将导致为所有包发布新版本，即使自上次发布以来并非所有包都发生了变化。\n\n如果您想自动将所有包版本绑定在一起，请使用此选项。这种方法的一个问题是任何包中的重大更改都会导致所有包都具有新的主要版本。\n\n# 独立模式\n\nnpx lerna init --independent\n\n\n1\n\n\n独立模式 Lerna 项目允许维护者彼此独立地增加包版本。每次发布时，您都会收到针对每个已更改包的提示，以指定它是补丁、次要、主要还是自定义更改。\n\n独立模式允许您更具体地更新每个包的版本，并且对一组组件有意义。将这种模式与语义释放之类的东西结合起来会减轻它的痛苦。（在atlassian/lerna-semantic-release已经有这方面的工作）。\n\n> 将version键设置lerna.json为independent以独立模式运行。',normalizedContent:'# 运行任务\n\nmonorepos可以有数百甚至数千个项目，所以能够对所有(或部分)项目运行npm脚本是lerna这样的工具的一个关键特性。\n\n\n# 定义\n\n * command - 开发者在终端中键入的任何内容 （e.g., lerna run build --scope=header --concurrency=5）\n * target - npm脚本的名称(e.g., build)\n * task - npm脚本的调用(e.g., header:build).\n\n\n# 示例仓库\n\n> 例子基于 this repository\n\n\n# 运行内容\n\n每个项目都定义了test和build脚本。\n\nrun:\n\nnpx lerna run build\n\n这将以正确的顺序构建项目: footer and header and then remixapp.\n\n    ✔  header:build (501ms)\n    ✔  footer:build (503ms)\n    ✔  remixapp:build (670ms)\n\n —————————————————————————————————————————————————————————————————————————————\n\n >  lerna (powered by nx)   successfully ran target build for 3 projects (1s)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n请注意，lerna并不关心每个构建脚本的作用。名称build也不特殊：它只是npm脚本的名称。\n\n\n# 同时运行多个任务\n\n您可以传递一个逗号分隔的目标列表，其中列出了您希望触发并发运行的目标。\n\nnpx lerna run test,build,lint\n\n例如，如果您的任务之间存在依赖关系，例如需要在测试特定包之前运行构建，那么只要您配置了适当的任务管道配置，任务运行器就会为您协调这一点。\n\n\n# 为单个包运行任务\n\n在开发时，您很少运行所有构建或所有测试。相反，您通常只针对正在更改的项目进行操作。例如，您可以这样运行头测试：\n\nnpx lerna run test --scope=header\n\n\n# 运行受pr影响的任务\n\n您还可以为pr中受影响的所有项目运行命令，如下所示：\n\nnpx lerna run test --since=origin/main\n\nlearn more here.\n\n\n# 控制任务的运行方式\n\n要更好地控制执行任务的顺序，请编辑task pipeline configuration。\n\n要加快任务执行速度，请了解如何缓存任务结果和分配任务执行\n\n\n# 自动加载 .env文件\n\n默认情况下，由 nx 提供支持的现代任务运行器将自动.env为您加载文件。--load-env-files如果您出于任何原因想要禁用此行为，您可以设置为 false。\n\n有关.env默认加载哪些文件的更多详细信息，请参阅：https://nx.dev/recipes/environment-variables/define-environment-variables\n\n\n# 版本和发布\n\nlerna 可以增加您的包的版本以及将您的包发布到 npm，它提供了多种选项以确保可以适应任何工作流程。\n\n为了展示 lerna 是如何做到的，我们将查看这个存储库。\n\n> 如果您通过实践学得更好，请克隆 repo 并继续学习。\n\n回购协议包含三个包或项目：\n\n * header（react 组件库）\n * footer（react 组件库）\n * remixapp（使用依赖于header和的 remix 框架编写的应用程序footer）\n\n我们将发布header和footer包。\n\n> 只发布项目的一个子集是很常见的。有些项目可以是私有的（例如，仅用于测试），有些可以是演示应用程序。在这个 repo 中，remixapp它不是私有的，它只是没有发布到 npm。\n\n\n# 版本控制\n\nlerna 附带一个version命令，允许您增加包的版本号、提交更改并相应地标记它们。\n\nlerna version --no-private\n\n\n1\n\n\n你会得到以下输出：\n\nlerna notice cli v5.1.2\nlerna info current version 1.0.0\nlerna info assuming all packages changed\n? select a new version (currently 1.0.0) (use arrow keys)\n❯ patch (1.0.1)\n  minor (1.1.0)\n  major (2.0.0)\n  prepatch (1.0.1-alpha.0)\n  preminor (1.1.0-alpha.0)\n  premajor (2.0.0-alpha.0)\n  custom prerelease\n  custom version\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n信息\n\n请注意，通过传递，我们排除了在其文件--no-private中标记的所有包。private``package.json\n\nlerna 检测当前包，识别当前版本并建议下一个选择。请注意，您也可以像lerna version 1.0.0. 有关版本文档详细信息的更多信息。一旦选择了给定的版本，lerna 就会package.json用版本号更新，提交更改，添加相应的版本标签（例如v1.0.0）并将提交和标签推送到远程存储库。\n\n包/页脚/package.json\n\n{\n  "name": "footer",\n  "version": "1.0.1",\n  "main": "dist/index.js",\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n请注意，上述操作不会将包推送到任何 npm 存储库。相反，如果我们还希望 lerna 负责发布过程，我们可以使用lerna publishinstead。\n\n信息\n\nlerna使用in的version属性lerna.json来判断当前使用的版本\n\n\n# 发布到npm\n\n如果我们跑\n\nlerna publish --no-private\n\n\n1\n\n\nlerna 执行版本递增工作流（与 相同lerna version），此外还将包推送到 npm。您应该得到以下输出：\n\n终端输出\n\nlerna notice cli v5.1.2\nlerna info current version 1.0.0\nlerna info assuming all packages changed\n? select a new version (currently 1.0.0) patch (1.0.1)\n\nchanges:\n - footer: 1.0.0 => 1.0.1\n - header: 1.0.0 => 1.0.1\n\n? are you sure you want to publish these packages? yes\nlerna info execute skipping releases\nlerna info git pushing tags...\nlerna info publish publishing packages to npm...\n...\nlerna success published header 1.0.1\n...\nlerna success published footer 1.0.1\n...\nsuccessfully published:\n - footer@1.0.1\n - header@1.0.1\nlerna success published 2 packages\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 版本控制策略\n\nlerna 允许您使用两种模式之一来管理您的项目：固定或独立。\n\n# 固定/锁定模式（默认）\n\n固定模式 lerna 项目在单个版本行上运行。该版本保存在lerna.json项目根目录下的文件中version。当您运行 时lerna publish，如果模块自上次发布以来已更新，它将更新为您发布的新版本。这意味着您只在需要时发布包的新版本。\n\n> 注意：如果您的主要版本为零，则所有更新都被视为中断。因此，lerna publish以零主版本运行并选择任何非预发布版本号将导致为所有包发布新版本，即使自上次发布以来并非所有包都发生了变化。\n\n如果您想自动将所有包版本绑定在一起，请使用此选项。这种方法的一个问题是任何包中的重大更改都会导致所有包都具有新的主要版本。\n\n# 独立模式\n\nnpx lerna init --independent\n\n\n1\n\n\n独立模式 lerna 项目允许维护者彼此独立地增加包版本。每次发布时，您都会收到针对每个已更改包的提示，以指定它是补丁、次要、主要还是自定义更改。\n\n独立模式允许您更具体地更新每个包的版本，并且对一组组件有意义。将这种模式与语义释放之类的东西结合起来会减轻它的痛苦。（在atlassian/lerna-semantic-release已经有这方面的工作）。\n\n> 将version键设置lerna.json为independent以独立模式运行。',charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"lerna API参考",frontmatter:{title:"lerna API参考",date:"2023-02-08T18:36:19.000Z",permalink:"/pages/f377d0/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030111.lerna%20API%E5%8F%82%E8%80%83.html",relativePath:"10.大前端/1030.Node/1030111.lerna API参考.md",key:"v-4b840afb",path:"/pages/f377d0/",headers:[{level:2,title:"lerna create",slug:"lerna-create",normalizedTitle:"lerna create",charIndex:2},{level:2,title:"lerna add",slug:"lerna-add",normalizedTitle:"lerna add",charIndex:166},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:194},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:264}],headersStr:"lerna create lerna add 使用 示例",content:"# lerna create\n\n> 创建新的lerna托管包\n\nlerna create <name> [loc]\n\n位置:\n  name  包名称（包括范围），必须是本地唯一的（_A）_公开可用的 [必填]\n  loc   自定义包位置，默认为第一个配置包的位置, 位置必须与配置的包目录匹配。\n\n\n1\n2\n3\n4\n5\n\n\n\n# lerna add\n\n> 向匹配的包添加依赖项\n\n\n# 使用\n\nlerna add <package>[@version] [--dev] [--exact] [--peer]\n\n\n1\n\n\n\n# 示例\n\n# Adds the module-1 package to the packages in the 'prefix-' prefixed folders\nlerna add module-1 packages/prefix-*\n\n# Install module-1 to module-2\nlerna add module-1 --scope=module-2\n\n# Install module-1 to module-2 in devDependencies\nlerna add module-1 --scope=module-2 --dev\n\n# Install module-1 to module-2 in peerDependencies\nlerna add module-1 --scope=module-2 --peer\n\n# Install module-1 in all modules except module-1\nlerna add module-1\n\n# Install babel-core in all modules\nlerna add babel-core\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"# lerna create\n\n> 创建新的lerna托管包\n\nlerna create <name> [loc]\n\n位置:\n  name  包名称（包括范围），必须是本地唯一的（_a）_公开可用的 [必填]\n  loc   自定义包位置，默认为第一个配置包的位置, 位置必须与配置的包目录匹配。\n\n\n1\n2\n3\n4\n5\n\n\n\n# lerna add\n\n> 向匹配的包添加依赖项\n\n\n# 使用\n\nlerna add <package>[@version] [--dev] [--exact] [--peer]\n\n\n1\n\n\n\n# 示例\n\n# adds the module-1 package to the packages in the 'prefix-' prefixed folders\nlerna add module-1 packages/prefix-*\n\n# install module-1 to module-2\nlerna add module-1 --scope=module-2\n\n# install module-1 to module-2 in devdependencies\nlerna add module-1 --scope=module-2 --dev\n\n# install module-1 to module-2 in peerdependencies\nlerna add module-1 --scope=module-2 --peer\n\n# install module-1 in all modules except module-1\nlerna add module-1\n\n# install babel-core in all modules\nlerna add babel-core\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"pnpm 学习",frontmatter:{title:"pnpm 学习",date:"2021-12-30T13:31:56.000Z",permalink:"/pages/96c6f8/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103020.pnpm%20%E5%AD%A6%E4%B9%A0.html",relativePath:"10.大前端/1030.Node/103020.pnpm 学习.md",key:"v-64765687",path:"/pages/96c6f8/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:58},{level:3,title:"第一种",slug:"第一种",normalizedTitle:"第一种",charIndex:65},{level:3,title:"第二种",slug:"第二种",normalizedTitle:"第二种",charIndex:242},{level:2,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:295},{level:3,title:"基本命令比对",slug:"基本命令比对",normalizedTitle:"基本命令比对",charIndex:302},{level:3,title:"进阶命令",slug:"进阶命令",normalizedTitle:"进阶命令",charIndex:425}],headersStr:"介绍 安装 第一种 第二种 命令 基本命令比对 进阶命令",content:"# 介绍\n\n批话不多说, 原理也不扯. 咋不是搞底层语言的, 用着快就完事儿, 急着赶下一班幼儿园的车呢~\n\n\n# 安装\n\n\n# 第一种\n\nwindow10系统 ( 不会吧~不会吧 现在居然还有人用window7系统~~~~垃圾)\n\n * 打开PowerShell\n * 键入(Invoke-WebRequest 'https://get.pnpm.io/v6.js' -UseBasicParsing).Content | node - add --global pnpm\n\n\n# 第二种\n\n直接npm install -g pnpm或者npx pnpm add -g pnpm\n\n\n# 命令\n\n\n# 基本命令比对\n\nNPM命令           PNPM 等义\nnpm install     pnpm install\nnpm i <pkg>     pnpm add <pkg>\nnpm run <cmd>   pnpm <cmd>\n\n\n# 进阶命令\n\nCOMMAND              MEANING\npnpm add sax         Save to dependencies\npnpm add -D sax      Save to devDependencies\npnpm add -O sax      Save to optionalDependencies\npnpm add sax@next    Install from the next tag\npnpm add sax@3.0.0   Specify version 3.0.0",normalizedContent:"# 介绍\n\n批话不多说, 原理也不扯. 咋不是搞底层语言的, 用着快就完事儿, 急着赶下一班幼儿园的车呢~\n\n\n# 安装\n\n\n# 第一种\n\nwindow10系统 ( 不会吧~不会吧 现在居然还有人用window7系统~~~~垃圾)\n\n * 打开powershell\n * 键入(invoke-webrequest 'https://get.pnpm.io/v6.js' -usebasicparsing).content | node - add --global pnpm\n\n\n# 第二种\n\n直接npm install -g pnpm或者npx pnpm add -g pnpm\n\n\n# 命令\n\n\n# 基本命令比对\n\nnpm命令           pnpm 等义\nnpm install     pnpm install\nnpm i <pkg>     pnpm add <pkg>\nnpm run <cmd>   pnpm <cmd>\n\n\n# 进阶命令\n\ncommand              meaning\npnpm add sax         save to dependencies\npnpm add -d sax      save to devdependencies\npnpm add -o sax      save to optionaldependencies\npnpm add sax@next    install from the next tag\npnpm add sax@3.0.0   specify version 3.0.0",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Egg.js 技巧 问题集合",frontmatter:{title:"Egg.js 技巧 问题集合",date:"2023-09-17T19:55:11.000Z",permalink:"/pages/3de397/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030200.Egg.js%20%E6%8A%80%E5%B7%A7%20%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88.html",relativePath:"10.大前端/1030.Node/1030200.Egg.js 技巧 问题集合.md",key:"v-dff38a1a",path:"/pages/3de397/",headers:[{level:2,title:"Sequelize",slug:"sequelize",normalizedTitle:"sequelize",charIndex:2},{level:3,title:"sequelize-cli",slug:"sequelize-cli",normalizedTitle:"sequelize-cli",charIndex:16},{level:2,title:"错误处理",slug:"错误处理",normalizedTitle:"错误处理",charIndex:2213}],headersStr:"Sequelize sequelize-cli 错误处理",content:'# Sequelize\n\n\n# sequelize-cli\n\n需要 Migrations 来帮我们管理数据结构的变更(在项目的演进过程中，每一个迭代都有可能对数据库数据结构做变更，怎样跟踪每一个迭代的数据变更，并在不同的环境（开发、测试、CI）和迭代切换中，快速变更数据结构呢？)\n\nsequelize 提供了 sequelize-cli 工具来实现 Migrations\n\nsequelize <command>\n\nCommands:\n  sequelize db:migrate                        Run pending migrations\n  sequelize db:migrate:schema:timestamps:add  Update migration table to have timestamps\n  sequelize db:migrate:status                 List the status of all migrations\n  sequelize db:migrate:undo                   Reverts a migration\n  sequelize db:migrate:undo:all               Revert all migrations ran\n  sequelize db:seed                           Run specified seeder\n  sequelize db:seed:undo                      Deletes data from the database\n  sequelize db:seed:all                       Run every seeder\n  sequelize db:seed:undo:all                  Deletes data from the database\n  sequelize db:create                         Create database specified by configuration\n  sequelize db:drop                           Drop database specified by configuration\n  sequelize init                              Initializes project\n  sequelize init:config                       Initializes configuration\n  sequelize init:migrations                   Initializes migrations\n  sequelize init:models                       Initializes models\n  sequelize init:seeders                      Initializes seeders\n  sequelize migration:generate                Generates a new migration file      [aliases: migration:create]\n  sequelize model:generate                    Generates a model and its migration [aliases: model:create]\n  sequelize seed:generate                     Generates a new seed file           [aliases: seed:create]\n\nOptions:\n  --version  Show version number                                                  [boolean]\n  --help     Show help                                                            [boolean]\n\nPlease specify a command\n# 升级数据库\nnpx sequelize db:migrate\n# 如果有问题需要回滚，可以通过 `db:migrate:undo` 回退一个变更\n# npx sequelize db:migrate:undo\n# 可以通过 `db:migrate:undo:all` 回退到初始状态\n# npx sequelize db:migrate:undo:all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 错误处理\n\n * 2020-10-23 15:20:10,104 ERROR 124768 [-/127.0.0.1/-/8ms POST /api/v1/video] nodejs.SequelizeDatabaseError: Incorrect string value: \'\\xE5\\x8F\\x8D\\xE5\\xAF\\xB9...\' for column \'introduce\' at row 1\n   \n   at Query.formatError (D:\\Code\\Work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:239:16)\n   \n   at Query.run (D:\\Code\\Work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:54:18)\n   \n   at processTicksAndRejections (internal/process/task_queues.js:97:5)\n\nname: "SequelizeDatabaseError"\n\nparent: {"code":"ER_TRUNCATED_WRONG_VALUE_FOR_FIELD","errno":1366,"sqlState":"HY000","sqlMessage":"Incorrect string value: \'\\xE5\\x8F\\x8D\\xE5\\xAF\\xB9...\' for column \'introduce\' at row 1","sql":"INSERT INTO videos (id,category_id,title,introduce,detail,create_date) VALUES (DEFAULT,?,?,?,?,?);","parameters":[1,"test11","tess反对t","231231","2020-10-23 07:20:10"]}\n\noriginal: {"code":"ER_TRUNCATED_WRONG_VALUE_FOR_FIELD","errno":1366,"sqlState":"HY000","sqlMessage":"Incorrect string value: \'\\xE5\\x8F\\x8D\\xE5\\xAF\\xB9...\' for column \'introduce\' at row 1","sql":"INSERT INTO videos (id,category_id,title,introduce,detail,create_date) VALUES (DEFAULT,?,?,?,?,?);","parameters":[1,"test11","tess反对t","231231","2020-10-23 07:20:10"]}\n\nsql: "INSERT INTO videos (id,category_id,title,introduce,detail,create_date) VALUES (DEFAULT,?,?,?,?,?);"\n\nparameters: [1,"test11","tess反对t","231231","2020-10-23 07:20:10"]\n\npid: 124768\n\nhostname: DESKTOP-FUCU627',normalizedContent:'# sequelize\n\n\n# sequelize-cli\n\n需要 migrations 来帮我们管理数据结构的变更(在项目的演进过程中，每一个迭代都有可能对数据库数据结构做变更，怎样跟踪每一个迭代的数据变更，并在不同的环境（开发、测试、ci）和迭代切换中，快速变更数据结构呢？)\n\nsequelize 提供了 sequelize-cli 工具来实现 migrations\n\nsequelize <command>\n\ncommands:\n  sequelize db:migrate                        run pending migrations\n  sequelize db:migrate:schema:timestamps:add  update migration table to have timestamps\n  sequelize db:migrate:status                 list the status of all migrations\n  sequelize db:migrate:undo                   reverts a migration\n  sequelize db:migrate:undo:all               revert all migrations ran\n  sequelize db:seed                           run specified seeder\n  sequelize db:seed:undo                      deletes data from the database\n  sequelize db:seed:all                       run every seeder\n  sequelize db:seed:undo:all                  deletes data from the database\n  sequelize db:create                         create database specified by configuration\n  sequelize db:drop                           drop database specified by configuration\n  sequelize init                              initializes project\n  sequelize init:config                       initializes configuration\n  sequelize init:migrations                   initializes migrations\n  sequelize init:models                       initializes models\n  sequelize init:seeders                      initializes seeders\n  sequelize migration:generate                generates a new migration file      [aliases: migration:create]\n  sequelize model:generate                    generates a model and its migration [aliases: model:create]\n  sequelize seed:generate                     generates a new seed file           [aliases: seed:create]\n\noptions:\n  --version  show version number                                                  [boolean]\n  --help     show help                                                            [boolean]\n\nplease specify a command\n# 升级数据库\nnpx sequelize db:migrate\n# 如果有问题需要回滚，可以通过 `db:migrate:undo` 回退一个变更\n# npx sequelize db:migrate:undo\n# 可以通过 `db:migrate:undo:all` 回退到初始状态\n# npx sequelize db:migrate:undo:all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 错误处理\n\n * 2020-10-23 15:20:10,104 error 124768 [-/127.0.0.1/-/8ms post /api/v1/video] nodejs.sequelizedatabaseerror: incorrect string value: \'\\xe5\\x8f\\x8d\\xe5\\xaf\\xb9...\' for column \'introduce\' at row 1\n   \n   at query.formaterror (d:\\code\\work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:239:16)\n   \n   at query.run (d:\\code\\work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:54:18)\n   \n   at processticksandrejections (internal/process/task_queues.js:97:5)\n\nname: "sequelizedatabaseerror"\n\nparent: {"code":"er_truncated_wrong_value_for_field","errno":1366,"sqlstate":"hy000","sqlmessage":"incorrect string value: \'\\xe5\\x8f\\x8d\\xe5\\xaf\\xb9...\' for column \'introduce\' at row 1","sql":"insert into videos (id,category_id,title,introduce,detail,create_date) values (default,?,?,?,?,?);","parameters":[1,"test11","tess反对t","231231","2020-10-23 07:20:10"]}\n\noriginal: {"code":"er_truncated_wrong_value_for_field","errno":1366,"sqlstate":"hy000","sqlmessage":"incorrect string value: \'\\xe5\\x8f\\x8d\\xe5\\xaf\\xb9...\' for column \'introduce\' at row 1","sql":"insert into videos (id,category_id,title,introduce,detail,create_date) values (default,?,?,?,?,?);","parameters":[1,"test11","tess反对t","231231","2020-10-23 07:20:10"]}\n\nsql: "insert into videos (id,category_id,title,introduce,detail,create_date) values (default,?,?,?,?,?);"\n\nparameters: [1,"test11","tess反对t","231231","2020-10-23 07:20:10"]\n\npid: 124768\n\nhostname: desktop-fucu627',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"pnpm 使用及问题处理",frontmatter:{title:"pnpm 使用及问题处理",date:"2022-01-12T14:36:23.000Z",permalink:"/pages/8743eb/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103021.pnpm%20%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html",relativePath:"10.大前端/1030.Node/103021.pnpm 使用及问题处理.md",key:"v-44c16328",path:"/pages/8743eb/",headers:[{level:3,title:"ERRPNPMINVALIDOVERRIDESELECTOR",slug:"err-pnpm-invalid-override-selector",normalizedTitle:"errpnpminvalidoverrideselector",charIndex:null}],headersStr:"ERRPNPMINVALIDOVERRIDESELECTOR",content:'# ERR_PNPM_INVALID_OVERRIDE_SELECTOR\n\n➜ ✗ node -v\nv16.13.1\n➜ ✗ npm -v\n8.1.2\n➜ ✗ pnpm -v\n6.24.4\n\n\n1\n2\n3\n4\n5\n6\n\n * 问题：\n\n➜  vue-vben-admin git:(main) ✗ pnpm install\n ERR_PNPM_INVALID_OVERRIDE_SELECTOR  Cannot parse the "//" selector in the overrides\n\n\n1\n2\n\n * 处理：\n\n版本bug，回退到6.23.6以前即可\n\npnpm add pnpm@6.23.6 -g',normalizedContent:'# err_pnpm_invalid_override_selector\n\n➜ ✗ node -v\nv16.13.1\n➜ ✗ npm -v\n8.1.2\n➜ ✗ pnpm -v\n6.24.4\n\n\n1\n2\n3\n4\n5\n6\n\n * 问题：\n\n➜  vue-vben-admin git:(main) ✗ pnpm install\n err_pnpm_invalid_override_selector  cannot parse the "//" selector in the overrides\n\n\n1\n2\n\n * 处理：\n\n版本bug，回退到6.23.6以前即可\n\npnpm add pnpm@6.23.6 -g',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Node+vue打造全栈资源分享网站",frontmatter:{title:"Node+vue打造全栈资源分享网站",date:"2023-09-17T19:55:39.000Z",permalink:"/pages/efacd5/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030210.Node+vue%E6%89%93%E9%80%A0%E5%85%A8%E6%A0%88%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB%E7%BD%91%E7%AB%99.html",relativePath:"10.大前端/1030.Node/1030210.Node+vue打造全栈资源分享网站.md",key:"v-b64ba72e",path:"/pages/efacd5/",headers:[{level:2,title:"技术选型:",slug:"技术选型",normalizedTitle:"技术选型:",charIndex:2},{level:3,title:"前端",slug:"前端",normalizedTitle:"前端",charIndex:12},{level:3,title:"服务端",slug:"服务端",normalizedTitle:"服务端",charIndex:103},{level:2,title:"所以环境及软件",slug:"所以环境及软件",normalizedTitle:"所以环境及软件",charIndex:191},{level:3,title:"环境",slug:"环境",normalizedTitle:"环境",charIndex:193},{level:3,title:"设计软件",slug:"设计软件",normalizedTitle:"设计软件",charIndex:273},{level:3,title:"编辑器",slug:"编辑器",normalizedTitle:"编辑器",charIndex:312},{level:2,title:"产品设计",slug:"产品设计",normalizedTitle:"产品设计",charIndex:2165},{level:2,title:"前端 展示页面",slug:"前端-展示页面",normalizedTitle:"前端 展示页面",charIndex:2212},{level:2,title:"前端 中后台",slug:"前端-中后台",normalizedTitle:"前端 中后台",charIndex:2243},{level:2,title:"后端",slug:"后端",normalizedTitle:"后端",charIndex:2295}],headersStr:"技术选型: 前端 服务端 所以环境及软件 环境 设计软件 编辑器 产品设计 前端 展示页面 前端 中后台 后端",content:'# 技术选型:\n\n\n# 前端\n\n * Vue全家桶\n * 基于 panjiacheng 的项目 vue-element-admin项目打造\n * 开发者会 html, css, js, vue就行\n\n\n# 服务端\n\n * Node (不要小瞧js写服务端的能力)\n * 基于蚂蚁金服的 Egg.js 企业级框架\n * 开发者了解 node 生态 及 koa框架大致原理就可\n\n\n# 所以环境及软件\n\n\n# 环境\n\n * node.js 环境安装 详细请Google一下 随便搜了偏文章\n * cnpm全局安装淘宝镜像, 避免某些插件被墙\n\n\n# 设计软件\n\nwidows 使用 axure , mac sketch\n\n\n# 编辑器\n\n * 只推荐 vscode编辑器\n\n * 在安装相应插件ctrl+shift+x\n\n * Chinese (Simplified) Language Pack for Visual Studio Code\n\n * Vetur, Vue2 Snippets\n\n * Path Intellisense, JavaScript (ES6) code snippets, HTML Snippets, HTML CSS Support , Highlight Matching Tag, ESLint, Beautify, Auto Rename Tag, Auto Close Tag\n\n * 配置编辑器自动保存格式化 ctrl + ,或者编辑\n\n{\n    "vetur.format.defaultFormatter.html": "js-beautify-html",\n    "vetur.format.defaultFormatter.js": "vscode-typ=script",\n    "vetur.format.defaultFormatterOptions": {\n        "js-beautify-html": {\n            "wrap_attributes": "auto"\n        },\n        "prettyhtml": {\n            "printWidth": 100,\n            "singleQuote": false,\n            "wrapAttributes": false,\n            "sortAttributes": false\n        }\n    },\n    "[html]": {\n        "editor.defaultFormatter": "vscode.html-language-features"\n    },\n    "git.autofetch": true,\n    "editor.codeActionsOnSave": {\n        "source.fixAll.eslint": true,\n    },\n    "search.exclude": { //配置在搜索中排除的文件和文件夹的 glob 模式。已经继承 #files.exclude# 设置的所有 glob 模式。可在此处阅读有关 glob 模式的详细信息。\n        "**/node_modules": true,\n        "**/bower_components": true,\n        "**/dist": true\n    },\n    // "eslint.autoFixOnSave": true, //开启或关闭“自动修复”功能。\n    "eslint.options": { //eslint options对象，提供从命令行执行时通常传递给eslint的arg\n        "extensions": [\n            ".js",\n            ".vue"\n        ]\n    },\n    "eslint.validate": [ //应该由ESLint验证的语言数组\n        "javascript",\n        {\n            "language": "vue",\n            "autoFix": true\n        },\n        "html",\n        "vue"\n    ],\n    "[vue]": {\n        "editor.defaultFormatter": "octref.vetur"\n    },\n    "[javascript]": {\n        "editor.defaultFormatter": "esbenp.prettier-vscode"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# 产品设计\n\nwindow 使用 axure 毫无疑问的\n\n\n\nresource.rp\n\n\n# 前端 展示页面\n\n会html css js 就不扯了\n\n\n# 前端 中后台\n\ngithub 搜一下 vue-element-admin clone下来就好了\n\n\n# 后端\n\n初始化egg.js项目\n\n看文档',normalizedContent:'# 技术选型:\n\n\n# 前端\n\n * vue全家桶\n * 基于 panjiacheng 的项目 vue-element-admin项目打造\n * 开发者会 html, css, js, vue就行\n\n\n# 服务端\n\n * node (不要小瞧js写服务端的能力)\n * 基于蚂蚁金服的 egg.js 企业级框架\n * 开发者了解 node 生态 及 koa框架大致原理就可\n\n\n# 所以环境及软件\n\n\n# 环境\n\n * node.js 环境安装 详细请google一下 随便搜了偏文章\n * cnpm全局安装淘宝镜像, 避免某些插件被墙\n\n\n# 设计软件\n\nwidows 使用 axure , mac sketch\n\n\n# 编辑器\n\n * 只推荐 vscode编辑器\n\n * 在安装相应插件ctrl+shift+x\n\n * chinese (simplified) language pack for visual studio code\n\n * vetur, vue2 snippets\n\n * path intellisense, javascript (es6) code snippets, html snippets, html css support , highlight matching tag, eslint, beautify, auto rename tag, auto close tag\n\n * 配置编辑器自动保存格式化 ctrl + ,或者编辑\n\n{\n    "vetur.format.defaultformatter.html": "js-beautify-html",\n    "vetur.format.defaultformatter.js": "vscode-typ=script",\n    "vetur.format.defaultformatteroptions": {\n        "js-beautify-html": {\n            "wrap_attributes": "auto"\n        },\n        "prettyhtml": {\n            "printwidth": 100,\n            "singlequote": false,\n            "wrapattributes": false,\n            "sortattributes": false\n        }\n    },\n    "[html]": {\n        "editor.defaultformatter": "vscode.html-language-features"\n    },\n    "git.autofetch": true,\n    "editor.codeactionsonsave": {\n        "source.fixall.eslint": true,\n    },\n    "search.exclude": { //配置在搜索中排除的文件和文件夹的 glob 模式。已经继承 #files.exclude# 设置的所有 glob 模式。可在此处阅读有关 glob 模式的详细信息。\n        "**/node_modules": true,\n        "**/bower_components": true,\n        "**/dist": true\n    },\n    // "eslint.autofixonsave": true, //开启或关闭“自动修复”功能。\n    "eslint.options": { //eslint options对象，提供从命令行执行时通常传递给eslint的arg\n        "extensions": [\n            ".js",\n            ".vue"\n        ]\n    },\n    "eslint.validate": [ //应该由eslint验证的语言数组\n        "javascript",\n        {\n            "language": "vue",\n            "autofix": true\n        },\n        "html",\n        "vue"\n    ],\n    "[vue]": {\n        "editor.defaultformatter": "octref.vetur"\n    },\n    "[javascript]": {\n        "editor.defaultformatter": "esbenp.prettier-vscode"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# 产品设计\n\nwindow 使用 axure 毫无疑问的\n\n\n\nresource.rp\n\n\n# 前端 展示页面\n\n会html css js 就不扯了\n\n\n# 前端 中后台\n\ngithub 搜一下 vue-element-admin clone下来就好了\n\n\n# 后端\n\n初始化egg.js项目\n\n看文档',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"npm yarn pnpm命令对比",frontmatter:{title:"npm yarn pnpm命令对比",date:"2022-02-21T15:05:04.000Z",permalink:"/pages/d15ce2/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103022.npm%20yarn%20pnpm%E5%91%BD%E4%BB%A4%E5%AF%B9%E6%AF%94.html",relativePath:"10.大前端/1030.Node/103022.npm yarn pnpm命令对比.md",key:"v-8f5bdd2c",path:"/pages/d15ce2/",headers:[{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:6},{level:2,title:"增加",slug:"增加",normalizedTitle:"增加",charIndex:170},{level:2,title:"更新",slug:"更新",normalizedTitle:"更新",charIndex:77},{level:2,title:"删除",slug:"删除",normalizedTitle:"删除",charIndex:1352},{level:3,title:"--recursive, -r[](https://pnpm.io/zh/cli/remove#--recursive--r)",slug:"recursive-r",normalizedTitle:'--recursive, -r<a href="https://pnpm.io/zh/cli/remove#--recursive--r" target="_blank" rel="noopener noreferrer"><outboundlink/></a>',charIndex:null},{level:3,title:"--global[](https://pnpm.io/zh/cli/remove#--global)",slug:"global",normalizedTitle:'--global<a href="https://pnpm.io/zh/cli/remove#--global" target="_blank" rel="noopener noreferrer"><outboundlink/></a>',charIndex:null},{level:3,title:"--save-dev, -D[](https://pnpm.io/zh/cli/remove#--save-dev--d)",slug:"save-dev-d",normalizedTitle:'--save-dev, -d<a href="https://pnpm.io/zh/cli/remove#--save-dev--d" target="_blank" rel="noopener noreferrer"><outboundlink/></a>',charIndex:null},{level:3,title:"--save-optional, -O[](https://pnpm.io/zh/cli/remove#--save-optional--o)",slug:"save-optional-o",normalizedTitle:'--save-optional, -o<a href="https://pnpm.io/zh/cli/remove#--save-optional--o" target="_blank" rel="noopener noreferrer"><outboundlink/></a>',charIndex:null},{level:3,title:"--save-prod, -P[](https://pnpm.io/zh/cli/remove#--save-prod--p)",slug:"save-prod-p",normalizedTitle:'--save-prod, -p<a href="https://pnpm.io/zh/cli/remove#--save-prod--p" target="_blank" rel="noopener noreferrer"><outboundlink/></a>',charIndex:null}],headersStr:" 安装 增加 更新 删除 --recursive, -r[](https://pnpm.io/zh/cli/remove#--recursive--r) --global[](https://pnpm.io/zh/cli/remove#--global) --save-dev, -D[](https://pnpm.io/zh/cli/remove#--save-dev--d) --save-optional, -O[](https://pnpm.io/zh/cli/remove#--save-optional--o) --save-prod, -P[](https://pnpm.io/zh/cli/remove#--save-prod--p)",content:"#\n\n\n# 安装\n\n含义                   PNPM命令\n仅从 store 中离线下载       pnpm i --offline\n不更新 pnpm-lock.yaml   pnpm i --frozen-lockfile\n仅更新 pnpm-lock.yaml   pnpm i --lockfile-only\n\n\n# 增加\n\n含义                         PNPM命令               YARN命令\n保存到 dependencies           pnpm add sax         yarn add [package]\n保存到 devDependencies        pnpm add -D sax      yarn add [package] --dev\n                                                yarn add [package] -D\n保存到 optionalDependencies   pnpm add -O sax      \nInstall package globally   pnpm add -g sax      \n从 next tag 下安装             pnpm add sax@next    yarn add [package]@[tag]\n安装指定版本 3.0.0               pnpm add sax@3.0.0   yarn add [package]@[version]\n\n\n# 更新\n\n含义                                  PNPM命令               YARN命令\n更新到最新版                                                   yarn up [package]\n从 tag 下更新                                                yarn up [package]@[tag]\n遵循 package.json 指定的范围更新所有的依赖项       pnpm up              \n更新所有依赖项，此操作会忽略 package.json 指定的范围   pnpm up --latest     \n将 foo 更新到 v2 上的最新版本                 pnpm up foo@2        yarn up [package]@[version]\n更新 @babel 范围内的所有依赖项                 pnpm up \"@babel/*\"   yarn up '@babel/*'\n将所有具有 @babel 范围的包实例升级到 7.0.0                             yarn up '@babel/*@7.0.0'\n将所有包含 jest 的软件包实例升级到最新版本                                 yarn up '*jest*'\n\n\n# 删除\n\n含义      PNPM命令              YARN命令\n移除某个包   pnpm rm [package]   yarn remove [package]\n                            \n                            \n                            \n\n\n# --recursive, -r\n\n当在 工作区 中使用此命令时，将从每个工作区的包中移除相关依赖(或 多个依赖)。\n\n当不在工作区内使用时，将删除相关依赖项 (或多个依赖), 也包含子目录中对应的包 。\n\n\n# --global\n\n从全局删除一个依赖包。\n\n\n# --save-dev, -D\n\n仅删除开发环境 devDependencies 中的依赖项。\n\n\n# --save-optional, -O\n\n仅移除 optionalDependencies 中的依赖项。\n\n\n# --save-prod, -P\n\n仅从 dependencies 中删除相关依赖项。",normalizedContent:"#\n\n\n# 安装\n\n含义                   pnpm命令\n仅从 store 中离线下载       pnpm i --offline\n不更新 pnpm-lock.yaml   pnpm i --frozen-lockfile\n仅更新 pnpm-lock.yaml   pnpm i --lockfile-only\n\n\n# 增加\n\n含义                         pnpm命令               yarn命令\n保存到 dependencies           pnpm add sax         yarn add [package]\n保存到 devdependencies        pnpm add -d sax      yarn add [package] --dev\n                                                yarn add [package] -d\n保存到 optionaldependencies   pnpm add -o sax      \ninstall package globally   pnpm add -g sax      \n从 next tag 下安装             pnpm add sax@next    yarn add [package]@[tag]\n安装指定版本 3.0.0               pnpm add sax@3.0.0   yarn add [package]@[version]\n\n\n# 更新\n\n含义                                  pnpm命令               yarn命令\n更新到最新版                                                   yarn up [package]\n从 tag 下更新                                                yarn up [package]@[tag]\n遵循 package.json 指定的范围更新所有的依赖项       pnpm up              \n更新所有依赖项，此操作会忽略 package.json 指定的范围   pnpm up --latest     \n将 foo 更新到 v2 上的最新版本                 pnpm up foo@2        yarn up [package]@[version]\n更新 @babel 范围内的所有依赖项                 pnpm up \"@babel/*\"   yarn up '@babel/*'\n将所有具有 @babel 范围的包实例升级到 7.0.0                             yarn up '@babel/*@7.0.0'\n将所有包含 jest 的软件包实例升级到最新版本                                 yarn up '*jest*'\n\n\n# 删除\n\n含义      pnpm命令              yarn命令\n移除某个包   pnpm rm [package]   yarn remove [package]\n                            \n                            \n                            \n\n\n# --recursive, -r\n\n当在 工作区 中使用此命令时，将从每个工作区的包中移除相关依赖(或 多个依赖)。\n\n当不在工作区内使用时，将删除相关依赖项 (或多个依赖), 也包含子目录中对应的包 。\n\n\n# --global\n\n从全局删除一个依赖包。\n\n\n# --save-dev, -d\n\n仅删除开发环境 devdependencies 中的依赖项。\n\n\n# --save-optional, -o\n\n仅移除 optionaldependencies 中的依赖项。\n\n\n# --save-prod, -p\n\n仅从 dependencies 中删除相关依赖项。",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"脚手架核心流程开发",frontmatter:{title:"脚手架核心流程开发",date:"2023-02-06T21:27:55.000Z",permalink:"/pages/a97403/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030341.%E8%84%9A%E6%89%8B%E6%9E%B6%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E5%BC%80%E5%8F%91.html",relativePath:"10.大前端/1030.Node/1030341.脚手架核心流程开发.md",key:"v-72dfb1fa",path:"/pages/a97403/",headers:[{level:2,title:"拆分原则",slug:"拆分原则",normalizedTitle:"拆分原则",charIndex:2},{level:2,title:"执行准备",slug:"执行准备",normalizedTitle:"执行准备",charIndex:135},{level:3,title:"检查版本号",slug:"检查版本号",normalizedTitle:"检查版本号",charIndex:174},{level:3,title:"检查node 版本",slug:"检查node-版本",normalizedTitle:"检查node 版本",charIndex:737},{level:3,title:"检查root启动",slug:"检查root启动",normalizedTitle:"检查root启动",charIndex:1503},{level:3,title:"检查用户主目录",slug:"检查用户主目录",normalizedTitle:"检查用户主目录",charIndex:1773},{level:3,title:"检查入参",slug:"检查入参",normalizedTitle:"检查入参",charIndex:2133},{level:3,title:"检查环境变量",slug:"检查环境变量",normalizedTitle:"检查环境变量",charIndex:2691},{level:3,title:"检查是否为最新版本",slug:"检查是否为最新版本",normalizedTitle:"检查是否为最新版本",charIndex:2803}],headersStr:"拆分原则 执行准备 检查版本号 检查node 版本 检查root启动 检查用户主目录 检查入参 检查环境变量 检查是否为最新版本",content:"# 拆分原则\n\n根据模块的功能拆分:\n\n * 核心模块: core\n * 命令模块: commands\n * 模型模块: models\n * 工具模块: utils\n\n> root-check\n> \n> 尝试降级具有root权限的进程的权限，如果失败则阻止访问\n\n\n# 执行准备\n\n创建功能模块文件夹， 并配置lerna packages\n\n\n# 检查版本号\n\n添加log lerna包\n\nlerna create @zh-dev-cli/log utils 如果你像我这样包的路径修改了的话就需要注意在更路径的package.json文件中workspaces 添加utils\n\n// utils/log/lib/index.js\n\nconst log = require('npmlog')\nlog.level = process.env.LOG_LEVEL ?? 'info'\nlog.heading = 'zh-dev-cli'\nlog.addLevel('success', 2000, {fg: 'green', bold: true})\nmodule.exports = log;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n// core/cli/lib/index.js\n\nconst pkg = require('../package.json')\nconst log = require('@zh-dev-cli/log')\nfunction checkPkgVersion () {\n    let version = pkg.version;\n    log.notice('cli', version)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 检查node 版本\n\n> semver\n> \n> npm的语义版本器, 做各种各样的版本比对. 周下载量很高\n\n> colors\n> \n> 在node.js控制台中获取颜色和样式\n\n// const.js\n\nconst LOWEST_NODE_VERSION = '12.0.0'\n\nmodule.exports = {\n    LOWEST_NODE_VERSION\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n// cli.js\n\nconst semver = require('semver')\nconst colors = require('colors/safe');\n...\nfunction checkNodeVersion() {\n    const currentVersion = process.version\n    const lowestVersion = constant.LOWEST_NODE_VERSION\n    if(semver.lt(currentVersion, lowestVersion)) {\n        throw new Error(colors.red(`zh-dev-cli 需要安装 v${lowestVersion} 以上版本的 Node.js`))\n    }\n}\n\nfunction core () {\n    try {\n        checkPkgVersion()\n        checkNodeVersion()\n    } catch (e) {\n        log.error(e?.message)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 检查root启动\n\nprocess.geteuid() 如果是0 , 说明是root账户, root账户所创建的文件是属于root账户的, 不变改写. 需要降级\n\n> root-check\n> \n> 尝试降级具有root权限的进程的权限，如果失败则阻止访问\n\nlerna add root-check@1.0.0 core/cli 安装\n\nfunction checkRoot() {\n    const rootCheck = require('root-check')\n    rootCheck()\n}\n\n\n1\n2\n3\n4\n\n\n\n# 检查用户主目录\n\n> user-home 废弃 使用os-homedir\n> \n> 返回当前用户的主目录。\n\n> path-exists\n> \n> 检查路径是否存在\n\n安装: lerna add path-exists@4.0.0 core/cli 5.0.0版本需要使用到import导入, 与cjs不符\n\nconst pathExists = require('path-exists').sync;\n...\nfunction checkUserHome() {\n    if(!userHome || !pathExists(userHome)) {\n        throw new Error(colors.red('当前登录用户主目录不存在'))\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 检查入参\n\n> minimist\n> \n> 解析参数选项 这个模块是乐观主义者的论点解析器的核心，没有任何花哨的装饰。\n> \n> // 示例\n> var argv = require('minimist')(process.argv.slice(2));\n> console.log(argv);\n> \n> $ node example/parse.js -a beep -b boop\n> { _: [], a: 'beep', b: 'boop' }\n> \n> \n> 1\n> 2\n> 3\n> 4\n> 5\n> 6\n\ncheckInputArgs()\nconst log = require('@zh-dev-cli/log')\n...\nfunction checkInputArgs() {\n    const argv = require('minimist')(process.argv.slice(2));\n    checkArgs(argv)\n}\n\nfunction checkArgs(args) {\n    process.env.LOG_LEVEL = args.debug ? 'verbose' : 'info'\n}\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 检查环境变量\n\n> dotenv\n> \n> Dotenv是一个零依赖模块，它将环境变量从.env文件加载到process.env中。将配置与代码分开存储在环境中是基于the Twelve Factor App方法。\n\n\n# 检查是否为最新版本\n\n * 拿到当前版本号和包名\n\n * 通过包名在线上通过ajax拿到所有的版本, 并对其倒序排序, 最后取第一个\n\n * 把最新版本号和当前版本号作对比",normalizedContent:"# 拆分原则\n\n根据模块的功能拆分:\n\n * 核心模块: core\n * 命令模块: commands\n * 模型模块: models\n * 工具模块: utils\n\n> root-check\n> \n> 尝试降级具有root权限的进程的权限，如果失败则阻止访问\n\n\n# 执行准备\n\n创建功能模块文件夹， 并配置lerna packages\n\n\n# 检查版本号\n\n添加log lerna包\n\nlerna create @zh-dev-cli/log utils 如果你像我这样包的路径修改了的话就需要注意在更路径的package.json文件中workspaces 添加utils\n\n// utils/log/lib/index.js\n\nconst log = require('npmlog')\nlog.level = process.env.log_level ?? 'info'\nlog.heading = 'zh-dev-cli'\nlog.addlevel('success', 2000, {fg: 'green', bold: true})\nmodule.exports = log;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n// core/cli/lib/index.js\n\nconst pkg = require('../package.json')\nconst log = require('@zh-dev-cli/log')\nfunction checkpkgversion () {\n    let version = pkg.version;\n    log.notice('cli', version)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 检查node 版本\n\n> semver\n> \n> npm的语义版本器, 做各种各样的版本比对. 周下载量很高\n\n> colors\n> \n> 在node.js控制台中获取颜色和样式\n\n// const.js\n\nconst lowest_node_version = '12.0.0'\n\nmodule.exports = {\n    lowest_node_version\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n// cli.js\n\nconst semver = require('semver')\nconst colors = require('colors/safe');\n...\nfunction checknodeversion() {\n    const currentversion = process.version\n    const lowestversion = constant.lowest_node_version\n    if(semver.lt(currentversion, lowestversion)) {\n        throw new error(colors.red(`zh-dev-cli 需要安装 v${lowestversion} 以上版本的 node.js`))\n    }\n}\n\nfunction core () {\n    try {\n        checkpkgversion()\n        checknodeversion()\n    } catch (e) {\n        log.error(e?.message)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 检查root启动\n\nprocess.geteuid() 如果是0 , 说明是root账户, root账户所创建的文件是属于root账户的, 不变改写. 需要降级\n\n> root-check\n> \n> 尝试降级具有root权限的进程的权限，如果失败则阻止访问\n\nlerna add root-check@1.0.0 core/cli 安装\n\nfunction checkroot() {\n    const rootcheck = require('root-check')\n    rootcheck()\n}\n\n\n1\n2\n3\n4\n\n\n\n# 检查用户主目录\n\n> user-home 废弃 使用os-homedir\n> \n> 返回当前用户的主目录。\n\n> path-exists\n> \n> 检查路径是否存在\n\n安装: lerna add path-exists@4.0.0 core/cli 5.0.0版本需要使用到import导入, 与cjs不符\n\nconst pathexists = require('path-exists').sync;\n...\nfunction checkuserhome() {\n    if(!userhome || !pathexists(userhome)) {\n        throw new error(colors.red('当前登录用户主目录不存在'))\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 检查入参\n\n> minimist\n> \n> 解析参数选项 这个模块是乐观主义者的论点解析器的核心，没有任何花哨的装饰。\n> \n> // 示例\n> var argv = require('minimist')(process.argv.slice(2));\n> console.log(argv);\n> \n> $ node example/parse.js -a beep -b boop\n> { _: [], a: 'beep', b: 'boop' }\n> \n> \n> 1\n> 2\n> 3\n> 4\n> 5\n> 6\n\ncheckinputargs()\nconst log = require('@zh-dev-cli/log')\n...\nfunction checkinputargs() {\n    const argv = require('minimist')(process.argv.slice(2));\n    checkargs(argv)\n}\n\nfunction checkargs(args) {\n    process.env.log_level = args.debug ? 'verbose' : 'info'\n}\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 检查环境变量\n\n> dotenv\n> \n> dotenv是一个零依赖模块，它将环境变量从.env文件加载到process.env中。将配置与代码分开存储在环境中是基于the twelve factor app方法。\n\n\n# 检查是否为最新版本\n\n * 拿到当前版本号和包名\n\n * 通过包名在线上通过ajax拿到所有的版本, 并对其倒序排序, 最后取第一个\n\n * 把最新版本号和当前版本号作对比",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"Untitled",frontmatter:{title:"Untitled",date:"2023-02-11T17:15:33.000Z",permalink:"/pages/e20e84/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/1030344.%E8%84%9A%E6%89%8B%E6%9E%B6%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%86%8C%E5%92%8C%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%BC%80%E5%8F%91.html",relativePath:"10.大前端/1030.Node/1030344.脚手架命令注册和执行过程开发.md",key:"v-4ada5ffa",path:"/pages/e20e84/",headersStr:null,content:" * 设计高性能脚手架\n * Node 多进程开发\n * JavaScript 面相对象的实战技巧\n\n\n\n推荐使用npm包:\n\n> npminstall\n> \n> 使npm安装快速方便。\n> \n> https://www.npmjs.com/package/npminstall\n\n> Node.js: fs-extra\n> \n> fsextra添加了本机fs模块中未包含的文件系统方法，并为fs方法添加了promise支持。它还使用优雅的fs来防止EMFILE错误。它应该是fs的替代品。\n> \n> https://www.npmjs.com/package/fs-extra",normalizedContent:" * 设计高性能脚手架\n * node 多进程开发\n * javascript 面相对象的实战技巧\n\n\n\n推荐使用npm包:\n\n> npminstall\n> \n> 使npm安装快速方便。\n> \n> https://www.npmjs.com/package/npminstall\n\n> node.js: fs-extra\n> \n> fsextra添加了本机fs模块中未包含的文件系统方法，并为fs方法添加了promise支持。它还使用优雅的fs来防止emfile错误。它应该是fs的替代品。\n> \n> https://www.npmjs.com/package/fs-extra",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"koa学习",frontmatter:{title:"koa学习",date:"2022-01-13T16:18:27.000Z",permalink:"/pages/037850/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103040.koa%E5%AD%A6%E4%B9%A0.html",relativePath:"10.大前端/1030.Node/103040.koa学习.md",key:"v-e94a892c",path:"/pages/037850/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"restful api笔记",frontmatter:{title:"restful api笔记",date:"2022-01-13T16:18:45.000Z",permalink:"/pages/3e0a1c/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103041.restful%20api%E7%AC%94%E8%AE%B0.html",relativePath:"10.大前端/1030.Node/103041.restful api笔记.md",key:"v-25b79342",path:"/pages/3e0a1c/",headers:[{level:2,title:"HTTP options 方法的作用是什么 ？",slug:"http-options-方法的作用是什么",normalizedTitle:"http options 方法的作用是什么 ？",charIndex:2},{level:3,title:"allowedMethods 的作用",slug:"allowedmethods-的作用",normalizedTitle:"allowedmethods 的作用",charIndex:144},{level:2,title:"RESTful API 最佳实践--增删改查应该返回什么响应？",slug:"restful-api-最佳实践-增删改查应该返回什么响应",normalizedTitle:"restful api 最佳实践--增删改查应该返回什么响应？",charIndex:367},{level:2,title:"错误处理",slug:"错误处理",normalizedTitle:"错误处理",charIndex:499},{level:3,title:"异常状况",slug:"异常状况",normalizedTitle:"异常状况",charIndex:541},{level:3,title:"为什么要用错误处理",slug:"为什么要用错误处理",normalizedTitle:"为什么要用错误处理",charIndex:709},{level:3,title:"操作步骤",slug:"操作步骤",normalizedTitle:"操作步骤",charIndex:795},{level:3,title:"自己编写错误处理中间件",slug:"自己编写错误处理中间件",normalizedTitle:"自己编写错误处理中间件",charIndex:1099},{level:3,title:"使用 koa-json-error 进行错误处理",slug:"使用-koa-json-error-进行错误处理",normalizedTitle:"使用 koa-json-error 进行错误处理",charIndex:1623},{level:3,title:"使用 koa-parameter 校验参数(校验前端表单)",slug:"使用-koa-parameter-校验参数-校验前端表单",normalizedTitle:"使用 koa-parameter 校验参数(校验前端表单)",charIndex:1654},{level:2,title:"字段过滤",slug:"字段过滤",normalizedTitle:"字段过滤",charIndex:1926},{level:3,title:"设计schema默认隐藏部分字段",slug:"设计schema默认隐藏部分字段",normalizedTitle:"设计schema默认隐藏部分字段",charIndex:1935},{level:3,title:"通过查询字符串显示隐藏字段",slug:"通过查询字符串显示隐藏字段",normalizedTitle:"通过查询字符串显示隐藏字段",charIndex:3679}],headersStr:"HTTP options 方法的作用是什么 ？ allowedMethods 的作用 RESTful API 最佳实践--增删改查应该返回什么响应？ 错误处理 异常状况 为什么要用错误处理 操作步骤 自己编写错误处理中间件 使用 koa-json-error 进行错误处理 使用 koa-parameter 校验参数(校验前端表单) 字段过滤 设计schema默认隐藏部分字段 通过查询字符串显示隐藏字段",content:'# HTTP options 方法的作用是什么 ？\n\n * 检测服务器所支持的请求方法 发送options方式请求在返回的请求头Allow属性中可以看到支持的请求方法\n * CORS 中的预检请求 如果一个网站的其中的一部分接口的一部分方法支持跨域，我们可检测该方法是否可以跨域\n\n\n# allowedMethods 的作用\n\n * 代码:app.use(usersRouter.allowedMethods()) 加上它该路由都将支持options方法\n * 响应 options 方法， 告诉它所支持的请求方法\n   * 若没有使用此方法使用option方式请求就会报404错误\n * 相应的返回405（不允许）和501（没实现） 405： 支持该请求方法但是该接口功能未实现未写的时候 501： 不支持该请求方法是返回\n\n\n# RESTful API 最佳实践--增删改查应该返回什么响应？\n\n增加修改返回该对象 删除返回204状态码 实例：\n\nusersRouter.delete(\'/:id\', (ctx) => {\n  ctx.status = 204\n})\n\n\n1\n2\n3\n\n\n\n# 错误处理\n\n * 编程语言或计算机硬件里的一种机制\n * 处理软件或信息系统中出现的异常状况\n\n\n# 异常状况\n\n * 运行时错误, 都返回 500 建立在语法没有错误的基础上, 在运行时出现的错误, 如请求undefined时错误\n * 逻辑错误, 如 找不到(404) . 先决条件失败 ( 412 ) : 请求的id不存在 无法处理的实体 ( 参数格式不对 , 422 ) : 请求体参数格式不对 等..\n\n\n# 为什么要用错误处理\n\n * 防止程序挂掉 try...catch\n * 告诉用户错误信息 避免用户不知道错在哪里, 体验较差, 用户群体消失\n * 便于开发者调试\n\n\n# 操作步骤\n\n * 制造 404 , 412 , 500 三种错误\n\n 1. 404\n 2. 412\n\n  findById(ctx) {\n    if(ctx.params.id * 1 >= db.length) { // 不存在id时\n      ctx.throw(412, \'先决条件失败, id 大于等于数组长度了\')\n    }\n    ctx.body = { name: \'lilei\' }\n  }\n\n\n1\n2\n3\n4\n5\n6\n\n\n3. 500\n\n  find(ctx) {\n    ctx.body = a.b\n  }\n\n\n1\n2\n3\n\n * 了解 Koa 自带的错误处理做了什么\n\n\n# 自己编写错误处理中间件\n\n操作步骤\n\n * 自己编写错误处理中间件\n\napp.use(async(ctx, next) => {\n  try {\n    await next()\n  } catch (err) {\n    \n// message:"先决条件失败, id 大于等于数组长度了"\n// name:"PreconditionFailedError"\n// stack:"PreconditionFailedError: 先决条件失败, id 大于等于数组长度了\n// expose:true\n// status:412\n// statusCode:412\n    ctx.status = err.status || err.statusCode\n    ctx.body = {\n      message: err.message\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n 2. 500 ctx.status = err.status || err.statusCode || 500\n\n * 制造 404 , 412 , 500 三种错误来测试\n\n\n# 使用 koa-json-error 进行错误处理\n\n\n\n\n# 使用 koa-parameter 校验参数(校验前端表单)\n\n参数不正确, 返回422 app.use(parameter(app))不仅仅是一个中间件, 可以在ctx加上方法校验, 可以全局使用,所以传入app\n\nctx.verifyParams({\n      name: { type: \'string\', required: true},\n      age: { type: \'number\', required: true}\n    })\n\n\n1\n2\n3\n4\n\n\n\n\n补充： 409: 如新建用户，发现用户已存在，抛出错误\n\n\n# 字段过滤\n\n\n# 设计schema默认隐藏部分字段\n\n原返回\n\n{\n\t\t"gender": "male",\n\t\t"locations": [\n\t\t\t"上海",\n\t\t\t"北京"\n\t\t],\n\t\t"_id": "5eadafda08d7180ecc1fb330",\n\t\t"username": "izhaong",\n\t\t"employments": [\n\t\t\t{\n\t\t\t\t"_id": "5eadb33dfb66404e84c9fa57",\n\t\t\t\t"company": "biotree"\n\t\t\t}\n\t\t],\n\t\t"educations": [\n\t\t\t{\n\t\t\t\t"_id": "5eadb33dfb66404e84c9fa58",\n\t\t\t\t"school": "皇家机电",\n\t\t\t\t"major": "钒钛资源利用技术",\n\t\t\t\t"diploma": 3,\n\t\t\t\t"entrance_year": 2014,\n\t\t\t\t"graduation_year": 2017\n\t\t\t}\n\t\t],\n\t\t"avatar": "http://localhost:3000/upload/upload_7fb20d056f3d693d4bde34a2b4289783.jpeg",\n\t\t"business": "互联网",\n\t\t"headline": "诚意 正心 明理 格物 致知 修身 齐家"\n\t}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n设计\n\nconst userSchema = new Schema({\n  __v: { type: Number, select: false },\n  username: { type: String, required: true },\n  password: { type: String, required: true, select: false },\n  avatar: { type: String },\n  gender: { type: String, enum: [\'male\', \'femele\'], default: \'male\', required: true },\n  headline: { type: String },\n  locations: { type: [{ type: String }], select: false },\n  business: { type: String, select: false },\n  employments: { type: [{ company: { type: String }, job: { type: String } }], select: false },\n  educations: {\n    type: [{\n      school: { type: String },\n      major: { type: String },\n      diploma: { type: Number, enum: [1, 2, 3, 4, 5] },\n      entrance_year: { type: Number },\n      graduation_year: { type: Number }\n    }],  \n  select: false\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n设计之后\n\n{\n\t"gender": "male",\n\t"_id": "5eadafda08d7180ecc1fb330",\n\t"username": "izhaong",\n\t"avatar": "http://localhost:3000/upload/upload_7fb20d056f3d693d4bde34a2b4289783.jpeg",\n\t"headline": "诚意 正心 明理 格物 致知 修身 齐家"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 通过查询字符串显示隐藏字段\n\nmongoose是支持const user = await User.findById(ctx.params.id).select(\'+educations+business\')这种查询的 所以我们不能写死 处理得\n\nconst { fields } = ctx.query\n// f不能为空 过滤掉\nconst selectFields = fields.split(\';\').filter(f => f).map(f => \' +\' + f).join(\'\')\n// const user = await User.findById(ctx.params.id)\n// const user = await User.findById(ctx.params.id).select(\'+educations+business\')\nconst user = await User.findById(ctx.params.id).select(selectFields)\n\n\n1\n2\n3\n4\n5\n6\n\n\n查询{{api}}/users/5eadafda08d7180ecc1fb330?fields=educations;business得\n\n{\n\t"gender": "male",\n\t"_id": "5eadafda08d7180ecc1fb330",\n\t"username": "izhaong",\n\t"educations": [\n\t\t{\n\t\t\t"_id": "5eadca0728cdd1bf308632de",\n\t\t\t"school": "皇家机电",\n\t\t\t"major": "钒钛资源利用技术",\n\t\t\t"diploma": 3,\n\t\t\t"entrance_year": 2014,\n\t\t\t"graduation_year": 2017\n\t\t}\n\t],\n\t"avatar": "http://localhost:3000/upload/upload_7fb20d056f3d693d4bde34a2b4289783.jpeg",\n\t"business": "互联网",\n\t"headline": "诚意 正心 明理 格物 致知 修身 齐家"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n',normalizedContent:'# http options 方法的作用是什么 ？\n\n * 检测服务器所支持的请求方法 发送options方式请求在返回的请求头allow属性中可以看到支持的请求方法\n * cors 中的预检请求 如果一个网站的其中的一部分接口的一部分方法支持跨域，我们可检测该方法是否可以跨域\n\n\n# allowedmethods 的作用\n\n * 代码:app.use(usersrouter.allowedmethods()) 加上它该路由都将支持options方法\n * 响应 options 方法， 告诉它所支持的请求方法\n   * 若没有使用此方法使用option方式请求就会报404错误\n * 相应的返回405（不允许）和501（没实现） 405： 支持该请求方法但是该接口功能未实现未写的时候 501： 不支持该请求方法是返回\n\n\n# restful api 最佳实践--增删改查应该返回什么响应？\n\n增加修改返回该对象 删除返回204状态码 实例：\n\nusersrouter.delete(\'/:id\', (ctx) => {\n  ctx.status = 204\n})\n\n\n1\n2\n3\n\n\n\n# 错误处理\n\n * 编程语言或计算机硬件里的一种机制\n * 处理软件或信息系统中出现的异常状况\n\n\n# 异常状况\n\n * 运行时错误, 都返回 500 建立在语法没有错误的基础上, 在运行时出现的错误, 如请求undefined时错误\n * 逻辑错误, 如 找不到(404) . 先决条件失败 ( 412 ) : 请求的id不存在 无法处理的实体 ( 参数格式不对 , 422 ) : 请求体参数格式不对 等..\n\n\n# 为什么要用错误处理\n\n * 防止程序挂掉 try...catch\n * 告诉用户错误信息 避免用户不知道错在哪里, 体验较差, 用户群体消失\n * 便于开发者调试\n\n\n# 操作步骤\n\n * 制造 404 , 412 , 500 三种错误\n\n 1. 404\n 2. 412\n\n  findbyid(ctx) {\n    if(ctx.params.id * 1 >= db.length) { // 不存在id时\n      ctx.throw(412, \'先决条件失败, id 大于等于数组长度了\')\n    }\n    ctx.body = { name: \'lilei\' }\n  }\n\n\n1\n2\n3\n4\n5\n6\n\n\n3. 500\n\n  find(ctx) {\n    ctx.body = a.b\n  }\n\n\n1\n2\n3\n\n * 了解 koa 自带的错误处理做了什么\n\n\n# 自己编写错误处理中间件\n\n操作步骤\n\n * 自己编写错误处理中间件\n\napp.use(async(ctx, next) => {\n  try {\n    await next()\n  } catch (err) {\n    \n// message:"先决条件失败, id 大于等于数组长度了"\n// name:"preconditionfailederror"\n// stack:"preconditionfailederror: 先决条件失败, id 大于等于数组长度了\n// expose:true\n// status:412\n// statuscode:412\n    ctx.status = err.status || err.statuscode\n    ctx.body = {\n      message: err.message\n    }\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n 2. 500 ctx.status = err.status || err.statuscode || 500\n\n * 制造 404 , 412 , 500 三种错误来测试\n\n\n# 使用 koa-json-error 进行错误处理\n\n\n\n\n# 使用 koa-parameter 校验参数(校验前端表单)\n\n参数不正确, 返回422 app.use(parameter(app))不仅仅是一个中间件, 可以在ctx加上方法校验, 可以全局使用,所以传入app\n\nctx.verifyparams({\n      name: { type: \'string\', required: true},\n      age: { type: \'number\', required: true}\n    })\n\n\n1\n2\n3\n4\n\n\n\n\n补充： 409: 如新建用户，发现用户已存在，抛出错误\n\n\n# 字段过滤\n\n\n# 设计schema默认隐藏部分字段\n\n原返回\n\n{\n\t\t"gender": "male",\n\t\t"locations": [\n\t\t\t"上海",\n\t\t\t"北京"\n\t\t],\n\t\t"_id": "5eadafda08d7180ecc1fb330",\n\t\t"username": "izhaong",\n\t\t"employments": [\n\t\t\t{\n\t\t\t\t"_id": "5eadb33dfb66404e84c9fa57",\n\t\t\t\t"company": "biotree"\n\t\t\t}\n\t\t],\n\t\t"educations": [\n\t\t\t{\n\t\t\t\t"_id": "5eadb33dfb66404e84c9fa58",\n\t\t\t\t"school": "皇家机电",\n\t\t\t\t"major": "钒钛资源利用技术",\n\t\t\t\t"diploma": 3,\n\t\t\t\t"entrance_year": 2014,\n\t\t\t\t"graduation_year": 2017\n\t\t\t}\n\t\t],\n\t\t"avatar": "http://localhost:3000/upload/upload_7fb20d056f3d693d4bde34a2b4289783.jpeg",\n\t\t"business": "互联网",\n\t\t"headline": "诚意 正心 明理 格物 致知 修身 齐家"\n\t}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n设计\n\nconst userschema = new schema({\n  __v: { type: number, select: false },\n  username: { type: string, required: true },\n  password: { type: string, required: true, select: false },\n  avatar: { type: string },\n  gender: { type: string, enum: [\'male\', \'femele\'], default: \'male\', required: true },\n  headline: { type: string },\n  locations: { type: [{ type: string }], select: false },\n  business: { type: string, select: false },\n  employments: { type: [{ company: { type: string }, job: { type: string } }], select: false },\n  educations: {\n    type: [{\n      school: { type: string },\n      major: { type: string },\n      diploma: { type: number, enum: [1, 2, 3, 4, 5] },\n      entrance_year: { type: number },\n      graduation_year: { type: number }\n    }],  \n  select: false\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n设计之后\n\n{\n\t"gender": "male",\n\t"_id": "5eadafda08d7180ecc1fb330",\n\t"username": "izhaong",\n\t"avatar": "http://localhost:3000/upload/upload_7fb20d056f3d693d4bde34a2b4289783.jpeg",\n\t"headline": "诚意 正心 明理 格物 致知 修身 齐家"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 通过查询字符串显示隐藏字段\n\nmongoose是支持const user = await user.findbyid(ctx.params.id).select(\'+educations+business\')这种查询的 所以我们不能写死 处理得\n\nconst { fields } = ctx.query\n// f不能为空 过滤掉\nconst selectfields = fields.split(\';\').filter(f => f).map(f => \' +\' + f).join(\'\')\n// const user = await user.findbyid(ctx.params.id)\n// const user = await user.findbyid(ctx.params.id).select(\'+educations+business\')\nconst user = await user.findbyid(ctx.params.id).select(selectfields)\n\n\n1\n2\n3\n4\n5\n6\n\n\n查询{{api}}/users/5eadafda08d7180ecc1fb330?fields=educations;business得\n\n{\n\t"gender": "male",\n\t"_id": "5eadafda08d7180ecc1fb330",\n\t"username": "izhaong",\n\t"educations": [\n\t\t{\n\t\t\t"_id": "5eadca0728cdd1bf308632de",\n\t\t\t"school": "皇家机电",\n\t\t\t"major": "钒钛资源利用技术",\n\t\t\t"diploma": 3,\n\t\t\t"entrance_year": 2014,\n\t\t\t"graduation_year": 2017\n\t\t}\n\t],\n\t"avatar": "http://localhost:3000/upload/upload_7fb20d056f3d693d4bde34a2b4289783.jpeg",\n\t"business": "互联网",\n\t"headline": "诚意 正心 明理 格物 致知 修身 齐家"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Egg.js 技巧",frontmatter:{title:"Egg.js 技巧",date:"2021-11-29T22:28:27.000Z",permalink:"/pages/1210/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103050.Eggjs%20%E6%8A%80%E5%B7%A7.html",relativePath:"10.大前端/1030.Node/103050.Eggjs 技巧.md",key:"v-294fcdc0",path:"/pages/1210/",headers:[{level:2,title:"Sequelize",slug:"sequelize",normalizedTitle:"sequelize",charIndex:2},{level:3,title:"sequelize-cli",slug:"sequelize-cli",normalizedTitle:"sequelize-cli",charIndex:16},{level:2,title:"错误处理",slug:"错误处理",normalizedTitle:"错误处理",charIndex:2215}],headersStr:"Sequelize sequelize-cli 错误处理",content:'# Sequelize\n\n\n# sequelize-cli\n\n需要  Migrations  来帮我们管理数据结构的变更(在项目的演进过程中，每一个迭代都有可能对数据库数据结构做变更，怎样跟踪每一个迭代的数据变更，并在不同的环境（开发、测试、CI）和迭代切换中，快速变更数据结构呢？) sequelize 提供了  sequelize-cli  工具来实现  Migrations\n\nsequelize <command>\n\nCommands:\n  sequelize db:migrate                        Run pending migrations\n  sequelize db:migrate:schema:timestamps:add  Update migration table to have timestamps\n  sequelize db:migrate:status                 List the status of all migrations\n  sequelize db:migrate:undo                   Reverts a migration\n  sequelize db:migrate:undo:all               Revert all migrations ran\n  sequelize db:seed                           Run specified seeder\n  sequelize db:seed:undo                      Deletes data from the database\n  sequelize db:seed:all                       Run every seeder\n  sequelize db:seed:undo:all                  Deletes data from the database\n  sequelize db:create                         Create database specified by configuration\n  sequelize db:drop                           Drop database specified by configuration\n  sequelize init                              Initializes project\n  sequelize init:config                       Initializes configuration\n  sequelize init:migrations                   Initializes migrations\n  sequelize init:models                       Initializes models\n  sequelize init:seeders                      Initializes seeders\n  sequelize migration:generate                Generates a new migration file      [aliases: migration:create]\n  sequelize model:generate                    Generates a model and its migration [aliases: model:create]\n  sequelize seed:generate                     Generates a new seed file           [aliases: seed:create]\n\nOptions:\n  --version  Show version number                                                  [boolean]\n  --help     Show help                                                            [boolean]\n\nPlease specify a command\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n# 升级数据库\nnpx sequelize db:migrate\n# 如果有问题需要回滚，可以通过 `db:migrate:undo` 回退一个变更\n# npx sequelize db:migrate:undo\n# 可以通过 `db:migrate:undo:all` 回退到初始状态\n# npx sequelize db:migrate:undo:all\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 错误处理\n\n * 2020-10-23 15:20:10,104 ERROR 124768 [-/127.0.0.1/-/8ms POST /api/v1/video] nodejs.SequelizeDatabaseError: Incorrect string value: \'\\xE5\\x8F\\x8D\\xE5\\xAF\\xB9...\' for column \'introduce\' at row 1\n   \n   _    at Query.formatError (D:\\Code\\Work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:239:16)_ _    at Query.run (D:\\Code\\Work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:54:18)_ _    at processTicksAndRejections (internal/process/task_queues.js:97:5)_ name: "SequelizeDatabaseError" parent: {"code":"ER_TRUNCATED_WRONG_VALUE_FOR_FIELD","errno":1366,"sqlState":"HY000","sqlMessage":"Incorrect string value: \'\\xE5\\x8F\\x8D\\xE5\\xAF\\xB9...\' for column \'introduce\' at row 1","sql":"INSERT INTO videos (id,category_id,title,introduce,detail,create_date) VALUES (DEFAULT,?,?,?,?,?);","parameters":[1,"test11","tess 反对 t","231231","2020-10-23 07:20:10"]} original: {"code":"ER_TRUNCATED_WRONG_VALUE_FOR_FIELD","errno":1366,"sqlState":"HY000","sqlMessage":"Incorrect string value: \'\\xE5\\x8F\\x8D\\xE5\\xAF\\xB9...\' for column \'introduce\' at row 1","sql":"INSERT INTO videos (id,category_id,title,introduce,detail,create_date) VALUES (DEFAULT,?,?,?,?,?);","parameters":[1,"test11","tess 反对 t","231231","2020-10-23 07:20:10"]} sql: "INSERT INTO videos (id,category_id,title,introduce,detail,create_date) VALUES (DEFAULT,?,?,?,?,?);" parameters: [1,"test11","tess 反对 t","231231","2020-10-23 07:20:10"] pid: 124768 hostname: DESKTOP-FUCU627',normalizedContent:'# sequelize\n\n\n# sequelize-cli\n\n需要  migrations  来帮我们管理数据结构的变更(在项目的演进过程中，每一个迭代都有可能对数据库数据结构做变更，怎样跟踪每一个迭代的数据变更，并在不同的环境（开发、测试、ci）和迭代切换中，快速变更数据结构呢？) sequelize 提供了  sequelize-cli  工具来实现  migrations\n\nsequelize <command>\n\ncommands:\n  sequelize db:migrate                        run pending migrations\n  sequelize db:migrate:schema:timestamps:add  update migration table to have timestamps\n  sequelize db:migrate:status                 list the status of all migrations\n  sequelize db:migrate:undo                   reverts a migration\n  sequelize db:migrate:undo:all               revert all migrations ran\n  sequelize db:seed                           run specified seeder\n  sequelize db:seed:undo                      deletes data from the database\n  sequelize db:seed:all                       run every seeder\n  sequelize db:seed:undo:all                  deletes data from the database\n  sequelize db:create                         create database specified by configuration\n  sequelize db:drop                           drop database specified by configuration\n  sequelize init                              initializes project\n  sequelize init:config                       initializes configuration\n  sequelize init:migrations                   initializes migrations\n  sequelize init:models                       initializes models\n  sequelize init:seeders                      initializes seeders\n  sequelize migration:generate                generates a new migration file      [aliases: migration:create]\n  sequelize model:generate                    generates a model and its migration [aliases: model:create]\n  sequelize seed:generate                     generates a new seed file           [aliases: seed:create]\n\noptions:\n  --version  show version number                                                  [boolean]\n  --help     show help                                                            [boolean]\n\nplease specify a command\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n# 升级数据库\nnpx sequelize db:migrate\n# 如果有问题需要回滚，可以通过 `db:migrate:undo` 回退一个变更\n# npx sequelize db:migrate:undo\n# 可以通过 `db:migrate:undo:all` 回退到初始状态\n# npx sequelize db:migrate:undo:all\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 错误处理\n\n * 2020-10-23 15:20:10,104 error 124768 [-/127.0.0.1/-/8ms post /api/v1/video] nodejs.sequelizedatabaseerror: incorrect string value: \'\\xe5\\x8f\\x8d\\xe5\\xaf\\xb9...\' for column \'introduce\' at row 1\n   \n   _    at query.formaterror (d:\\code\\work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:239:16)_ _    at query.run (d:\\code\\work\\wxwl-resource-share\\node_modules_sequelize@6.3.5@sequelize\\lib\\dialects\\mysql\\query.js:54:18)_ _    at processticksandrejections (internal/process/task_queues.js:97:5)_ name: "sequelizedatabaseerror" parent: {"code":"er_truncated_wrong_value_for_field","errno":1366,"sqlstate":"hy000","sqlmessage":"incorrect string value: \'\\xe5\\x8f\\x8d\\xe5\\xaf\\xb9...\' for column \'introduce\' at row 1","sql":"insert into videos (id,category_id,title,introduce,detail,create_date) values (default,?,?,?,?,?);","parameters":[1,"test11","tess 反对 t","231231","2020-10-23 07:20:10"]} original: {"code":"er_truncated_wrong_value_for_field","errno":1366,"sqlstate":"hy000","sqlmessage":"incorrect string value: \'\\xe5\\x8f\\x8d\\xe5\\xaf\\xb9...\' for column \'introduce\' at row 1","sql":"insert into videos (id,category_id,title,introduce,detail,create_date) values (default,?,?,?,?,?);","parameters":[1,"test11","tess 反对 t","231231","2020-10-23 07:20:10"]} sql: "insert into videos (id,category_id,title,introduce,detail,create_date) values (default,?,?,?,?,?);" parameters: [1,"test11","tess 反对 t","231231","2020-10-23 07:20:10"] pid: 124768 hostname: desktop-fucu627',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"npm 使用记录",frontmatter:{title:"npm 使用记录",date:"2022-01-09T14:48:10.000Z",permalink:"/pages/110928/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103070.npm%20%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html",relativePath:"10.大前端/1030.Node/103070.npm 使用记录.md",key:"v-18b829d6",path:"/pages/110928/",headersStr:null,content:" * npm i **@next @next 是作者打的 next tag， 就是告诉 npm 我要装最新的包，包括测试版的包",normalizedContent:" * npm i **@next @next 是作者打的 next tag， 就是告诉 npm 我要装最新的包，包括测试版的包",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Sequelize 学习笔记",frontmatter:{title:"Sequelize 学习笔记",date:"2021-12-24T18:24:37.000Z",permalink:"/pages/9da7c4/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103052.Sequelize%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",relativePath:"10.大前端/1030.Node/103052.Sequelize 学习笔记.md",key:"v-0107a901",path:"/pages/9da7c4/",headers:[{level:2,title:"Sequelize 中文文档入门",slug:"sequelize-中文文档入门",normalizedTitle:"sequelize 中文文档入门",charIndex:2},{level:2,title:"基本设置",slug:"基本设置",normalizedTitle:"基本设置",charIndex:32},{level:3,title:"表名推断",slug:"表名推断",normalizedTitle:"表名推断",charIndex:41},{level:4,title:"强制表名称等于模型名称",slug:"强制表名称等于模型名称",normalizedTitle:"强制表名称等于模型名称",charIndex:159},{level:4,title:"直接提供表名",slug:"直接提供表名",normalizedTitle:"直接提供表名",charIndex:262},{level:3,title:"模型同步",slug:"模型同步",normalizedTitle:"模型同步",charIndex:362},{level:3,title:"时间戳",slug:"时间戳",normalizedTitle:"时间戳",charIndex:632},{level:3,title:"获取的值变更, 设置值变更(getter, setter)",slug:"获取的值变更-设置值变更-getter-setter",normalizedTitle:"获取的值变更, 设置值变更(getter, setter)",charIndex:1222},{level:4,title:"获取的值变更",slug:"获取的值变更",normalizedTitle:"获取的值变更",charIndex:1222},{level:4,title:"设置值变更",slug:"设置值变更",normalizedTitle:"设置值变更",charIndex:1230},{level:2,title:"模型 Model",slug:"模型-model",normalizedTitle:"模型 model",charIndex:1846},{level:3,title:"定义模型",slug:"定义模型",normalizedTitle:"定义模型",charIndex:1859},{level:3,title:"验证和约束",slug:"验证和约束",normalizedTitle:"验证和约束",charIndex:4734},{level:2,title:"基本查询",slug:"基本查询",normalizedTitle:"基本查询",charIndex:5256},{level:3,title:"排序",slug:"排序",normalizedTitle:"排序",charIndex:5265}],headersStr:"Sequelize 中文文档入门 基本设置 表名推断 强制表名称等于模型名称 直接提供表名 模型同步 时间戳 获取的值变更, 设置值变更(getter, setter) 获取的值变更 设置值变更 模型 Model 定义模型 验证和约束 基本查询 排序",content:"# Sequelize 中文文档入门\n\n\n# 核心概念\n\n\n# 基本设置\n\n\n# 表名推断\n\n默认情况下,当未提供表名时,Sequelize 会自动将模型名复数并将其用作表名. 这种复数是通过称为 inflection 的库在后台完成的,因此可以正确计算不规则的复数(例如 person -> people).\n\n# 强制表名称等于模型名称\n\nsequelize.define('User', {\n  // ... (属性)\n}, {\n  freezeTableName: true\n});\n\n\n1\n2\n3\n4\n5\n\n\n# 直接提供表名\n\nsequelize.define('User', {\n  // ... (属性)\n}, {\n  tableName: 'Employees'\n});\n\n\n1\n2\n3\n4\n5\n\n\n\n# 模型同步\n\n * User.sync() - 如果表不存在,则创建该表(如果已经存在,则不执行任何操作)\n\n * User.sync({ force: true }) - 将创建表,如果表已经存在,则将其首先删除\n\n * User.sync({ alter: true }) - 这将检查数据库中表的当前状态(它具有哪些列,它们的数据类型等),然后在表中进行必要的更改以使其与模型匹配\n\nawait User.sync({ force: true });\nconsole.log(\"用户模型表刚刚(重新)创建！\");\n\n\n1\n2\n\n\n\n# 时间戳\n\n默认情况下,Sequelize 使用数据类型 DataTypes.DATE 自动向每个模型添加 createdAt 和 updatedAt 字段. 这些字段会自动进行管理 - 每当你使用Sequelize 创建或更新内容时,这些字段都会被自动设置. createdAt 字段将包含代表创建时刻的时间戳,而 updatedAt 字段将包含最新更新的时间戳.\n\n对于带有 timestamps: false 参数的模型,可以禁用此行为：\n\nsequelize.define('User', {\n// ... (属性)\n}, {\n  timestamps: false\n});\n\n\n1\n2\n3\n4\n5\n\n\n也可以只启用 createdAt/updatedAt 之一,并为这些列提供自定义名称：\n\nclass Foo extends Model {}\nFoo.init({ /* 属性 */ }, {\n  sequelize,\n// 不要忘记启用时间戳！\n  timestamps: true,\n// 不想要 createdAt\n  createdAt: false,\n// 想要 updatedAt 但是希望名称叫做 updateTimestamp\n  updatedAt: 'updateTimestamp'\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 获取的值变更, 设置值变更(getter, setter)\n\n# 获取的值变更\n\nconst User = sequelize.define('user', {\n  // 假设我们想要以大写形式查看每个用户名,\n  // 即使它们在数据库本身中不一定是大写的\n  username: {\n    type: DataTypes.STRING,\n    get() {\n      const rawValue = this.getDataValue(username);\n      return rawValue ? rawValue.toUpperCase() : null;\n    }\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 设置值变更\n\nconst User = sequelize.define('user', {\n  username: DataTypes.STRING,\n  password: {\n    type: DataTypes.STRING,\n    set(value) {\n      // 在数据库中以明文形式存储密码是很糟糕的.\n      // 使用适当的哈希函数来加密哈希值更好.\n      this.setDataValue('password', hash(value));\n    }\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 模型 Model\n\n\n# 定义模型\n\nclass Foo extends Model {}\nFoo.init({\n  // 如果未设置，实例化将自动将标志设置为true\n  flag: { type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true },\n\n  // 日期的默认值=>当前时间\n  myDate: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },\n\n  // setting allowNull to false will add NOT NULL to the column, which means an error will be\n  // thrown from the DB when the query is executed if the column is null. If you want to check that a value\n  // is not null before querying the DB, look at the validations section below.\n  title: { type: DataTypes.STRING, allowNull: false },\n\n  // Creating two objects with the same value will throw an error. The unique property can be either a\n  // boolean, or a string. If you provide the same string for multiple columns, they will form a\n  // composite unique key.\n  uniqueOne: { type: DataTypes.STRING,  unique: 'compositeIndex' },\n  uniqueTwo: { type: DataTypes.INTEGER, unique: 'compositeIndex' },\n\n  // The unique property is simply a shorthand to create a unique constraint.\n  someUnique: { type: DataTypes.STRING, unique: true },\n\n  // Go on reading for further information about primary keys\n  identifier: { type: DataTypes.STRING, primaryKey: true },\n\n  // autoIncrement can be used to create auto_incrementing integer columns\n  incrementMe: { type: DataTypes.INTEGER, autoIncrement: true },\n\n  // You can specify a custom column name via the 'field' attribute:\n  fieldWithUnderscores: { type: DataTypes.STRING, field: 'field_with_underscores' },\n\n  // It is possible to create foreign keys:\n  bar_id: {\n    type: DataTypes.INTEGER,\n\n    references: {\n      // This is a reference to another model\n      model: Bar,\n\n      // This is the column name of the referenced model\n      key: 'id',\n\n      // With PostgreSQL, it is optionally possible to declare when to check the foreign key constraint, passing the Deferrable type.\n      deferrable: Deferrable.INITIALLY_IMMEDIATE\n      // Options:\n      // - `Deferrable.INITIALLY_IMMEDIATE` - Immediately check the foreign key constraints\n      // - `Deferrable.INITIALLY_DEFERRED` - Defer all foreign key constraint check to the end of a transaction\n      // - `Deferrable.NOT` - Don't defer the checks at all (default) - This won't allow you to dynamically change the rule in a transaction\n    }\n  },\n\n  // Comments can only be added to columns in MySQL, MariaDB, PostgreSQL and MSSQL\n  commentMe: {\n    type: DataTypes.INTEGER,\n    comment: 'This is a column name that has a comment'\n  }\n}, {\n  sequelize,\n  modelName: 'foo',\n\n  // Using `unique: true` in an attribute above is exactly the same as creating the index in the model's options:\n  indexes: [{ unique: true, fields: ['someUnique'] }]\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n\n# 验证和约束\n\n使用自定义错误消息代替validator提供的错误消息。使用一个对象，而不是纯值或参数数组，例如验证器不需要参数，可以给自定义消息\n\nisInt: {\n  msg: \"必须是整数\"\n}\n\n\n1\n2\n3\n\n\n你也可以有条件地允许空值，用一个定制的验证器，因为它不会被跳过:\n\nclass User extends Model {}\nUser.init({\n  age: Sequelize.INTEGER,\n  name: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    validate: {\n      customValidator(value) {\n        if (value === null && this.age !== 10) {\n          throw new Error(\"name can't be null unless age is 10\");\n        }\n      })\n    }\n  }\n}, { sequelize });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 基本查询\n\n\n# 排序\n\norder选项接受一个项目数组来对查询进行排序，或者使用sequelize方法。这些项目本身就是以[列，方向]的形式排列的。该列将被正确转义，方向将在有效方向的白名单中被检查(如ASC、DESC、NULLS FIRST等)。\n\nSubtask.findAll({\n  order: [\n    // 将转义标题和验证DESC对一个有效的方向参数的列表\n    ['title', 'DESC'],\n    // 按最大(年龄)降序\n    sequelize.fn('max', sequelize.col('age')),\n    // 按最大(年龄)降序\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n    // 将顺序由其他函数(' col1 '， 12， 'lalala') 降序\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],\n    // 将使用模型名称作为关联的名称来订购关联模型的createdAt。\n    [Task, 'createdAt', 'DESC'],\n    // 将使用模型名称作为关联的名称，通过关联模型的createdAt进行排序。\n    [Task, Project, 'createdAt', 'DESC'],\n    // 排序将由一个关联模型的创建使用名称的关联\n    ['Task', 'createdAt', 'DESC'],\n    // 使用关联的名称来创建嵌套的关联模型排序\n    ['Task', 'Project', 'createdAt', 'DESC'],\n    // 通过使用关联对象来创建关联模型排序. (首选方法)\n    [Subtask.associations.Task, 'createdAt', 'DESC'],\n    // 通过使用关联对象的嵌套关联模型的创建排序。 (首选方法)\n    [Subtask.associations.Task, Task.associations.Project, 'createdAt', 'DESC'],\n    // 通过使用一个简单的关联对象来创建一个关联模型。\n    [{model: Task, as: 'Task'}, 'createdAt', 'DESC'],\n    // 由嵌套关联模型的createdAt创建简单关联对象。\n    [{model: Task, as: 'Task'}, {model: Project, as: 'Project'}, 'createdAt', 'DESC']\n  ],\n  // 最大年龄降序\n  order: sequelize.literal('max(age) DESC'),\n  // 当方向被省略时，按最大年龄升序假设升序是默认的顺序\n  // 当方向被省略时，按年龄升序排列默认为升序\n  order: sequelize.random()\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n",normalizedContent:"# sequelize 中文文档入门\n\n\n# 核心概念\n\n\n# 基本设置\n\n\n# 表名推断\n\n默认情况下,当未提供表名时,sequelize 会自动将模型名复数并将其用作表名. 这种复数是通过称为 inflection 的库在后台完成的,因此可以正确计算不规则的复数(例如 person -> people).\n\n# 强制表名称等于模型名称\n\nsequelize.define('user', {\n  // ... (属性)\n}, {\n  freezetablename: true\n});\n\n\n1\n2\n3\n4\n5\n\n\n# 直接提供表名\n\nsequelize.define('user', {\n  // ... (属性)\n}, {\n  tablename: 'employees'\n});\n\n\n1\n2\n3\n4\n5\n\n\n\n# 模型同步\n\n * user.sync() - 如果表不存在,则创建该表(如果已经存在,则不执行任何操作)\n\n * user.sync({ force: true }) - 将创建表,如果表已经存在,则将其首先删除\n\n * user.sync({ alter: true }) - 这将检查数据库中表的当前状态(它具有哪些列,它们的数据类型等),然后在表中进行必要的更改以使其与模型匹配\n\nawait user.sync({ force: true });\nconsole.log(\"用户模型表刚刚(重新)创建！\");\n\n\n1\n2\n\n\n\n# 时间戳\n\n默认情况下,sequelize 使用数据类型 datatypes.date 自动向每个模型添加 createdat 和 updatedat 字段. 这些字段会自动进行管理 - 每当你使用sequelize 创建或更新内容时,这些字段都会被自动设置. createdat 字段将包含代表创建时刻的时间戳,而 updatedat 字段将包含最新更新的时间戳.\n\n对于带有 timestamps: false 参数的模型,可以禁用此行为：\n\nsequelize.define('user', {\n// ... (属性)\n}, {\n  timestamps: false\n});\n\n\n1\n2\n3\n4\n5\n\n\n也可以只启用 createdat/updatedat 之一,并为这些列提供自定义名称：\n\nclass foo extends model {}\nfoo.init({ /* 属性 */ }, {\n  sequelize,\n// 不要忘记启用时间戳！\n  timestamps: true,\n// 不想要 createdat\n  createdat: false,\n// 想要 updatedat 但是希望名称叫做 updatetimestamp\n  updatedat: 'updatetimestamp'\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 获取的值变更, 设置值变更(getter, setter)\n\n# 获取的值变更\n\nconst user = sequelize.define('user', {\n  // 假设我们想要以大写形式查看每个用户名,\n  // 即使它们在数据库本身中不一定是大写的\n  username: {\n    type: datatypes.string,\n    get() {\n      const rawvalue = this.getdatavalue(username);\n      return rawvalue ? rawvalue.touppercase() : null;\n    }\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 设置值变更\n\nconst user = sequelize.define('user', {\n  username: datatypes.string,\n  password: {\n    type: datatypes.string,\n    set(value) {\n      // 在数据库中以明文形式存储密码是很糟糕的.\n      // 使用适当的哈希函数来加密哈希值更好.\n      this.setdatavalue('password', hash(value));\n    }\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 模型 model\n\n\n# 定义模型\n\nclass foo extends model {}\nfoo.init({\n  // 如果未设置，实例化将自动将标志设置为true\n  flag: { type: datatypes.boolean, allownull: false, defaultvalue: true },\n\n  // 日期的默认值=>当前时间\n  mydate: { type: datatypes.date, defaultvalue: datatypes.now },\n\n  // setting allownull to false will add not null to the column, which means an error will be\n  // thrown from the db when the query is executed if the column is null. if you want to check that a value\n  // is not null before querying the db, look at the validations section below.\n  title: { type: datatypes.string, allownull: false },\n\n  // creating two objects with the same value will throw an error. the unique property can be either a\n  // boolean, or a string. if you provide the same string for multiple columns, they will form a\n  // composite unique key.\n  uniqueone: { type: datatypes.string,  unique: 'compositeindex' },\n  uniquetwo: { type: datatypes.integer, unique: 'compositeindex' },\n\n  // the unique property is simply a shorthand to create a unique constraint.\n  someunique: { type: datatypes.string, unique: true },\n\n  // go on reading for further information about primary keys\n  identifier: { type: datatypes.string, primarykey: true },\n\n  // autoincrement can be used to create auto_incrementing integer columns\n  incrementme: { type: datatypes.integer, autoincrement: true },\n\n  // you can specify a custom column name via the 'field' attribute:\n  fieldwithunderscores: { type: datatypes.string, field: 'field_with_underscores' },\n\n  // it is possible to create foreign keys:\n  bar_id: {\n    type: datatypes.integer,\n\n    references: {\n      // this is a reference to another model\n      model: bar,\n\n      // this is the column name of the referenced model\n      key: 'id',\n\n      // with postgresql, it is optionally possible to declare when to check the foreign key constraint, passing the deferrable type.\n      deferrable: deferrable.initially_immediate\n      // options:\n      // - `deferrable.initially_immediate` - immediately check the foreign key constraints\n      // - `deferrable.initially_deferred` - defer all foreign key constraint check to the end of a transaction\n      // - `deferrable.not` - don't defer the checks at all (default) - this won't allow you to dynamically change the rule in a transaction\n    }\n  },\n\n  // comments can only be added to columns in mysql, mariadb, postgresql and mssql\n  commentme: {\n    type: datatypes.integer,\n    comment: 'this is a column name that has a comment'\n  }\n}, {\n  sequelize,\n  modelname: 'foo',\n\n  // using `unique: true` in an attribute above is exactly the same as creating the index in the model's options:\n  indexes: [{ unique: true, fields: ['someunique'] }]\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n\n# 验证和约束\n\n使用自定义错误消息代替validator提供的错误消息。使用一个对象，而不是纯值或参数数组，例如验证器不需要参数，可以给自定义消息\n\nisint: {\n  msg: \"必须是整数\"\n}\n\n\n1\n2\n3\n\n\n你也可以有条件地允许空值，用一个定制的验证器，因为它不会被跳过:\n\nclass user extends model {}\nuser.init({\n  age: sequelize.integer,\n  name: {\n    type: datatypes.string,\n    allownull: true,\n    validate: {\n      customvalidator(value) {\n        if (value === null && this.age !== 10) {\n          throw new error(\"name can't be null unless age is 10\");\n        }\n      })\n    }\n  }\n}, { sequelize });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 基本查询\n\n\n# 排序\n\norder选项接受一个项目数组来对查询进行排序，或者使用sequelize方法。这些项目本身就是以[列，方向]的形式排列的。该列将被正确转义，方向将在有效方向的白名单中被检查(如asc、desc、nulls first等)。\n\nsubtask.findall({\n  order: [\n    // 将转义标题和验证desc对一个有效的方向参数的列表\n    ['title', 'desc'],\n    // 按最大(年龄)降序\n    sequelize.fn('max', sequelize.col('age')),\n    // 按最大(年龄)降序\n    [sequelize.fn('max', sequelize.col('age')), 'desc'],\n    // 将顺序由其他函数(' col1 '， 12， 'lalala') 降序\n    [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'desc'],\n    // 将使用模型名称作为关联的名称来订购关联模型的createdat。\n    [task, 'createdat', 'desc'],\n    // 将使用模型名称作为关联的名称，通过关联模型的createdat进行排序。\n    [task, project, 'createdat', 'desc'],\n    // 排序将由一个关联模型的创建使用名称的关联\n    ['task', 'createdat', 'desc'],\n    // 使用关联的名称来创建嵌套的关联模型排序\n    ['task', 'project', 'createdat', 'desc'],\n    // 通过使用关联对象来创建关联模型排序. (首选方法)\n    [subtask.associations.task, 'createdat', 'desc'],\n    // 通过使用关联对象的嵌套关联模型的创建排序。 (首选方法)\n    [subtask.associations.task, task.associations.project, 'createdat', 'desc'],\n    // 通过使用一个简单的关联对象来创建一个关联模型。\n    [{model: task, as: 'task'}, 'createdat', 'desc'],\n    // 由嵌套关联模型的createdat创建简单关联对象。\n    [{model: task, as: 'task'}, {model: project, as: 'project'}, 'createdat', 'desc']\n  ],\n  // 最大年龄降序\n  order: sequelize.literal('max(age) desc'),\n  // 当方向被省略时，按最大年龄升序假设升序是默认的顺序\n  // 当方向被省略时，按年龄升序排列默认为升序\n  order: sequelize.random()\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"npm 仓库",frontmatter:{title:"npm 仓库",date:"2023-04-19T10:47:16.000Z",permalink:"/pages/34d0c9/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103098.npm%20%E4%BB%93%E5%BA%93.html",relativePath:"10.大前端/1030.Node/103098.npm 仓库.md",key:"v-7ae44890",path:"/pages/34d0c9/",headersStr:null,content:" * npm-check-updates",normalizedContent:" * npm-check-updates",charsets:{},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"node 记错修复",frontmatter:{title:"node 记错修复",date:"2021-12-31T11:40:12.000Z",permalink:"/pages/50e782/",categories:["大前端","Node"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1030.Node/103090.node%20%E8%AE%B0%E9%94%99%E4%BF%AE%E5%A4%8D.html",relativePath:"10.大前端/1030.Node/103090.node 记错修复.md",key:"v-244826a4",path:"/pages/50e782/",headersStr:null,content:" * ReferenceError: primordials is not defined\n   \n   gulp 与 node 版本不兼容问题\n   \n   * 回退 node 版本到 12\n   * 升级 gulp 版本",normalizedContent:" * referenceerror: primordials is not defined\n   \n   gulp 与 node 版本不兼容问题\n   \n   * 回退 node 版本到 12\n   * 升级 gulp 版本",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"webpack考点梳理",frontmatter:{title:"webpack考点梳理",date:"2022-05-20T21:54:57.000Z",permalink:"/pages/53d17e/",categories:["大前端","webpack&vite"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1035.%E6%9E%84%E5%BB%BA/1035005.webpack%E8%80%83%E7%82%B9%E6%A2%B3%E7%90%86.html",relativePath:"10.大前端/1035.构建/1035005.webpack考点梳理.md",key:"v-75a6e172",path:"/pages/53d17e/",headers:[{level:2,title:"基本使用",slug:"基本使用",normalizedTitle:"基本使用",charIndex:2},{level:2,title:"高级特性",slug:"高级特性",normalizedTitle:"高级特性",charIndex:11},{level:3,title:"webpack5  和webpack4 差异",slug:"webpack5-和webpack4-差异",normalizedTitle:"webpack5  和webpack4 差异",charIndex:null},{level:4,title:"前端为何要进行打包和构建？",slug:"前端为何要进行打包和构建",normalizedTitle:"前端为何要进行打包和构建？",charIndex:1944},{level:4,title:"loader 和 plugin 的区别",slug:"loader-和-plugin-的区别",normalizedTitle:"loader 和 plugin 的区别",charIndex:2118},{level:4,title:"常见 loader 和 plugin 有哪些",slug:"常见-loader-和-plugin-有哪些",normalizedTitle:"常见 loader 和 plugin 有哪些",charIndex:2207},{level:4,title:"babel 和 webpack 的区别",slug:"babel-和-webpack-的区别",normalizedTitle:"babel 和 webpack 的区别",charIndex:2233},{level:4,title:"babel-polyfill 和 babel-runtime 的区别",slug:"babel-polyfill-和-babel-runtime-的区别",normalizedTitle:"babel-polyfill 和 babel-runtime 的区别",charIndex:2325},{level:4,title:"webpack 如何实现懒加载",slug:"webpack-如何实现懒加载",normalizedTitle:"webpack 如何实现懒加载",charIndex:2441},{level:4,title:"webpack 优化构建速度（可用于生产环境）",slug:"webpack-优化构建速度-可用于生产环境",normalizedTitle:"webpack 优化构建速度（可用于生产环境）",charIndex:2531}],headersStr:"基本使用 高级特性 webpack5  和webpack4 差异 前端为何要进行打包和构建？ loader 和 plugin 的区别 常见 loader 和 plugin 有哪些 babel 和 webpack 的区别 babel-polyfill 和 babel-runtime 的区别 webpack 如何实现懒加载 webpack 优化构建速度（可用于生产环境）",content:"# 基本使用\n\n\n# 高级特性\n\ncss\n\n开发环境下 style-loader\n\n生产环境\n\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst TerserJSPlugin = require('terser-webpack-plugin')\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n\n\nmodule.exports = smart(webpackCommonConf, {\n    mode: 'production',\n    module: {\n      rules: [\n        ...\n         // 抽离 css\n          {\n              test: /\\.css$/,\n              loader: [\n                  MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                  'css-loader',\n                  'postcss-loader'\n              ]\n          },\n          // 抽离 less\n          {\n              test: /\\.less$/,\n              loader: [\n                  MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                  'css-loader',\n                  'less-loader',\n                  'postcss-loader'\n              ]\n          }\n      ]\n    },\n   plugins: [\n        new CleanWebpackPlugin(), // 会默认清空 output.path 文件夹\n        new webpack.DefinePlugin({\n            // window.ENV = 'production'\n            ENV: JSON.stringify('production')\n        }),\n\n        // 抽离 css 文件\n        new MiniCssExtractPlugin({\n            filename: 'css/main.[contentHash:8].css'\n        })\n     ...\n     ],\n   optimization: {\n        // 压缩 css\n        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],\n     ...\n   }\n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\n\n# webpack5 和webpack4 差异\n\npackage. j son 的 dey-server 命令改了〝\"dev\"：\"webpack serve --config build/ webpack. dev.js\",\n\n * 升级新版本 const { merge } = require( 'webpack-merge\")\n * 升级新版本 const { CleanwebpackPlugin } = require( 'clean-webpack-p Lugin\"）\n * module. rules 中 Loader: ['xxx-loader ']换成use: [ 'xxx-loader']\n * filename:/bundle. [contenthash:8].js\" 其中h小写，不能大写\n\n----------------------------------------\n\n题目\n\n# 前端为何要进行打包和构建？\n\n * 体积更小（Tree-Shaking、压缩、合并），加载更快\n\n * 编译高级语言或语法（TS，ES6+，模块化，Scss\n\n * 兼容性和错误检查(Polyfil, postcss、 eslint)\n\n * 统一、高效的开发环境\n\n * 统一的构建流程和产出标准\n\n * 集成公司构建规范（提测、上线等）\n\n# loader 和 plugin 的区别\n\n * loader 模块转换器，如 less -> css\n * plugin 扩展插件，如 HtmlWebpackPlugin\n\n# 常见 loader 和 plugin 有哪些\n\n# babel 和 webpack 的区别\n\n * babel -JS 新语法编译工具，不关心模块化\n * webpack一打包构建工具，是多个 loader plugin 的集合\n\n# babel-polyfill 和 babel-runtime 的区别\n\n * babel-polyfill 会污染全局\n * babel-runtime 不会污染全局\n * 产出第三方 li 要用 babel-runtime\n\n# webpack 如何实现懒加载\n\n * import()\n * 结合 Vue React 异步组件\n * 结合 Vue-router React-router 异步加载路由\n\n# webpack 优化构建速度（可用于生产环境）\n\n * \n * l-loader\n * happyPack\n * IgnorePlugin\n * ParallelUglifyPlugin\n * noParse",normalizedContent:"# 基本使用\n\n\n# 高级特性\n\ncss\n\n开发环境下 style-loader\n\n生产环境\n\nconst minicssextractplugin = require('mini-css-extract-plugin')\nconst terserjsplugin = require('terser-webpack-plugin')\nconst optimizecssassetsplugin = require('optimize-css-assets-webpack-plugin')\n\n\nmodule.exports = smart(webpackcommonconf, {\n    mode: 'production',\n    module: {\n      rules: [\n        ...\n         // 抽离 css\n          {\n              test: /\\.css$/,\n              loader: [\n                  minicssextractplugin.loader,  // 注意，这里不再用 style-loader\n                  'css-loader',\n                  'postcss-loader'\n              ]\n          },\n          // 抽离 less\n          {\n              test: /\\.less$/,\n              loader: [\n                  minicssextractplugin.loader,  // 注意，这里不再用 style-loader\n                  'css-loader',\n                  'less-loader',\n                  'postcss-loader'\n              ]\n          }\n      ]\n    },\n   plugins: [\n        new cleanwebpackplugin(), // 会默认清空 output.path 文件夹\n        new webpack.defineplugin({\n            // window.env = 'production'\n            env: json.stringify('production')\n        }),\n\n        // 抽离 css 文件\n        new minicssextractplugin({\n            filename: 'css/main.[contenthash:8].css'\n        })\n     ...\n     ],\n   optimization: {\n        // 压缩 css\n        minimizer: [new terserjsplugin({}), new optimizecssassetsplugin({})],\n     ...\n   }\n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\n\n# webpack5 和webpack4 差异\n\npackage. j son 的 dey-server 命令改了〝\"dev\"：\"webpack serve --config build/ webpack. dev.js\",\n\n * 升级新版本 const { merge } = require( 'webpack-merge\")\n * 升级新版本 const { cleanwebpackplugin } = require( 'clean-webpack-p lugin\"）\n * module. rules 中 loader: ['xxx-loader ']换成use: [ 'xxx-loader']\n * filename:/bundle. [contenthash:8].js\" 其中h小写，不能大写\n\n----------------------------------------\n\n题目\n\n# 前端为何要进行打包和构建？\n\n * 体积更小（tree-shaking、压缩、合并），加载更快\n\n * 编译高级语言或语法（ts，es6+，模块化，scss\n\n * 兼容性和错误检查(polyfil, postcss、 eslint)\n\n * 统一、高效的开发环境\n\n * 统一的构建流程和产出标准\n\n * 集成公司构建规范（提测、上线等）\n\n# loader 和 plugin 的区别\n\n * loader 模块转换器，如 less -> css\n * plugin 扩展插件，如 htmlwebpackplugin\n\n# 常见 loader 和 plugin 有哪些\n\n# babel 和 webpack 的区别\n\n * babel -js 新语法编译工具，不关心模块化\n * webpack一打包构建工具，是多个 loader plugin 的集合\n\n# babel-polyfill 和 babel-runtime 的区别\n\n * babel-polyfill 会污染全局\n * babel-runtime 不会污染全局\n * 产出第三方 li 要用 babel-runtime\n\n# webpack 如何实现懒加载\n\n * import()\n * 结合 vue react 异步组件\n * 结合 vue-router react-router 异步加载路由\n\n# webpack 优化构建速度（可用于生产环境）\n\n * \n * l-loader\n * happypack\n * ignoreplugin\n * paralleluglifyplugin\n * noparse",charsets:{cjk:!0},lastUpdated:"2023/09/17, 16:36:29",lastUpdatedTimestamp:1694939789e3},{title:"自制脚手架",frontmatter:{title:"自制脚手架",date:"2023-01-06T22:15:11.000Z",permalink:"/pages/d1a534/",categories:["大前端","webpack&vite"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1035.%E6%9E%84%E5%BB%BA/1035050.%E8%87%AA%E5%88%B6%E8%84%9A%E6%89%8B%E6%9E%B6.html",relativePath:"10.大前端/1035.构建/1035050.自制脚手架.md",key:"v-404acf5a",path:"/pages/d1a534/",headersStr:null,content:"在控制台中, 安装的全局的npm 插件, 输入的命令其实指向的是 node/bin/* , 其本身是一个超链接, 指向的是",normalizedContent:"在控制台中, 安装的全局的npm 插件, 输入的命令其实指向的是 node/bin/* , 其本身是一个超链接, 指向的是",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:16:28",lastUpdatedTimestamp:1694952988e3},{title:"项目基础建设",frontmatter:{title:"项目基础建设",date:"2022-05-21T10:29:28.000Z",permalink:"/pages/cf415a/",categories:["大前端","webpack&vite"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1035.%E6%9E%84%E5%BB%BA/1035010.%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE.html",relativePath:"10.大前端/1035.构建/1035010.项目基础建设.md",key:"v-0dbc8d1f",path:"/pages/cf415a/",headersStr:null,content:"TODO",normalizedContent:"todo",charsets:{},lastUpdated:"2023/09/17, 16:36:29",lastUpdatedTimestamp:1694939789e3},{title:"babel",frontmatter:{title:"babel",date:"2022-06-10T19:36:38.000Z",permalink:"/pages/890104/",categories:["大前端","webpack&vite"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1035.%E6%9E%84%E5%BB%BA/1035200.babel.html",relativePath:"10.大前端/1035.构建/1035200.babel.md",key:"v-6c24507d",path:"/pages/890104/",headers:[{level:3,title:"babel-polyfill 是什么",slug:"babel-polyfill-是什么",normalizedTitle:"babel-polyfill 是什么",charIndex:237},{level:4,title:"babel-polyfill 的问题",slug:"babel-polyfill-的问题",normalizedTitle:"babel-polyfill 的问题",charIndex:653},{level:4,title:"babel-runtime",slug:"babel-runtime",normalizedTitle:"babel-runtime",charIndex:26}],headersStr:"babel-polyfill 是什么 babel-polyfill 的问题 babel-runtime",content:'环境搭建＆ 基本配置 babel-polyfill babel-runtime\n\n环境搭建 .babelrc配置\n\n{\n    "presets": [ // plugin集合，做的预设\n        [\n            "@babel/preset-env",\n           ...\n        ]\n    ],\n    "plugins": [\n        ...\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# babel-polyfill 是什么\n\n * 什么是 Polyfill\n   \n   core-js 和 regenerator 的集合\n   \n   * 语法补充\n\n * core-js 和 regenerator\n\n * 按需引入\n   \n   // presets\n           [\n               "@babel/preset-env",\n             // 按需引用\n               {\n                   "useBuiltIns": "usage",\n                   "corejs": 3\n               }\n           ]\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\npreset: 和 plugins\n\n# babel-polyfill 的问题\n\n * 会污染全局环境\n * 如果做一个独立的 web 系统，则无碍\n * 如果做一个第三方 lib，则会有问题\n\n# babel-runtime\n\nbabel-runtime 就能解决以上的问题\n\n安装\n\n{\n  \n  "devDependencies": {\n    "@babel/cli": "^7.7.5",\n    "@babel/core": "^7.7.5",\n    "@babel/plugin-transform-runtime": "^7.7.5",\n    "@babel/preset-env": "^7.7.5"\n  },\n  "dependencies": {\n    "@babel/polyfill": "^7.7.0",\n    "@babel/runtime": "^7.7.5"\n  }\n  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n配置。babelrc\n\n\n{\n    "presets": [\n        [\n            "@babel/preset-env",\n            {\n                "useBuiltIns": "usage",\n                "corejs": 3\n            }\n        ]\n    ],\n    "plugins": [\n        [\n            "@babel/plugin-transform-runtime",\n            {\n                "absoluteRuntime": false,\n                "corejs": 3,\n                "helpers": true,\n                "regenerator": true,\n                "useESModules": false\n            }\n        ]\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n',normalizedContent:'环境搭建＆ 基本配置 babel-polyfill babel-runtime\n\n环境搭建 .babelrc配置\n\n{\n    "presets": [ // plugin集合，做的预设\n        [\n            "@babel/preset-env",\n           ...\n        ]\n    ],\n    "plugins": [\n        ...\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# babel-polyfill 是什么\n\n * 什么是 polyfill\n   \n   core-js 和 regenerator 的集合\n   \n   * 语法补充\n\n * core-js 和 regenerator\n\n * 按需引入\n   \n   // presets\n           [\n               "@babel/preset-env",\n             // 按需引用\n               {\n                   "usebuiltins": "usage",\n                   "corejs": 3\n               }\n           ]\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\npreset: 和 plugins\n\n# babel-polyfill 的问题\n\n * 会污染全局环境\n * 如果做一个独立的 web 系统，则无碍\n * 如果做一个第三方 lib，则会有问题\n\n# babel-runtime\n\nbabel-runtime 就能解决以上的问题\n\n安装\n\n{\n  \n  "devdependencies": {\n    "@babel/cli": "^7.7.5",\n    "@babel/core": "^7.7.5",\n    "@babel/plugin-transform-runtime": "^7.7.5",\n    "@babel/preset-env": "^7.7.5"\n  },\n  "dependencies": {\n    "@babel/polyfill": "^7.7.0",\n    "@babel/runtime": "^7.7.5"\n  }\n  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n配置。babelrc\n\n\n{\n    "presets": [\n        [\n            "@babel/preset-env",\n            {\n                "usebuiltins": "usage",\n                "corejs": 3\n            }\n        ]\n    ],\n    "plugins": [\n        [\n            "@babel/plugin-transform-runtime",\n            {\n                "absoluteruntime": false,\n                "corejs": 3,\n                "helpers": true,\n                "regenerator": true,\n                "useesmodules": false\n            }\n        ]\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n',charsets:{cjk:!0},lastUpdated:"2023/09/17, 16:36:29",lastUpdatedTimestamp:1694939789e3},{title:"pnpm 配置",frontmatter:{title:"pnpm 配置",date:"2023-09-17T15:23:02.000Z",permalink:"/pages/066240/",categories:["大前端","构建"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1035.%E6%9E%84%E5%BB%BA/1035305.pnpm%20%E9%85%8D%E7%BD%AE.html",relativePath:"10.大前端/1035.构建/1035305.pnpm 配置.md",key:"v-633514a6",path:"/pages/066240/",headers:[{level:2,title:"pnpm介绍",slug:"pnpm介绍",normalizedTitle:"pnpm介绍",charIndex:2},{level:2,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:405},{level:3,title:"pnpm源配置",slug:"pnpm源配置",normalizedTitle:"pnpm源配置",charIndex:587},{level:3,title:"pnpm 实际安装位置配置",slug:"pnpm-实际安装位置配置",normalizedTitle:"pnpm 实际安装位置配置",charIndex:656}],headersStr:"pnpm介绍 配置 pnpm源配置 pnpm 实际安装位置配置",content:'# pnpm介绍\n\n\n\n当使用 npm 时，如果你有 100 个项目，并且所有项目都有一个相同的依赖包，那么， 你在硬盘上就需要保存 100 份该相同依赖包的副本。然而，如果是使用 pnpm，依赖包将被 存放在一个统一的位置，因此：\n\n 1. 如果你对同一依赖包需要使用不同的版本，则仅有 版本之间不同的文件会被存储起来。例如，如果某个依赖包包含 100 个文件，其发布了一个新 版本，并且新版本中只有一个文件有修改，则 pnpm update 只需要添加一个 新文件到存储中，而不会因为一个文件的修改而保存依赖包的 所有文件。\n 2. 所有文件都保存在硬盘上的统一的位置。当安装软件包时， 其包含的所有文件都会硬链接自此位置，而不会占用 额外的硬盘空间。这让你可以在项目之间方便地共享相同版本的 依赖包。\n\n最终结果就是以项目和依赖包的比例来看，你节省了大量的硬盘空间， 并且安装速度也大大提高了！\n\n\n# 配置\n\npnpm 使用的是 npm 的配置 格式。因此，你应该以 npm 相同的方式来对其进行配置。例如，\n\npnpm config set store-dir /path/to/.pnpm-store\n\n\n1\n\n\n如果未配置任何存储，则 pnpm 将在同一硬盘上自动创建一个存储。 如果你需要 pnpm 能够跨多个硬盘或文件系统工作， 请阅读 FAQ。\n\n\n# pnpm源配置\n\npnpm set registry "https://registry.npmmirror.com"\n\n\n1\n\n\n\n# pnpm 实际安装位置配置\n\n默认安装在该项目盘路径的.pnpm-store 上\n\n修改\n\n在pnpm的配置文件中配置以下配置:\n\n 1. 配置PNPM全局安装路径\n 2. 配置PNPM全局bin文件安装路径\n 3. 配置PNPM cache路径\n 4. 配置PNPM state路径\n\n把E:.pnpm-store替换成PNP全局安装的路径\n\nshell\n复制代码pnpm config set global-bin-dir "E:\\.pnpm-store"\npnpm config set cache-dir "E:\\.pnpm-store\\cache"\npnpm config set state-dir "E:\\.pnpm-store\\state"\npnpm config set global-dir "E:\\.pnpm-store\\global"\n\n\n1\n2\n3\n4\n5\n\n\n软件包存储应与安装位于同一驱动器和文件系统上，否则软件包将被复制，而不是链接。这是由于硬链接工作方式的限制，一个文件系统上的文件无法寻址另一个文件系统中的位置。',normalizedContent:'# pnpm介绍\n\n\n\n当使用 npm 时，如果你有 100 个项目，并且所有项目都有一个相同的依赖包，那么， 你在硬盘上就需要保存 100 份该相同依赖包的副本。然而，如果是使用 pnpm，依赖包将被 存放在一个统一的位置，因此：\n\n 1. 如果你对同一依赖包需要使用不同的版本，则仅有 版本之间不同的文件会被存储起来。例如，如果某个依赖包包含 100 个文件，其发布了一个新 版本，并且新版本中只有一个文件有修改，则 pnpm update 只需要添加一个 新文件到存储中，而不会因为一个文件的修改而保存依赖包的 所有文件。\n 2. 所有文件都保存在硬盘上的统一的位置。当安装软件包时， 其包含的所有文件都会硬链接自此位置，而不会占用 额外的硬盘空间。这让你可以在项目之间方便地共享相同版本的 依赖包。\n\n最终结果就是以项目和依赖包的比例来看，你节省了大量的硬盘空间， 并且安装速度也大大提高了！\n\n\n# 配置\n\npnpm 使用的是 npm 的配置 格式。因此，你应该以 npm 相同的方式来对其进行配置。例如，\n\npnpm config set store-dir /path/to/.pnpm-store\n\n\n1\n\n\n如果未配置任何存储，则 pnpm 将在同一硬盘上自动创建一个存储。 如果你需要 pnpm 能够跨多个硬盘或文件系统工作， 请阅读 faq。\n\n\n# pnpm源配置\n\npnpm set registry "https://registry.npmmirror.com"\n\n\n1\n\n\n\n# pnpm 实际安装位置配置\n\n默认安装在该项目盘路径的.pnpm-store 上\n\n修改\n\n在pnpm的配置文件中配置以下配置:\n\n 1. 配置pnpm全局安装路径\n 2. 配置pnpm全局bin文件安装路径\n 3. 配置pnpm cache路径\n 4. 配置pnpm state路径\n\n把e:.pnpm-store替换成pnp全局安装的路径\n\nshell\n复制代码pnpm config set global-bin-dir "e:\\.pnpm-store"\npnpm config set cache-dir "e:\\.pnpm-store\\cache"\npnpm config set state-dir "e:\\.pnpm-store\\state"\npnpm config set global-dir "e:\\.pnpm-store\\global"\n\n\n1\n2\n3\n4\n5\n\n\n软件包存储应与安装位于同一驱动器和文件系统上，否则软件包将被复制，而不是链接。这是由于硬链接工作方式的限制，一个文件系统上的文件无法寻址另一个文件系统中的位置。',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"webpack高级使用",frontmatter:{title:"webpack高级使用",date:"2022-06-10T14:08:05.000Z",permalink:"/pages/820652/",categories:["大前端","webpack&vite"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1035.%E6%9E%84%E5%BB%BA/1035100.webpack%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8.html",relativePath:"10.大前端/1035.构建/1035100.webpack高级使用.md",key:"v-2b182e4d",path:"/pages/820652/",headers:[{level:2,title:"抽离公共代码和第三方代码",slug:"抽离公共代码和第三方代码",normalizedTitle:"抽离公共代码和第三方代码",charIndex:2},{level:3,title:"动态数据-懒加载",slug:"动态数据-懒加载",normalizedTitle:"动态数据-懒加载",charIndex:996},{level:2,title:"module chunk bundle 的区别",slug:"module-chunk-bundle-的区别",normalizedTitle:"module chunk bundle 的区别",charIndex:1078},{level:2,title:"webpack 性能优化 - 构建速度",slug:"webpack-性能优化-构建速度",normalizedTitle:"webpack 性能优化 - 构建速度",charIndex:1206},{level:3,title:"优化 babel-loader",slug:"优化-babel-loader",normalizedTitle:"优化 babel-loader",charIndex:1230},{level:3,title:"IgnorePlugin 避免引入无用模块",slug:"ignoreplugin-避免引入无用模块",normalizedTitle:"ignoreplugin 避免引入无用模块",charIndex:1483},{level:3,title:"noParse 避免重复打包",slug:"noparse-避免重复打包",normalizedTitle:"noparse 避免重复打包",charIndex:1685},{level:3,title:"happyPack 多进程打包",slug:"happypack-多进程打包",normalizedTitle:"happypack 多进程打包",charIndex:1706},{level:3,title:"ParallelUglifyPlugin 多进程压缩JS",slug:"paralleluglifyplugin-多进程压缩js",normalizedTitle:"paralleluglifyplugin 多进程压缩js",charIndex:2209},{level:3,title:"自动刷新 热更新",slug:"自动刷新-热更新",normalizedTitle:"自动刷新 热更新",charIndex:2931},{level:3,title:"DllPlugin 动态链接库插件",slug:"dllplugin-动态链接库插件",normalizedTitle:"dllplugin 动态链接库插件",charIndex:3143},{level:2,title:"webpack 性能优化 - 产出代码",slug:"webpack-性能优化-产出代码",normalizedTitle:"webpack 性能优化 - 产出代码",charIndex:4771},{level:2,title:"ES6 Module 和 Commonjs 区别",slug:"es6-module-和-commonjs-区别",normalizedTitle:"es6 module 和 commonjs 区别",charIndex:5127}],headersStr:"抽离公共代码和第三方代码 动态数据-懒加载 module chunk bundle 的区别 webpack 性能优化 - 构建速度 优化 babel-loader IgnorePlugin 避免引入无用模块 noParse 避免重复打包 happyPack 多进程打包 ParallelUglifyPlugin 多进程压缩JS 自动刷新 热更新 DllPlugin 动态链接库插件 webpack 性能优化 - 产出代码 ES6 Module 和 Commonjs 区别",content:"# 抽离公共代码和第三方代码\n\n    optimization: {\n      \t...\n        // 分割代码块\n        splitChunks: {\n            chunks: 'all',\n            /**\n             * initial 入口chunk，对于异步导入的文件不处理\n                async 异步chunk，只对异步导入的文件处理\n                all 全部chunk\n             */\n\n            // 缓存分组\n            cacheGroups: {\n                // 第三方模块\n                vendor: {\n                    name: 'vendor', // chunk 名称\n                    priority: 1, // 权限更高，优先抽离，重要！！！\n                    test: /node_modules/,\n                    minSize: 0,  // 大小限制\n                    minChunks: 1  // 最少复用过几次\n                },\n\n                // 公共的模块\n                common: {\n                    name: 'common', // chunk 名称\n                    priority: 0, // 优先级\n                    minSize: 0,  // 公共模块的大小限制\n                    minChunks: 2  // 公共模块最少复用过几次\n                }\n            }\n        }\n      ...\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 动态数据-懒加载\n\nimport('**').then(res => {\n\tres.default.** // 注意default\n})\n\n\n1\n2\n3\n\n\n\n# module chunk bundle 的区别\n\n\n\n * module- 各个源码文件，webpack 中一切皆模块\n * chunk - 多模块合并成的，如 entry import splitChunk\n * bundle- 最终的输出文件\n\n\n# webpack 性能优化 - 构建速度\n\n\n# 优化 babel-loader\n\n{\n    test:八.js$/，\n    use: [\"babel-loader?cacheDirectory']，//开启缓存\n    include: path. reso lve(dirname,'src\"），//明确范围\n    //// 排除范围，include 和 exclude 两者选一个即可\n    // exclude: path. resolve(_dirname,'node_ modules\")\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# IgnorePlugin 避免引入无用模块\n\n * import moment from 'moment'\n * 默认会引入所有语言 JS代码，代码过大\n * 如何只引入中文？\n\n// webpack.prod.js\n\n//忽略 moment 下的 / Locale 目录\nnew webpack.Ignoreplugin(/\\.\\/locale/, /moment/\n\n\n1\n2\n3\n4\n\n\n\n\n\n# noParse 避免重复打包\n\n\n\n\n# happyPack 多进程打包\n\n * JS单线程，开启多进程打包\n * 提高构建速度（特别是多核 CPU)\n\n// module.rules\n  // js\n  {\n      test: /\\.js$/,\n      // 把对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例\n      use: ['happypack/loader?id=babel'],\n      include: srcPath,\n      // exclude: /node_modules/\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n// plugins\n// happyPack 开启多进程打包\nnew HappyPack({\n    // 用唯一的标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件\n    id: 'babel',\n    // 如何处理 .js 文件，用法和 Loader 配置中一样\n    loaders: ['babel-loader?cacheDirectory']\n}),\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# ParallelUglifyPlugin 多进程压缩JS\n\n * webpack 内置 Uglify 工具压缩 JS\n * JS单线程，开启多进程压缩更快\n * 和 happyPack 同理\n\n// plugins\n\n// 使用 ParallelUglifyPlugin 并行压缩输出的 JS 代码\nnew ParallelUglifyPlugin({\n    // 传递给 UglifyJS 的参数\n    // （还是使用 UglifyJS 压缩，只不过帮助开启了多进程）\n    uglifyJS: {\n        output: {\n            beautify: false, // 最紧凑的输出\n            comments: false, // 删除所有的注释\n        },\n        compress: {\n            // 删除所有的 `console` 语句，可以兼容ie浏览器\n            drop_console: true,\n            // 内嵌定义了但是只用到一次的变量\n            collapse_vars: true,\n            // 提取出出现多次但是没有定义成变量去引用的静态值\n            reduce_vars: true,\n        }\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n----------------------------------------\n\n开发环境下\n\n\n# 自动刷新 热更新\n\n热更新需要开启监听范围\n\n// 增加，开启热更新之后的代码逻辑\nif (module.hot) {\n    module.hot.accept(['./math'], () => {\n        const sumRes = sum(10, 30)\n        console.log('sumRes in hot', sumRes)\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# DllPlugin 动态链接库插件\n\n * 前端框架如 vue React，体积大，构建慢\n\n * 较稳定，不常升级版本\n\n * 同一个版本只构建一次即可，不用每次都重新构建\n\n * webpack 已内置 DllPlugin 支持\n\n * DlPlugin -打包出dll文件\n   \n   react.dll.js\n   \n   manifest.json // 索引文件\n\n * DlIlReferencePlugin - 使用 dlll文件\n\nindex.html 中引入react.dll.js文件\n\n然后配置索引地址\n\nplugins\n\nnew DllPlugin({\n      // 动态链接库的全局变量名称，需要和 output.library 中保持一致\n      // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值\n      // 例如 react.manifest.json 中就有 \"name\": \"_dll_react\"\n      name: '_dll_[name]',\n      // 描述动态链接库的 manifest.json 文件输出时的文件名称\n      path: path.join(distPath, '[name].manifest.json'),\n    }),\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n使用: 创建webpack.dll.js\n\nconst path = require('path')\nconst DllPlugin = require('webpack/lib/DllPlugin')\nconst { srcPath, distPath } = require('./paths')\n\nmodule.exports = {\n  mode: 'development',\n  // JS 执行入口文件\n  entry: {\n    // 把 React 相关模块的放到一个单独的动态链接库\n    react: ['react', 'react-dom']\n  },\n  output: {\n    // 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，\n    // 也就是 entry 中配置的 react 和 polyfill\n    filename: '[name].dll.js',\n    // 输出的文件都放到 dist 目录下\n    path: distPath,\n    // 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react\n    // 之所以在前面加上 _dll_ 是为了防止全局变量冲突\n    library: '_dll_[name]',\n  },\n  plugins: [\n    // 接入 DllPlugin\n    new DllPlugin({\n      // 动态链接库的全局变量名称，需要和 output.library 中保持一致\n      // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值\n      // 例如 react.manifest.json 中就有 \"name\": \"_dll_react\"\n      name: '_dll_[name]',\n      // 描述动态链接库的 manifest.json 文件输出时的文件名称\n      path: path.join(distPath, '[name].manifest.json'),\n    }),\n  ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# webpack 性能优化 - 产出代码\n\n * 体积更小\n\n * 合理分包，不重复加载\n\n * 速度更快、内存使用更少\n\n * 小图片 base64 编码\n\n * bundle 加 hash\n\n * 懒加载\n\n * 提取公共代码\n\n * IngorePlugin\n\n * 使用cdn 加速\n   \n   * publicPath\n\n * 使用 production\n   \n   * 更改mode配置 ， production会自动压缩代码\n   * Vue React 等会自动删掉调试代码（如开发环境的 warning）\n   * 启动 Tree-Shaking\n\n * Scope Hosting\n   \n   * 代码体积更小\n   * 创建函数作用域更少\n   * 代码可读性更好\n   * \n\n\n# ES6 Module 和 Commonjs 区别\n\n两个都是模块化解决方案\n\n * ES6 Module 静态引入，编译时引入\n * Commonjs 动态引入，执行时引入\n * 只有 ES6 Module 才能静态分析，实现 Tree-Shaking",normalizedContent:"# 抽离公共代码和第三方代码\n\n    optimization: {\n      \t...\n        // 分割代码块\n        splitchunks: {\n            chunks: 'all',\n            /**\n             * initial 入口chunk，对于异步导入的文件不处理\n                async 异步chunk，只对异步导入的文件处理\n                all 全部chunk\n             */\n\n            // 缓存分组\n            cachegroups: {\n                // 第三方模块\n                vendor: {\n                    name: 'vendor', // chunk 名称\n                    priority: 1, // 权限更高，优先抽离，重要！！！\n                    test: /node_modules/,\n                    minsize: 0,  // 大小限制\n                    minchunks: 1  // 最少复用过几次\n                },\n\n                // 公共的模块\n                common: {\n                    name: 'common', // chunk 名称\n                    priority: 0, // 优先级\n                    minsize: 0,  // 公共模块的大小限制\n                    minchunks: 2  // 公共模块最少复用过几次\n                }\n            }\n        }\n      ...\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 动态数据-懒加载\n\nimport('**').then(res => {\n\tres.default.** // 注意default\n})\n\n\n1\n2\n3\n\n\n\n# module chunk bundle 的区别\n\n\n\n * module- 各个源码文件，webpack 中一切皆模块\n * chunk - 多模块合并成的，如 entry import splitchunk\n * bundle- 最终的输出文件\n\n\n# webpack 性能优化 - 构建速度\n\n\n# 优化 babel-loader\n\n{\n    test:八.js$/，\n    use: [\"babel-loader?cachedirectory']，//开启缓存\n    include: path. reso lve(dirname,'src\"），//明确范围\n    //// 排除范围，include 和 exclude 两者选一个即可\n    // exclude: path. resolve(_dirname,'node_ modules\")\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# ignoreplugin 避免引入无用模块\n\n * import moment from 'moment'\n * 默认会引入所有语言 js代码，代码过大\n * 如何只引入中文？\n\n// webpack.prod.js\n\n//忽略 moment 下的 / locale 目录\nnew webpack.ignoreplugin(/\\.\\/locale/, /moment/\n\n\n1\n2\n3\n4\n\n\n\n\n\n# noparse 避免重复打包\n\n\n\n\n# happypack 多进程打包\n\n * js单线程，开启多进程打包\n * 提高构建速度（特别是多核 cpu)\n\n// module.rules\n  // js\n  {\n      test: /\\.js$/,\n      // 把对 .js 文件的处理转交给 id 为 babel 的 happypack 实例\n      use: ['happypack/loader?id=babel'],\n      include: srcpath,\n      // exclude: /node_modules/\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n// plugins\n// happypack 开启多进程打包\nnew happypack({\n    // 用唯一的标识符 id 来代表当前的 happypack 是用来处理一类特定的文件\n    id: 'babel',\n    // 如何处理 .js 文件，用法和 loader 配置中一样\n    loaders: ['babel-loader?cachedirectory']\n}),\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# paralleluglifyplugin 多进程压缩js\n\n * webpack 内置 uglify 工具压缩 js\n * js单线程，开启多进程压缩更快\n * 和 happypack 同理\n\n// plugins\n\n// 使用 paralleluglifyplugin 并行压缩输出的 js 代码\nnew paralleluglifyplugin({\n    // 传递给 uglifyjs 的参数\n    // （还是使用 uglifyjs 压缩，只不过帮助开启了多进程）\n    uglifyjs: {\n        output: {\n            beautify: false, // 最紧凑的输出\n            comments: false, // 删除所有的注释\n        },\n        compress: {\n            // 删除所有的 `console` 语句，可以兼容ie浏览器\n            drop_console: true,\n            // 内嵌定义了但是只用到一次的变量\n            collapse_vars: true,\n            // 提取出出现多次但是没有定义成变量去引用的静态值\n            reduce_vars: true,\n        }\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n----------------------------------------\n\n开发环境下\n\n\n# 自动刷新 热更新\n\n热更新需要开启监听范围\n\n// 增加，开启热更新之后的代码逻辑\nif (module.hot) {\n    module.hot.accept(['./math'], () => {\n        const sumres = sum(10, 30)\n        console.log('sumres in hot', sumres)\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# dllplugin 动态链接库插件\n\n * 前端框架如 vue react，体积大，构建慢\n\n * 较稳定，不常升级版本\n\n * 同一个版本只构建一次即可，不用每次都重新构建\n\n * webpack 已内置 dllplugin 支持\n\n * dlplugin -打包出dll文件\n   \n   react.dll.js\n   \n   manifest.json // 索引文件\n\n * dlilreferenceplugin - 使用 dlll文件\n\nindex.html 中引入react.dll.js文件\n\n然后配置索引地址\n\nplugins\n\nnew dllplugin({\n      // 动态链接库的全局变量名称，需要和 output.library 中保持一致\n      // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值\n      // 例如 react.manifest.json 中就有 \"name\": \"_dll_react\"\n      name: '_dll_[name]',\n      // 描述动态链接库的 manifest.json 文件输出时的文件名称\n      path: path.join(distpath, '[name].manifest.json'),\n    }),\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n使用: 创建webpack.dll.js\n\nconst path = require('path')\nconst dllplugin = require('webpack/lib/dllplugin')\nconst { srcpath, distpath } = require('./paths')\n\nmodule.exports = {\n  mode: 'development',\n  // js 执行入口文件\n  entry: {\n    // 把 react 相关模块的放到一个单独的动态链接库\n    react: ['react', 'react-dom']\n  },\n  output: {\n    // 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，\n    // 也就是 entry 中配置的 react 和 polyfill\n    filename: '[name].dll.js',\n    // 输出的文件都放到 dist 目录下\n    path: distpath,\n    // 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react\n    // 之所以在前面加上 _dll_ 是为了防止全局变量冲突\n    library: '_dll_[name]',\n  },\n  plugins: [\n    // 接入 dllplugin\n    new dllplugin({\n      // 动态链接库的全局变量名称，需要和 output.library 中保持一致\n      // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值\n      // 例如 react.manifest.json 中就有 \"name\": \"_dll_react\"\n      name: '_dll_[name]',\n      // 描述动态链接库的 manifest.json 文件输出时的文件名称\n      path: path.join(distpath, '[name].manifest.json'),\n    }),\n  ],\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# webpack 性能优化 - 产出代码\n\n * 体积更小\n\n * 合理分包，不重复加载\n\n * 速度更快、内存使用更少\n\n * 小图片 base64 编码\n\n * bundle 加 hash\n\n * 懒加载\n\n * 提取公共代码\n\n * ingoreplugin\n\n * 使用cdn 加速\n   \n   * publicpath\n\n * 使用 production\n   \n   * 更改mode配置 ， production会自动压缩代码\n   * vue react 等会自动删掉调试代码（如开发环境的 warning）\n   * 启动 tree-shaking\n\n * scope hosting\n   \n   * 代码体积更小\n   * 创建函数作用域更少\n   * 代码可读性更好\n   * \n\n\n# es6 module 和 commonjs 区别\n\n两个都是模块化解决方案\n\n * es6 module 静态引入，编译时引入\n * commonjs 动态引入，执行时引入\n * 只有 es6 module 才能静态分析，实现 tree-shaking",charsets:{cjk:!0},lastUpdated:"2023/09/17, 16:36:29",lastUpdatedTimestamp:1694939789e3},{title:"vue2中使用jsx",frontmatter:{title:"vue2中使用jsx",date:"2022-01-13T16:32:23.000Z",permalink:"/pages/e3d23f/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/1040021.vue2%E4%B8%AD%E4%BD%BF%E7%94%A8jsx.html",relativePath:"10.大前端/1040.Vue/1040021.vue2中使用jsx.md",key:"v-2f04e1e9",path:"/pages/e3d23f/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:2},{level:2,title:"安装使用JSX",slug:"安装使用jsx",normalizedTitle:"安装使用jsx",charIndex:1294},{level:3,title:"安装babel插件",slug:"安装babel插件",normalizedTitle:"安装babel插件",charIndex:1308},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:1296},{level:4,title:"babel7",slug:"babel7",normalizedTitle:"babel7",charIndex:1403},{level:4,title:"babel 6",slug:"babel-6",normalizedTitle:"babel 6",charIndex:1773}],headersStr:"背景 安装使用JSX 安装babel插件 使用 babel7 babel 6",content:"# 背景\n\n如果你写了很多 render 函数，可能会觉得下面这样的代码写起来很痛苦：\n\ncreateElement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createElement('span', 'Hello'),\n    ' world!'\n  ]\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n[\n\t{ label: '最近更新时间', prop: 'update_time', align: 'center', visible: false },\n  {\n    label: '操作', align: 'center', 'min-width': '180px', render: (h, { row }) => {\n      return h('div',\n        [h('el-popconfirm', {\n          props: { title: '确定删除吗？', 'confirm-button-type': 'danger' },\n          class: 'mr-10',\n          on: {\n            confirm: () => { this.delItem(row) }\n          }\n        },\n        [h('el-button', { slot: 'reference', props: { size: 'mini', type: 'danger' }}, '删除')]),\n        h('el-button', { props: { size: 'mini', type: 'primary' }, nativeOn: { click: () => { this.editItem(row) } }}, '编辑')]\n      )\n    }\n  }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n特别是对应的模板如此简单的情况下：\n\n<anchored-heading :level=\"1\">\n  <span>Hello</span> world!\n</anchored-heading>\n\n\n1\n2\n3\n\n\n<el-popconfirm\n\ttitle=\"确定删除吗？\"\n\t'confirm-button-type'=\"danger\"  \n  @confirm=\"delItem(row)\"\n>\n   <el-button slot=\"reference\" size=\"mini\" type=\"danger\">删除</el-button>\n</el-popconfirm>\n\n<el-button size=\"mini\" type=\"danger\" @click=\"editItem(row)\">编辑</el-button>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n\n# 安装使用JSX\n\n\n\n\n# 安装babel插件\n\nnpm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n\n\n# 使用\n\n\n\n# babel7\n\n * 配置babel.config.js\n\nmodule.exports = {\n  presets: ['@vue/babel-preset-jsx'],\n}\n\n\n1\n2\n3\n\n\n如果你出现这个错误：\nDuplicate declaration \"h\" (This is an error on an internal node. Probably an internal error.)\n试试这个（H函数传递）\n\nmodule.exports = {\n  presets: [\n    [\n      '@vue/babel-preset-jsx',\n      {\n        injectH: false\n      }\n    ]\n  ]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n# babel 6\n\nnpm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-preset-env --save-dev\n\n * 配置.babelrc\n\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n\n\n1\n2\n3\n4\n",normalizedContent:"# 背景\n\n如果你写了很多 render 函数，可能会觉得下面这样的代码写起来很痛苦：\n\ncreateelement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createelement('span', 'hello'),\n    ' world!'\n  ]\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n[\n\t{ label: '最近更新时间', prop: 'update_time', align: 'center', visible: false },\n  {\n    label: '操作', align: 'center', 'min-width': '180px', render: (h, { row }) => {\n      return h('div',\n        [h('el-popconfirm', {\n          props: { title: '确定删除吗？', 'confirm-button-type': 'danger' },\n          class: 'mr-10',\n          on: {\n            confirm: () => { this.delitem(row) }\n          }\n        },\n        [h('el-button', { slot: 'reference', props: { size: 'mini', type: 'danger' }}, '删除')]),\n        h('el-button', { props: { size: 'mini', type: 'primary' }, nativeon: { click: () => { this.edititem(row) } }}, '编辑')]\n      )\n    }\n  }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n特别是对应的模板如此简单的情况下：\n\n<anchored-heading :level=\"1\">\n  <span>hello</span> world!\n</anchored-heading>\n\n\n1\n2\n3\n\n\n<el-popconfirm\n\ttitle=\"确定删除吗？\"\n\t'confirm-button-type'=\"danger\"  \n  @confirm=\"delitem(row)\"\n>\n   <el-button slot=\"reference\" size=\"mini\" type=\"danger\">删除</el-button>\n</el-popconfirm>\n\n<el-button size=\"mini\" type=\"danger\" @click=\"edititem(row)\">编辑</el-button>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n\n# 安装使用jsx\n\n\n\n\n# 安装babel插件\n\nnpm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n\n\n# 使用\n\n\n\n# babel7\n\n * 配置babel.config.js\n\nmodule.exports = {\n  presets: ['@vue/babel-preset-jsx'],\n}\n\n\n1\n2\n3\n\n\n如果你出现这个错误：\nduplicate declaration \"h\" (this is an error on an internal node. probably an internal error.)\n试试这个（h函数传递）\n\nmodule.exports = {\n  presets: [\n    [\n      '@vue/babel-preset-jsx',\n      {\n        injecth: false\n      }\n    ]\n  ]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n# babel 6\n\nnpm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-preset-env --save-dev\n\n * 配置.babelrc\n\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n\n\n1\n2\n3\n4\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"持久化存储实时读取",frontmatter:{title:"持久化存储实时读取",date:"2022-01-13T13:33:22.000Z",permalink:"/pages/d36e75/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104005.%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96.html",relativePath:"10.大前端/1040.Vue/104005.持久化存储实时读取.md",key:"v-db787618",path:"/pages/d36e75/",headers:[{level:2,title:"重写localStorage",slug:"重写localstorage",normalizedTitle:"重写localstorage",charIndex:2},{level:2,title:"全局变量代理",slug:"全局变量代理",normalizedTitle:"全局变量代理",charIndex:438},{level:2,title:"举例",slug:"举例",normalizedTitle:"举例",charIndex:491}],headersStr:"重写localStorage 全局变量代理 举例",content:"# 重写localStorage\n\nvar orignalSetItem = localStorage.setItem;\nlocalStorage.setItem = function(key,newValue){\n      var setItemEvent = new Event(\"setItemEvent\");\n      setItemEvent.newValue = newValue;\n      window.dispatchEvent(setItemEvent);\n      orignalSetItem.apply(this,arguments);\n}\nwindow.addEventListener(\"setItemEvent\", function (e) {\n    alert(e.newValue);\n});\nlocalStorage.setItem(\"name\",\"wang\");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 全局变量代理\n\n做一个全局变量代理，在页面初始化的时候读取localStorage中的内容\n\n这里全局变量举例 window._theme\n\n * 读\n   \n   const getTheme = () => {\n     return window._theme || window.localStorage.getItem('theme') || 'default'\n   }\n   \n   \n   1\n   2\n   3\n   \n\n * 写\n   \n   const setTheme = (value) => {\n     window.localStorage.setItem('theme': value)\n     return window._theme = value\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# 举例\n\n在vuex vue store中持久存取应用主题theme:dark这个属性值\n\nstate: {\n    theme: window.localStorage.getItem('theme') || 'default'\n},\nmutations: {\n  SET_THEME: (state, value) => {\n    state.theme = value\n    window.localStorage.setItem('theme', value)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"# 重写localstorage\n\nvar orignalsetitem = localstorage.setitem;\nlocalstorage.setitem = function(key,newvalue){\n      var setitemevent = new event(\"setitemevent\");\n      setitemevent.newvalue = newvalue;\n      window.dispatchevent(setitemevent);\n      orignalsetitem.apply(this,arguments);\n}\nwindow.addeventlistener(\"setitemevent\", function (e) {\n    alert(e.newvalue);\n});\nlocalstorage.setitem(\"name\",\"wang\");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 全局变量代理\n\n做一个全局变量代理，在页面初始化的时候读取localstorage中的内容\n\n这里全局变量举例 window._theme\n\n * 读\n   \n   const gettheme = () => {\n     return window._theme || window.localstorage.getitem('theme') || 'default'\n   }\n   \n   \n   1\n   2\n   3\n   \n\n * 写\n   \n   const settheme = (value) => {\n     window.localstorage.setitem('theme': value)\n     return window._theme = value\n   }\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# 举例\n\n在vuex vue store中持久存取应用主题theme:dark这个属性值\n\nstate: {\n    theme: window.localstorage.getitem('theme') || 'default'\n},\nmutations: {\n  set_theme: (state, value) => {\n    state.theme = value\n    window.localstorage.setitem('theme', value)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"vue自适应布局",frontmatter:{title:"vue自适应布局",date:"2022-01-13T16:27:47.000Z",permalink:"/pages/e3bb47/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104006.vue%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80.html",relativePath:"10.大前端/1040.Vue/104006.vue自适应布局.md",key:"v-69702e1b",path:"/pages/e3bb47/",headersStr:null,content:"在index.html中\n\nhead标签中\n\n  <script>\n    //通过window.screen.width获取屏幕的宽度\n    var offWidth = window.screen.width / 375; //这里用宽度/30表示1rem取得的px\n    document.getElementsByTagName(\"html\")[0].style.fontSize = offWidth + 'px'; //把rem的值复制给顶级标签html的font-size\n\n  <\/script>\n\n\n1\n2\n3\n4\n5\n6\n\n\ncnpm i lib-flexible -S cnpm i postcss-pxtorem -D\n\npostcss.config.js\n\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n    'postcss-pxtorem': {\n      'rootValue': 75, // 设计稿宽度的1/10,（JSON文件中不加注释，此行注释及下行注释均删除）\n      'propList': ['*'] // 需要做转化处理的属性，如`hight`、`width`、`margin`等，`*`表示全部\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nmain.js import 'lib-flexible'\n\n验证\n\n<html data-dpr=\"1\" style=\"font-size: 37.4917px;\" lang=\"en\">\n\n\n1\n",normalizedContent:"在index.html中\n\nhead标签中\n\n  <script>\n    //通过window.screen.width获取屏幕的宽度\n    var offwidth = window.screen.width / 375; //这里用宽度/30表示1rem取得的px\n    document.getelementsbytagname(\"html\")[0].style.fontsize = offwidth + 'px'; //把rem的值复制给顶级标签html的font-size\n\n  <\/script>\n\n\n1\n2\n3\n4\n5\n6\n\n\ncnpm i lib-flexible -s cnpm i postcss-pxtorem -d\n\npostcss.config.js\n\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n    'postcss-pxtorem': {\n      'rootvalue': 75, // 设计稿宽度的1/10,（json文件中不加注释，此行注释及下行注释均删除）\n      'proplist': ['*'] // 需要做转化处理的属性，如`hight`、`width`、`margin`等，`*`表示全部\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nmain.js import 'lib-flexible'\n\n验证\n\n<html data-dpr=\"1\" style=\"font-size: 37.4917px;\" lang=\"en\">\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Vue 中后台表格的增删改查统一解决方案(mixin版)",frontmatter:{title:"Vue 中后台表格的增删改查统一解决方案(mixin版)",date:"2023-09-17T19:58:45.000Z",permalink:"/pages/a55fba/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104009.Vue%20%E4%B8%AD%E5%90%8E%E5%8F%B0%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%BB%9F%E4%B8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88(mixin%E7%89%88).html",relativePath:"10.大前端/1040.Vue/104009.Vue 中后台表格的增删改查统一解决方案(mixin版).md",key:"v-36ccea9d",path:"/pages/a55fba/",headers:[{level:2,title:"查看 & 查询",slug:"查看-查询",normalizedTitle:"查看 &amp; 查询",charIndex:null},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:2,title:"增加 & 修改",slug:"增加-修改",normalizedTitle:"增加 &amp; 修改",charIndex:null}],headersStr:"查看 & 查询  增加 & 修改",content:"# 查看 & 查询\n\n常⻅业务列表⻚都是由 搜索栏 和 数据列表 组成。 其中：\n\n * 搜索栏包含 搜索条件 、 新增 、 批量xx 、 导出 等对 数据列表 全局操作功能项。\n * 数据列表包含 分⻚ 和每条数据末尾的 操作 项， ⽤于对当前这条数据进⾏ 修改 、 删除 等操\n\n作。\n\n这⾥将 列表 、 删除 、 导出 功能放在⼀起实现， 是因为它们都属于直接在 列表⻚ 中进⾏操作的功\n\n能， 同时项⽬中已将 列表⻚ 中 常⽤的业务功能 封装成⼀个 简易 的 业务可复⽤类 。 其中可配置属性如下：\n\ndata () {\n    /* eslint-disable */\n    return {\n      // 设置属性\n      mixinViewModuleOptions: {\n        createdIsNeed: true,       // 此页面是否在创建时，调用查询数据列表接口？\n        activatedIsNeed: false,    // 此页面是否在激活（进入）时，调用查询数据列表接口？\n        getDataListURL: '',       // 数据列表接口，API地址\n        getDataListIsPage: false, // 数据列表接口，是否需要分页？\n        deleteURL: '',            // 删除接口，API地址\n        deleteIsBatch: false,     // 删除接口，是否需要批量？\n        deleteIsBatchKey: 'id',   // 删除接口，批量状态下由那个key进行标记操作？比如：pid，uid...\n        exportURL: ''             // 导出接口，API地址\n      },\n      // 默认属性\n      dataForm: {},               // 查询条件\n      dataList: [],               // 数据列表\n      order: '',                  // 排序，asc／desc\n      orderField: '',             // 排序，字段\n      page: 1,                    // 当前页码\n      limit: 10,                  // 每页数\n      total: 0,                   // 总条数\n      dataListLoading: false,     // 数据列表，loading状态\n      dataListSelections: [],     // 数据列表，多选项\n      addOrUpdateVisible: false,   // 新增／更新，弹窗visible状态\n      lookVisible: false,          // 查看\n    }\n    /* eslint-enable */\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n 1. 在业务组件中 ***.vue 文件, 修改 API请求 相关配置属性， 新增 name 和 type 查询条件。\n\ndata () {\n    return {\n      mixinViewModuleOptions: {\n        getDataListURL: '/demo/goods/page',\n        getDataListIsPage: true,\n        deleteURL: '/demo/goods',\n        deleteIsBatch: true,\n        exportURL: '/demo/goods/page'\n      },\n      dataForm: {\n        paramCode: '',\n        type: null\n      }\n    }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n#\n\n\n# 增加 & 修改\n\n常⻅业务 新增 和 修改 功能⼏乎⼀样， 唯⼀区别在于它们 ⾃增ID 是否存在， 所以业务将它们放在同\n\n⼀弹窗中处理。\n\n考虑到它们的功能会存在⼀些特定业务处理， 就没有封装 业务可复⽤类 。\n\n 1. 新建打开 ***add-or-update.vue.vue 文件, 写入 Form 表单及其相关校验方法等。\n 2. 增加请求方法\n\n  methods: {\n    init () {\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs.dataForm.resetFields()\n        if (this.dataForm.id) {\n          this.getInfo()\n        }\n      })\n    },\n    // 获取信息\n    getInfo () {\n      this.$http\n        .get(`/demo/product/${this.dataForm.id}`)\n        .then(({ data: res }) => {\n          if (res.code !== 0) {\n            return this.$message.error(res.msg)\n          }\n          this.dataForm = {\n            ...this.dataForm,\n            ...res.data\n          }\n        })\n        .catch(() => {})\n    },\n    // 表单提交\n    dataFormSubmitHandle: debounce(\n      function () {\n        this.$refs.dataForm.validate((valid) => {\n          if (!valid) {\n            return false\n          }\n          this.$http[!this.dataForm.id ? 'post' : 'put'](\n            '/demo/product/',\n            this.dataForm\n          )\n            .then(({ data: res }) => {\n              if (res.code !== 0) {\n                return this.$message.error(res.msg)\n              }\n              this.$message({\n                message: this.$t('prompt.success'),\n                type: 'success',\n                duration: 500,\n                onClose: () => {\n                  this.visible = false\n                  this.$emit('refreshDataList')\n                }\n              })\n            })\n            .catch(() => {})\n        })\n      },\n      1000,\n      { leading: true, trailing: false }\n    )\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n",normalizedContent:"# 查看 & 查询\n\n常⻅业务列表⻚都是由 搜索栏 和 数据列表 组成。 其中：\n\n * 搜索栏包含 搜索条件 、 新增 、 批量xx 、 导出 等对 数据列表 全局操作功能项。\n * 数据列表包含 分⻚ 和每条数据末尾的 操作 项， ⽤于对当前这条数据进⾏ 修改 、 删除 等操\n\n作。\n\n这⾥将 列表 、 删除 、 导出 功能放在⼀起实现， 是因为它们都属于直接在 列表⻚ 中进⾏操作的功\n\n能， 同时项⽬中已将 列表⻚ 中 常⽤的业务功能 封装成⼀个 简易 的 业务可复⽤类 。 其中可配置属性如下：\n\ndata () {\n    /* eslint-disable */\n    return {\n      // 设置属性\n      mixinviewmoduleoptions: {\n        createdisneed: true,       // 此页面是否在创建时，调用查询数据列表接口？\n        activatedisneed: false,    // 此页面是否在激活（进入）时，调用查询数据列表接口？\n        getdatalisturl: '',       // 数据列表接口，api地址\n        getdatalistispage: false, // 数据列表接口，是否需要分页？\n        deleteurl: '',            // 删除接口，api地址\n        deleteisbatch: false,     // 删除接口，是否需要批量？\n        deleteisbatchkey: 'id',   // 删除接口，批量状态下由那个key进行标记操作？比如：pid，uid...\n        exporturl: ''             // 导出接口，api地址\n      },\n      // 默认属性\n      dataform: {},               // 查询条件\n      datalist: [],               // 数据列表\n      order: '',                  // 排序，asc／desc\n      orderfield: '',             // 排序，字段\n      page: 1,                    // 当前页码\n      limit: 10,                  // 每页数\n      total: 0,                   // 总条数\n      datalistloading: false,     // 数据列表，loading状态\n      datalistselections: [],     // 数据列表，多选项\n      addorupdatevisible: false,   // 新增／更新，弹窗visible状态\n      lookvisible: false,          // 查看\n    }\n    /* eslint-enable */\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n 1. 在业务组件中 ***.vue 文件, 修改 api请求 相关配置属性， 新增 name 和 type 查询条件。\n\ndata () {\n    return {\n      mixinviewmoduleoptions: {\n        getdatalisturl: '/demo/goods/page',\n        getdatalistispage: true,\n        deleteurl: '/demo/goods',\n        deleteisbatch: true,\n        exporturl: '/demo/goods/page'\n      },\n      dataform: {\n        paramcode: '',\n        type: null\n      }\n    }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n#\n\n\n# 增加 & 修改\n\n常⻅业务 新增 和 修改 功能⼏乎⼀样， 唯⼀区别在于它们 ⾃增id 是否存在， 所以业务将它们放在同\n\n⼀弹窗中处理。\n\n考虑到它们的功能会存在⼀些特定业务处理， 就没有封装 业务可复⽤类 。\n\n 1. 新建打开 ***add-or-update.vue.vue 文件, 写入 form 表单及其相关校验方法等。\n 2. 增加请求方法\n\n  methods: {\n    init () {\n      this.visible = true\n      this.$nexttick(() => {\n        this.$refs.dataform.resetfields()\n        if (this.dataform.id) {\n          this.getinfo()\n        }\n      })\n    },\n    // 获取信息\n    getinfo () {\n      this.$http\n        .get(`/demo/product/${this.dataform.id}`)\n        .then(({ data: res }) => {\n          if (res.code !== 0) {\n            return this.$message.error(res.msg)\n          }\n          this.dataform = {\n            ...this.dataform,\n            ...res.data\n          }\n        })\n        .catch(() => {})\n    },\n    // 表单提交\n    dataformsubmithandle: debounce(\n      function () {\n        this.$refs.dataform.validate((valid) => {\n          if (!valid) {\n            return false\n          }\n          this.$http[!this.dataform.id ? 'post' : 'put'](\n            '/demo/product/',\n            this.dataform\n          )\n            .then(({ data: res }) => {\n              if (res.code !== 0) {\n                return this.$message.error(res.msg)\n              }\n              this.$message({\n                message: this.$t('prompt.success'),\n                type: 'success',\n                duration: 500,\n                onclose: () => {\n                  this.visible = false\n                  this.$emit('refreshdatalist')\n                }\n              })\n            })\n            .catch(() => {})\n        })\n      },\n      1000,\n      { leading: true, trailing: false }\n    )\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"Vue 放弃繁琐的render函数，拥抱JSX",frontmatter:{title:"Vue 放弃繁琐的render函数，拥抱JSX",date:"2023-09-17T19:59:27.000Z",permalink:"/pages/af219f/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/1040091.Vue%20%E6%94%BE%E5%BC%83%E7%B9%81%E7%90%90%E7%9A%84render%E5%87%BD%E6%95%B0%EF%BC%8C%E6%8B%A5%E6%8A%B1JSX.html",relativePath:"10.大前端/1040.Vue/1040091.Vue 放弃繁琐的render函数，拥抱JSX.md",key:"v-19fa0d03",path:"/pages/af219f/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:2},{level:2,title:"安装配置",slug:"安装配置",normalizedTitle:"安装配置",charIndex:1316},{level:3,title:"babel7 (vue cli 默认是使用了babel7的）",slug:"babel7-vue-cli-默认是使用了babel7的",normalizedTitle:"babel7 (vue cli 默认是使用了babel7的）",charIndex:1325},{level:3,title:"安装babel插件",slug:"安装babel插件",normalizedTitle:"安装babel插件",charIndex:1360},{level:4,title:"babel 6",slug:"babel-6",normalizedTitle:"babel 6",charIndex:1854},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:1344},{level:3,title:"slot",slug:"slot",normalizedTitle:"slot",charIndex:608},{level:4,title:"Table-column Scoped Slot",slug:"table-column-scoped-slot",normalizedTitle:"table-column scoped slot",charIndex:2563}],headersStr:"背景 安装配置 babel7 (vue cli 默认是使用了babel7的） 安装babel插件 babel 6 使用 slot Table-column Scoped Slot",content:"# 背景\n\n如果你写了很多 render 函数，可能会觉得下面这样的代码写起来很痛苦：\n\ncreateElement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createElement('span', 'Hello'),\n    ' world!'\n  ]\n)\n[\n\t{ label: '最近更新时间', prop: 'update_time', align: 'center', visible: false },\n  {\n    label: '操作', align: 'center', 'min-width': '180px', render: (h, { row }) => {\n      return h('div',\n        [h('el-popconfirm', {\n          props: { title: '确定删除吗？', 'confirm-button-type': 'danger' },\n          class: 'mr-10',\n          on: {\n            confirm: () => { this.delItem(row) }\n          }\n        },\n        [h('el-button', { slot: 'reference', props: { size: 'mini', type: 'danger' }}, '删除')]),\n        h('el-button', { props: { size: 'mini', type: 'primary' }, nativeOn: { click: () => { this.editItem(row) } }}, '编辑')]\n      )\n    }\n  }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n特别是对应的模板如此简单的情况下：\n\n<anchored-heading :level='1'>\n  <span>Hello</span> world!\n</anchored-heading>\n<el-popconfirm\n\ttitle='确定删除吗？'\n\t'confirm-button-type'='danger'  \n  onConfirm='() => this.delItem(row)'\n>\n   <el-button slot='reference' size='mini' type='danger'>删除</el-button>\n</el-popconfirm>\n\n<el-button size='mini' type='danger' onClick={() => this.editItem(row)}>编辑</el-button>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 安装配置\n\n\n# babel7 (vue cli 默认是使用了babel7的）\n\n\n# 安装babel插件\n\nnpm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n\n\n1\n\n * 配置babel.config.js\n\nmodule.exports = {\n  presets: ['@vue/babel-preset-jsx'],\n}\n\n\n1\n2\n3\n\n\n如果你出现这个错误： https://github.com/vuejs/jsx/issues/34\n\nDuplicate declaration \"h\" (This is an error on an internal node. Probably an internal error.)\n\n\n1\n\n\n试试这个（需要说明H函数传递）\n\nmodule.exports = {\n  presets: [\n    [\n      '@vue/babel-preset-jsx',\n      {\n        injectH: false\n      }\n    ]\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# babel 6\n\nnpm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-preset-env --save-dev\n\n\n1\n\n * 配置.babelrc\n\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n\n\n1\n2\n3\n4\n\n\n\n# 使用\n\n我这里举例比较复杂的例子 也是我遇到的\n\n\n# slot\n\n正常的code是这样的, element-ui举例\n\n<el-table-column\n  label=\"姓名\"\n  width=\"180\">\n  <template slot-scope=\"scope\">\n    <el-popover trigger=\"hover\" placement=\"top\">\n      <p>姓名: {{ scope.row.name }}</p>\n      <p>住址: {{ scope.row.address }}</p>\n      <div slot=\"reference\" class=\"name-wrapper\">\n        <el-tag size=\"medium\">{{ scope.row.name }}</el-tag>\n      </div>\n    </el-popover>\n  </template>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# Table-column Scoped Slot\n\nNAME     说明\n—        自定义列的内容，参数为 { row, column, $index }\nheader   自定义表头的内容. 参数为 { column, $index }\n\n🍖转换成jsx就是\n\n<el-table-column\n  label='姓名'\n  width='180' {\n    ...{\n      scopedSlots: {\n        default: scope => {\n          return <el-popover trigger='hover' placement='top'>\n            <p>姓名: { scope.row.name }</p>\n            <p>住址: { scope.row.address }</p>\n            <div slot='reference' class='name-wrapper'>\n              <el-tag size='medium'>{ scope.row.name }</el-tag>\n            </div>\n          </el-popover>\n        }\n      }\n    }\n  }>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n",normalizedContent:"# 背景\n\n如果你写了很多 render 函数，可能会觉得下面这样的代码写起来很痛苦：\n\ncreateelement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createelement('span', 'hello'),\n    ' world!'\n  ]\n)\n[\n\t{ label: '最近更新时间', prop: 'update_time', align: 'center', visible: false },\n  {\n    label: '操作', align: 'center', 'min-width': '180px', render: (h, { row }) => {\n      return h('div',\n        [h('el-popconfirm', {\n          props: { title: '确定删除吗？', 'confirm-button-type': 'danger' },\n          class: 'mr-10',\n          on: {\n            confirm: () => { this.delitem(row) }\n          }\n        },\n        [h('el-button', { slot: 'reference', props: { size: 'mini', type: 'danger' }}, '删除')]),\n        h('el-button', { props: { size: 'mini', type: 'primary' }, nativeon: { click: () => { this.edititem(row) } }}, '编辑')]\n      )\n    }\n  }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n特别是对应的模板如此简单的情况下：\n\n<anchored-heading :level='1'>\n  <span>hello</span> world!\n</anchored-heading>\n<el-popconfirm\n\ttitle='确定删除吗？'\n\t'confirm-button-type'='danger'  \n  onconfirm='() => this.delitem(row)'\n>\n   <el-button slot='reference' size='mini' type='danger'>删除</el-button>\n</el-popconfirm>\n\n<el-button size='mini' type='danger' onclick={() => this.edititem(row)}>编辑</el-button>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 安装配置\n\n\n# babel7 (vue cli 默认是使用了babel7的）\n\n\n# 安装babel插件\n\nnpm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n\n\n1\n\n * 配置babel.config.js\n\nmodule.exports = {\n  presets: ['@vue/babel-preset-jsx'],\n}\n\n\n1\n2\n3\n\n\n如果你出现这个错误： https://github.com/vuejs/jsx/issues/34\n\nduplicate declaration \"h\" (this is an error on an internal node. probably an internal error.)\n\n\n1\n\n\n试试这个（需要说明h函数传递）\n\nmodule.exports = {\n  presets: [\n    [\n      '@vue/babel-preset-jsx',\n      {\n        injecth: false\n      }\n    ]\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# babel 6\n\nnpm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-preset-env --save-dev\n\n\n1\n\n * 配置.babelrc\n\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n\n\n1\n2\n3\n4\n\n\n\n# 使用\n\n我这里举例比较复杂的例子 也是我遇到的\n\n\n# slot\n\n正常的code是这样的, element-ui举例\n\n<el-table-column\n  label=\"姓名\"\n  width=\"180\">\n  <template slot-scope=\"scope\">\n    <el-popover trigger=\"hover\" placement=\"top\">\n      <p>姓名: {{ scope.row.name }}</p>\n      <p>住址: {{ scope.row.address }}</p>\n      <div slot=\"reference\" class=\"name-wrapper\">\n        <el-tag size=\"medium\">{{ scope.row.name }}</el-tag>\n      </div>\n    </el-popover>\n  </template>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# table-column scoped slot\n\nname     说明\n—        自定义列的内容，参数为 { row, column, $index }\nheader   自定义表头的内容. 参数为 { column, $index }\n\n🍖转换成jsx就是\n\n<el-table-column\n  label='姓名'\n  width='180' {\n    ...{\n      scopedslots: {\n        default: scope => {\n          return <el-popover trigger='hover' placement='top'>\n            <p>姓名: { scope.row.name }</p>\n            <p>住址: { scope.row.address }</p>\n            <div slot='reference' class='name-wrapper'>\n              <el-tag size='medium'>{ scope.row.name }</el-tag>\n            </div>\n          </el-popover>\n        }\n      }\n    }\n  }>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"Vue 中后台表格的增删改查同一解决方案(组件封装版)",frontmatter:{title:"Vue 中后台表格的增删改查同一解决方案(组件封装版)",date:"2021-11-29T22:28:27.000Z",permalink:"/pages/3de341/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104010.Vue%20%E4%B8%AD%E5%90%8E%E5%8F%B0%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%90%8C%E4%B8%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88(%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E7%89%88).html",relativePath:"10.大前端/1040.Vue/104010.Vue 中后台表格的增删改查同一解决方案(组件封装版).md",key:"v-723f17bb",path:"/pages/3de341/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:107},{level:2,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:141},{level:2,title:"组件的封装",slug:"组件的封装",normalizedTitle:"组件的封装",charIndex:220},{level:3,title:"table filter",slug:"table-filter",normalizedTitle:"table filter",charIndex:230},{level:3,title:"table columns",slug:"table-columns",normalizedTitle:"table columns",charIndex:1667},{level:3,title:"table item handler",slug:"table-item-handler",normalizedTitle:"table item handler",charIndex:2776},{level:3,title:"table pagination",slug:"table-pagination",normalizedTitle:"table pagination",charIndex:4117},{level:3,title:"all page",slug:"all-page",normalizedTitle:"all page",charIndex:4433}],headersStr:"前言 使用方法 组件的封装 table filter table columns table item handler table pagination all page",content:'https://www.yuque.com/docs/share/10067c29-d80c-4d39-a624-32881f8fad58?# 《Vue 中后台表格的增删改查统一解决方案(mixin版)》\n\n\n# 前言\n\n个人是比较喜欢这一版的, 也是最开始做程序员写的,\n\n\n# 使用方法\n\n部分中后台页面都是非常同质化的 CRUD 组成的，很多时候都是一个 Table，然后提供一些操作按钮，并且有一个新增表单。看起来就像这样\n\n\n# 组件的封装\n\n\n# table filter\n\n参数配置:\n\n      tableFilters: [\n        {\n          is: \'el-input\',\n          prop: \'title\',\n          attrs: { placeHolder: \'请输入景点名称\', style: \'width: 200px;\' }\n        },\n        {\n          is: \'el-input\',\n          prop: \'merchant\',\n          attrs: { placeHolder: \'请选择商户\', style: \'width: 200px;\' }\n        }\n      ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n<div class="filter-container d-flex align-items-center justify-content-between pr-20">\n  <section>\n    <component :is="filter.is" v-for="(filter, index) in filters" :key="index" v-model="filterForm[filter.prop]" v-bind="filter.attrs" class="filter-item mr-10">\n      <template v-if="filter.options">\n        <el-option v-for="(option, i) in filter.options" :key="`${index}_${i}`" :value="option.value" :label="option.label" />\n      </template>\n    </component>\n  </section>\n\n  <section>\n    <el-button class="filter-item" type="warning" icon="el-icon-refresh-left" @click="filterForm={};getList()">重置</el-button>\n    <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查找</el-button>\n    <slot name="action">\n      <el-button v-if="crud.includes(\'c\')" class="filter-item" style="margin-left: 10px;" type="success" icon="el-icon-plus" @click="$emit(\'createItem\')">添加</el-button>\n    </slot>\n  </section>\n</div>\n----------------\nfilters: { type: Array, default: () => [] }\n\t\t\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# table columns\n\n传入参数:\n\ntableColumns: [\n  { label: \'名称\', prop: \'title\', width: 130 },\n  { label: \'联系人\', prop: \'name\', width: 60, align: \'center\' },\n  { label: \'电话\', prop: \'phone\', width: 130, align: \'center\' },\n  { label: \'账号\', prop: \'acount\', width: 140 },\n  { label: \'人数\', prop: \'count\', width: 50, align: \'center\' },\n  { label: \'地址\', prop: \'address\', width: \'auto\' },\n  {\n    label: \'状态\', prop: \'status\', width: 80, align: \'center\', render: (h, { row }) => {\n      return h(\'el-tag\', { attrs: { type: row.status === \'正常\' ? \'success\' : \'info\', size: \'small\' }}, row.status)\n    }\n  },\n  { label: \'创建时间\', prop: \'createTime\', width: 160, align: \'center\' }\n],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n<el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n  <template slot-scope="{row}">\n    <template v-if="\'render\' in col">\n      <Render :row="row" :render="col.render" />\n    </template>\n    <span v-else>{{ col.formatter ? col.formatter(row) : row[col.prop] }}</span>\n  </template>\n</el-table-column>\n\n------------------\ncolumns: { type: Array, default: () => [] },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# table item handler\n\n传入参数:\n\ntableHandle: [\n        {\n          label: \'修改\',\n          type: \'primary\',\n          isPop: false,\n          method: row => {\n            this.editItem(row)\n          }\n        },\n        {\n          label: \'删除\',\n          type: \'danger\',\n          isPop: true,\n          method: row => {\n            this.deleteItem(row)\n          }\n        }\n      ],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n  <el-table-column v-if="handle.length" v-bind="handleColumn" :width="(handle.length * 80)+\'px\'">\n    <template slot-scope="scope">\n      <template v-for="(btn, index) in handle">\n        <el-button v-if="!btn.isPop" :key="index" style="margin: 5px;" size="mini" :type="btn.type" @click.native.prevent="btn.method(scope.row,scope)">{{ btn.label }}</el-button>\n\n        <el-popconfirm v-if="btn.isPop" :key="index" placement="right" confirm-button-text="确定" cancel-button-text="取消" icon="el-icon-info" icon-color="red" title="确定删除吗？" @onConfirm="$message.success(\'操作成功\');getList();btn.method(scope.row, scope)">\n          <el-button slot="reference" style="margin: 5px;" size="mini" :type="btn.type">{{ btn.label }}</el-button>\n        </el-popconfirm>\n      </template>\n    </template>\n  </el-table-column>\n\n-------------------\nhandle: { type: Array, default: () => [] },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# table pagination\n\n   <pagination v-show="total>listQuery.size" style="padding: 8px 16px; margin-top: 10px;" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.size" @pagination="getList" />\n\n---------\n      total: 0,\n      listQuery: {\n        page: 1,\n        size: 20\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# all page\n\n使用页面(参数传入):\n\n\x3c!--\n * @Description:\n * @Author: 仲灏<izhaong 164165005@qq.com>\n * @Date: 2020-11-17 17:49:51\n * @LastEditors: 仲灏<izhaong 164165005@qq.com>\n * @LastEditTime: 2020-11-20 14:11:38\n--\x3e\n<template>\n  <div class="app-container">\n    <complex-table ref="table" :columns="tableColumns" :handle="tableHandle" :filters="tableFilters" :api="api" @createItem="$router.push(\'/merchant/create\')" />\n  </div>\n</template>\n\n<script>\nimport ComplexTable from \'../../components/ComplexTable\'\nimport { fetchList } from \'@/api/merchant\'\n\nexport default {\n  name: \'MerchantList\',\n\n  components: { ComplexTable },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        published: \'success\',\n        draft: \'info\',\n        deleted: \'danger\'\n      }\n      return statusMap[status]\n    }\n  },\n  data() {\n    return {\n      api: fetchList,\n      tableColumns: [\n        { label: \'名称\', prop: \'title\', width: 130 },\n        { label: \'联系人\', prop: \'name\', width: 60, align: \'center\' },\n        { label: \'电话\', prop: \'phone\', width: 130, align: \'center\' },\n        { label: \'账号\', prop: \'acount\', width: 140 },\n        { label: \'人数\', prop: \'count\', width: 50, align: \'center\' },\n        { label: \'地址\', prop: \'address\', width: \'auto\' },\n        {\n          label: \'状态\', prop: \'status\', width: 80, align: \'center\', render: (h, { row }) => {\n            return h(\'el-tag\', { attrs: { type: row.status === \'正常\' ? \'success\' : \'info\', size: \'small\' }}, row.status)\n          }\n        },\n        { label: \'创建时间\', prop: \'createTime\', width: 160, align: \'center\' }\n      ],\n      tableHandle: [\n        {\n          label: \'修改\',\n          type: \'primary\',\n          isPop: false,\n          method: row => {\n            this.editItem(row)\n          }\n        },\n        {\n          label: \'删除\',\n          type: \'danger\',\n          isPop: true,\n          method: row => {\n            this.deleteItem(row)\n          }\n        }\n      ],\n\n      tableFilters: [\n        {\n          is: \'el-input\',\n          prop: \'title\',\n          attrs: { placeHolder: \'请输入商户名称\', style: \'width: 200px;\' }\n        },\n        {\n          is: \'el-input\',\n          prop: \'name\',\n          attrs: { placeHolder: \'请输入联系人姓名\', style: \'width: 200px;\' }\n        },\n        {\n          is: \'el-input\',\n          prop: \'phone\',\n          attrs: { placeHolder: \'请输入联系人电话\', style: \'width: 200px;\' }\n        }\n      ]\n    }\n  },\n  methods: {\n    editItem(row) {\n      console.log(row)\n      this.$router.push(`/merchant/edit/123456789`)\n    },\n    deleteItem(row) {\n      console.log(row)\n    }\n  }\n}\n<\/script>\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n\n组件页面\n\n\x3c!--\n * @Descripttion: 数据化表格\n * @version: 1.0.0\n * @Author: 仲灏 Izhaong<164165005@qq.com>\n * @Date: 2020-06-27 15:13:00\n * @LastEditors: 仲灏<izhaong 164165005@qq.com>\n * @LastEditTime: 2020-11-23 15:39:49\n--\x3e\n<template>\n  <div class="complex-table_container app-container">\n    <div class="filter-container d-flex align-items-center justify-content-between pr-20">\n      <section>\n        <component :is="filter.is" v-for="(filter, index) in filters" :key="index" v-model="filterForm[filter.prop]" v-bind="filter.attrs" class="filter-item mr-10">\n          <template v-if="filter.options">\n            <el-option v-for="(option, i) in filter.options" :key="`${index}_${i}`" :value="option.value" :label="option.label" />\n          </template>\n        </component>\n      </section>\n\n      <section>\n        <el-button class="filter-item" type="warning" icon="el-icon-refresh-left" @click="filterForm={};getList()">重置</el-button>\n        <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查找</el-button>\n        <slot name="action">\n          <el-button v-if="crud.includes(\'c\')" class="filter-item" style="margin-left: 10px;" type="success" icon="el-icon-plus" @click="$emit(\'createItem\')">添加</el-button>\n        </slot>\n      </section>\n    </div>\n    <el-table :key="tableKey" v-loading="listLoading" :height="tableHeight" :data="list" size="small" style="width: 100%;">\n      <el-table-column\n        type="index"\n        width="50"\n        label="序列"\n        align="center"\n      />\n      <el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n        <template slot-scope="{row}">\n          <template v-if="\'render\' in col">\n            <Render :row="row" :render="col.render" />\n          </template>\n          <span v-else>{{ col.formatter ? col.formatter(row) : row[col.prop] }}</span>\n        </template>\n\n      </el-table-column>\n\n      <el-table-column v-if="handle.length" v-bind="handleColumn" :width="(handle.length * 80)+\'px\'">\n        <template slot-scope="scope">\n          <template v-for="(btn, index) in handle">\n            <el-button v-if="!btn.isPop" :key="index" style="margin: 5px;" size="mini" :type="btn.type" @click.native.prevent="btn.method(scope.row,scope)">{{ btn.label }}</el-button>\n\n            <el-popconfirm v-if="btn.isPop" :key="index" placement="right" confirm-button-text="确定" cancel-button-text="取消" icon="el-icon-info" icon-color="red" title="确定删除吗？" @onConfirm="$message.success(\'操作成功\');getList();btn.method(scope.row, scope)">\n              <el-button slot="reference" style="margin: 5px;" size="mini" :type="btn.type">{{ btn.label }}</el-button>\n            </el-popconfirm>\n          </template>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show="total>listQuery.size" style="padding: 8px 16px; margin-top: 10px;" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.size" @pagination="getList" />\n  </div>\n</template>\n\n<script>\nimport Pagination from \'@/components/Pagination\'\nimport Render from \'./render\'\nexport default {\n  name: \'ComplexTable\',\n  components: { Pagination, Render },\n\n  props: {\n    columns: { type: Array, default: () => [] },\n    operates: { type: Array, default: () => [] },\n    handle: { type: Array, default: () => [] },\n    filters: { type: Array, default: () => [] },\n    crud: { type: String, default: \'crud\' },\n    actionsColumn: {\n      type: Object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    handleColumn: {\n      type: Object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    // eslint-disable-next-line vue/require-default-prop\n    api: [Function, Object]\n  },\n  data() {\n    return {\n      filterForm: {},\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        size: 20\n      }\n    }\n  },\n  computed: {\n    tableHeight() {\n      if (this.total > this.listQuery.size) {\n        return window.document.body.clientHeight - 242\n      } else {\n        return window.document.body.clientHeight - 180\n      }\n    }\n  },\n  created() {\n    this.initFilters()\n    this.getList()\n  },\n  methods: {\n    inpubr($event) {\n      event.target.blur()\n    },\n    initFilters() {\n      const props = this.filters.map((item) => item.prop)\n      props.forEach((key) => {\n        this.$set(this.filterForm, key, \'\')\n      })\n    },\n    getList() {\n      this.listLoading = true\n      this.api({ ...this.listQuery, ...this.filterForm }).then((response) => {\n        this.list = response.data.items\n        this.total = response.data.total\n        this.listLoading = false\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    }\n\n  }\n}\n<\/script>\n\n<style lang="scss">\n.complex-table_container {\n  .el-table__body-wrapper {\n    &::-webkit-scrollbar {\n      /*滚动条整体样式*/\n      width: 6px !important;\n      /*高宽分别对应横竖滚动条的尺寸*/\n      height: 6px !important;\n      background: #ffffff !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-thumb {\n      /*滚动条里面小方块*/\n      border-radius: 5px !important;\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      background: rgba(63, 98, 131, 0.8) !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-track {\n      /*滚动条里面轨道*/\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      border-radius: 0 !important;\n      background: rgba(240, 240, 240, 0.5) !important;\n      cursor: pointer !important;\n    }\n  }\n}\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n',normalizedContent:'https://www.yuque.com/docs/share/10067c29-d80c-4d39-a624-32881f8fad58?# 《vue 中后台表格的增删改查统一解决方案(mixin版)》\n\n\n# 前言\n\n个人是比较喜欢这一版的, 也是最开始做程序员写的,\n\n\n# 使用方法\n\n部分中后台页面都是非常同质化的 crud 组成的，很多时候都是一个 table，然后提供一些操作按钮，并且有一个新增表单。看起来就像这样\n\n\n# 组件的封装\n\n\n# table filter\n\n参数配置:\n\n      tablefilters: [\n        {\n          is: \'el-input\',\n          prop: \'title\',\n          attrs: { placeholder: \'请输入景点名称\', style: \'width: 200px;\' }\n        },\n        {\n          is: \'el-input\',\n          prop: \'merchant\',\n          attrs: { placeholder: \'请选择商户\', style: \'width: 200px;\' }\n        }\n      ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n<div class="filter-container d-flex align-items-center justify-content-between pr-20">\n  <section>\n    <component :is="filter.is" v-for="(filter, index) in filters" :key="index" v-model="filterform[filter.prop]" v-bind="filter.attrs" class="filter-item mr-10">\n      <template v-if="filter.options">\n        <el-option v-for="(option, i) in filter.options" :key="`${index}_${i}`" :value="option.value" :label="option.label" />\n      </template>\n    </component>\n  </section>\n\n  <section>\n    <el-button class="filter-item" type="warning" icon="el-icon-refresh-left" @click="filterform={};getlist()">重置</el-button>\n    <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handlefilter">查找</el-button>\n    <slot name="action">\n      <el-button v-if="crud.includes(\'c\')" class="filter-item" style="margin-left: 10px;" type="success" icon="el-icon-plus" @click="$emit(\'createitem\')">添加</el-button>\n    </slot>\n  </section>\n</div>\n----------------\nfilters: { type: array, default: () => [] }\n\t\t\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# table columns\n\n传入参数:\n\ntablecolumns: [\n  { label: \'名称\', prop: \'title\', width: 130 },\n  { label: \'联系人\', prop: \'name\', width: 60, align: \'center\' },\n  { label: \'电话\', prop: \'phone\', width: 130, align: \'center\' },\n  { label: \'账号\', prop: \'acount\', width: 140 },\n  { label: \'人数\', prop: \'count\', width: 50, align: \'center\' },\n  { label: \'地址\', prop: \'address\', width: \'auto\' },\n  {\n    label: \'状态\', prop: \'status\', width: 80, align: \'center\', render: (h, { row }) => {\n      return h(\'el-tag\', { attrs: { type: row.status === \'正常\' ? \'success\' : \'info\', size: \'small\' }}, row.status)\n    }\n  },\n  { label: \'创建时间\', prop: \'createtime\', width: 160, align: \'center\' }\n],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n<el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n  <template slot-scope="{row}">\n    <template v-if="\'render\' in col">\n      <render :row="row" :render="col.render" />\n    </template>\n    <span v-else>{{ col.formatter ? col.formatter(row) : row[col.prop] }}</span>\n  </template>\n</el-table-column>\n\n------------------\ncolumns: { type: array, default: () => [] },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# table item handler\n\n传入参数:\n\ntablehandle: [\n        {\n          label: \'修改\',\n          type: \'primary\',\n          ispop: false,\n          method: row => {\n            this.edititem(row)\n          }\n        },\n        {\n          label: \'删除\',\n          type: \'danger\',\n          ispop: true,\n          method: row => {\n            this.deleteitem(row)\n          }\n        }\n      ],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n  <el-table-column v-if="handle.length" v-bind="handlecolumn" :width="(handle.length * 80)+\'px\'">\n    <template slot-scope="scope">\n      <template v-for="(btn, index) in handle">\n        <el-button v-if="!btn.ispop" :key="index" style="margin: 5px;" size="mini" :type="btn.type" @click.native.prevent="btn.method(scope.row,scope)">{{ btn.label }}</el-button>\n\n        <el-popconfirm v-if="btn.ispop" :key="index" placement="right" confirm-button-text="确定" cancel-button-text="取消" icon="el-icon-info" icon-color="red" title="确定删除吗？" @onconfirm="$message.success(\'操作成功\');getlist();btn.method(scope.row, scope)">\n          <el-button slot="reference" style="margin: 5px;" size="mini" :type="btn.type">{{ btn.label }}</el-button>\n        </el-popconfirm>\n      </template>\n    </template>\n  </el-table-column>\n\n-------------------\nhandle: { type: array, default: () => [] },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# table pagination\n\n   <pagination v-show="total>listquery.size" style="padding: 8px 16px; margin-top: 10px;" :total="total" :page.sync="listquery.page" :limit.sync="listquery.size" @pagination="getlist" />\n\n---------\n      total: 0,\n      listquery: {\n        page: 1,\n        size: 20\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# all page\n\n使用页面(参数传入):\n\n\x3c!--\n * @description:\n * @author: 仲灏<izhaong 164165005@qq.com>\n * @date: 2020-11-17 17:49:51\n * @lasteditors: 仲灏<izhaong 164165005@qq.com>\n * @lastedittime: 2020-11-20 14:11:38\n--\x3e\n<template>\n  <div class="app-container">\n    <complex-table ref="table" :columns="tablecolumns" :handle="tablehandle" :filters="tablefilters" :api="api" @createitem="$router.push(\'/merchant/create\')" />\n  </div>\n</template>\n\n<script>\nimport complextable from \'../../components/complextable\'\nimport { fetchlist } from \'@/api/merchant\'\n\nexport default {\n  name: \'merchantlist\',\n\n  components: { complextable },\n  filters: {\n    statusfilter(status) {\n      const statusmap = {\n        published: \'success\',\n        draft: \'info\',\n        deleted: \'danger\'\n      }\n      return statusmap[status]\n    }\n  },\n  data() {\n    return {\n      api: fetchlist,\n      tablecolumns: [\n        { label: \'名称\', prop: \'title\', width: 130 },\n        { label: \'联系人\', prop: \'name\', width: 60, align: \'center\' },\n        { label: \'电话\', prop: \'phone\', width: 130, align: \'center\' },\n        { label: \'账号\', prop: \'acount\', width: 140 },\n        { label: \'人数\', prop: \'count\', width: 50, align: \'center\' },\n        { label: \'地址\', prop: \'address\', width: \'auto\' },\n        {\n          label: \'状态\', prop: \'status\', width: 80, align: \'center\', render: (h, { row }) => {\n            return h(\'el-tag\', { attrs: { type: row.status === \'正常\' ? \'success\' : \'info\', size: \'small\' }}, row.status)\n          }\n        },\n        { label: \'创建时间\', prop: \'createtime\', width: 160, align: \'center\' }\n      ],\n      tablehandle: [\n        {\n          label: \'修改\',\n          type: \'primary\',\n          ispop: false,\n          method: row => {\n            this.edititem(row)\n          }\n        },\n        {\n          label: \'删除\',\n          type: \'danger\',\n          ispop: true,\n          method: row => {\n            this.deleteitem(row)\n          }\n        }\n      ],\n\n      tablefilters: [\n        {\n          is: \'el-input\',\n          prop: \'title\',\n          attrs: { placeholder: \'请输入商户名称\', style: \'width: 200px;\' }\n        },\n        {\n          is: \'el-input\',\n          prop: \'name\',\n          attrs: { placeholder: \'请输入联系人姓名\', style: \'width: 200px;\' }\n        },\n        {\n          is: \'el-input\',\n          prop: \'phone\',\n          attrs: { placeholder: \'请输入联系人电话\', style: \'width: 200px;\' }\n        }\n      ]\n    }\n  },\n  methods: {\n    edititem(row) {\n      console.log(row)\n      this.$router.push(`/merchant/edit/123456789`)\n    },\n    deleteitem(row) {\n      console.log(row)\n    }\n  }\n}\n<\/script>\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n\n组件页面\n\n\x3c!--\n * @descripttion: 数据化表格\n * @version: 1.0.0\n * @author: 仲灏 izhaong<164165005@qq.com>\n * @date: 2020-06-27 15:13:00\n * @lasteditors: 仲灏<izhaong 164165005@qq.com>\n * @lastedittime: 2020-11-23 15:39:49\n--\x3e\n<template>\n  <div class="complex-table_container app-container">\n    <div class="filter-container d-flex align-items-center justify-content-between pr-20">\n      <section>\n        <component :is="filter.is" v-for="(filter, index) in filters" :key="index" v-model="filterform[filter.prop]" v-bind="filter.attrs" class="filter-item mr-10">\n          <template v-if="filter.options">\n            <el-option v-for="(option, i) in filter.options" :key="`${index}_${i}`" :value="option.value" :label="option.label" />\n          </template>\n        </component>\n      </section>\n\n      <section>\n        <el-button class="filter-item" type="warning" icon="el-icon-refresh-left" @click="filterform={};getlist()">重置</el-button>\n        <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handlefilter">查找</el-button>\n        <slot name="action">\n          <el-button v-if="crud.includes(\'c\')" class="filter-item" style="margin-left: 10px;" type="success" icon="el-icon-plus" @click="$emit(\'createitem\')">添加</el-button>\n        </slot>\n      </section>\n    </div>\n    <el-table :key="tablekey" v-loading="listloading" :height="tableheight" :data="list" size="small" style="width: 100%;">\n      <el-table-column\n        type="index"\n        width="50"\n        label="序列"\n        align="center"\n      />\n      <el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n        <template slot-scope="{row}">\n          <template v-if="\'render\' in col">\n            <render :row="row" :render="col.render" />\n          </template>\n          <span v-else>{{ col.formatter ? col.formatter(row) : row[col.prop] }}</span>\n        </template>\n\n      </el-table-column>\n\n      <el-table-column v-if="handle.length" v-bind="handlecolumn" :width="(handle.length * 80)+\'px\'">\n        <template slot-scope="scope">\n          <template v-for="(btn, index) in handle">\n            <el-button v-if="!btn.ispop" :key="index" style="margin: 5px;" size="mini" :type="btn.type" @click.native.prevent="btn.method(scope.row,scope)">{{ btn.label }}</el-button>\n\n            <el-popconfirm v-if="btn.ispop" :key="index" placement="right" confirm-button-text="确定" cancel-button-text="取消" icon="el-icon-info" icon-color="red" title="确定删除吗？" @onconfirm="$message.success(\'操作成功\');getlist();btn.method(scope.row, scope)">\n              <el-button slot="reference" style="margin: 5px;" size="mini" :type="btn.type">{{ btn.label }}</el-button>\n            </el-popconfirm>\n          </template>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show="total>listquery.size" style="padding: 8px 16px; margin-top: 10px;" :total="total" :page.sync="listquery.page" :limit.sync="listquery.size" @pagination="getlist" />\n  </div>\n</template>\n\n<script>\nimport pagination from \'@/components/pagination\'\nimport render from \'./render\'\nexport default {\n  name: \'complextable\',\n  components: { pagination, render },\n\n  props: {\n    columns: { type: array, default: () => [] },\n    operates: { type: array, default: () => [] },\n    handle: { type: array, default: () => [] },\n    filters: { type: array, default: () => [] },\n    crud: { type: string, default: \'crud\' },\n    actionscolumn: {\n      type: object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    handlecolumn: {\n      type: object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    // eslint-disable-next-line vue/require-default-prop\n    api: [function, object]\n  },\n  data() {\n    return {\n      filterform: {},\n      tablekey: 0,\n      list: null,\n      total: 0,\n      listloading: true,\n      listquery: {\n        page: 1,\n        size: 20\n      }\n    }\n  },\n  computed: {\n    tableheight() {\n      if (this.total > this.listquery.size) {\n        return window.document.body.clientheight - 242\n      } else {\n        return window.document.body.clientheight - 180\n      }\n    }\n  },\n  created() {\n    this.initfilters()\n    this.getlist()\n  },\n  methods: {\n    inpubr($event) {\n      event.target.blur()\n    },\n    initfilters() {\n      const props = this.filters.map((item) => item.prop)\n      props.foreach((key) => {\n        this.$set(this.filterform, key, \'\')\n      })\n    },\n    getlist() {\n      this.listloading = true\n      this.api({ ...this.listquery, ...this.filterform }).then((response) => {\n        this.list = response.data.items\n        this.total = response.data.total\n        this.listloading = false\n      })\n    },\n    handlefilter() {\n      this.listquery.page = 1\n      this.getlist()\n    }\n\n  }\n}\n<\/script>\n\n<style lang="scss">\n.complex-table_container {\n  .el-table__body-wrapper {\n    &::-webkit-scrollbar {\n      /*滚动条整体样式*/\n      width: 6px !important;\n      /*高宽分别对应横竖滚动条的尺寸*/\n      height: 6px !important;\n      background: #ffffff !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-thumb {\n      /*滚动条里面小方块*/\n      border-radius: 5px !important;\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      background: rgba(63, 98, 131, 0.8) !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-track {\n      /*滚动条里面轨道*/\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      border-radius: 0 !important;\n      background: rgba(240, 240, 240, 0.5) !important;\n      cursor: pointer !important;\n    }\n  }\n}\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"组件设计步骤",frontmatter:{title:"组件设计步骤",date:"2023-09-17T19:57:54.000Z",permalink:"/pages/ab52cb/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/1040102.%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.html",relativePath:"10.大前端/1040.Vue/1040102.组件设计步骤.md",key:"v-e0422a10",path:"/pages/ab52cb/",headers:[{level:2,title:"分析组件",slug:"分析组件",normalizedTitle:"分析组件",charIndex:2}],headersStr:"分析组件",content:'# 分析组件\n\n 1. 建立组件的模板，先把架子搭起来，命名约定，组件样式，考虑好组件的基本逻辑。\n 2. 组件的数据输入，即定好 props 里面的数据类型。\n 3. 组件的数据输出，即对外暴露出来的方法和数据。\n\n例如:\n\n\n\n从大到小\n\n<template>\n  <el-container class="table_container">\n    <slot name="header">\n      //\n    </slot>\n\n    <el-main class="table_main">\n      <el-table\n        v-loading="loading"\n        element-loading-text="拼命加载中"\n        element-loading-spinner="el-icon-loading"\n        element-loading-background="rgba(255, 255, 255, 0.7)"\n        :height="height"\n        :data="data"\n        style="width: 100%"\n      >\n        <slot name="columnFirst">\n          \x3c!-- <el-table-column type="expand">\n            <template slot-scope="props">\n              //\n            </template>\n          </el-table-column>--\x3e\n        </slot>\n\n        <slot name="columns">\n          <template>\n            <el-table-column\n              v-for="(col, idx) in columns"\n              :key="idx"\n              :width="col.width"\n              :type="col.type"\n              :prop="col.prop"\n              :label="col.label"\n              :formatter="col.formatter"\n            >\n              \x3c!-- <template slot-scope="scope">\n                <component :is="item.temp.tag" :src="scope.row[item.prop]" />\n              </template>--\x3e\n            </el-table-column>\n          </template>\n        </slot>\n\n        <slot name="columnOther" />\n\n        <slot name="columnHandler">\n          <el-table-column width="100" label="操作">\n            <template slot-scope="scope">\n             //\n          </el-table-column>\n        </slot>\n      </el-table>\n    </el-main>\n\n    <el-footer class="table_pagination">\n      <el-pagination\n        :current-page="currentPage"\n        :page-sizes="[10, 20, 50, 100]"\n        :page-size="pageSize"\n        layout="total, sizes, prev, pager, next, jumper"\n        :total="total"\n        @size-change="handleSizeChange"\n        @current-change="handleCurrentChange"\n      />\n    </el-footer>\n  </el-container>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n',normalizedContent:'# 分析组件\n\n 1. 建立组件的模板，先把架子搭起来，命名约定，组件样式，考虑好组件的基本逻辑。\n 2. 组件的数据输入，即定好 props 里面的数据类型。\n 3. 组件的数据输出，即对外暴露出来的方法和数据。\n\n例如:\n\n\n\n从大到小\n\n<template>\n  <el-container class="table_container">\n    <slot name="header">\n      //\n    </slot>\n\n    <el-main class="table_main">\n      <el-table\n        v-loading="loading"\n        element-loading-text="拼命加载中"\n        element-loading-spinner="el-icon-loading"\n        element-loading-background="rgba(255, 255, 255, 0.7)"\n        :height="height"\n        :data="data"\n        style="width: 100%"\n      >\n        <slot name="columnfirst">\n          \x3c!-- <el-table-column type="expand">\n            <template slot-scope="props">\n              //\n            </template>\n          </el-table-column>--\x3e\n        </slot>\n\n        <slot name="columns">\n          <template>\n            <el-table-column\n              v-for="(col, idx) in columns"\n              :key="idx"\n              :width="col.width"\n              :type="col.type"\n              :prop="col.prop"\n              :label="col.label"\n              :formatter="col.formatter"\n            >\n              \x3c!-- <template slot-scope="scope">\n                <component :is="item.temp.tag" :src="scope.row[item.prop]" />\n              </template>--\x3e\n            </el-table-column>\n          </template>\n        </slot>\n\n        <slot name="columnother" />\n\n        <slot name="columnhandler">\n          <el-table-column width="100" label="操作">\n            <template slot-scope="scope">\n             //\n          </el-table-column>\n        </slot>\n      </el-table>\n    </el-main>\n\n    <el-footer class="table_pagination">\n      <el-pagination\n        :current-page="currentpage"\n        :page-sizes="[10, 20, 50, 100]"\n        :page-size="pagesize"\n        layout="total, sizes, prev, pager, next, jumper"\n        :total="total"\n        @size-change="handlesizechange"\n        @current-change="handlecurrentchange"\n      />\n    </el-footer>\n  </el-container>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"Vue Render自定义table单元格内容",frontmatter:{title:"Vue Render自定义table单元格内容",date:"2021-12-26T23:14:27.000Z",permalink:"/pages/b97f0c/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104011.Vue%20Render%E8%87%AA%E5%AE%9A%E4%B9%89table%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E5%AE%B9.html",relativePath:"10.大前端/1040.Vue/104011.Vue Render自定义table单元格内容.md",key:"v-4fa1e33d",path:"/pages/b97f0c/",headers:[{level:2,title:"解决问题",slug:"解决问题",normalizedTitle:"解决问题",charIndex:2},{level:2,title:"解决方案",slug:"解决方案",normalizedTitle:"解决方案",charIndex:2377},{level:2,title:"结语",slug:"结语",normalizedTitle:"结语",charIndex:3445},{level:2,title:"最终代码",slug:"最终代码",normalizedTitle:"最终代码",charIndex:3547}],headersStr:"解决问题 解决方案 结语 最终代码",content:'# 解决问题\n\n只举一个例子(我正好需要用到的)\n\n在写中后台时, 如果对 表格组件 再度封装了, 比如这样的\n\n以element-ui 为例:\n\n  <template>\n    <el-table\n      :data="tableData"\n      style="width: 100%">\n      <el-table-column\n        prop="date"\n        label="日期"\n        width="180">\n      </el-table-column>\n      <el-table-column\n        prop="name"\n        label="姓名"\n        width="180">\n      </el-table-column>\n      <el-table-column\n        prop="address"\n        label="地址">\n      </el-table-column>\n    </el-table>\n  </template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n对html数据化, 封装成一个组件.\n\n// complex-table.vue\n<template>\n  <el-table\n      :data="list"\n      style="width: 100%;"\n    >\n      <el-table-column v-for="col in columns" :key="col.prop" v-bind="col"></el-table-column>\n  </el-table>\n</template>\n<script>\n\texport default {\n  \tprops: {\n    \tcolumns: Array\n    }\n  }\n<\/script>\n\n--------------------------\n// index.vue\n<template>\n  <div class="box_container">\n    <complex-table     \n      :columns="tableColumns"\n    />    \n  </div>\n</template>\n<script>\n  export default {\n    data() {\n    \treturn {\n      \ttableColumns: [\n          { label: \'日期\', prop: \'sn\', align: \'center\' },\n          { label: \'姓名\', prop: \'phone\', align: \'center\' },\n          { label: \'地址\', prop: \'address\', align: \'center\' }\n        ]\n      }\n    }\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n那么问题来了, 如果我要在table中加入头像列, 但是后端返回的是url地址, 你又怎么办呢,你可以这样\n\n// complex-table.vue\n...\n  <el-table>\n    <el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n      <template slot-scope="scope">\n        <template v-if="col.prop===\'avatar\'">\n      \t\t<el-avatar :src="row.avatar" />\n      \t</template>\n\t\t\t\t<template v-else>\n          <span>{{ scope.row[col.prop] }}</span>\n\t\t\t\t</template>\n\t\t\t</template>\n    </el-table-column>\n  </el-table>\n...\n\n// index.vue\n...\ndata() {\n  return {\n    tableColumns: [\n\t\t\t{ label: \'头像\', prop: \'avatar\', align: \'center\' },\n      { label: \'日期\', prop: \'date\', align: \'center\' },\n      { label: \'姓名\', prop: \'name\', align: \'center\' },\n      { label: \'地址\', prop: \'address\', align: \'center\' }\n    ]\n  }\n}\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n万一又是**<el-tag>** 标签, **el-button** 不能一直v-if吧\n\n或许也可以使用 <component :is="**" v-bind="**" >这种形式, 如果遇到方法传值又感觉差点什么,差scope传值了\n\n\n# 解决方案\n\n使用函数式组件, 可灵活使用, 原理跟 valueFormat 类似, 不废话直接上代码\n\n新建文件columnRender.js\n\n/*\n * @Description: 函数式组件渲染单元表格\n * @Author: 仲灏<izhaong 164165005@qq.com>\n * @Date: 2020-09-16 15:33:25\n * @LastEditors: 仲灏<izhaong 164165005@qq.com>\n * @LastEditTime: 2020-09-16 15:47:23\n */\nexport default {\n  functional: true,\n  props: {\n    row: Object,\n    render: Function\n  },\n  render(h, ctx) {\n    const params = {\n      row: ctx.props.row\n    }\n\n    return ctx.props.render(h, params)\n  }\n}\n// complexTable\n...\n<template v-else-if="\'render\' in col">\n  \x3c!-- <component :is="col.tag" v-bind="col.attrs">{{ col.tagValue }}</component> --\x3e\n  <Render :row="row" :render="col.render" />\n</template>\n...\n\n\n// index.js\ntableColumns: [\n    { label: \'name\', prop: \'name\', align: \'center\' },\n    { label: \'是否有效\', prop: \'isValid\', align: \'center\', render: (h, { row }) => {\n      return h(\'el-tag\', { attrs: { type: row.isValid ? \'success\' : \'info\' }}, row.isValid ? \'有效\' : \'无效\')\n    } }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# 结语\n\n第一次bb这个多话, 之前直接就啪~ 贴代码了.\n\n当然如果封装的组件足够强大, 能够兼顾涵盖该项目大部分业务, 就可以把组件当做页面使用, 全部使用纯数据驱动, 当然你的业务相似度要高\n\n\n# 最终代码\n\ncomplexTable.vue\n\n\x3c!--\n * @Descripttion: 数据化表格\n * @version: 1.0.0\n * @Author: 仲灏 Izhaong<164165005@qq.com>\n * @Date: 2020-06-27 15:13:00\n * @LastEditors: 仲灏<izhaong 164165005@qq.com>\n * @LastEditTime: 2020-11-20 10:22:20\n--\x3e\n<template>\n  <div class="complex-table_container app-container">\n    <div class="filter-container d-flex align-items-center">\n      <component\n        :is="filter.is"\n        v-for="(filter, index) in filters"\n        :key="index"\n        v-model="filterForm[filter.prop]"\n        v-bind="filter.attrs"\n        class="filter-item mr-10"\n      >\n        <template v-if="filter.options">\n          <el-option\n            v-for="(option, i) in filter.options"\n            :key="`${index}_${i}`"\n            :value="option.value"\n            :label="option.label"\n          />\n        </template>\n      </component>\n\n      <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查找</el-button>\n      <slot name="action">\n        <el-button\n          v-if="crud.includes(\'c\')"\n          class="filter-item"\n          style="margin-left: 10px;"\n          type="primary"\n\n          icon="el-icon-edit"\n          @click="$emit(\'createItem\')"\n        >添加</el-button>\n      </slot>\n    </div>\n    <el-table\n      :key="tableKey"\n      v-loading="listLoading"\n      :height="tableHeight"\n      :data="list"\n      size="small"\n      border\n      style="width: 100%;"\n    >\n      <el-table-column\n        type="index"\n        width="50"\n      />\n      <el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n        <template v-if="\'index\' in col" slot-scope="{row}">\n          <template v-if="\'render\' in col">\n            <Render :row="row" :render="col.render" />\n          </template>\n          <span v-else>{{ col.formatter ? col.formatter(row) : row[col.prop] }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column v-if="handle.length" v-bind="handleColumn" :width="(handle.length * 80)+\'px\'">\n        <template slot-scope="scope">\n          <template v-for="(btn, index) in handle">\n            <el-button\n              v-if="!btn.isPop"\n              :key="index"\n              style="margin: 5px;"\n              size="mini"\n              :type="btn.type"\n              @click.native.prevent="btn.method(scope.row,scope)"\n            >{{ btn.label }}</el-button>\n\n            <el-popconfirm\n              v-if="btn.isPop"\n              :key="index"\n              placement="right"\n              confirm-button-text="确定"\n              cancel-button-text="取消"\n              icon="el-icon-info"\n              icon-color="red"\n              title="确定删除吗？"\n              @onConfirm="getList();btn.method(scope.row, scope)"\n            >\n              <el-button\n                slot="reference"\n                style="margin: 5px;"\n                size="mini"\n                :type="btn.type"\n              >{{ btn.label }}</el-button>\n            </el-popconfirm>\n          </template>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination\n      v-show="total>listQuery.size"\n      style="padding: 8px 16px; margin-top: 10px;"\n      :total="total"\n      :page.sync="listQuery.page"\n      :limit.sync="listQuery.size"\n      @pagination="getList"\n    />\n  </div>\n</template>\n\n<script>\nimport Pagination from \'@/components/Pagination\'\nimport Render from \'./render\'\nexport default {\n  name: \'ComplexTable\',\n  components: { Pagination, Render },\n\n  props: {\n    columns: { type: Array, default: () => [] },\n    operates: { type: Array, default: () => [] },\n    handle: { type: Array, default: () => [] },\n    filters: { type: Array, default: () => [] },\n    crud: { type: String, default: \'crud\' },\n    actionsColumn: {\n      type: Object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    handleColumn: {\n      type: Object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    // eslint-disable-next-line vue/require-default-prop\n    api: [Function, Object]\n  },\n  data() {\n    return {\n      filterForm: {},\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        size: 20\n      }\n    }\n  },\n  computed: {\n    tableHeight() {\n      if (this.total > this.listQuery.size) {\n        return window.document.body.clientHeight - 242\n      } else {\n        return window.document.body.clientHeight - 180\n      }\n    }\n  },\n  created() {\n    this.initFilters()\n    this.getList()\n  },\n  methods: {\n    inpubr($event) {\n      event.target.blur()\n    },\n    initFilters() {\n      const props = this.filters.map((item) => item.prop)\n      props.forEach((key) => {\n        this.$set(this.filterForm, key, \'\')\n      })\n    },\n    getList() {\n      this.listLoading = true\n      this.api({ ...this.listQuery, ...this.filterForm }).then((response) => {\n        this.list = response.data.items\n        this.total = response.data.total\n        this.listLoading = false\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    }\n  }\n}\n<\/script>\n\n<style lang="scss">\n.complex-table_container {\n  .el-table__body-wrapper {\n    &::-webkit-scrollbar {\n      /*滚动条整体样式*/\n      width: 6px !important;\n      /*高宽分别对应横竖滚动条的尺寸*/\n      height: 6px !important;\n      background: #ffffff !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-thumb {\n      /*滚动条里面小方块*/\n      border-radius: 5px !important;\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      background: rgba(63, 98, 131, 0.8) !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-track {\n      /*滚动条里面轨道*/\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      border-radius: 0 !important;\n      background: rgba(240, 240, 240, 0.5) !important;\n      cursor: pointer !important;\n    }\n  }\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n',normalizedContent:'# 解决问题\n\n只举一个例子(我正好需要用到的)\n\n在写中后台时, 如果对 表格组件 再度封装了, 比如这样的\n\n以element-ui 为例:\n\n  <template>\n    <el-table\n      :data="tabledata"\n      style="width: 100%">\n      <el-table-column\n        prop="date"\n        label="日期"\n        width="180">\n      </el-table-column>\n      <el-table-column\n        prop="name"\n        label="姓名"\n        width="180">\n      </el-table-column>\n      <el-table-column\n        prop="address"\n        label="地址">\n      </el-table-column>\n    </el-table>\n  </template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n对html数据化, 封装成一个组件.\n\n// complex-table.vue\n<template>\n  <el-table\n      :data="list"\n      style="width: 100%;"\n    >\n      <el-table-column v-for="col in columns" :key="col.prop" v-bind="col"></el-table-column>\n  </el-table>\n</template>\n<script>\n\texport default {\n  \tprops: {\n    \tcolumns: array\n    }\n  }\n<\/script>\n\n--------------------------\n// index.vue\n<template>\n  <div class="box_container">\n    <complex-table     \n      :columns="tablecolumns"\n    />    \n  </div>\n</template>\n<script>\n  export default {\n    data() {\n    \treturn {\n      \ttablecolumns: [\n          { label: \'日期\', prop: \'sn\', align: \'center\' },\n          { label: \'姓名\', prop: \'phone\', align: \'center\' },\n          { label: \'地址\', prop: \'address\', align: \'center\' }\n        ]\n      }\n    }\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n那么问题来了, 如果我要在table中加入头像列, 但是后端返回的是url地址, 你又怎么办呢,你可以这样\n\n// complex-table.vue\n...\n  <el-table>\n    <el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n      <template slot-scope="scope">\n        <template v-if="col.prop===\'avatar\'">\n      \t\t<el-avatar :src="row.avatar" />\n      \t</template>\n\t\t\t\t<template v-else>\n          <span>{{ scope.row[col.prop] }}</span>\n\t\t\t\t</template>\n\t\t\t</template>\n    </el-table-column>\n  </el-table>\n...\n\n// index.vue\n...\ndata() {\n  return {\n    tablecolumns: [\n\t\t\t{ label: \'头像\', prop: \'avatar\', align: \'center\' },\n      { label: \'日期\', prop: \'date\', align: \'center\' },\n      { label: \'姓名\', prop: \'name\', align: \'center\' },\n      { label: \'地址\', prop: \'address\', align: \'center\' }\n    ]\n  }\n}\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n万一又是**<el-tag>** 标签, **el-button** 不能一直v-if吧\n\n或许也可以使用 <component :is="**" v-bind="**" >这种形式, 如果遇到方法传值又感觉差点什么,差scope传值了\n\n\n# 解决方案\n\n使用函数式组件, 可灵活使用, 原理跟 valueformat 类似, 不废话直接上代码\n\n新建文件columnrender.js\n\n/*\n * @description: 函数式组件渲染单元表格\n * @author: 仲灏<izhaong 164165005@qq.com>\n * @date: 2020-09-16 15:33:25\n * @lasteditors: 仲灏<izhaong 164165005@qq.com>\n * @lastedittime: 2020-09-16 15:47:23\n */\nexport default {\n  functional: true,\n  props: {\n    row: object,\n    render: function\n  },\n  render(h, ctx) {\n    const params = {\n      row: ctx.props.row\n    }\n\n    return ctx.props.render(h, params)\n  }\n}\n// complextable\n...\n<template v-else-if="\'render\' in col">\n  \x3c!-- <component :is="col.tag" v-bind="col.attrs">{{ col.tagvalue }}</component> --\x3e\n  <render :row="row" :render="col.render" />\n</template>\n...\n\n\n// index.js\ntablecolumns: [\n    { label: \'name\', prop: \'name\', align: \'center\' },\n    { label: \'是否有效\', prop: \'isvalid\', align: \'center\', render: (h, { row }) => {\n      return h(\'el-tag\', { attrs: { type: row.isvalid ? \'success\' : \'info\' }}, row.isvalid ? \'有效\' : \'无效\')\n    } }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# 结语\n\n第一次bb这个多话, 之前直接就啪~ 贴代码了.\n\n当然如果封装的组件足够强大, 能够兼顾涵盖该项目大部分业务, 就可以把组件当做页面使用, 全部使用纯数据驱动, 当然你的业务相似度要高\n\n\n# 最终代码\n\ncomplextable.vue\n\n\x3c!--\n * @descripttion: 数据化表格\n * @version: 1.0.0\n * @author: 仲灏 izhaong<164165005@qq.com>\n * @date: 2020-06-27 15:13:00\n * @lasteditors: 仲灏<izhaong 164165005@qq.com>\n * @lastedittime: 2020-11-20 10:22:20\n--\x3e\n<template>\n  <div class="complex-table_container app-container">\n    <div class="filter-container d-flex align-items-center">\n      <component\n        :is="filter.is"\n        v-for="(filter, index) in filters"\n        :key="index"\n        v-model="filterform[filter.prop]"\n        v-bind="filter.attrs"\n        class="filter-item mr-10"\n      >\n        <template v-if="filter.options">\n          <el-option\n            v-for="(option, i) in filter.options"\n            :key="`${index}_${i}`"\n            :value="option.value"\n            :label="option.label"\n          />\n        </template>\n      </component>\n\n      <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handlefilter">查找</el-button>\n      <slot name="action">\n        <el-button\n          v-if="crud.includes(\'c\')"\n          class="filter-item"\n          style="margin-left: 10px;"\n          type="primary"\n\n          icon="el-icon-edit"\n          @click="$emit(\'createitem\')"\n        >添加</el-button>\n      </slot>\n    </div>\n    <el-table\n      :key="tablekey"\n      v-loading="listloading"\n      :height="tableheight"\n      :data="list"\n      size="small"\n      border\n      style="width: 100%;"\n    >\n      <el-table-column\n        type="index"\n        width="50"\n      />\n      <el-table-column v-for="col in columns" :key="col.prop" v-bind="col">\n        <template v-if="\'index\' in col" slot-scope="{row}">\n          <template v-if="\'render\' in col">\n            <render :row="row" :render="col.render" />\n          </template>\n          <span v-else>{{ col.formatter ? col.formatter(row) : row[col.prop] }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column v-if="handle.length" v-bind="handlecolumn" :width="(handle.length * 80)+\'px\'">\n        <template slot-scope="scope">\n          <template v-for="(btn, index) in handle">\n            <el-button\n              v-if="!btn.ispop"\n              :key="index"\n              style="margin: 5px;"\n              size="mini"\n              :type="btn.type"\n              @click.native.prevent="btn.method(scope.row,scope)"\n            >{{ btn.label }}</el-button>\n\n            <el-popconfirm\n              v-if="btn.ispop"\n              :key="index"\n              placement="right"\n              confirm-button-text="确定"\n              cancel-button-text="取消"\n              icon="el-icon-info"\n              icon-color="red"\n              title="确定删除吗？"\n              @onconfirm="getlist();btn.method(scope.row, scope)"\n            >\n              <el-button\n                slot="reference"\n                style="margin: 5px;"\n                size="mini"\n                :type="btn.type"\n              >{{ btn.label }}</el-button>\n            </el-popconfirm>\n          </template>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination\n      v-show="total>listquery.size"\n      style="padding: 8px 16px; margin-top: 10px;"\n      :total="total"\n      :page.sync="listquery.page"\n      :limit.sync="listquery.size"\n      @pagination="getlist"\n    />\n  </div>\n</template>\n\n<script>\nimport pagination from \'@/components/pagination\'\nimport render from \'./render\'\nexport default {\n  name: \'complextable\',\n  components: { pagination, render },\n\n  props: {\n    columns: { type: array, default: () => [] },\n    operates: { type: array, default: () => [] },\n    handle: { type: array, default: () => [] },\n    filters: { type: array, default: () => [] },\n    crud: { type: string, default: \'crud\' },\n    actionscolumn: {\n      type: object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    handlecolumn: {\n      type: object,\n      default: () => ({\n        label: \'操作\',\n        align: \'center\'\n      })\n    },\n    // eslint-disable-next-line vue/require-default-prop\n    api: [function, object]\n  },\n  data() {\n    return {\n      filterform: {},\n      tablekey: 0,\n      list: null,\n      total: 0,\n      listloading: true,\n      listquery: {\n        page: 1,\n        size: 20\n      }\n    }\n  },\n  computed: {\n    tableheight() {\n      if (this.total > this.listquery.size) {\n        return window.document.body.clientheight - 242\n      } else {\n        return window.document.body.clientheight - 180\n      }\n    }\n  },\n  created() {\n    this.initfilters()\n    this.getlist()\n  },\n  methods: {\n    inpubr($event) {\n      event.target.blur()\n    },\n    initfilters() {\n      const props = this.filters.map((item) => item.prop)\n      props.foreach((key) => {\n        this.$set(this.filterform, key, \'\')\n      })\n    },\n    getlist() {\n      this.listloading = true\n      this.api({ ...this.listquery, ...this.filterform }).then((response) => {\n        this.list = response.data.items\n        this.total = response.data.total\n        this.listloading = false\n      })\n    },\n    handlefilter() {\n      this.listquery.page = 1\n      this.getlist()\n    }\n  }\n}\n<\/script>\n\n<style lang="scss">\n.complex-table_container {\n  .el-table__body-wrapper {\n    &::-webkit-scrollbar {\n      /*滚动条整体样式*/\n      width: 6px !important;\n      /*高宽分别对应横竖滚动条的尺寸*/\n      height: 6px !important;\n      background: #ffffff !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-thumb {\n      /*滚动条里面小方块*/\n      border-radius: 5px !important;\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      background: rgba(63, 98, 131, 0.8) !important;\n      cursor: pointer !important;\n    }\n\n    &::-webkit-scrollbar-track {\n      /*滚动条里面轨道*/\n      -webkit-box-shadow: inset 0 0 5px rgba(240, 240, 240, 0.5) !important;\n      border-radius: 0 !important;\n      background: rgba(240, 240, 240, 0.5) !important;\n      cursor: pointer !important;\n    }\n  }\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"项目初始化编码规范(eslint,prettier等)",frontmatter:{title:"项目初始化编码规范(eslint,prettier等)",date:"2022-01-09T16:14:28.000Z",permalink:"/pages/479249/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104012.%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83(eslint,prettier%E7%AD%89).html",relativePath:"10.大前端/1040.Vue/104012.项目初始化编码规范(eslint,prettier等).md",key:"v-875c577c",path:"/pages/479249/",headers:[{level:3,title:"ESLint",slug:"eslint",normalizedTitle:"eslint",charIndex:285}],headersStr:"ESLint",content:'代码已传入GitHub仓库\n\nvue2-standard-template\n\n用于团队初始开发时统一编码规范\n\n主要有如下功能点\n\n * 针对不同编辑器生效\n * vocde 在项目打开时会有提示安装推荐插件（ 在你没有安装 eslint，vetur 等 ）\n * 对 vscode 编辑器配置做团队统一规范，对诸多忽略文件（夹）做了处理\n * 对 git 前端项目做了诸多忽略文件（夹）处理\n * 对 eslint 做了诸多忽略文件（夹）处理\n * 对 prettier 做了诸多忽略文件（夹）处理\n * 兼容了 eslint 与 prettier 编码规范\n\n\n# ESLint\n\n所有的配置文件都在 .eslintrc.js 中\n\nmodule.exports = {\n  extends: [\'plugin:vue/recommended\', \'eslint:recommended\']\n}\n\n\n1\n2\n3\n\n\n\n\nvue 官方的 eslint 规则 eslint-config-vue\n\n错识级别分为三种： "off"或0- 关闭规则 "warn或1 - 开启规则，使用警告级别的错误：warn（不会导致程序退出） "error"或 2-开启规则，使用错识级别的错识：error（当被触发的时候，程序会退出）',normalizedContent:'代码已传入github仓库\n\nvue2-standard-template\n\n用于团队初始开发时统一编码规范\n\n主要有如下功能点\n\n * 针对不同编辑器生效\n * vocde 在项目打开时会有提示安装推荐插件（ 在你没有安装 eslint，vetur 等 ）\n * 对 vscode 编辑器配置做团队统一规范，对诸多忽略文件（夹）做了处理\n * 对 git 前端项目做了诸多忽略文件（夹）处理\n * 对 eslint 做了诸多忽略文件（夹）处理\n * 对 prettier 做了诸多忽略文件（夹）处理\n * 兼容了 eslint 与 prettier 编码规范\n\n\n# eslint\n\n所有的配置文件都在 .eslintrc.js 中\n\nmodule.exports = {\n  extends: [\'plugin:vue/recommended\', \'eslint:recommended\']\n}\n\n\n1\n2\n3\n\n\n\n\nvue 官方的 eslint 规则 eslint-config-vue\n\n错识级别分为三种： "off"或0- 关闭规则 "warn或1 - 开启规则，使用警告级别的错误：warn（不会导致程序退出） "error"或 2-开启规则，使用错识级别的错识：error（当被触发的时候，程序会退出）',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"vue element-ui 换肤功能开发",frontmatter:{title:"vue element-ui 换肤功能开发",date:"2021-12-30T15:50:34.000Z",permalink:"/pages/037c03/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104020.vue%20element-ui%20%E6%8D%A2%E8%82%A4%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91.html",relativePath:"10.大前端/1040.Vue/104020.vue element-ui 换肤功能开发.md",key:"v-7e456407",path:"/pages/037c03/",headers:[{level:2,title:"实现原理",slug:"实现原理",normalizedTitle:"实现原理",charIndex:76},{level:2,title:"开始实现",slug:"开始实现",normalizedTitle:"开始实现",charIndex:216},{level:3,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:161}],headersStr:"实现原理 开始实现 问题",content:'此功能基于\n\n> vue 2.6\n> \n> element-ui 2.13.2\n\n实现\n\n快速切换主题 使用命令行主题工具进行深层次的主题定制\n\n\n# 实现原理\n\n * 主题的css通过public/index.html中的link标签中引入\n * 切换事件中就切换link标签中的css地址即可\n   * 避免加载缓慢的问题，提前构建好主题css文件，放置在src/assets或者public文件夹下\n * 结果：\n\n\n\n\n# 开始实现\n\n使用官方的深度主题构建工具element-theme\n\n * 克隆仓库 git clone https://github.com/ElementUI/element-theme.git\n\n * node版本切换到10; 我用的10.24.1\n\n * 安装好依赖 npm i\n\n * 安装主题包 npm i element-theme -D\n\n * 增加npm脚本\n   \n   * "scripts": {\n         ...\n         "et": "node_modules/.bin/et",\n         "et:init": "node_modules/.bin/et -i",\n        \t...\n       },\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n\n * 初始化变量文件\n   \n   * npm run et:init\n   \n   就可以看到多出一个 element-variables.css的文件\n\n * 然后只需要调整好几个颜色变量即可，使用官方在线构建更准确如果是暗黑模式，就需要把颜色反过来。如\n   \n   * \n   \n   * 然后下载，把其中的json文件中颜色值替换到element-variables.css\n   \n   * /* Color\n     -------------------------- */\n     /// color|1|Brand Color|0\n     $--color-primary: #50D6FF !default;\n     /// color|1|Background Color|4\n     $--color-white: #121B33 !default;\n     /// color|1|Background Color|4\n     $--color-black: #243666 !default;\n     $--color-primary-light-1: mix($--color-white, $--color-primary, 10%) !default; /* 53a8ff */\n     $--color-primary-light-2: mix($--color-white, $--color-primary, 20%) !default; /* 66b1ff */\n     $--color-primary-light-3: mix($--color-white, $--color-primary, 30%) !default; /* 79bbff */\n     $--color-primary-light-4: mix($--color-white, $--color-primary, 40%) !default; /* 8cc5ff */\n     $--color-primary-light-5: mix($--color-white, $--color-primary, 50%) !default; /* a0cfff */\n     $--color-primary-light-6: mix($--color-white, $--color-primary, 60%) !default; /* b3d8ff */\n     $--color-primary-light-7: mix($--color-white, $--color-primary, 70%) !default; /* c6e2ff */\n     $--color-primary-light-8: mix($--color-white, $--color-primary, 80%) !default; /* d9ecff */\n     $--color-primary-light-9: mix($--color-white, $--color-primary, 90%) !default; /* ecf5ff */\n     /// color|1|Functional Color|1\n     $--color-success: #16EE9F !default;\n     /// color|1|Functional Color|1\n     $--color-warning: #F7D230 !default;\n     /// color|1|Functional Color|1\n     $--color-danger: #FE5858 !default;\n     /// color|1|Functional Color|1\n     $--color-info: #B2BFD9 !default;\n     \n     $--color-success-light: mix($--color-white, $--color-success, 80%) !default;\n     $--color-warning-light: mix($--color-white, $--color-warning, 80%) !default;\n     $--color-danger-light: mix($--color-white, $--color-danger, 80%) !default;\n     $--color-info-light: mix($--color-white, $--color-info, 80%) !default;\n     \n     $--color-success-lighter: mix($--color-white, $--color-success, 90%) !default;\n     $--color-warning-lighter: mix($--color-white, $--color-warning, 90%) !default;\n     $--color-danger-lighter: mix($--color-white, $--color-danger, 90%) !default;\n     $--color-info-lighter: mix($--color-white, $--color-info, 90%) !default;\n     /// color|1|Font Color|2\n     $--color-text-primary: #DEE7FF !default;\n     /// color|1|Font Color|2\n     $--color-text-regular: #BED0FF !default;\n     /// color|1|Font Color|2\n     $--color-text-secondary: #919AB3 !default;\n     /// color|1|Font Color|2\n     $--color-text-placeholder: #8091BE !default;\n     /// color|1|Border Color|3\n     $--border-color-base: #414D6E !default;\n     /// color|1|Border Color|3\n     $--border-color-light: #4E5C7F !default;\n     /// color|1|Border Color|3\n     $--border-color-lighter: #EBEEF5 !default;\n     /// color|1|Border Color|3\n     $--border-color-extra-light: #647092 !default;\n     \n     // Background\n     /// color|1|Background Color|4\n     $--background-color-base: #243666 !default;\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     50\n     51\n     52\n     53\n     54\n     55\n     \n\n * 然后就是构建主题包了 npm run et\n\n\n\n * 构建完成后把包放到 public/theme/[名称] 下面\n\n * 最后用函数去手动引入就好了\n   \n   themeColorChangeHandle (val) {\n         var styleList = [\n           {\n             id: \'J_elementTheme\',\n             url: `${process.env.BASE_URL}element-theme/${val}/index.css?t=${new Date().getTime()}`\n           },\n         ]\n         for (var i = 0; i < styleList.length; i++) {\n           var el = document.querySelector(`#${styleList[i].id}`)\n           if (el) {\n             el.href = styleList[i].url\n             continue\n           }\n           el = document.createElement(\'link\')\n           el.id = styleList[i].id\n           el.href = styleList[i].url\n           el.rel = \'stylesheet\'\n           document.querySelector(\'head\').appendChild(el)\n         }\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   \n   \n   \n   # 问题\n\n * 出错：ReferenceError: primordials is not defined\n   \n   * node版本过高， 降级node到10就差不多了\n   \n   * （不想降级node可使用这个方案）\n     \n     * 根目录下新建npm-shrinkwrap.json, 其内容如下\n     \n     * {\n         "dependencies": {\n           "graceful-fs": {\n               "version": "4.2.2"\n            }\n         }\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       ',normalizedContent:'此功能基于\n\n> vue 2.6\n> \n> element-ui 2.13.2\n\n实现\n\n快速切换主题 使用命令行主题工具进行深层次的主题定制\n\n\n# 实现原理\n\n * 主题的css通过public/index.html中的link标签中引入\n * 切换事件中就切换link标签中的css地址即可\n   * 避免加载缓慢的问题，提前构建好主题css文件，放置在src/assets或者public文件夹下\n * 结果：\n\n\n\n\n# 开始实现\n\n使用官方的深度主题构建工具element-theme\n\n * 克隆仓库 git clone https://github.com/elementui/element-theme.git\n\n * node版本切换到10; 我用的10.24.1\n\n * 安装好依赖 npm i\n\n * 安装主题包 npm i element-theme -d\n\n * 增加npm脚本\n   \n   * "scripts": {\n         ...\n         "et": "node_modules/.bin/et",\n         "et:init": "node_modules/.bin/et -i",\n        \t...\n       },\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n\n * 初始化变量文件\n   \n   * npm run et:init\n   \n   就可以看到多出一个 element-variables.css的文件\n\n * 然后只需要调整好几个颜色变量即可，使用官方在线构建更准确如果是暗黑模式，就需要把颜色反过来。如\n   \n   * \n   \n   * 然后下载，把其中的json文件中颜色值替换到element-variables.css\n   \n   * /* color\n     -------------------------- */\n     /// color|1|brand color|0\n     $--color-primary: #50d6ff !default;\n     /// color|1|background color|4\n     $--color-white: #121b33 !default;\n     /// color|1|background color|4\n     $--color-black: #243666 !default;\n     $--color-primary-light-1: mix($--color-white, $--color-primary, 10%) !default; /* 53a8ff */\n     $--color-primary-light-2: mix($--color-white, $--color-primary, 20%) !default; /* 66b1ff */\n     $--color-primary-light-3: mix($--color-white, $--color-primary, 30%) !default; /* 79bbff */\n     $--color-primary-light-4: mix($--color-white, $--color-primary, 40%) !default; /* 8cc5ff */\n     $--color-primary-light-5: mix($--color-white, $--color-primary, 50%) !default; /* a0cfff */\n     $--color-primary-light-6: mix($--color-white, $--color-primary, 60%) !default; /* b3d8ff */\n     $--color-primary-light-7: mix($--color-white, $--color-primary, 70%) !default; /* c6e2ff */\n     $--color-primary-light-8: mix($--color-white, $--color-primary, 80%) !default; /* d9ecff */\n     $--color-primary-light-9: mix($--color-white, $--color-primary, 90%) !default; /* ecf5ff */\n     /// color|1|functional color|1\n     $--color-success: #16ee9f !default;\n     /// color|1|functional color|1\n     $--color-warning: #f7d230 !default;\n     /// color|1|functional color|1\n     $--color-danger: #fe5858 !default;\n     /// color|1|functional color|1\n     $--color-info: #b2bfd9 !default;\n     \n     $--color-success-light: mix($--color-white, $--color-success, 80%) !default;\n     $--color-warning-light: mix($--color-white, $--color-warning, 80%) !default;\n     $--color-danger-light: mix($--color-white, $--color-danger, 80%) !default;\n     $--color-info-light: mix($--color-white, $--color-info, 80%) !default;\n     \n     $--color-success-lighter: mix($--color-white, $--color-success, 90%) !default;\n     $--color-warning-lighter: mix($--color-white, $--color-warning, 90%) !default;\n     $--color-danger-lighter: mix($--color-white, $--color-danger, 90%) !default;\n     $--color-info-lighter: mix($--color-white, $--color-info, 90%) !default;\n     /// color|1|font color|2\n     $--color-text-primary: #dee7ff !default;\n     /// color|1|font color|2\n     $--color-text-regular: #bed0ff !default;\n     /// color|1|font color|2\n     $--color-text-secondary: #919ab3 !default;\n     /// color|1|font color|2\n     $--color-text-placeholder: #8091be !default;\n     /// color|1|border color|3\n     $--border-color-base: #414d6e !default;\n     /// color|1|border color|3\n     $--border-color-light: #4e5c7f !default;\n     /// color|1|border color|3\n     $--border-color-lighter: #ebeef5 !default;\n     /// color|1|border color|3\n     $--border-color-extra-light: #647092 !default;\n     \n     // background\n     /// color|1|background color|4\n     $--background-color-base: #243666 !default;\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     50\n     51\n     52\n     53\n     54\n     55\n     \n\n * 然后就是构建主题包了 npm run et\n\n\n\n * 构建完成后把包放到 public/theme/[名称] 下面\n\n * 最后用函数去手动引入就好了\n   \n   themecolorchangehandle (val) {\n         var stylelist = [\n           {\n             id: \'j_elementtheme\',\n             url: `${process.env.base_url}element-theme/${val}/index.css?t=${new date().gettime()}`\n           },\n         ]\n         for (var i = 0; i < stylelist.length; i++) {\n           var el = document.queryselector(`#${stylelist[i].id}`)\n           if (el) {\n             el.href = stylelist[i].url\n             continue\n           }\n           el = document.createelement(\'link\')\n           el.id = stylelist[i].id\n           el.href = stylelist[i].url\n           el.rel = \'stylesheet\'\n           document.queryselector(\'head\').appendchild(el)\n         }\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   \n   \n   \n   # 问题\n\n * 出错：referenceerror: primordials is not defined\n   \n   * node版本过高， 降级node到10就差不多了\n   \n   * （不想降级node可使用这个方案）\n     \n     * 根目录下新建npm-shrinkwrap.json, 其内容如下\n     \n     * {\n         "dependencies": {\n           "graceful-fs": {\n               "version": "4.2.2"\n            }\n         }\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       ',charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"倒计时验证",frontmatter:{title:"倒计时验证",date:"2023-09-17T20:00:08.000Z",permalink:"/pages/53c4a8/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/1040202.%E5%80%92%E8%AE%A1%E6%97%B6%E9%AA%8C%E8%AF%81.html",relativePath:"10.大前端/1040.Vue/1040202.倒计时验证.md",key:"v-6eab398b",path:"/pages/53c4a8/",headersStr:null,content:"<template>\n\t<view class=\"u-code-wrap\">\n\t\t\x3c!-- 此组件功能由js完成，无需写html逻辑 --\x3e\n\t</view>\n</template>\n\n<script>\n\t/**\n\t * verificationCode 验证码输入框\n\t * @description 考虑到用户实际发送验证码的场景，可能是一个按钮，也可能是一段文字，提示语各有不同，所以本组件 不提供界面显示，只提供提示语，由用户将提示语嵌入到具体的场景\n\t * @tutorial https://www.uviewui.com/components/verificationCode.html\n\t * @property {Number String} seconds 倒计时所需的秒数（默认60）\n\t * @property {String} start-text 开始前的提示语，见官网说明（默认获取验证码）\n\t * @property {String} change-text 倒计时期间的提示语，必须带有字母\"x\"，见官网说明（默认X秒重新获取）\n\t * @property {String} end-text 倒计结束的提示语，见官网说明（默认重新获取）\n\t * @property {Boolean} keep-running 是否在H5刷新或各端返回再进入时继续倒计时（默认false）\n\t * @event {Function} change 倒计时期间，每秒触发一次\n\t * @event {Function} start 开始倒计时触发\n\t * @event {Function} end 结束倒计时触发\n\t * @example <u-verification-code :seconds=\"seconds\" @end=\"end\" @start=\"start\" ref=\"uCode\" \n\t */\n\texport default {\n\t\tname: \"verification-code\",\n\t\tprops: {\n\t\t\t// 倒计时总秒数\n\t\t\tseconds: {\n\t\t\t\ttype: [String, Number],\n\t\t\t\tdefault: 60\n\t\t\t},\n\t\t\t// 尚未开始时提示\n\t\t\tstartText: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: '获取验证码'\n\t\t\t},\n\t\t\t// 正在倒计时中的提示\n\t\t\tchangeText: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'X秒重新获取'\n\t\t\t},\n\t\t\t// 倒计时结束时的提示\n\t\t\tendText: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: '重新获取'\n\t\t\t},\n\t\t\t// 是否在H5刷新或各端返回再进入时继续倒计时\n\t\t\tkeepRunning: {\n\t\t\t\ttype: Boolean,\n\t\t\t\tdefault: false\n\t\t\t},\n\t\t\t// 为了区分多个页面，或者一个页面多个倒计时组件本地存储的继续倒计时变了\n\t\t\tuniqueKey: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: ''\n\t\t\t}\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tsecNum: this.seconds,\n\t\t\t\ttimer: null,\n\t\t\t\tcanGetCode: true, // 是否可以执行验证码操作\n\t\t\t}\n\t\t},\n\t\tmounted() {\n\t\t\tthis.checkKeepRunning();\n\t\t},\n\t\twatch: {\n\t\t\tseconds: {\n\t\t\t\timmediate: true,\n\t\t\t\thandler(n) {\n\t\t\t\t\tthis.secNum = n;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tcheckKeepRunning() {\n\t\t\t\t// 获取上一次退出页面(H5还包括刷新)时的时间戳，如果没有上次的保存，此值可能为空\n\t\t\t\tlet lastTimestamp = Number(uni.getStorageSync(this.uniqueKey + '_$uCountDownTimestamp'));\n\t\t\t\tif(!lastTimestamp) return this.changeEvent(this.startText);\n\t\t\t\t// 当前秒的时间戳\n\t\t\t\tlet nowTimestamp = Math.floor((+ new Date()) / 1000);\n\t\t\t\t// 判断当前的时间戳，是否小于上一次的本该按设定结束，却提前结束的时间戳\n\t\t\t\tif(this.keepRunning && lastTimestamp && lastTimestamp > nowTimestamp) {\n\t\t\t\t\t// 剩余尚未执行完的倒计秒数\n\t\t\t\t\tthis.secNum = lastTimestamp - nowTimestamp;\n\t\t\t\t\t// 清除本地保存的变量\n\t\t\t\t\tuni.removeStorageSync(this.uniqueKey + '_$uCountDownTimestamp');\n\t\t\t\t\t// 开始倒计时\n\t\t\t\t\tthis.start();\n\t\t\t\t} else {\n\t\t\t\t\t// 如果不存在需要继续上一次的倒计时，执行正常的逻辑\n\t\t\t\t\tthis.changeEvent(this.startText);\n\t\t\t\t}\n\t\t\t},\n\t\t\t// 开始倒计时\n\t\t\tstart() {\n\t\t\t\t// 防止快速点击获取验证码的按钮而导致内部产生多个定时器导致混乱\n\t\t\t\tif(this.timer) {\n\t\t\t\t\tclearInterval(this.timer);\n\t\t\t\t\tthis.timer = null;\n\t\t\t\t}\n\t\t\t\tthis.$emit('start');\n\t\t\t\tthis.canGetCode = false;\n\t\t\t\t// 这里放这句，是为了一开始时就提示，否则要等setInterval的1秒后才会有提示\n\t\t\t\tthis.changeEvent(this.changeText.replace(/x|X/, this.secNum));\n\t\t\t\tthis.setTimeToStorage();\n\t\t\t\tthis.timer = setInterval(() => {\n\t\t\t\t\tif (--this.secNum) {\n\t\t\t\t\t\t// 用当前倒计时的秒数替换提示字符串中的\"x\"字母\n\t\t\t\t\t\tthis.changeEvent(this.changeText.replace(/x|X/, this.secNum));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclearInterval(this.timer);\n\t\t\t\t\t\tthis.timer = null;\n\t\t\t\t\t\tthis.changeEvent(this.endText);\n\t\t\t\t\t\tthis.secNum = this.seconds;\n\t\t\t\t\t\tthis.$emit('end');\n\t\t\t\t\t\tthis.canGetCode = true;\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t},\n\t\t\t// 重置，可以让用户再次获取验证码\n\t\t\treset() {\n\t\t\t\tthis.canGetCode = true;\n\t\t\t\tclearInterval(this.timer);\n\t\t\t\tthis.secNum = this.seconds;\n\t\t\t\tthis.changeEvent(this.endText);\n\t\t\t},\n\t\t\tchangeEvent(text) {\n\t\t\t\tthis.$emit('change', text);\n\t\t\t},\n\t\t\t// 保存时间戳，为了防止倒计时尚未结束，H5刷新或者各端的右上角返回上一页再进来\n\t\t\tsetTimeToStorage() {\n\t\t\t\tif(!this.keepRunning || !this.timer) return;\n\t\t\t\t// 记录当前的时间戳，为了下次进入页面，如果还在倒计时内的话，继续倒计时\n\t\t\t\t// 倒计时尚未结束，结果大于0；倒计时已经开始，就会小于初始值，如果等于初始值，说明没有开始倒计时，无需处理\n\t\t\t\tif(this.secNum > 0 && this.secNum <= this.seconds) {\n\t\t\t\t\t// 获取当前时间戳(+ new Date()为特殊写法)，除以1000变成秒，再去除小数部分\n\t\t\t\t\tlet nowTimestamp = Math.floor((+ new Date()) / 1000);\n\t\t\t\t\t// 将本该结束时候的时间戳保存起来 => 当前时间戳 + 剩余的秒数\n\t\t\t\t\tuni.setStorage({\n\t\t\t\t\t\tkey: this.uniqueKey + '_$uCountDownTimestamp',\n\t\t\t\t\t\tdata: nowTimestamp + Number(this.secNum)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// 组件销毁的时候，清除定时器，否则定时器会继续存在，系统不会自动清除\n\t\tbeforeDestroy() {\n\t\t\tthis.setTimeToStorage();\n\t\t\tclearTimeout(this.timer);\n\t\t\tthis.timer = null;\n\t\t}\n\t}\n<\/script>\n\n<style lang=\"scss\" scoped>\n\t// @import \"../../libs/css/style.components.scss\";\n\t\n\t.u-code-wrap {\n\t\twidth: 0;\n\t\theight: 0;\n\t\tposition: fixed;\n\t\tz-index: -1;\n\t}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n",normalizedContent:"<template>\n\t<view class=\"u-code-wrap\">\n\t\t\x3c!-- 此组件功能由js完成，无需写html逻辑 --\x3e\n\t</view>\n</template>\n\n<script>\n\t/**\n\t * verificationcode 验证码输入框\n\t * @description 考虑到用户实际发送验证码的场景，可能是一个按钮，也可能是一段文字，提示语各有不同，所以本组件 不提供界面显示，只提供提示语，由用户将提示语嵌入到具体的场景\n\t * @tutorial https://www.uviewui.com/components/verificationcode.html\n\t * @property {number string} seconds 倒计时所需的秒数（默认60）\n\t * @property {string} start-text 开始前的提示语，见官网说明（默认获取验证码）\n\t * @property {string} change-text 倒计时期间的提示语，必须带有字母\"x\"，见官网说明（默认x秒重新获取）\n\t * @property {string} end-text 倒计结束的提示语，见官网说明（默认重新获取）\n\t * @property {boolean} keep-running 是否在h5刷新或各端返回再进入时继续倒计时（默认false）\n\t * @event {function} change 倒计时期间，每秒触发一次\n\t * @event {function} start 开始倒计时触发\n\t * @event {function} end 结束倒计时触发\n\t * @example <u-verification-code :seconds=\"seconds\" @end=\"end\" @start=\"start\" ref=\"ucode\" \n\t */\n\texport default {\n\t\tname: \"verification-code\",\n\t\tprops: {\n\t\t\t// 倒计时总秒数\n\t\t\tseconds: {\n\t\t\t\ttype: [string, number],\n\t\t\t\tdefault: 60\n\t\t\t},\n\t\t\t// 尚未开始时提示\n\t\t\tstarttext: {\n\t\t\t\ttype: string,\n\t\t\t\tdefault: '获取验证码'\n\t\t\t},\n\t\t\t// 正在倒计时中的提示\n\t\t\tchangetext: {\n\t\t\t\ttype: string,\n\t\t\t\tdefault: 'x秒重新获取'\n\t\t\t},\n\t\t\t// 倒计时结束时的提示\n\t\t\tendtext: {\n\t\t\t\ttype: string,\n\t\t\t\tdefault: '重新获取'\n\t\t\t},\n\t\t\t// 是否在h5刷新或各端返回再进入时继续倒计时\n\t\t\tkeeprunning: {\n\t\t\t\ttype: boolean,\n\t\t\t\tdefault: false\n\t\t\t},\n\t\t\t// 为了区分多个页面，或者一个页面多个倒计时组件本地存储的继续倒计时变了\n\t\t\tuniquekey: {\n\t\t\t\ttype: string,\n\t\t\t\tdefault: ''\n\t\t\t}\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tsecnum: this.seconds,\n\t\t\t\ttimer: null,\n\t\t\t\tcangetcode: true, // 是否可以执行验证码操作\n\t\t\t}\n\t\t},\n\t\tmounted() {\n\t\t\tthis.checkkeeprunning();\n\t\t},\n\t\twatch: {\n\t\t\tseconds: {\n\t\t\t\timmediate: true,\n\t\t\t\thandler(n) {\n\t\t\t\t\tthis.secnum = n;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tcheckkeeprunning() {\n\t\t\t\t// 获取上一次退出页面(h5还包括刷新)时的时间戳，如果没有上次的保存，此值可能为空\n\t\t\t\tlet lasttimestamp = number(uni.getstoragesync(this.uniquekey + '_$ucountdowntimestamp'));\n\t\t\t\tif(!lasttimestamp) return this.changeevent(this.starttext);\n\t\t\t\t// 当前秒的时间戳\n\t\t\t\tlet nowtimestamp = math.floor((+ new date()) / 1000);\n\t\t\t\t// 判断当前的时间戳，是否小于上一次的本该按设定结束，却提前结束的时间戳\n\t\t\t\tif(this.keeprunning && lasttimestamp && lasttimestamp > nowtimestamp) {\n\t\t\t\t\t// 剩余尚未执行完的倒计秒数\n\t\t\t\t\tthis.secnum = lasttimestamp - nowtimestamp;\n\t\t\t\t\t// 清除本地保存的变量\n\t\t\t\t\tuni.removestoragesync(this.uniquekey + '_$ucountdowntimestamp');\n\t\t\t\t\t// 开始倒计时\n\t\t\t\t\tthis.start();\n\t\t\t\t} else {\n\t\t\t\t\t// 如果不存在需要继续上一次的倒计时，执行正常的逻辑\n\t\t\t\t\tthis.changeevent(this.starttext);\n\t\t\t\t}\n\t\t\t},\n\t\t\t// 开始倒计时\n\t\t\tstart() {\n\t\t\t\t// 防止快速点击获取验证码的按钮而导致内部产生多个定时器导致混乱\n\t\t\t\tif(this.timer) {\n\t\t\t\t\tclearinterval(this.timer);\n\t\t\t\t\tthis.timer = null;\n\t\t\t\t}\n\t\t\t\tthis.$emit('start');\n\t\t\t\tthis.cangetcode = false;\n\t\t\t\t// 这里放这句，是为了一开始时就提示，否则要等setinterval的1秒后才会有提示\n\t\t\t\tthis.changeevent(this.changetext.replace(/x|x/, this.secnum));\n\t\t\t\tthis.settimetostorage();\n\t\t\t\tthis.timer = setinterval(() => {\n\t\t\t\t\tif (--this.secnum) {\n\t\t\t\t\t\t// 用当前倒计时的秒数替换提示字符串中的\"x\"字母\n\t\t\t\t\t\tthis.changeevent(this.changetext.replace(/x|x/, this.secnum));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclearinterval(this.timer);\n\t\t\t\t\t\tthis.timer = null;\n\t\t\t\t\t\tthis.changeevent(this.endtext);\n\t\t\t\t\t\tthis.secnum = this.seconds;\n\t\t\t\t\t\tthis.$emit('end');\n\t\t\t\t\t\tthis.cangetcode = true;\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t},\n\t\t\t// 重置，可以让用户再次获取验证码\n\t\t\treset() {\n\t\t\t\tthis.cangetcode = true;\n\t\t\t\tclearinterval(this.timer);\n\t\t\t\tthis.secnum = this.seconds;\n\t\t\t\tthis.changeevent(this.endtext);\n\t\t\t},\n\t\t\tchangeevent(text) {\n\t\t\t\tthis.$emit('change', text);\n\t\t\t},\n\t\t\t// 保存时间戳，为了防止倒计时尚未结束，h5刷新或者各端的右上角返回上一页再进来\n\t\t\tsettimetostorage() {\n\t\t\t\tif(!this.keeprunning || !this.timer) return;\n\t\t\t\t// 记录当前的时间戳，为了下次进入页面，如果还在倒计时内的话，继续倒计时\n\t\t\t\t// 倒计时尚未结束，结果大于0；倒计时已经开始，就会小于初始值，如果等于初始值，说明没有开始倒计时，无需处理\n\t\t\t\tif(this.secnum > 0 && this.secnum <= this.seconds) {\n\t\t\t\t\t// 获取当前时间戳(+ new date()为特殊写法)，除以1000变成秒，再去除小数部分\n\t\t\t\t\tlet nowtimestamp = math.floor((+ new date()) / 1000);\n\t\t\t\t\t// 将本该结束时候的时间戳保存起来 => 当前时间戳 + 剩余的秒数\n\t\t\t\t\tuni.setstorage({\n\t\t\t\t\t\tkey: this.uniquekey + '_$ucountdowntimestamp',\n\t\t\t\t\t\tdata: nowtimestamp + number(this.secnum)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// 组件销毁的时候，清除定时器，否则定时器会继续存在，系统不会自动清除\n\t\tbeforedestroy() {\n\t\t\tthis.settimetostorage();\n\t\t\tcleartimeout(this.timer);\n\t\t\tthis.timer = null;\n\t\t}\n\t}\n<\/script>\n\n<style lang=\"scss\" scoped>\n\t// @import \"../../libs/css/style.components.scss\";\n\t\n\t.u-code-wrap {\n\t\twidth: 0;\n\t\theight: 0;\n\t\tposition: fixed;\n\t\tz-index: -1;\n\t}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"vue element 定义多种主题实现换肤",frontmatter:{title:"vue element 定义多种主题实现换肤",date:"2022-01-13T16:53:12.000Z",permalink:"/pages/5ae239/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104021.vue%20element%20%E5%AE%9A%E4%B9%89%E5%A4%9A%E7%A7%8D%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%8D%A2%E8%82%A4.html",relativePath:"10.大前端/1040.Vue/104021.vue element 定义多种主题实现换肤.md",key:"v-a1181280",path:"/pages/5ae239/",headers:[{level:2,title:"结果图",slug:"结果图",normalizedTitle:"结果图",charIndex:2},{level:2,title:"安装依赖",slug:"安装依赖",normalizedTitle:"安装依赖",charIndex:14},{level:3,title:"配置element-theme",slug:"配置element-theme",normalizedTitle:"配置element-theme",charIndex:473},{level:3,title:"配置gulp",slug:"配置gulp",normalizedTitle:"配置gulp",charIndex:785}],headersStr:"结果图 安装依赖 配置element-theme 配置gulp",content:"# 结果图\n\n\n\n\n\n\n# 安装依赖\n\npackage.json\n\n{\n  ...\n  \"dependencies\": {\n    ...\n    \"element-ui\": \"^2.13.2\",\n    ...\n  },\n  \"devDependencies\": {\n    ...\n    \"element-theme\": \"^2.0.1\",\n  \t\"element-theme-chalk\": \"^2.13.2\",\n    \"gulp-autoprefixer\": \"^7.0.1\",\n    \"gulp-clean-css\": \"^4.3.0\",\n    \"gulp-load-plugins\": \"^2.0.3\",\n    \"gulp-rename\": \"^2.0.0\",\n    \"gulp-sass\": \"^4.1.0\",\n    ...\n  },\n  ...\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\ngulp3 需要搭配 node10使用\n\n\n# 配置element-theme\n\n/package.json\n\n{\n  ...\n  \"element-theme\": {\n    \"config\": \"./src/element-ui/theme-variables.scss\",\n    \"out\": \"./src/element-ui/theme\",\n    \"minimize\": true,\n    \"browsers\": [\n      \"> 1%\",\n      \"last 2 versions\",\n      \"not ie <= 10\"\n    ]\n  },\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 配置gulp\n\n/gulpfile.js\n\nvar gulp = require('gulp')\nvar $ = require('gulp-load-plugins')()\nvar fs = require('fs')\nvar path = require('path')\nvar del = require('del')\n//var colors = require('colors')\nvar child_process = require('child_process')\n\nvar theme = {}\nvar themeList = require('./src/element-ui/config.js').filter(item => !item.hasBuild)\nvar styleFileDir = './src/assets/scss'\nvar styleFileDirTemp = `${styleFileDir}-temp`\nvar themeFileDir = './public/element-theme'\nvar et = require('element-theme')\nvar etOptions = require('./package.json')['element-theme']\nvar themeFileName = etOptions.config.replace(/.*\\/(.+\\.scss)/, '$1')\n\n/**\n * 构建生成主题\n */\ngulp.task('themes', () => {\n  if (themeList.length <= 0) {\n    return del(styleFileDirTemp)\n  }\n\n  // 删除临时文件，保证本次操作正常执行\n  //del(styleFileDirTemp)\n  console.log('del(styleFileDirTemp)')\n\n  // 拷贝一份scss样式文件夹，作为构建的临时处理文件夹\n  //child_process.spawnSync('cp', ['-r', styleFileDir, styleFileDirTemp])\n  console.log('copy styleFileDirTemp')\n\n  // 拷贝element组件scss变量样式文件至临时处理文件夹中，并修改相应配置信息\n  //child_process.spawnSync('cp', ['-r', etOptions.config, styleFileDirTemp])\n  etOptions.config = `${styleFileDirTemp}/${themeFileName}`\n\n  // 开始构建生成\n  fnCreate(themeList)\n\n  function fnCreate(themeList) {\n    if (themeList.length >= 1) {\n      // 保存当前构建生成的主题对象\n      theme = themeList[0]\n\n      console.log('\\n')\n      console.log('-------------------- 待构建，主题 -------------------------')\n      console.log(themeList)\n      console.log('\\n')\n      console.log('-------------------- 构建中，主题 -------------------------')\n      console.log(theme)\n      console.log('\\n')\n\n      // 修改.scss临时文件中的$--color-primary主题变量值\n      var data = fs.readFileSync(etOptions.config, 'utf8')\n      var result = data.replace(\n        /\\$--color-primary:(.*) !default;/,\n        `$--color-primary:${theme.color} !default;`\n      )\n      fs.writeFileSync(path.resolve(etOptions.config), result)\n\n      // 修改aui.scss临时文件中引入element组件主题变量文件路径\n      var data = fs.readFileSync(`${styleFileDirTemp}/aui.scss`, 'utf8')\n      var result = data.replace(new RegExp(`(@import \\\")(.*\\/)(${themeFileName}\\\";)`), '$1./$3')\n      fs.writeFileSync(path.resolve(`${styleFileDirTemp}/aui.scss`), result)\n\n      // 调用element-theme插件，生成element组件主题\n      etOptions.out = `${themeFileDir}/${theme.name}`\n      et.run(etOptions, () => {\n        // 生成后，构建同主题色aui.css项目主题\n        gulp.start(['styles'], () => {\n          // 递归下一步\n          themeList.splice(0, 1)\n          fnCreate(themeList)\n        })\n      })\n    } else {\n      // 删除临时文件\n      del(styleFileDirTemp)\n      console.log('\\n')\n      console.log('-------------------- 构建完毕，删除临时文件 -------------------------')\n      console.log(styleFileDirTemp)\n      console.log('\\n')\n\n      // 删除主题不需要的部分文件\n      var files = [\n        `${themeFileDir}/**/*.css`,\n        `!${themeFileDir}/**/index.css`,\n        `!${themeFileDir}/**/aui.css`,\n        `!${themeFileDir}/**/fonts`\n      ]\n      del(files)\n      console.log('-------------------- 构建完毕，删除主题独立组件文件 -------------------------')\n      console.log(files)\n      console.log('\\n')\n    }\n  }\n})\n\ngulp.task('styles', () => {\n  return gulp\n    .src([`${styleFileDirTemp}/aui.scss`])\n    .pipe($.sass().on('error', $.sass.logError))\n    .pipe(\n      $.autoprefixer({\n        browsers: etOptions.browsers,\n        cascade: false\n      })\n    )\n    .pipe($.cleanCss())\n    .pipe($.rename('aui.css'))\n    .pipe(gulp.dest(`${themeFileDir}/${theme.name}`))\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n",normalizedContent:"# 结果图\n\n\n\n\n\n\n# 安装依赖\n\npackage.json\n\n{\n  ...\n  \"dependencies\": {\n    ...\n    \"element-ui\": \"^2.13.2\",\n    ...\n  },\n  \"devdependencies\": {\n    ...\n    \"element-theme\": \"^2.0.1\",\n  \t\"element-theme-chalk\": \"^2.13.2\",\n    \"gulp-autoprefixer\": \"^7.0.1\",\n    \"gulp-clean-css\": \"^4.3.0\",\n    \"gulp-load-plugins\": \"^2.0.3\",\n    \"gulp-rename\": \"^2.0.0\",\n    \"gulp-sass\": \"^4.1.0\",\n    ...\n  },\n  ...\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\ngulp3 需要搭配 node10使用\n\n\n# 配置element-theme\n\n/package.json\n\n{\n  ...\n  \"element-theme\": {\n    \"config\": \"./src/element-ui/theme-variables.scss\",\n    \"out\": \"./src/element-ui/theme\",\n    \"minimize\": true,\n    \"browsers\": [\n      \"> 1%\",\n      \"last 2 versions\",\n      \"not ie <= 10\"\n    ]\n  },\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 配置gulp\n\n/gulpfile.js\n\nvar gulp = require('gulp')\nvar $ = require('gulp-load-plugins')()\nvar fs = require('fs')\nvar path = require('path')\nvar del = require('del')\n//var colors = require('colors')\nvar child_process = require('child_process')\n\nvar theme = {}\nvar themelist = require('./src/element-ui/config.js').filter(item => !item.hasbuild)\nvar stylefiledir = './src/assets/scss'\nvar stylefiledirtemp = `${stylefiledir}-temp`\nvar themefiledir = './public/element-theme'\nvar et = require('element-theme')\nvar etoptions = require('./package.json')['element-theme']\nvar themefilename = etoptions.config.replace(/.*\\/(.+\\.scss)/, '$1')\n\n/**\n * 构建生成主题\n */\ngulp.task('themes', () => {\n  if (themelist.length <= 0) {\n    return del(stylefiledirtemp)\n  }\n\n  // 删除临时文件，保证本次操作正常执行\n  //del(stylefiledirtemp)\n  console.log('del(stylefiledirtemp)')\n\n  // 拷贝一份scss样式文件夹，作为构建的临时处理文件夹\n  //child_process.spawnsync('cp', ['-r', stylefiledir, stylefiledirtemp])\n  console.log('copy stylefiledirtemp')\n\n  // 拷贝element组件scss变量样式文件至临时处理文件夹中，并修改相应配置信息\n  //child_process.spawnsync('cp', ['-r', etoptions.config, stylefiledirtemp])\n  etoptions.config = `${stylefiledirtemp}/${themefilename}`\n\n  // 开始构建生成\n  fncreate(themelist)\n\n  function fncreate(themelist) {\n    if (themelist.length >= 1) {\n      // 保存当前构建生成的主题对象\n      theme = themelist[0]\n\n      console.log('\\n')\n      console.log('-------------------- 待构建，主题 -------------------------')\n      console.log(themelist)\n      console.log('\\n')\n      console.log('-------------------- 构建中，主题 -------------------------')\n      console.log(theme)\n      console.log('\\n')\n\n      // 修改.scss临时文件中的$--color-primary主题变量值\n      var data = fs.readfilesync(etoptions.config, 'utf8')\n      var result = data.replace(\n        /\\$--color-primary:(.*) !default;/,\n        `$--color-primary:${theme.color} !default;`\n      )\n      fs.writefilesync(path.resolve(etoptions.config), result)\n\n      // 修改aui.scss临时文件中引入element组件主题变量文件路径\n      var data = fs.readfilesync(`${stylefiledirtemp}/aui.scss`, 'utf8')\n      var result = data.replace(new regexp(`(@import \\\")(.*\\/)(${themefilename}\\\";)`), '$1./$3')\n      fs.writefilesync(path.resolve(`${stylefiledirtemp}/aui.scss`), result)\n\n      // 调用element-theme插件，生成element组件主题\n      etoptions.out = `${themefiledir}/${theme.name}`\n      et.run(etoptions, () => {\n        // 生成后，构建同主题色aui.css项目主题\n        gulp.start(['styles'], () => {\n          // 递归下一步\n          themelist.splice(0, 1)\n          fncreate(themelist)\n        })\n      })\n    } else {\n      // 删除临时文件\n      del(stylefiledirtemp)\n      console.log('\\n')\n      console.log('-------------------- 构建完毕，删除临时文件 -------------------------')\n      console.log(stylefiledirtemp)\n      console.log('\\n')\n\n      // 删除主题不需要的部分文件\n      var files = [\n        `${themefiledir}/**/*.css`,\n        `!${themefiledir}/**/index.css`,\n        `!${themefiledir}/**/aui.css`,\n        `!${themefiledir}/**/fonts`\n      ]\n      del(files)\n      console.log('-------------------- 构建完毕，删除主题独立组件文件 -------------------------')\n      console.log(files)\n      console.log('\\n')\n    }\n  }\n})\n\ngulp.task('styles', () => {\n  return gulp\n    .src([`${stylefiledirtemp}/aui.scss`])\n    .pipe($.sass().on('error', $.sass.logerror))\n    .pipe(\n      $.autoprefixer({\n        browsers: etoptions.browsers,\n        cascade: false\n      })\n    )\n    .pipe($.cleancss())\n    .pipe($.rename('aui.css'))\n    .pipe(gulp.dest(`${themefiledir}/${theme.name}`))\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Vue中computed和watch的区别",frontmatter:{title:"Vue中computed和watch的区别",date:"2022-06-26T00:51:09.000Z",permalink:"/pages/9c2ca3/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/1040210.Vue%E4%B8%ADcomputed%E5%92%8Cwatch%E7%9A%84%E5%8C%BA%E5%88%AB.html",relativePath:"10.大前端/1040.Vue/1040210.Vue中computed和watch的区别.md",key:"v-c4bc892a",path:"/pages/9c2ca3/",headers:[{level:2,title:"共同点：",slug:"共同点",normalizedTitle:"共同点：",charIndex:2},{level:2,title:"不同点：",slug:"不同点",normalizedTitle:"不同点：",charIndex:145},{level:3,title:"compouted",slug:"compouted",normalizedTitle:"compouted",charIndex:154},{level:3,title:"watch",slug:"watch",normalizedTitle:"watch",charIndex:20}],headersStr:"共同点： 不同点： compouted watch",content:"# 共同点：\n\n都能实现对数据的监听\n\nwatch和computed都是以Vue的依赖追踪机制为基础的，当某一个依赖型数据（依赖型数据：简单理解即放在 data 等对象下的实例数据）发生变化的时候，所有依赖这个数据的相关数据会自动发生变化，即自动调用相关的函数，来实现数据的变动。\n\n\n# 不同点：\n\n\n# compouted\n\n * 这个属性依赖其他属性，由其他属性计算而来的。\n * 不支持异步\n * computed 属性值默认会缓存计算结果，在重复的调用中，只要依赖数据不变，直接取缓存中的计算结果，只有依赖型数据发生改变，computed 才会重新计算\n\n\n# watch\n\n * 支持异步（当需要在数据变化时执行异步或开销较大的操作时，watch方式是最有用的）\n * 不支持缓存，监听的数据改变，直接会触发相应的操作；",normalizedContent:"# 共同点：\n\n都能实现对数据的监听\n\nwatch和computed都是以vue的依赖追踪机制为基础的，当某一个依赖型数据（依赖型数据：简单理解即放在 data 等对象下的实例数据）发生变化的时候，所有依赖这个数据的相关数据会自动发生变化，即自动调用相关的函数，来实现数据的变动。\n\n\n# 不同点：\n\n\n# compouted\n\n * 这个属性依赖其他属性，由其他属性计算而来的。\n * 不支持异步\n * computed 属性值默认会缓存计算结果，在重复的调用中，只要依赖数据不变，直接取缓存中的计算结果，只有依赖型数据发生改变，computed 才会重新计算\n\n\n# watch\n\n * 支持异步（当需要在数据变化时执行异步或开销较大的操作时，watch方式是最有用的）\n * 不支持缓存，监听的数据改变，直接会触发相应的操作；",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"大屏自适应容器",frontmatter:{title:"大屏自适应容器",date:"2022-02-16T17:36:56.000Z",permalink:"/pages/66e402/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104023.%E5%A4%A7%E5%B1%8F%E8%87%AA%E9%80%82%E5%BA%94%E5%AE%B9%E5%99%A8.html",relativePath:"10.大前端/1040.Vue/104023.大屏自适应容器.md",key:"v-a438f52e",path:"/pages/66e402/",headersStr:null,content:"\x3c!--\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-02-14 14:12:13\n * @LastEditTime: 2022-02-16 16:52:48\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description: \n * @FilePath: /tsl-doublec-web/src/components/screen-adapter/index.vue\n--\x3e\n<template>\n  <div\n    class=\"ScreenAdapter\"\n    :style=\"style\"\n  >\n    <slot />\n  </div>\n</template>\n<script>\nexport default {\n  name: '',\n  //参数注入\n  props: {\n    width: {\n      type: String,\n      default: '1920' \n    },\n    height: {\n      type: String,\n      default: '1080' \n    }\n  },\n  data() {\n    return {\n      style: {\n        width: this.width + 'px',\n        height: this.height + 'px',\n        transform: 'scale(1) translate(-50%, -50%)'\n      }\n    }\n  },\n  mounted() {\n    this.setScale()\n    window.onresize = this.Debounce(this.setScale, 1000)\n  },\n  methods: {\n    Debounce: (fn, t) => {\n      const delay = t || 500\n      let timer\n      return function() {\n        const args = arguments\n        if (timer) {\n          clearTimeout(timer)\n        }\n        const context = this\n        timer = setTimeout(() => {\n          timer = null\n          fn.apply(context, args)\n        }, delay)\n      }\n    },\n    // 获取放大缩小比例\n    getScale() {\n      const w = window.innerWidth / this.width\n      const h = window.innerHeight / this.height\n      return w < h ? w : h\n    },\n    // 设置比例\n    setScale() {\n      this.style.transform = 'scale(' + this.getScale() + ') translate(-50%, -50%)'\n    }\n  }\n}\n<\/script>\n<style lang=\"scss\" scoped>\n.ScreenAdapter {\n  transform-origin: 0 0;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transition: 0.3s;\n}\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n",normalizedContent:"\x3c!--\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-02-14 14:12:13\n * @lastedittime: 2022-02-16 16:52:48\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description: \n * @filepath: /tsl-doublec-web/src/components/screen-adapter/index.vue\n--\x3e\n<template>\n  <div\n    class=\"screenadapter\"\n    :style=\"style\"\n  >\n    <slot />\n  </div>\n</template>\n<script>\nexport default {\n  name: '',\n  //参数注入\n  props: {\n    width: {\n      type: string,\n      default: '1920' \n    },\n    height: {\n      type: string,\n      default: '1080' \n    }\n  },\n  data() {\n    return {\n      style: {\n        width: this.width + 'px',\n        height: this.height + 'px',\n        transform: 'scale(1) translate(-50%, -50%)'\n      }\n    }\n  },\n  mounted() {\n    this.setscale()\n    window.onresize = this.debounce(this.setscale, 1000)\n  },\n  methods: {\n    debounce: (fn, t) => {\n      const delay = t || 500\n      let timer\n      return function() {\n        const args = arguments\n        if (timer) {\n          cleartimeout(timer)\n        }\n        const context = this\n        timer = settimeout(() => {\n          timer = null\n          fn.apply(context, args)\n        }, delay)\n      }\n    },\n    // 获取放大缩小比例\n    getscale() {\n      const w = window.innerwidth / this.width\n      const h = window.innerheight / this.height\n      return w < h ? w : h\n    },\n    // 设置比例\n    setscale() {\n      this.style.transform = 'scale(' + this.getscale() + ') translate(-50%, -50%)'\n    }\n  }\n}\n<\/script>\n<style lang=\"scss\" scoped>\n.screenadapter {\n  transform-origin: 0 0;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transition: 0.3s;\n}\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"el-upload 自定义上传进度",frontmatter:{title:"el-upload 自定义上传进度",date:"2022-01-05T14:10:09.000Z",permalink:"/pages/cb8f80/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104025.el-upload%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6.html",relativePath:"10.大前端/1040.Vue/104025.el-upload 自定义上传进度.md",key:"v-6543965a",path:"/pages/cb8f80/",headersStr:null,content:"在自带的onprogress事件中好像是获取不了，",normalizedContent:"在自带的onprogress事件中好像是获取不了，",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"vue3初学注意点",frontmatter:{title:"vue3初学注意点",date:"2022-01-07T22:06:15.000Z",permalink:"/pages/a00f46/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104030.vue3%E5%88%9D%E5%AD%A6%E6%B3%A8%E6%84%8F%E7%82%B9.html",relativePath:"10.大前端/1040.Vue/104030.vue3初学注意点.md",key:"v-20786cca",path:"/pages/a00f46/",headers:[{level:2,title:"生命周期",slug:"生命周期",normalizedTitle:"生命周期",charIndex:381},{level:2,title:"watch",slug:"watch",normalizedTitle:"watch",charIndex:817},{level:2,title:"defineComponent",slug:"definecomponent",normalizedTitle:"definecomponent",charIndex:1342},{level:3,title:"suspens",slug:"suspens",normalizedTitle:"suspens",charIndex:1419}],headersStr:"生命周期 watch defineComponent suspens",content:" * 解构会失去响应式功能， 如\n\nconst foo = {\n  x: 0,\n  y: 0\n}\nconst { x } = foo\nconsole.log(x) // 0\n\nfoo.x = 1\nconsole.log(x) // 0\n\nconsole.log(foo.x) // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n当然你后面对数据重新解构是能获取最新的值的\n\nimport { toRefs, reactive } from vue\n...\nsetup() {\n  const data = reactive({\n    count: 0\n  })\n\tconst refData = toRefs(data)\n  return {\n\t\t...refData\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 生命周期\n\n// vue2  to vue3\n\nbeforeCreate\t->\tuse setup()\n\ncreated\t->\tuse setup()\n\nbeforeMount\t->\tonBeforeMount\n\nmounted\t->\tonMounted\n\nbeforeUpdate\t->\tonBeforeUpdate\n\nupdated\t\t\t->\t\tonUpdated\n\ndestroyed\t\t->\t\tonUnmounted\n\nactivated\t\t->\t\tonActivated\n\ndeactivated\t->\t\tonDeactivated\n\nerrorCaptured\t->\tonErrorCaptured\n\n\n\n// new\n\nonRenderTracked\n\nonRenderTriggerd\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# watch\n\n * setup 是和beforeCreate 和 created 一起运行的，而且只执行一次，在后续操作中不会再触发。如果需要出发多次需要引入watch 等函数\n\n * 如果watch中对单独某个响应式对象中的某个属性进行监听，就需要使用方法返回这个对象的属性，否则你直接写某个属性那么也会失去响应式属性\n\n * \n\n * import { watch, reactive } from vue\n   ...\n   setup() {\n     const data = reactive({\n       count: 0\n     })\n     watch([data.count], (newVal, oldVal) => { // 回报如下错误\n       ...\n     }) \n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n * \n\n * \n\n  // 更正后\n\twatch([() => data.count], (newVal, oldVal) => { \n    ...\n  }) \n\n\n\n1\n2\n3\n4\n5\n\n\n\n# defineComponent\n\ndefineComponent 这个并没有实现任何逻辑 完全是服务typescript 存在的\n\n\n# 新功能\n\n\n# suspens",normalizedContent:" * 解构会失去响应式功能， 如\n\nconst foo = {\n  x: 0,\n  y: 0\n}\nconst { x } = foo\nconsole.log(x) // 0\n\nfoo.x = 1\nconsole.log(x) // 0\n\nconsole.log(foo.x) // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n当然你后面对数据重新解构是能获取最新的值的\n\nimport { torefs, reactive } from vue\n...\nsetup() {\n  const data = reactive({\n    count: 0\n  })\n\tconst refdata = torefs(data)\n  return {\n\t\t...refdata\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 生命周期\n\n// vue2  to vue3\n\nbeforecreate\t->\tuse setup()\n\ncreated\t->\tuse setup()\n\nbeforemount\t->\tonbeforemount\n\nmounted\t->\tonmounted\n\nbeforeupdate\t->\tonbeforeupdate\n\nupdated\t\t\t->\t\tonupdated\n\ndestroyed\t\t->\t\tonunmounted\n\nactivated\t\t->\t\tonactivated\n\ndeactivated\t->\t\tondeactivated\n\nerrorcaptured\t->\tonerrorcaptured\n\n\n\n// new\n\nonrendertracked\n\nonrendertriggerd\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# watch\n\n * setup 是和beforecreate 和 created 一起运行的，而且只执行一次，在后续操作中不会再触发。如果需要出发多次需要引入watch 等函数\n\n * 如果watch中对单独某个响应式对象中的某个属性进行监听，就需要使用方法返回这个对象的属性，否则你直接写某个属性那么也会失去响应式属性\n\n * \n\n * import { watch, reactive } from vue\n   ...\n   setup() {\n     const data = reactive({\n       count: 0\n     })\n     watch([data.count], (newval, oldval) => { // 回报如下错误\n       ...\n     }) \n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n * \n\n * \n\n  // 更正后\n\twatch([() => data.count], (newval, oldval) => { \n    ...\n  }) \n\n\n\n1\n2\n3\n4\n5\n\n\n\n# definecomponent\n\ndefinecomponent 这个并没有实现任何逻辑 完全是服务typescript 存在的\n\n\n# 新功能\n\n\n# suspens",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"vue3面试聚焦",frontmatter:{title:"vue3面试聚焦",date:"2022-06-13T10:42:02.000Z",permalink:"/pages/ec68c1/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/1040300.vue3%E9%9D%A2%E8%AF%95%E8%81%9A%E7%84%A6.html",relativePath:"10.大前端/1040.Vue/1040300.vue3面试聚焦.md",key:"v-755fb43e",path:"/pages/ec68c1/",headers:[{level:3,title:"面试题1",slug:"面试题1",normalizedTitle:"面试题1",charIndex:2},{level:3,title:"面试题2",slug:"面试题2",normalizedTitle:"面试题2",charIndex:820},{level:3,title:"面试题3",slug:"面试题3",normalizedTitle:"面试题3",charIndex:1284},{level:3,title:"面试题4",slug:"面试题4",normalizedTitle:"面试题4",charIndex:1355}],headersStr:"面试题1 面试题2 面试题3 面试题4",content:"# 面试题1\n\n * Vue3 比 Vue2 有什么优势？\n   \n   * 性能更好\n   \n   * 体积更小\n   \n   * 更好的ts支持\n   \n   * 更好的代码组织\n   \n   * 更好的逻辑抽离\n   \n   * 更多新功能\n\n * 描述 Vue3 生命期\n   \n   * Options API 生命周期\n     * beforeDestroy 改为 beforeUnmount\n     * destroyed 改为 unmouted\n     * 其他沿用 Vue2 的生命周期\n   * Composition API\n     * setup 是围绕 beforeCreate 和 created 生命周期钩子运行的。\n     * onBeforeMount onMounted 跟options api加上on 并使用小驼峰的形式命名\n\n如何看待 Composition API 和 Options API?\n\n * Composition API 对比 Options API\n   * Composition API 带来了什么？\n     * 更好的代码组织\n     * 更好的逻辑复用（有一道专门的面试题）\n     * 更好的类型推导\n   * Composition API 和 Options API 如何选择？\n     * 不建议共用，会引起混乱\n     * 小型项目、业务逻辑简单，用 Options API\n     * 中大型项目、逻辑复杂，用 Composition API\n   * 别误解 Composition API\n     * Composition API属于高阶技巧，不是基础必会\n     * Composition API 是为解决复杂业务逻辑而设计\n     * Composition API 就像 Hooks 在 React 中的地位\n\n\n# 面试题2\n\n * 如何理解 ref toRef 和 toRefs?\n   \n   * 生成值类型的响应式数据\n   \n   * 可用于模板和 reactive\n   \n   * 通过.value 修改值\n   \n   * 最佳使用方式\n     \n     * 用 reactive 做对象的响应式，用 ref 做值类型响应式\n     * setup 中返回 toRefs(state)，或者 toRef(state,'xxx）\n     * ref 的变量命名都用 xxxRef\n     * 合成函数返回响应式对象时，使用 toRefs\n   \n   * 进阶，深入理解\n     \n     * 为何需要ref ？\n       \n       * 返回值类型，会丢失响应式\n     \n     * 为何需要 .value ?\n     \n     * 为何需要 toRef toRefs ？\n\n * Vue3 升级了哪些重要的功能？\n\n * Composition API 如何实现代码逻辑复用？\n\n * \n\n\n# 面试题3\n\nVue3 如何实现响应式？\n\nwatch 和 watchEffect 时以别是什么？\n\nsetup 中如何获取组件实例？\n\n\n# 面试题4\n\nVue3 为何比 Vue2 快？\n\nVite 是什么？\n\nComposition API 和 React Hooks 的对比",normalizedContent:"# 面试题1\n\n * vue3 比 vue2 有什么优势？\n   \n   * 性能更好\n   \n   * 体积更小\n   \n   * 更好的ts支持\n   \n   * 更好的代码组织\n   \n   * 更好的逻辑抽离\n   \n   * 更多新功能\n\n * 描述 vue3 生命期\n   \n   * options api 生命周期\n     * beforedestroy 改为 beforeunmount\n     * destroyed 改为 unmouted\n     * 其他沿用 vue2 的生命周期\n   * composition api\n     * setup 是围绕 beforecreate 和 created 生命周期钩子运行的。\n     * onbeforemount onmounted 跟options api加上on 并使用小驼峰的形式命名\n\n如何看待 composition api 和 options api?\n\n * composition api 对比 options api\n   * composition api 带来了什么？\n     * 更好的代码组织\n     * 更好的逻辑复用（有一道专门的面试题）\n     * 更好的类型推导\n   * composition api 和 options api 如何选择？\n     * 不建议共用，会引起混乱\n     * 小型项目、业务逻辑简单，用 options api\n     * 中大型项目、逻辑复杂，用 composition api\n   * 别误解 composition api\n     * composition api属于高阶技巧，不是基础必会\n     * composition api 是为解决复杂业务逻辑而设计\n     * composition api 就像 hooks 在 react 中的地位\n\n\n# 面试题2\n\n * 如何理解 ref toref 和 torefs?\n   \n   * 生成值类型的响应式数据\n   \n   * 可用于模板和 reactive\n   \n   * 通过.value 修改值\n   \n   * 最佳使用方式\n     \n     * 用 reactive 做对象的响应式，用 ref 做值类型响应式\n     * setup 中返回 torefs(state)，或者 toref(state,'xxx）\n     * ref 的变量命名都用 xxxref\n     * 合成函数返回响应式对象时，使用 torefs\n   \n   * 进阶，深入理解\n     \n     * 为何需要ref ？\n       \n       * 返回值类型，会丢失响应式\n     \n     * 为何需要 .value ?\n     \n     * 为何需要 toref torefs ？\n\n * vue3 升级了哪些重要的功能？\n\n * composition api 如何实现代码逻辑复用？\n\n * \n\n\n# 面试题3\n\nvue3 如何实现响应式？\n\nwatch 和 watcheffect 时以别是什么？\n\nsetup 中如何获取组件实例？\n\n\n# 面试题4\n\nvue3 为何比 vue2 快？\n\nvite 是什么？\n\ncomposition api 和 react hooks 的对比",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"vue3 hooks 自适应可视化大屏",frontmatter:{title:"vue3 hooks 自适应可视化大屏",date:"2022-01-20T14:00:24.000Z",permalink:"/pages/66bb43/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104031.vue3%20hooks%20%E8%87%AA%E9%80%82%E5%BA%94%E5%8F%AF%E8%A7%86%E5%8C%96%E5%A4%A7%E5%B1%8F.html",relativePath:"10.大前端/1040.Vue/104031.vue3 hooks 自适应可视化大屏.md",key:"v-42425032",path:"/pages/66bb43/",headers:[{level:2,title:"思路",slug:"思路",normalizedTitle:"思路",charIndex:2},{level:2,title:"开始",slug:"开始",normalizedTitle:"开始",charIndex:135},{level:3,title:"有什么",slug:"有什么",normalizedTitle:"有什么",charIndex:142},{level:3,title:"做什么",slug:"做什么",normalizedTitle:"做什么",charIndex:169},{level:3,title:"定义hooks",slug:"定义hooks",normalizedTitle:"定义hooks",charIndex:182},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:123}],headersStr:"思路 开始 有什么 做什么 定义hooks 使用",content:'# 思路\n\n自适应方案：\n\n * rem 自适应\n   * 根据设计图尺寸宽度与设计度元素大小的比例，结合实际屏幕宽度计算出实际元素大小，在与html的fant-size做比例换算得出**rem值\n * scale 自适应缩放\n   * 下面就是使用的此种方式\n\n\n# 开始\n\n\n# 有什么\n\n现有设计图 1920*1294\n\n\n\n\n# 做什么\n\n自适应\n\n\n# 定义hooks\n\nhooks/useGetScale.ts\n\n最开始之前是根绝屏幕整个宽度改变去做的计算，因涉及到不改变屏幕宽度里面的内容尺寸也会发生变化的情况，如抽屉的展开收缩会引起内容的的宽度变化，后面就做了改变， 对父容器的宽度变化进行了监听达到计算缩放比例。\n\n以下注释的代码是前一版本的\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-01-16 17:04:57\n * @LastEditTime: 2022-01-17 16:36:07\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /***/hooks/useGetScale.ts\n */\n\nimport { ref, Ref, isRef, onMounted, nextTick } from "vue";\n// import { useDebounce } from "@/utils/utils";\ntype Target = HTMLElement | Ref<HTMLElement> | (() => HTMLElement);\n\n// uiWidth 为设计图宽度尺寸\nconst useGetScale = (containerDom: Target, uiWidth = 1920): Ref => {\n  let el: HTMLElement;\n  const scale = ref(1);\n  const getEl = () => {\n    if (typeof containerDom === "function") {\n      return containerDom();\n    }\n    return isRef(containerDom) ? containerDom.value : containerDom;\n  };\n\n  // const resizeHandle = () => {\n  //   el = getEl();\n  //   scale.value = el.offsetWidth / uiWidth;\n  // };\n\n  onMounted(() => {\n    // nextTick(() => {\n    //   resizeHandle();\n    // });\n    // window.addEventListener("resize", useDebounce(resizeHandle, 200, { trailing: true }));\n\n    nextTick(() => {\n      el = getEl();\n      const ro = new ResizeObserver(() => {\n        scale.value = el.offsetWidth / uiWidth;\n      });\n      ro.observe(el);\n    });\n  });\n  // onUnmounted(() => {\n  //   window.removeEventListener("resize", resizeHandle);\n  // });\n\n  return scale;\n};\n\nexport default useGetScale;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n\n# 使用\n\n使用就很简单了\n\n里面界面样式就跟设计图一样 是多少px 就是多少px\n\n<template>\n  <div class="mid_hull" ref="ovAnaRef">\n    <div class="overview-analysis_container relative" :style="{ transform: `scale(${scale})` }" v-loading="loading" element-loading-background="rgba(0, 0, 0, 0.3)">\n      <left-area></left-area>\n      <middle-area></middle-area>\n      <right-area></right-area>\n      <fold-button></fold-button>\n    </div>\n  </div>\n</template>\n\n<script lang="ts">\nimport { defineComponent, ref } from "vue";\nimport useGetScale from "../hooks/useGetScale";\n...\nexport default defineComponent({\n  name: "...",\n  setup() {\n    const ovAnaRef = ref();\n    const scale = useGetScale(ovAnaRef);\n    return {\n      ovAnaRef,\n      ...\n      scale\n    };\n  }\n})\n<\/script>\n<style lang="less" scoped>\n.mid_hull {\n  width: 100%;\n  overflow-x: hidden;\n  .overview-analysis_container {\n    transform-origin: 0 0; // 这个很重要 缩放变形位置定在起始点\n    position: relative;\n    width: 1920px;\n    height: 1294px;\n    background-image: url(***/bg-v2.png);\n    background-size: 100% 100%;\n    background-repeat: no-repeat;\n    background-position: center;\n    overflow: hidden;\n  }\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n',normalizedContent:'# 思路\n\n自适应方案：\n\n * rem 自适应\n   * 根据设计图尺寸宽度与设计度元素大小的比例，结合实际屏幕宽度计算出实际元素大小，在与html的fant-size做比例换算得出**rem值\n * scale 自适应缩放\n   * 下面就是使用的此种方式\n\n\n# 开始\n\n\n# 有什么\n\n现有设计图 1920*1294\n\n\n\n\n# 做什么\n\n自适应\n\n\n# 定义hooks\n\nhooks/usegetscale.ts\n\n最开始之前是根绝屏幕整个宽度改变去做的计算，因涉及到不改变屏幕宽度里面的内容尺寸也会发生变化的情况，如抽屉的展开收缩会引起内容的的宽度变化，后面就做了改变， 对父容器的宽度变化进行了监听达到计算缩放比例。\n\n以下注释的代码是前一版本的\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-01-16 17:04:57\n * @lastedittime: 2022-01-17 16:36:07\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /***/hooks/usegetscale.ts\n */\n\nimport { ref, ref, isref, onmounted, nexttick } from "vue";\n// import { usedebounce } from "@/utils/utils";\ntype target = htmlelement | ref<htmlelement> | (() => htmlelement);\n\n// uiwidth 为设计图宽度尺寸\nconst usegetscale = (containerdom: target, uiwidth = 1920): ref => {\n  let el: htmlelement;\n  const scale = ref(1);\n  const getel = () => {\n    if (typeof containerdom === "function") {\n      return containerdom();\n    }\n    return isref(containerdom) ? containerdom.value : containerdom;\n  };\n\n  // const resizehandle = () => {\n  //   el = getel();\n  //   scale.value = el.offsetwidth / uiwidth;\n  // };\n\n  onmounted(() => {\n    // nexttick(() => {\n    //   resizehandle();\n    // });\n    // window.addeventlistener("resize", usedebounce(resizehandle, 200, { trailing: true }));\n\n    nexttick(() => {\n      el = getel();\n      const ro = new resizeobserver(() => {\n        scale.value = el.offsetwidth / uiwidth;\n      });\n      ro.observe(el);\n    });\n  });\n  // onunmounted(() => {\n  //   window.removeeventlistener("resize", resizehandle);\n  // });\n\n  return scale;\n};\n\nexport default usegetscale;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n\n# 使用\n\n使用就很简单了\n\n里面界面样式就跟设计图一样 是多少px 就是多少px\n\n<template>\n  <div class="mid_hull" ref="ovanaref">\n    <div class="overview-analysis_container relative" :style="{ transform: `scale(${scale})` }" v-loading="loading" element-loading-background="rgba(0, 0, 0, 0.3)">\n      <left-area></left-area>\n      <middle-area></middle-area>\n      <right-area></right-area>\n      <fold-button></fold-button>\n    </div>\n  </div>\n</template>\n\n<script lang="ts">\nimport { definecomponent, ref } from "vue";\nimport usegetscale from "../hooks/usegetscale";\n...\nexport default definecomponent({\n  name: "...",\n  setup() {\n    const ovanaref = ref();\n    const scale = usegetscale(ovanaref);\n    return {\n      ovanaref,\n      ...\n      scale\n    };\n  }\n})\n<\/script>\n<style lang="less" scoped>\n.mid_hull {\n  width: 100%;\n  overflow-x: hidden;\n  .overview-analysis_container {\n    transform-origin: 0 0; // 这个很重要 缩放变形位置定在起始点\n    position: relative;\n    width: 1920px;\n    height: 1294px;\n    background-image: url(***/bg-v2.png);\n    background-size: 100% 100%;\n    background-repeat: no-repeat;\n    background-position: center;\n    overflow: hidden;\n  }\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Vue3 原理 Proxy实现响应式",frontmatter:{title:"Vue3 原理 Proxy实现响应式",date:"2022-07-05T10:26:31.000Z",permalink:"/pages/9902ec/",categories:["大前端","Vue","原理"],tags:["大前端","Vue","原理"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/1040317.Vue3%20%E5%8E%9F%E7%90%86%20Proxy%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F.html",relativePath:"10.大前端/1040.Vue/1040317.Vue3 原理 Proxy实现响应式.md",key:"v-0e7f65be",path:"/pages/9902ec/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"vue3 element-plus ant- design 自定义主题",frontmatter:{title:"vue3 element-plus ant- design 自定义主题",date:"2022-01-20T15:59:37.000Z",permalink:"/pages/b533ef/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104032.vue3%20element-plus%20ant-%20design%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98.html",relativePath:"10.大前端/1040.Vue/104032.vue3 element-plus ant- design 自定义主题.md",key:"v-704812be",path:"/pages/b533ef/",headers:[{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:177},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:215},{level:2,title:"参数说明",slug:"参数说明",normalizedTitle:"参数说明",charIndex:612},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0}],headersStr:"安装 使用 参数说明 ",content:"# 通用\n\nfilter: invert(0.9) hue-rotate(180deg);\n\n\n# ant-design-vue\n\n通过 vite-plugin-theme 插件，将所有的颜色变量抽取到独立的 css 文件，并且全部在 html 上面加上 css 选择器。通过改变 html 标签的 data-theme 属性来进行黑暗主题切换\n\n\n# 安装\n\n * npm i vite-plugin-theme -D\n\n\n# 使用\n\n * 在 vite.config.ts 中配置,该方式可以按需引入需要的功能即可\n\nimport { defineConfig, Plugin } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nimport { viteThemePlugin, mixLighten, mixDarken, tinycolor } from 'vite-plugin-theme';\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    viteThemePlugin({\n      // 匹配需要修改的颜色\n       colorVariables: [],\n    });\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 参数说明\n\nviteThemePlugin(Options)\n\n\n1\n\n\nOptions\n\n参数                        类型                          默认值                        说明\ncolorVariables            string[]                    -                          如果 css 内包含在该数组内的颜色值，则会抽取出 css\nwrapperCssSelector        string                      -                          通用外层选择器。可以传入 'body'等用用选择器来提高层级\nresolveSelector           (selector:string)=>string   -                          自定义选择器转换\ncustomerExtractVariable   (css:string)=>string        -                          自定义 css 匹配颜色抽取逻辑\nfileName                  string                      app-theme-style.hash.css   打包后输出的文件名\ninjectTo                  body或head或body-prepend      body                       生产环境加载的 css 注入到那个标签体\n\n\n#\n\n\n# element-plus",normalizedContent:"# 通用\n\nfilter: invert(0.9) hue-rotate(180deg);\n\n\n# ant-design-vue\n\n通过 vite-plugin-theme 插件，将所有的颜色变量抽取到独立的 css 文件，并且全部在 html 上面加上 css 选择器。通过改变 html 标签的 data-theme 属性来进行黑暗主题切换\n\n\n# 安装\n\n * npm i vite-plugin-theme -d\n\n\n# 使用\n\n * 在 vite.config.ts 中配置,该方式可以按需引入需要的功能即可\n\nimport { defineconfig, plugin } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nimport { vitethemeplugin, mixlighten, mixdarken, tinycolor } from 'vite-plugin-theme';\n\nexport default defineconfig({\n  plugins: [\n    vue(),\n    vitethemeplugin({\n      // 匹配需要修改的颜色\n       colorvariables: [],\n    });\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 参数说明\n\nvitethemeplugin(options)\n\n\n1\n\n\noptions\n\n参数                        类型                          默认值                        说明\ncolorvariables            string[]                    -                          如果 css 内包含在该数组内的颜色值，则会抽取出 css\nwrappercssselector        string                      -                          通用外层选择器。可以传入 'body'等用用选择器来提高层级\nresolveselector           (selector:string)=>string   -                          自定义选择器转换\ncustomerextractvariable   (css:string)=>string        -                          自定义 css 匹配颜色抽取逻辑\nfilename                  string                      app-theme-style.hash.css   打包后输出的文件名\ninjectto                  body或head或body-prepend      body                       生产环境加载的 css 注入到那个标签体\n\n\n#\n\n\n# element-plus",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"博客开发",frontmatter:{title:"博客开发",date:"2022-04-10T01:50:08.000Z",permalink:"/pages/7f1090/",categories:["大前端","Vue"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1040.Vue/104060.%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91.html",relativePath:"10.大前端/1040.Vue/104060.博客开发.md",key:"v-72ab9b2a",path:"/pages/7f1090/",headers:[{level:2,title:"主题开发",slug:"主题开发",normalizedTitle:"主题开发",charIndex:2},{level:2,title:"踩坑",slug:"踩坑",normalizedTitle:"踩坑",charIndex:71}],headersStr:"主题开发 踩坑",content:"# 主题开发\n\n * 安装类型提示\n   \n   * @vuepress/core\n   \n   * @vuepress/utils\n\n\n# 踩坑\n\n有很多版本是 alpha 版的 建议都换成 next版的\n\nIf I remove that package then everything works fine.\n\nI tried following things based on comments mentioned in various answers:\n\n 1. Remove node_modules and package-lock.json and install again with npm install.\n 2. Run the npm audit fix --force\n 3. Run the npm update",normalizedContent:"# 主题开发\n\n * 安装类型提示\n   \n   * @vuepress/core\n   \n   * @vuepress/utils\n\n\n# 踩坑\n\n有很多版本是 alpha 版的 建议都换成 next版的\n\nif i remove that package then everything works fine.\n\ni tried following things based on comments mentioned in various answers:\n\n 1. remove node_modules and package-lock.json and install again with npm install.\n 2. run the npm audit fix --force\n 3. run the npm update",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Awesome React",frontmatter:{title:"Awesome React",date:"2022-07-25T23:52:15.000Z",permalink:"/pages/c000dc/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050001.Awesome%20React.html",relativePath:"10.大前端/1050.React/1050001.Awesome React.md",key:"v-fcaea610",path:"/pages/c000dc/",headers:[{level:3,title:"HTML",slug:"html",normalizedTitle:"html",charIndex:2},{level:3,title:"CSS",slug:"css",normalizedTitle:"css",charIndex:11},{level:4,title:"rc-queue-anim",slug:"rc-queue-anim",normalizedTitle:"rc-queue-anim",charIndex:18},{level:3,title:"JS",slug:"js",normalizedTitle:"js",charIndex:144},{level:4,title:"ahooks",slug:"ahooks",normalizedTitle:"ahooks",charIndex:150},{level:4,title:"react-helmet",slug:"react-helmet",normalizedTitle:"react-helmet",charIndex:214},{level:3,title:"why-did-you-render",slug:"why-did-you-render",normalizedTitle:"why-did-you-render",charIndex:359}],headersStr:"HTML CSS rc-queue-anim JS ahooks react-helmet why-did-you-render",content:"# HTML\n\n\n# CSS\n\n# rc-queue-anim\n\n> https://github.com/react-component/queue-anim\n> \n> 对队列中的 React 组件进行动画处理，这要归功于 rc - animate 和 enter - 动画。\n\n\n# JS\n\n# ahooks\n\n> https://ahooks.js.org/\n> \n> 一套高质量可靠的 React Hooks 库\n\n# react-helmet\n\n> https://github.com/nfl/react-helmet\n> \n> 这个可重用的 React 组件将管理您对文档头的所有更改。 Helmet 采用纯 HTML 标签并输出纯 HTML 标签。它非常简单，而且对 React 初学者友好。\n\n\n# why-did-you-render\n\n> https://github.com/welldone-software/why-did-you-render\n> \n> why-did-you-render by Welldone Software猴子补丁React通知你可能可以避免的重新渲染。(使用React Native也可以。)",normalizedContent:"# html\n\n\n# css\n\n# rc-queue-anim\n\n> https://github.com/react-component/queue-anim\n> \n> 对队列中的 react 组件进行动画处理，这要归功于 rc - animate 和 enter - 动画。\n\n\n# js\n\n# ahooks\n\n> https://ahooks.js.org/\n> \n> 一套高质量可靠的 react hooks 库\n\n# react-helmet\n\n> https://github.com/nfl/react-helmet\n> \n> 这个可重用的 react 组件将管理您对文档头的所有更改。 helmet 采用纯 html 标签并输出纯 html 标签。它非常简单，而且对 react 初学者友好。\n\n\n# why-did-you-render\n\n> https://github.com/welldone-software/why-did-you-render\n> \n> why-did-you-render by welldone software猴子补丁react通知你可能可以避免的重新渲染。(使用react native也可以。)",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 文档（vue版）",frontmatter:{title:"React 文档（vue版）",date:"2023-09-17T16:05:48.000Z",permalink:"/pages/bb127f/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050008.React%20%E6%96%87%E6%A1%A3%EF%BC%88vue%E7%89%88%EF%BC%89.html",relativePath:"10.大前端/1050.React/1050008.React 文档（vue版）.md",key:"v-50865a3e",path:"/pages/bb127f/",headers:[{level:2,title:"Prop 逐级透传问题",slug:"prop-逐级透传问题",normalizedTitle:"prop 逐级透传问题",charIndex:43}],headersStr:"Prop 逐级透传问题",content:"React 18 => Vue 3 （2023年7月4日）\n\n\n# 依赖注入\n\n\n# Prop 逐级透传问题\n\nvue: provide 和 inject\n\nreact： context\n\n 1. 创建 context\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n\n\n1\n2\n3\n\n 1. 使用 Context\n\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\n\n1\n2\n\n 1. 提供 context",normalizedContent:"react 18 => vue 3 （2023年7月4日）\n\n\n# 依赖注入\n\n\n# prop 逐级透传问题\n\nvue: provide 和 inject\n\nreact： context\n\n 1. 创建 context\n\nimport { createcontext } from 'react';\n\nexport const levelcontext = createcontext(1);\n\n\n1\n2\n3\n\n 1. 使用 context\n\nimport { usecontext } from 'react';\nimport { levelcontext } from './levelcontext.js';\n\n\n1\n2\n\n 1. 提供 context",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"react 项目开发注意事项",frontmatter:{title:"react 项目开发注意事项",date:"2022-07-17T23:17:06.000Z",permalink:"/pages/e13969/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050040.react%20%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html",relativePath:"10.大前端/1050.React/1050040.react 项目开发注意事项.md",key:"v-2db45745",path:"/pages/e13969/",headers:[{level:3,title:"文件路径配置",slug:"文件路径配置",normalizedTitle:"文件路径配置",charIndex:2}],headersStr:"文件路径配置",content:'# 文件路径配置\n\n在相对路径中 不要省略相同层级 ./ 直接写 会去 typescript.json 中 baseUrl中去找\n\n{\n  "baseUrl": "./src",\n}\n\n\n1\n2\n3\n',normalizedContent:'# 文件路径配置\n\n在相对路径中 不要省略相同层级 ./ 直接写 会去 typescript.json 中 baseurl中去找\n\n{\n  "baseurl": "./src",\n}\n\n\n1\n2\n3\n',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"常见功能实现",frontmatter:{title:"常见功能实现",date:"2022-07-21T16:38:59.000Z",permalink:"/pages/477bdb/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050042.%E5%B8%B8%E8%A7%81%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0.html",relativePath:"10.大前端/1050.React/1050042.常见功能实现.md",key:"v-1e91960a",path:"/pages/477bdb/",headers:[{level:3,title:"监听数据变化",slug:"监听数据变化",normalizedTitle:"监听数据变化",charIndex:2}],headersStr:"监听数据变化",content:"# 监听数据变化\n\nfn component 使用\n\nuseEffect(() => {\n    console.log('counter发生了变化，最新值：', counter);\n}, [counter]);\n\n\n1\n2\n3\n\n\nclass component 使用 get()\n\nclass Test extends Component {\n  state = { counter: 0 };\n\n  get newCounter(): number {\n    const { counter } = this.state;\n    console.log(`counter changed, new value: ${counter}`);\n    return counter;\n  }\n\n  handleClick = (): void => {\n    this.setState({ counter: this.state.counter + 1 });\n  }\n\n  render(): JSX.Element {\n    return (<div>\n      <p>{this.newCounter}</p>\n      <Button onClick={this.handleClick.bind(this)}>click + 1</Button>\n    </div>);\n  }\n}\n\nexport default Test;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n生命周期hook\n\ncomponentWillUpdate(object nextProps, object nextState)\ncomponentDidUpdate(object prevProps, object prevState)\n\n\n1\n2\n",normalizedContent:"# 监听数据变化\n\nfn component 使用\n\nuseeffect(() => {\n    console.log('counter发生了变化，最新值：', counter);\n}, [counter]);\n\n\n1\n2\n3\n\n\nclass component 使用 get()\n\nclass test extends component {\n  state = { counter: 0 };\n\n  get newcounter(): number {\n    const { counter } = this.state;\n    console.log(`counter changed, new value: ${counter}`);\n    return counter;\n  }\n\n  handleclick = (): void => {\n    this.setstate({ counter: this.state.counter + 1 });\n  }\n\n  render(): jsx.element {\n    return (<div>\n      <p>{this.newcounter}</p>\n      <button onclick={this.handleclick.bind(this)}>click + 1</button>\n    </div>);\n  }\n}\n\nexport default test;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n生命周期hook\n\ncomponentwillupdate(object nextprops, object nextstate)\ncomponentdidupdate(object prevprops, object prevstate)\n\n\n1\n2\n",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"react 常见坑集合",frontmatter:{title:"react 常见坑集合",date:"2022-08-02T23:18:38.000Z",permalink:"/pages/803923/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050044.react%20%E5%B8%B8%E8%A7%81%E5%9D%91%E9%9B%86%E5%90%88.html",relativePath:"10.大前端/1050.React/1050044.react 常见坑集合.md",key:"v-dc86c314",path:"/pages/803923/",headers:[{level:3,title:"useRef",slug:"useref",normalizedTitle:"useref",charIndex:2}],headersStr:"useRef",content:"# useRef\n\nuseRef\n\n在事件callbackRef.current中的值为初始值\n\nexport default function App() {\n  const callbackRef = React.useRef(() => alert('init'))\n  const callback = callbackRef.current\n  return (\n    <button onClick={() => (callbackRef.current = () => alert('call back'))}>setCallback</button>\n  \t<button onClick={callbackRef.current}>call callback</button>\n  )\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n点击set的时候是更新的callback了的 但是没有触发页面重新渲染 需要强制读取callback内容 而不是拿上次的callback",normalizedContent:"# useref\n\nuseref\n\n在事件callbackref.current中的值为初始值\n\nexport default function app() {\n  const callbackref = react.useref(() => alert('init'))\n  const callback = callbackref.current\n  return (\n    <button onclick={() => (callbackref.current = () => alert('call back'))}>setcallback</button>\n  \t<button onclick={callbackref.current}>call callback</button>\n  )\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n点击set的时候是更新的callback了的 但是没有触发页面重新渲染 需要强制读取callback内容 而不是拿上次的callback",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"ProComponents设计思路",frontmatter:{title:"ProComponents设计思路",date:"2022-07-15T16:20:17.000Z",permalink:"/pages/74ff3d/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050060.ProComponents%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF.html",relativePath:"10.大前端/1050.React/1050060.ProComponents设计思路.md",key:"v-273d985e",path:"/pages/74ff3d/",headersStr:null,content:"例如：\n\n",normalizedContent:"例如：\n\n",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"ant design pro 学习",frontmatter:{title:"ant design pro 学习",date:"2022-07-15T15:15:28.000Z",permalink:"/pages/d8f9b4/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050050.ant%20design%20pro%20%E5%AD%A6%E4%B9%A0.html",relativePath:"10.大前端/1050.React/1050050.ant design pro 学习.md",key:"v-37738e87",path:"/pages/d8f9b4/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"万条数据渲染优化",frontmatter:{title:"万条数据渲染优化",date:"2022-07-15T16:31:47.000Z",permalink:"/pages/1ed838/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050065.%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96.html",relativePath:"10.大前端/1050.React/1050065.万条数据渲染优化.md",key:"v-2b38f21a",path:"/pages/1ed838/",headersStr:null,content:"优化多种方法：\n\n * 分页\n * 滚动加载\n * 只加载视窗数据",normalizedContent:"优化多种方法：\n\n * 分页\n * 滚动加载\n * 只加载视窗数据",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"react hook 与 闭包",frontmatter:{title:"react hook 与 闭包",date:"2022-07-31T10:01:10.000Z",permalink:"/pages/6a4091/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050070.react%20hook%20%E4%B8%8E%20%E9%97%AD%E5%8C%85.html",relativePath:"10.大前端/1050.React/1050070.react hook 与 闭包.md",key:"v-c2f34ac4",path:"/pages/6a4091/",headers:[{level:3,title:"闭包",slug:"闭包",normalizedTitle:"闭包",charIndex:2},{level:3,title:"react hook 闭包",slug:"react-hook-闭包",normalizedTitle:"react hook 闭包",charIndex:1326},{level:3,title:"使用更新的值",slug:"使用更新的值",normalizedTitle:"使用更新的值",charIndex:1961},{level:3,title:"使用useRef 使用初始值",slug:"使用useref-使用初始值",normalizedTitle:"使用useref 使用初始值",charIndex:2259}],headersStr:"闭包 react hook 闭包 使用更新的值 使用useRef 使用初始值",content:'# 闭包\n\n简单来说就是上级作用域内变量的生命周期，因为被下级作用域内引用，而没有被释放。就导致上级作用域内的变量，等到下级作用域执行完以后才正常得到释放。\n\n具体搜索看我《javascript》文章\n\nimport React, { useEffect, useState } from "react";\n\nconst testClosure = () => {\n  let num = 0;\n\n  const effect = () => {\n    num += 1;\n    const message = `num value in message：${num}`;\n\n    return function unmount() {\n      console.log(message);\n    };\n  };\n\n  return effect;\n};\n// 执行test，返回effect函数\nconst add = testClosure();\n// 执行effect函数，返回引用了message1的unmount函数\nconst unmount = add();\n// 再一次执行effect函数，返回引用了message2的unmount函数\nadd();\n// message3\nadd();\n// message4\nadd();\n// message5\nadd();\nunmount(); // 在这里会打印什么呢？按照直觉似乎应该打印3,实际上打印了1\n\n// react hook 与 闭包，hook 与 闭包经典的坑\nexport const Test = () => {\n  const [num, setNum] = useState(0);\n\n  const add = () => setNum(num + 1);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      console.log("num in setInterval:", num);\n    }, 1000);\n    return () => clearInterval(id);\n  }, [num]);\n\n  useEffect(() => {\n    return () => {\n      console.log("卸载值：", num);\n    };\n  }, [num]);\n\n  return (\n    <div>\n      <button onClick={add}>add</button>\n      <p>number: {num}</p>\n    </div>\n  );\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n结果始终输出的为1\n\n\n# react hook 闭包\n\nimport React, { useEffect, useState } from "react";\n\nexport const Test = () => {\n  const [num, setNum] = useState(0);\n\n  const add = () => {\n    console.log("num is addEvent:", num);\n    setNum(num + 1);\n  };\n\n  useEffect(() => {\n    setInterval(() => {\n      console.log("num is setInterval:", num);\n    }, 1000);\n\n    return () => {\n      console.log(num);\n    };\n  }, []);\n\n  return (\n    <div>\n      <button onClick={add}>add</button>\n      <p>{num}</p>\n    </div>\n  );\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n\n可以看到 use Effect 在最初执行的时候引用的初始值0，形成了闭包。在后续页面如何加载都不会影响到结果。\n\n\n# 使用更新的值\n\n若想想要实时输出变化后的值，需要传入监听值，值变化后重新执行其内的代码 记得清楚定时器\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log("num is setInterval:", num);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n      console.log(num);\n    };\n  }, [num]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 使用useRef 使用初始值',normalizedContent:'# 闭包\n\n简单来说就是上级作用域内变量的生命周期，因为被下级作用域内引用，而没有被释放。就导致上级作用域内的变量，等到下级作用域执行完以后才正常得到释放。\n\n具体搜索看我《javascript》文章\n\nimport react, { useeffect, usestate } from "react";\n\nconst testclosure = () => {\n  let num = 0;\n\n  const effect = () => {\n    num += 1;\n    const message = `num value in message：${num}`;\n\n    return function unmount() {\n      console.log(message);\n    };\n  };\n\n  return effect;\n};\n// 执行test，返回effect函数\nconst add = testclosure();\n// 执行effect函数，返回引用了message1的unmount函数\nconst unmount = add();\n// 再一次执行effect函数，返回引用了message2的unmount函数\nadd();\n// message3\nadd();\n// message4\nadd();\n// message5\nadd();\nunmount(); // 在这里会打印什么呢？按照直觉似乎应该打印3,实际上打印了1\n\n// react hook 与 闭包，hook 与 闭包经典的坑\nexport const test = () => {\n  const [num, setnum] = usestate(0);\n\n  const add = () => setnum(num + 1);\n\n  useeffect(() => {\n    const id = setinterval(() => {\n      console.log("num in setinterval:", num);\n    }, 1000);\n    return () => clearinterval(id);\n  }, [num]);\n\n  useeffect(() => {\n    return () => {\n      console.log("卸载值：", num);\n    };\n  }, [num]);\n\n  return (\n    <div>\n      <button onclick={add}>add</button>\n      <p>number: {num}</p>\n    </div>\n  );\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n结果始终输出的为1\n\n\n# react hook 闭包\n\nimport react, { useeffect, usestate } from "react";\n\nexport const test = () => {\n  const [num, setnum] = usestate(0);\n\n  const add = () => {\n    console.log("num is addevent:", num);\n    setnum(num + 1);\n  };\n\n  useeffect(() => {\n    setinterval(() => {\n      console.log("num is setinterval:", num);\n    }, 1000);\n\n    return () => {\n      console.log(num);\n    };\n  }, []);\n\n  return (\n    <div>\n      <button onclick={add}>add</button>\n      <p>{num}</p>\n    </div>\n  );\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n\n可以看到 use effect 在最初执行的时候引用的初始值0，形成了闭包。在后续页面如何加载都不会影响到结果。\n\n\n# 使用更新的值\n\n若想想要实时输出变化后的值，需要传入监听值，值变化后重新执行其内的代码 记得清楚定时器\n\n  useeffect(() => {\n    const interval = setinterval(() => {\n      console.log("num is setinterval:", num);\n    }, 1000);\n\n    return () => {\n      clearinterval(interval);\n      console.log(num);\n    };\n  }, [num]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 使用useref 使用初始值',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"JSX",frontmatter:{title:"JSX",date:"2022-06-22T09:01:17.000Z",permalink:"/pages/bfda29/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050100.JSX.html",relativePath:"10.大前端/1050.React/1050100.JSX.md",key:"v-c4e89c56",path:"/pages/bfda29/",headers:[{level:3,title:"JSX 的本质：JavaScript 的语法扩展",slug:"jsx-的本质-javascript-的语法扩展",normalizedTitle:"jsx 的本质：javascript 的语法扩展",charIndex:119},{level:4,title:"JSX 语法是如何在 JavaScript 中生效的：",slug:"jsx-语法是如何在-javascript-中生效的",normalizedTitle:"jsx 语法是如何在 javascript 中生效的：",charIndex:227},{level:3,title:"React 选用 JSX 语法的动机",slug:"react-选用-jsx-语法的动机",normalizedTitle:"react 选用 jsx 语法的动机",charIndex:512},{level:3,title:"JSX 是如何映射为 DOM 的：",slug:"jsx-是如何映射为-dom-的",normalizedTitle:"jsx 是如何映射为 dom 的：",charIndex:703}],headersStr:"JSX 的本质：JavaScript 的语法扩展 JSX 语法是如何在 JavaScript 中生效的： React 选用 JSX 语法的动机 JSX 是如何映射为 DOM 的：",content:"# SX 代码是如何“摇身一变”成为DOM 的？\n\n * JSX 的本质是什么，它和 JS 之间到底是什么关系？\n\n * 为什么要用 JSX？不用会有什么后果？\n\n * JSX 背后的功能模块是什么，这个功能模块都做了哪些事情？\n\n\n# JSX 的本质：JavaScript 的语法扩展\n\nReact 官网给出的一段定义：\n\n> JSX 是 JavaScript 的一种语法扩展，它和模板语言很接近，但是它充分具备 JavaScript 的能力。\n\n# JSX 语法是如何在 JavaScript 中生效的：\n\nBabel 也具备将 JSX 语法转换为 JavaScript 代码的能力\n\n\n\n所有的 JSX 标签都被转化成了 React.createElement 调用，这也就意味着，我们写的 JSX 其实写的就是 React.createElement，虽然它看起来有点像 HTML，但也只是“看起来像”而已。JSX 的本质是React.createElement这个 JavaScript 调用的语法糖，这也就完美地呼应上了 React 官方给出的“JSX 充分具备 JavaScript 的能力”这句话。\n\n\n# React 选用 JSX 语法的动机\n\n * JSX 代码层次分明、嵌套关系清晰；\n   \n   * 而 React.createElement 代码则给人一种非常混乱的“杂糅感”，这样的代码不仅读起来不友好，写起来也费劲。\n\n * JSX 语法糖允许前端开发者使用我们最为熟悉的类 HTML 标签语法来创建虚拟 DOM，在降低学习成本的同时，也提升了研发效率与研发体验。\n\n\n# JSX 是如何映射为 DOM 的：\n\nJSX 会被编译为React.createElement(), React.createElement() 将返回一个叫作 “React Element” 的JS对象。\n\n生成vdom， 通过react.render 方法渲染出实际的dom",normalizedContent:"# sx 代码是如何“摇身一变”成为dom 的？\n\n * jsx 的本质是什么，它和 js 之间到底是什么关系？\n\n * 为什么要用 jsx？不用会有什么后果？\n\n * jsx 背后的功能模块是什么，这个功能模块都做了哪些事情？\n\n\n# jsx 的本质：javascript 的语法扩展\n\nreact 官网给出的一段定义：\n\n> jsx 是 javascript 的一种语法扩展，它和模板语言很接近，但是它充分具备 javascript 的能力。\n\n# jsx 语法是如何在 javascript 中生效的：\n\nbabel 也具备将 jsx 语法转换为 javascript 代码的能力\n\n\n\n所有的 jsx 标签都被转化成了 react.createelement 调用，这也就意味着，我们写的 jsx 其实写的就是 react.createelement，虽然它看起来有点像 html，但也只是“看起来像”而已。jsx 的本质是react.createelement这个 javascript 调用的语法糖，这也就完美地呼应上了 react 官方给出的“jsx 充分具备 javascript 的能力”这句话。\n\n\n# react 选用 jsx 语法的动机\n\n * jsx 代码层次分明、嵌套关系清晰；\n   \n   * 而 react.createelement 代码则给人一种非常混乱的“杂糅感”，这样的代码不仅读起来不友好，写起来也费劲。\n\n * jsx 语法糖允许前端开发者使用我们最为熟悉的类 html 标签语法来创建虚拟 dom，在降低学习成本的同时，也提升了研发效率与研发体验。\n\n\n# jsx 是如何映射为 dom 的：\n\njsx 会被编译为react.createelement(), react.createelement() 将返回一个叫作 “react element” 的js对象。\n\n生成vdom， 通过react.render 方法渲染出实际的dom",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"React生命周期",frontmatter:{title:"React生命周期",date:"2022-06-22T09:11:03.000Z",permalink:"/pages/c1e5fe/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050101.React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",relativePath:"10.大前端/1050.React/1050101.React生命周期.md",key:"v-734dba6f",path:"/pages/c1e5fe/",headers:[{level:2,title:"设计思想",slug:"设计思想",normalizedTitle:"设计思想",charIndex:2},{level:4,title:"虚拟DOM",slug:"虚拟dom",normalizedTitle:"虚拟dom",charIndex:10},{level:4,title:"组件设计",slug:"组件设计",normalizedTitle:"组件设计",charIndex:141}],headersStr:"设计思想 虚拟DOM 组件设计",content:"# 设计思想\n\n# 虚拟DOM\n\n组件初始化 -> render 方法 -> 生成虚拟DOM -> React.DOM.render 方法 -> 真实DOM\n\n组件更新 -> render 方法 -> 生成新的虚拟DOM -> diff算法 -> 定位出两次虚拟DOM的差异\n\n# 组件设计\n\n既是“封闭”的，也是“开放”的\n\n所谓“封闭”，主要是针对“渲染工作流”（指从组件数据改变到组件实际更新发生的过程）来说的。在组件自身的渲染工作流中，每个组件都只处理它内部的渲染逻辑。在没有数据流交互的情况下，组件与组件之间可以做到“各自为政”。\n\n而所谓“开放”，则是针对组件间通信来说的。React 允许开发者基于“单向数据流”的原则完成组件间的通信。而组件之间的通信又将改变通信双方/某一方内部的数据，进而对渲染结果构成影响。所以说在数据这个“红娘”的牵线搭桥之下，组件之间又是彼此开放的，是可以相互影响的。\n\n这一“开放”与“封闭”兼具的特性，使得 React 组件既专注又灵活，具备高度的可重用性和可维护性。",normalizedContent:"# 设计思想\n\n# 虚拟dom\n\n组件初始化 -> render 方法 -> 生成虚拟dom -> react.dom.render 方法 -> 真实dom\n\n组件更新 -> render 方法 -> 生成新的虚拟dom -> diff算法 -> 定位出两次虚拟dom的差异\n\n# 组件设计\n\n既是“封闭”的，也是“开放”的\n\n所谓“封闭”，主要是针对“渲染工作流”（指从组件数据改变到组件实际更新发生的过程）来说的。在组件自身的渲染工作流中，每个组件都只处理它内部的渲染逻辑。在没有数据流交互的情况下，组件与组件之间可以做到“各自为政”。\n\n而所谓“开放”，则是针对组件间通信来说的。react 允许开发者基于“单向数据流”的原则完成组件间的通信。而组件之间的通信又将改变通信双方/某一方内部的数据，进而对渲染结果构成影响。所以说在数据这个“红娘”的牵线搭桥之下，组件之间又是彼此开放的，是可以相互影响的。\n\n这一“开放”与“封闭”兼具的特性，使得 react 组件既专注又灵活，具备高度的可重用性和可维护性。",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"React 基本使用 setState",frontmatter:{title:"React 基本使用 setState",date:"2022-07-04T01:07:44.000Z",permalink:"/pages/b33eff/",categories:["大前端","React","基本使用","setState"],tags:["大前端","React","基本使用","setState"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050109.React%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%20setState.html",relativePath:"10.大前端/1050.React/1050109.React 基本使用 setState.md",key:"v-11e4e95e",path:"/pages/b33eff/",headers:[{level:2,title:"setState",slug:"setstate",normalizedTitle:"setstate",charIndex:2},{level:4,title:"第二，不要直接修改 state ，使用不可变值",slug:"第二-不要直接修改-state-使用不可变值",normalizedTitle:"第二，不要直接修改 state ，使用不可变值",charIndex:683},{level:4,title:"第三，setState 可能是异步更新（有可能是同步更新）",slug:"第三-setstate-可能是异步更新-有可能是同步更新",normalizedTitle:"第三，setstate 可能是异步更新（有可能是同步更新）",charIndex:1457},{level:4,title:"第四，state 异步更新的话，更新前会被合并",slug:"第四-state-异步更新的话-更新前会被合并",normalizedTitle:"第四，state 异步更新的话，更新前会被合并",charIndex:2624}],headersStr:"setState 第二，不要直接修改 state ，使用不可变值 第三，setState 可能是异步更新（有可能是同步更新） 第四，state 异步更新的话，更新前会被合并",content:"# setState\n\n * 不可变值\n * 可能是异步更新\n * 可能会被合并\n\n函数式组件，默认没有 state\n\nstate 放在 constructor中， 要在构造函数中定义\n\nimport React from 'react'\n\n// 函数组件（后面会讲），默认没有 state\nclass StateDemo extends React.Component {\n    constructor(props) {\n        super(props)\n\n        // 第一，state 要在构造函数中定义\n        this.state = {\n            count: 0\n        }\n    }\n    render() {\n        return <div>\n            <p>{this.state.count}</p>\n            <button onClick={this.increase}>累加</button>\n        </div>\n    }\n    increase = () => {\n        // - 第二 不可变值\n        // - 第三 可能是异步更新\n        // - 第四 可能会被合并       \n    }\n}\n\nexport default StateDemo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n# 第二，不要直接修改 state ，使用不可变值\n\n    // this.state.count++ // 错误\n    this.setState({\n        count: this.state.count + 1 // SCU\n    })\n\n\n1\n2\n3\n4\n\n\n// 不可变值（函数式编程，纯函数） - 数组\nconst list5Copy = this.state.list5.slice()\nlist5Copy.splice(2, 0, 'a') // 中间插入/删除\nthis.setState({\n    list1: this.state.list1.concat(100), // 追加\n    list2: [...this.state.list2, 100], // 追加\n    list3: this.state.list3.slice(0, 3), // 截取\n    list4: this.state.list4.filter(item => item > 100), // 筛选\n    list5: list5Copy // 其他操作\n})\n// 注意，不能直接对 this.state.list 进行 push pop splice 等，这样违反不可变值\n\n// 不可变值 - 对象\nthis.setState({\n    obj1: Object.assign({}, this.state.obj1, {a: 100}),\n    obj2: {...this.state.obj2, a: 100}\n})\n// 注意，不能直接对 this.state.obj 进行属性设置，这样违反不可变值\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 第三，setState 可能是异步更新（有可能是同步更新）\n\n\t\t\t\tthis.setState({\n            count: this.state.count + 1\n        }, () => {\n            // 联想 Vue $nextTick - DOM\n            console.log('count by callback', this.state.count) // 回调函数中可以拿到最新的 state\n        })\n        console.log('count', this.state.count) // 异步的，拿不到最新值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * setTimeout 中 setState 是同步的\n\n        // setTimeout 中 setState 是同步的\n        setTimeout(() => {\n            this.setState({\n                count: this.state.count + 1\n            })\n            console.log('count in setTimeout', this.state.count)\n        }, 0)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 自己定义的 DOM 事件，setState 是同步的\n\n    componentDidMount() {\n        // 自己定义的 DOM 事件，setState 是同步的\n        document.body.addEventListener('click', this.bodyClickHandler)\n    }\n\n\t  bodyClickHandler = () => {\n        this.setState({\n            count: this.state.count + 1\n        })\n        console.log('count in body event', this.state.count)\n    }\n    \n    componentWillUnmount() {\n        // 及时销毁自定义 DOM 事件\n        document.body.removeEventListener('click', this.bodyClickHandler)\n        // clearTimeout\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n可能是异步更新\n\n# 第四，state 异步更新的话，更新前会被合并\n\n        // 传入对象，会被合并（类似 Object.assign ）。执行结果只一次 +1\n\t\t\t  // Object.assign({ count: 1 }, { count: 1 })\n        this.setState({\n            count: this.state.count + 1\n        })\n        this.setState({\n            count: this.state.count + 1\n        })\n        this.setState({\n            count: this.state.count + 1\n        })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n传入函数，不会被合并\n\n \t\t\t\t// 传入函数，不会被合并。执行结果是 +3\n        this.setState((prevState, props) => {\n            return {\n                count: prevState.count + 1\n            }\n        })\n        this.setState((prevState, props) => {\n            return {\n                count: prevState.count + 1\n            }\n        })\n        this.setState((prevState, props) => {\n            return {\n                count: prevState.count + 1\n            }\n        })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",normalizedContent:"# setstate\n\n * 不可变值\n * 可能是异步更新\n * 可能会被合并\n\n函数式组件，默认没有 state\n\nstate 放在 constructor中， 要在构造函数中定义\n\nimport react from 'react'\n\n// 函数组件（后面会讲），默认没有 state\nclass statedemo extends react.component {\n    constructor(props) {\n        super(props)\n\n        // 第一，state 要在构造函数中定义\n        this.state = {\n            count: 0\n        }\n    }\n    render() {\n        return <div>\n            <p>{this.state.count}</p>\n            <button onclick={this.increase}>累加</button>\n        </div>\n    }\n    increase = () => {\n        // - 第二 不可变值\n        // - 第三 可能是异步更新\n        // - 第四 可能会被合并       \n    }\n}\n\nexport default statedemo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n# 第二，不要直接修改 state ，使用不可变值\n\n    // this.state.count++ // 错误\n    this.setstate({\n        count: this.state.count + 1 // scu\n    })\n\n\n1\n2\n3\n4\n\n\n// 不可变值（函数式编程，纯函数） - 数组\nconst list5copy = this.state.list5.slice()\nlist5copy.splice(2, 0, 'a') // 中间插入/删除\nthis.setstate({\n    list1: this.state.list1.concat(100), // 追加\n    list2: [...this.state.list2, 100], // 追加\n    list3: this.state.list3.slice(0, 3), // 截取\n    list4: this.state.list4.filter(item => item > 100), // 筛选\n    list5: list5copy // 其他操作\n})\n// 注意，不能直接对 this.state.list 进行 push pop splice 等，这样违反不可变值\n\n// 不可变值 - 对象\nthis.setstate({\n    obj1: object.assign({}, this.state.obj1, {a: 100}),\n    obj2: {...this.state.obj2, a: 100}\n})\n// 注意，不能直接对 this.state.obj 进行属性设置，这样违反不可变值\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 第三，setstate 可能是异步更新（有可能是同步更新）\n\n\t\t\t\tthis.setstate({\n            count: this.state.count + 1\n        }, () => {\n            // 联想 vue $nexttick - dom\n            console.log('count by callback', this.state.count) // 回调函数中可以拿到最新的 state\n        })\n        console.log('count', this.state.count) // 异步的，拿不到最新值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * settimeout 中 setstate 是同步的\n\n        // settimeout 中 setstate 是同步的\n        settimeout(() => {\n            this.setstate({\n                count: this.state.count + 1\n            })\n            console.log('count in settimeout', this.state.count)\n        }, 0)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 自己定义的 dom 事件，setstate 是同步的\n\n    componentdidmount() {\n        // 自己定义的 dom 事件，setstate 是同步的\n        document.body.addeventlistener('click', this.bodyclickhandler)\n    }\n\n\t  bodyclickhandler = () => {\n        this.setstate({\n            count: this.state.count + 1\n        })\n        console.log('count in body event', this.state.count)\n    }\n    \n    componentwillunmount() {\n        // 及时销毁自定义 dom 事件\n        document.body.removeeventlistener('click', this.bodyclickhandler)\n        // cleartimeout\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n可能是异步更新\n\n# 第四，state 异步更新的话，更新前会被合并\n\n        // 传入对象，会被合并（类似 object.assign ）。执行结果只一次 +1\n\t\t\t  // object.assign({ count: 1 }, { count: 1 })\n        this.setstate({\n            count: this.state.count + 1\n        })\n        this.setstate({\n            count: this.state.count + 1\n        })\n        this.setstate({\n            count: this.state.count + 1\n        })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n传入函数，不会被合并\n\n \t\t\t\t// 传入函数，不会被合并。执行结果是 +3\n        this.setstate((prevstate, props) => {\n            return {\n                count: prevstate.count + 1\n            }\n        })\n        this.setstate((prevstate, props) => {\n            return {\n                count: prevstate.count + 1\n            }\n        })\n        this.setstate((prevstate, props) => {\n            return {\n                count: prevstate.count + 1\n            }\n        })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 基本使用 组件生命周期",frontmatter:{title:"React 基本使用 组件生命周期",date:"2022-07-04T02:15:00.000Z",permalink:"/pages/bca771/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050112.React%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%20%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",relativePath:"10.大前端/1050.React/1050112.React 基本使用 组件生命周期.md",key:"v-f2704616",path:"/pages/bca771/",headersStr:null,content:"> https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n\n\n\n",normalizedContent:"> https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n\n\n\n",charsets:{},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 高级使用 性能优化",frontmatter:{title:"React 高级使用 性能优化",date:"2022-07-02T19:45:09.000Z",permalink:"/pages/be9b53/",categories:["大前端","React","使用","高级使用"],tags:["大前端","React","使用","高级使用"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050119.React%20%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",relativePath:"10.大前端/1050.React/1050119.React 高级使用 性能优化.md",key:"v-b5463836",path:"/pages/be9b53/",headers:[{level:3,title:"shouldComponentUpdate ( 简称 SCU )",slug:"shouldcomponentupdate-简称-scu",normalizedTitle:"shouldcomponentupdate ( 简称 scu )",charIndex:2},{level:4,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:38},{level:4,title:"总结：",slug:"总结",normalizedTitle:"总结：",charIndex:615},{level:3,title:"PureComponent 和 React.memo",slug:"purecomponent-和-react-memo",normalizedTitle:"purecomponent 和 react.memo",charIndex:706},{level:4,title:"PureComponent eg",slug:"purecomponent-eg",normalizedTitle:"purecomponent eg",charIndex:825},{level:4,title:"memo eg",slug:"memo-eg",normalizedTitle:"memo eg",charIndex:997},{level:3,title:"不可变值 immutable.js",slug:"不可变值-immutable-js",normalizedTitle:"不可变值 immutable.js",charIndex:1284}],headersStr:"shouldComponentUpdate ( 简称 SCU ) 基本用法 总结： PureComponent 和 React.memo PureComponent eg memo eg 不可变值 immutable.js",content:"# shouldComponentUpdate ( 简称 SCU )\n\n# 基本用法\n\nshouldComponentUpdate(nextProps, nextState) {\n  if (nextState.count !== this.state.count) {\n    return true // 可以渲染\n  }\n  return false // 不重复渲染\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nReact 默认： 父组件有更新，子组件无条件也更新\n\nSCU 在需要的时候才优化，不要为了开发而开发\n\n需要配合到 不可变值\n\neg:\n\nonSubmit = (value) => {\n  // right\n  this.setState({\n    list: this.state.list.concat({\n      id: `id_${Date.now()}`,\n      title: value\n    })\n  })\n  \n  // fail\n  this.state.list.push({\n    id: `id_${Date.now()}`,\n    title: value\n  })\n  this.setState({\n    list: this.state.list\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 总结：\n\n * SCU 默认返回true ，即 React 默认重新渲染所有子组件\n * 必须配合 “ 不可变值 ” 一起使用\n * 可先不用 SCU， 有性能问题时再考虑\n\n\n# PureComponent 和 React.memo\n\n * PureCompnent ， SCU 中实现了浅比较\n * memo， 函数组件中的 PureComponent\n * 浅比较已使用大部分情况 （ 尽量不要做深度比较）\n\n# PureComponent eg\n\nclass List extends React.PureComponent {\n  constructor(props) { ... }\n  \n  render() { ... }\n  \n  sholdComponentUpdate() { /*浅比较*/ }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# memo eg\n\nfunction MyComponent (props) {\n  /* 使用 props 渲染 */\n}\nfunction areEqual(prevProps, nextProps）{\n  /*\n  如果把 nextProps 传入 render 方法的返回结果与\n  将 prevProps 传入 render 方法的返回结果一致则返回 true,\n  否则返回 false\n  */\n}\nexport default React.memo(MyComponent, areEqual);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 不可变值 immutable.js\n\n * 基于共享数据（不是深拷贝），速度好\n * 有一定的学习和迁移成本，按需使用\n\ne g：\n\nconst map1 = Immutable.Map({ a: 1, b: 2, c: 3 })\nconst map2 = map1.set({ 'b', 50 })\nmap1.get('b')  // 2\nmap2.get('b')  // 50\n\n\n1\n2\n3\n4\n",normalizedContent:"# shouldcomponentupdate ( 简称 scu )\n\n# 基本用法\n\nshouldcomponentupdate(nextprops, nextstate) {\n  if (nextstate.count !== this.state.count) {\n    return true // 可以渲染\n  }\n  return false // 不重复渲染\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nreact 默认： 父组件有更新，子组件无条件也更新\n\nscu 在需要的时候才优化，不要为了开发而开发\n\n需要配合到 不可变值\n\neg:\n\nonsubmit = (value) => {\n  // right\n  this.setstate({\n    list: this.state.list.concat({\n      id: `id_${date.now()}`,\n      title: value\n    })\n  })\n  \n  // fail\n  this.state.list.push({\n    id: `id_${date.now()}`,\n    title: value\n  })\n  this.setstate({\n    list: this.state.list\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 总结：\n\n * scu 默认返回true ，即 react 默认重新渲染所有子组件\n * 必须配合 “ 不可变值 ” 一起使用\n * 可先不用 scu， 有性能问题时再考虑\n\n\n# purecomponent 和 react.memo\n\n * purecompnent ， scu 中实现了浅比较\n * memo， 函数组件中的 purecomponent\n * 浅比较已使用大部分情况 （ 尽量不要做深度比较）\n\n# purecomponent eg\n\nclass list extends react.purecomponent {\n  constructor(props) { ... }\n  \n  render() { ... }\n  \n  sholdcomponentupdate() { /*浅比较*/ }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# memo eg\n\nfunction mycomponent (props) {\n  /* 使用 props 渲染 */\n}\nfunction areequal(prevprops, nextprops）{\n  /*\n  如果把 nextprops 传入 render 方法的返回结果与\n  将 prevprops 传入 render 方法的返回结果一致则返回 true,\n  否则返回 false\n  */\n}\nexport default react.memo(mycomponent, areequal);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 不可变值 immutable.js\n\n * 基于共享数据（不是深拷贝），速度好\n * 有一定的学习和迁移成本，按需使用\n\ne g：\n\nconst map1 = immutable.map({ a: 1, b: 2, c: 3 })\nconst map2 = map1.set({ 'b', 50 })\nmap1.get('b')  // 2\nmap2.get('b')  // 50\n\n\n1\n2\n3\n4\n",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 高级使用 高阶组件",frontmatter:{title:"React 高级使用 高阶组件",date:"2022-07-03T14:58:48.000Z",permalink:"/pages/3101a6/",categories:["大前端","React","使用","高级使用"],tags:["大前端","React","使用","高级使用"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050124.React%20%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%20%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6.html",relativePath:"10.大前端/1050.React/1050124.React 高级使用 高阶组件.md",key:"v-3d549796",path:"/pages/3101a6/",headers:[{level:2,title:"HOC",slug:"hoc",normalizedTitle:"hoc",charIndex:30},{level:3,title:"redux connect 高阶组件",slug:"redux-connect-高阶组件",normalizedTitle:"redux connect 高阶组件",charIndex:1508},{level:2,title:"Render Props",slug:"render-props",normalizedTitle:"render props",charIndex:37},{level:4,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:357},{level:2,title:"HOC VS Render Props",slug:"hoc-vs-render-props",normalizedTitle:"hoc vs render props",charIndex:3407}],headersStr:"HOC redux connect 高阶组件 Render Props 示例 HOC VS Render Props",content:" * mixin， 已被 React 弃用\n * 高阶组件 HOC\n * Render Props\n\n\n# HOC\n\n类似工厂模式 装饰器之类的\n\n//高阶组件不是一种功能，而是一种模式\nconst HOCFactory = (Component) => {\n  class HOC extends React.Component {\n    // 在此定义多个组件的公共逻辑\n    render(){\n      return <Component {...this.props}/>//返回拼装的结果\n    }\n  return HOC\n}\nconst EnhancedComponent1 = HOCFactory(wrappedComponent1)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n示例：\n\nimport React from 'react'\n\n// 高阶组件\nconst withMouse = (Component) => {\n    class withMouseComponent extends React.Component {\n        constructor(props) {\n            super(props)\n            this.state = { x: 0, y: 0 }\n        }\n  \n        handleMouseMove = (event) => {\n            this.setState({\n                x: event.clientX,\n                y: event.clientY\n            })\n        }\n  \n        render() {\n            return (\n                <div style={{ height: '500px' }} onMouseMove={this.handleMouseMove}>\n                    {/* 1. 透传所有 props 2. 增加 mouse 属性 */}\n                    <Component {...this.props} mouse={this.state}/>\n                </div>\n            )\n        }\n    }\n    return withMouseComponent\n}\n\nconst App = (props) => {\n    const a = props.a\n    const { x, y } = props.mouse // 接收 mouse 属性\n    return (\n        <div style={{ height: '500px' }}>\n            <h1>The mouse position is ({x}, {y})</h1>\n            <p>{a}</p>\n        </div>\n    )\n}\n\nexport default withMouse(App) // 返回高阶函数\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# redux connect 高阶组件\n\nimport { connect } from 'react-redux'\n// connect 是高阶组件\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nconnect 源码\n\n\n\n\n# Render Props\n\nRender Props 的核心思想 通过一个函数将 class 组件的 state 作为 props 传递给纯函数组件\n\nclass Factory extends React.Component {\n  constructor() {\n    this.state ={\n      /* state 即多个组件的公共逻辑的数据*/\n    }\n  }\n  /* 修改 state */\n  render(){\n    return <div-{this. props. render(this.state)J</div>\n  }\n}\n             \n             \nconst App = () =>(\n  <Factory render={\n      ／＊ render 是一个函数组件＊／\n      (props) => <p>{props.a} {props.b} ...</p>\n    }>\n  </Factory>\n)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 示例\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Mouse extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { x: 0, y: 0 }\n    }\n  \n    handleMouseMove = (event) => {\n      this.setState({\n        x: event.clientX,\n        y: event.clientY\n      })\n    }\n  \n    render() {\n      return (\n        <div style={{ height: '500px' }} onMouseMove={this.handleMouseMove}>\n            {/* 将当前 state 作为 props ，传递给 render （render 是一个函数组件） */}\n            {this.props.render(this.state)}\n        </div>\n      )\n    }\n}\nMouse.propTypes = {\n    render: PropTypes.func.isRequired // 必须接收一个 render 属性，而且是函数\n}\n\nconst App = (props) => (\n    <div style={{ height: '500px' }}>\n        <p>{props.a}</p>\n        <Mouse render={\n            /* render 是一个函数组件 */\n            ({ x, y }) => <h1>The mouse position is ({x}, {y})</h1>\n        }/>\n        \n    </div>\n)\n\n/**\n * 即，定义了 Mouse 组件，只有获取 x y 的能力。\n * 至于 Mouse 组件如何渲染，App 说了算，通过 render prop 的方式告诉 Mouse 。\n */\n\nexport default App\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# HOC VS Render Props\n\n * HOC：模式简单，但会增加组件层级\n * Render Props：代码简洁，学习成本较高",normalizedContent:" * mixin， 已被 react 弃用\n * 高阶组件 hoc\n * render props\n\n\n# hoc\n\n类似工厂模式 装饰器之类的\n\n//高阶组件不是一种功能，而是一种模式\nconst hocfactory = (component) => {\n  class hoc extends react.component {\n    // 在此定义多个组件的公共逻辑\n    render(){\n      return <component {...this.props}/>//返回拼装的结果\n    }\n  return hoc\n}\nconst enhancedcomponent1 = hocfactory(wrappedcomponent1)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n示例：\n\nimport react from 'react'\n\n// 高阶组件\nconst withmouse = (component) => {\n    class withmousecomponent extends react.component {\n        constructor(props) {\n            super(props)\n            this.state = { x: 0, y: 0 }\n        }\n  \n        handlemousemove = (event) => {\n            this.setstate({\n                x: event.clientx,\n                y: event.clienty\n            })\n        }\n  \n        render() {\n            return (\n                <div style={{ height: '500px' }} onmousemove={this.handlemousemove}>\n                    {/* 1. 透传所有 props 2. 增加 mouse 属性 */}\n                    <component {...this.props} mouse={this.state}/>\n                </div>\n            )\n        }\n    }\n    return withmousecomponent\n}\n\nconst app = (props) => {\n    const a = props.a\n    const { x, y } = props.mouse // 接收 mouse 属性\n    return (\n        <div style={{ height: '500px' }}>\n            <h1>the mouse position is ({x}, {y})</h1>\n            <p>{a}</p>\n        </div>\n    )\n}\n\nexport default withmouse(app) // 返回高阶函数\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# redux connect 高阶组件\n\nimport { connect } from 'react-redux'\n// connect 是高阶组件\nconst visibletodolist = connect(\n  mapstatetoprops,\n  mapdispatchtoprops\n)(todolist)\n\nexport default visibletodolist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nconnect 源码\n\n\n\n\n# render props\n\nrender props 的核心思想 通过一个函数将 class 组件的 state 作为 props 传递给纯函数组件\n\nclass factory extends react.component {\n  constructor() {\n    this.state ={\n      /* state 即多个组件的公共逻辑的数据*/\n    }\n  }\n  /* 修改 state */\n  render(){\n    return <div-{this. props. render(this.state)j</div>\n  }\n}\n             \n             \nconst app = () =>(\n  <factory render={\n      ／＊ render 是一个函数组件＊／\n      (props) => <p>{props.a} {props.b} ...</p>\n    }>\n  </factory>\n)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 示例\n\nimport react from 'react'\nimport proptypes from 'prop-types'\n\nclass mouse extends react.component {\n    constructor(props) {\n        super(props)\n        this.state = { x: 0, y: 0 }\n    }\n  \n    handlemousemove = (event) => {\n      this.setstate({\n        x: event.clientx,\n        y: event.clienty\n      })\n    }\n  \n    render() {\n      return (\n        <div style={{ height: '500px' }} onmousemove={this.handlemousemove}>\n            {/* 将当前 state 作为 props ，传递给 render （render 是一个函数组件） */}\n            {this.props.render(this.state)}\n        </div>\n      )\n    }\n}\nmouse.proptypes = {\n    render: proptypes.func.isrequired // 必须接收一个 render 属性，而且是函数\n}\n\nconst app = (props) => (\n    <div style={{ height: '500px' }}>\n        <p>{props.a}</p>\n        <mouse render={\n            /* render 是一个函数组件 */\n            ({ x, y }) => <h1>the mouse position is ({x}, {y})</h1>\n        }/>\n        \n    </div>\n)\n\n/**\n * 即，定义了 mouse 组件，只有获取 x y 的能力。\n * 至于 mouse 组件如何渲染，app 说了算，通过 render prop 的方式告诉 mouse 。\n */\n\nexport default app\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# hoc vs render props\n\n * hoc：模式简单，但会增加组件层级\n * render props：代码简洁，学习成本较高",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React Redux使用",frontmatter:{title:"React Redux使用",date:"2022-07-03T17:56:45.000Z",permalink:"/pages/56c5a3/",categories:["大前端","React","周边工具","react-redux"],tags:["大前端","React","周边工具","react-redux"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050127.React%20Redux%E4%BD%BF%E7%94%A8.html",relativePath:"10.大前端/1050.React/1050127.React Redux使用.md",key:"v-12cba644",path:"/pages/56c5a3/",headers:[{level:2,title:"基本概念",slug:"基本概念",normalizedTitle:"基本概念",charIndex:2},{level:2,title:"单项数据流",slug:"单项数据流",normalizedTitle:"单项数据流",charIndex:48},{level:2,title:"react-redux",slug:"react-redux",normalizedTitle:"react-redux",charIndex:120},{level:2,title:"异步action",slug:"异步action",normalizedTitle:"异步action",charIndex:190},{level:2,title:"中间件",slug:"中间件",normalizedTitle:"中间件",charIndex:254},{level:4,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:263}],headersStr:"基本概念 单项数据流 react-redux 异步action 中间件 示例",content:"# 基本概念\n\n * store state\n * action\n * reducer\n\n\n# 单项数据流\n\n * dispatch(action)\n * reducer -> newState\n * subscribe 触发通知\n\n\n# react-redux\n\n * \n * connect\n * mapStateToProps mapDispatchToProps\n\n\n# 异步action\n\n\n\n\n\n * redux-thunk\n * redux-promise\n * redux-saga\n\n\n# 中间件\n\n\n\n# 示例\n\nimport { applyMiddleware, createstore } from ' redux\";\nimport createLogger from redux-Logger';\nimport thunk from redux-thunk:\nconst Logger = createLogger();\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk, logger) // 会按顺序执行\n)\n\n\n\n\n//自己修改 dispatch，增加 Logger\nLet next = store.dispatch;\nstore.dispatch = function dispatchAndLog (action) {\n  console. Log('dispatching', action):\n  next (action);\n  console. log('next state', store.getState());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",normalizedContent:"# 基本概念\n\n * store state\n * action\n * reducer\n\n\n# 单项数据流\n\n * dispatch(action)\n * reducer -> newstate\n * subscribe 触发通知\n\n\n# react-redux\n\n * \n * connect\n * mapstatetoprops mapdispatchtoprops\n\n\n# 异步action\n\n\n\n\n\n * redux-thunk\n * redux-promise\n * redux-saga\n\n\n# 中间件\n\n\n\n# 示例\n\nimport { applymiddleware, createstore } from ' redux\";\nimport createlogger from redux-logger';\nimport thunk from redux-thunk:\nconst logger = createlogger();\nconst store = createstore(\n  reducer,\n  applymiddleware(thunk, logger) // 会按顺序执行\n)\n\n\n\n\n//自己修改 dispatch，增加 logger\nlet next = store.dispatch;\nstore.dispatch = function dispatchandlog (action) {\n  console. log('dispatching', action):\n  next (action);\n  console. log('next state', store.getstate());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"react-router 使用",frontmatter:{title:"react-router 使用",date:"2022-07-03T18:19:00.000Z",permalink:"/pages/62d6bf/",categories:["大前端","React","周边工具","react-router"],tags:["大前端","React","周边工具","react-router"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050132.react-router%20%E4%BD%BF%E7%94%A8.html",relativePath:"10.大前端/1050.React/1050132.react-router 使用.md",key:"v-7adc269e",path:"/pages/62d6bf/",headersStr:null,content:" * 路由模式(hash、 H5 history），同 vue-router\n * 路由配置（动态路由、懒加载），同 vue-router",normalizedContent:" * 路由模式(hash、 h5 history），同 vue-router\n * 路由配置（动态路由、懒加载），同 vue-router",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 原理",frontmatter:{title:"React 原理",date:"2022-07-04T10:02:52.000Z",permalink:"/pages/6cddc4/",categories:["大前端","React","原理"],tags:["React","原理"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050150.React%20%E5%8E%9F%E7%90%86.html",relativePath:"10.大前端/1050.React/1050150.React 原理.md",key:"v-2b460b22",path:"/pages/6cddc4/",headers:[{level:2,title:"vdom 和 diff 算法",slug:"vdom-和-diff-算法",normalizedTitle:"vdom 和 diff 算法",charIndex:29},{level:2,title:"JSX 本质",slug:"jsx-本质",normalizedTitle:"jsx 本质",charIndex:166},{level:2,title:"合成事件",slug:"合成事件",normalizedTitle:"合成事件",charIndex:265},{level:4,title:"为何要合成事件机制？",slug:"为何要合成事件机制",normalizedTitle:"为何要合成事件机制？",charIndex:405},{level:4,title:"React 17 事件绑定到 root",slug:"react-17-事件绑定到-root",normalizedTitle:"react 17 事件绑定到 root",charIndex:485},{level:2,title:"setState 和 batchUpdate",slug:"setstate-和-batchupdate",normalizedTitle:"setstate 和 batchupdate",charIndex:587},{level:4,title:"核心要点",slug:"核心要点",normalizedTitle:"核心要点",charIndex:717},{level:5,title:"setState 主流程",slug:"setstate-主流程",normalizedTitle:"setstate 主流程",charIndex:725},{level:5,title:"batchUpdate 机制",slug:"batchupdate-机制",normalizedTitle:"batchupdate 机制",charIndex:743},{level:5,title:"transaction 事务机制",slug:"transaction-事务机制",normalizedTitle:"transaction 事务机制",charIndex:845},{level:2,title:"组件渲染过程",slug:"组件渲染过程",normalizedTitle:"组件渲染过程",charIndex:2409},{level:3,title:"组件更新过程",slug:"组件更新过程",normalizedTitle:"组件更新过程",charIndex:2613},{level:4,title:"更新的两个阶段",slug:"更新的两个阶段",normalizedTitle:"更新的两个阶段",charIndex:2724},{level:2,title:"fiber 性能",slug:"fiber-性能",normalizedTitle:"fiber 性能",charIndex:2828},{level:4,title:"可能会有性能问题",slug:"可能会有性能问题",normalizedTitle:"可能会有性能问题",charIndex:2840},{level:4,title:"解决方案 fiber",slug:"解决方案-fiber",normalizedTitle:"解决方案 fiber",charIndex:2936}],headersStr:"vdom 和 diff 算法 JSX 本质 合成事件 为何要合成事件机制？ React 17 事件绑定到 root setState 和 batchUpdate 核心要点 setState 主流程 batchUpdate 机制 transaction 事务机制 组件渲染过程 组件更新过程 更新的两个阶段 fiber 性能 可能会有性能问题 解决方案 fiber",content:" * 一种编程范式\n * 纯函数\n * 不可变值\n\n\n# vdom 和 diff 算法\n\n * h 函数\n\n * vnode 数据结构\n\n * patch 函数\n\n * 只比较同一层级，不跨级比较\n\n * tag 不相同，则直接删掉重建，不再深度比较\n\n * tag 和 key，两者都相同，则认为是相同节点，不再深度比较\n\n\n# JSX 本质\n\n * JSX 即 createElement 函数\n * 执行生成 vnode\n * patch(elem, vnode) 和 patch(vnode, newVnode)\n\n\n# 合成事件\n\n * 所有事件挂载到 document 上（React17版本开始，事件就不再绑定到 document上了，放到了root组件上）\n * event 不是原生的，是 SyntheticEvent 合成事件对象\n * 和 Vue 事件不同，和 DOM 事件也不同\n\n# 为何要合成事件机制？\n\n * 更好的兼容性和跨平台\n\n * 载到 document，减少内存消耗，避免频繁解绑\n\n * 方便事件的统一管理（如事务机制）\n\n# React 17 事件绑定到 root\n\n * React 16 绑定到 document\n * React 17 事件绑定到 root 组件\n * 有利于多个 React 版本并存，例如微前端\n\n\n# setState 和 batchUpdate\n\n * 有时异步（普通使用），有时同步 ( setTimeout、 DOM 事件）\n * 有时合并（对象形式），有时不合并（函数形式）\n * 后者比较好理解（像 Object.assign ），主要讲解前者\n\n# 核心要点\n\n# setState 主流程\n\n\n\n# batchUpdate 机制\n\n哪些能命中 batchUpdate 机制\n\n * 生命周期（和它调用的函数）\n * React 中注册的事件（和它调用的函数）\n * React 可以“管理〞的入口\n\n# transaction 事务机制\n\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +-----------------\x3e|-|---|-|---|--\x3e|anyMethod|---|---|-|---|-|--------\x3e\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 组件渲染过程\n\n * props state\n * render0 生成 vnode\n * patch (elem, vnode)\n\n组件初始化 -> render 方法 -> 生成虚拟DOM -> React.DOM.render 方法 -> 真实DOM\n\n组件更新 -> render 方法 -> 生成新的虚拟DOM -> diff算法 -> 定位出两次虚拟DOM的差异\n\nrender方法\n\n\n\n\n# 组件更新过程\n\n * setState(newState) --\x3e dirtyComponents（ 可能有子组件）\n * render0 生成 newVnode\n * patch(vnode, newVnode)\n\n# 更新的两个阶段\n\n * 上述的 patch 被拆分为两个阶段：\n * reconciliation 阶段一执行 diff 算法，纯JS 计算\n * commit 阶段-将 diff 结果渲染 DOM\n\n\n# fiber 性能\n\n# 可能会有性能问题\n\n * JS是单线程，且和 DOM 渲染共用一个线程\n * 当组件足够复杂，组件更新时计算和渲染都压力大\n * 同时再有 DOM 操作需求（动画，鼠标拖拽等），将卡顿\n\n# 解决方案 fiber\n\n * 将 reconciliation 阶段进行任务拆分 （commit 无法拆分）\n * DOM 需要渲染时暂停，空闲时恢复\n * window.requestldleCallback",normalizedContent:" * 一种编程范式\n * 纯函数\n * 不可变值\n\n\n# vdom 和 diff 算法\n\n * h 函数\n\n * vnode 数据结构\n\n * patch 函数\n\n * 只比较同一层级，不跨级比较\n\n * tag 不相同，则直接删掉重建，不再深度比较\n\n * tag 和 key，两者都相同，则认为是相同节点，不再深度比较\n\n\n# jsx 本质\n\n * jsx 即 createelement 函数\n * 执行生成 vnode\n * patch(elem, vnode) 和 patch(vnode, newvnode)\n\n\n# 合成事件\n\n * 所有事件挂载到 document 上（react17版本开始，事件就不再绑定到 document上了，放到了root组件上）\n * event 不是原生的，是 syntheticevent 合成事件对象\n * 和 vue 事件不同，和 dom 事件也不同\n\n# 为何要合成事件机制？\n\n * 更好的兼容性和跨平台\n\n * 载到 document，减少内存消耗，避免频繁解绑\n\n * 方便事件的统一管理（如事务机制）\n\n# react 17 事件绑定到 root\n\n * react 16 绑定到 document\n * react 17 事件绑定到 root 组件\n * 有利于多个 react 版本并存，例如微前端\n\n\n# setstate 和 batchupdate\n\n * 有时异步（普通使用），有时同步 ( settimeout、 dom 事件）\n * 有时合并（对象形式），有时不合并（函数形式）\n * 后者比较好理解（像 object.assign ），主要讲解前者\n\n# 核心要点\n\n# setstate 主流程\n\n\n\n# batchupdate 机制\n\n哪些能命中 batchupdate 机制\n\n * 生命周期（和它调用的函数）\n * react 中注册的事件（和它调用的函数）\n * react 可以“管理〞的入口\n\n# transaction 事务机制\n\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anymethod) | |   | |   |   |         |   |   | |   | | maintained\n * +-----------------\x3e|-|---|-|---|--\x3e|anymethod|---|---|-|---|-|--------\x3e\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 组件渲染过程\n\n * props state\n * render0 生成 vnode\n * patch (elem, vnode)\n\n组件初始化 -> render 方法 -> 生成虚拟dom -> react.dom.render 方法 -> 真实dom\n\n组件更新 -> render 方法 -> 生成新的虚拟dom -> diff算法 -> 定位出两次虚拟dom的差异\n\nrender方法\n\n\n\n\n# 组件更新过程\n\n * setstate(newstate) --\x3e dirtycomponents（ 可能有子组件）\n * render0 生成 newvnode\n * patch(vnode, newvnode)\n\n# 更新的两个阶段\n\n * 上述的 patch 被拆分为两个阶段：\n * reconciliation 阶段一执行 diff 算法，纯js 计算\n * commit 阶段-将 diff 结果渲染 dom\n\n\n# fiber 性能\n\n# 可能会有性能问题\n\n * js是单线程，且和 dom 渲染共用一个线程\n * 当组件足够复杂，组件更新时计算和渲染都压力大\n * 同时再有 dom 操作需求（动画，鼠标拖拽等），将卡顿\n\n# 解决方案 fiber\n\n * 将 reconciliation 阶段进行任务拆分 （commit 无法拆分）\n * dom 需要渲染时暂停，空闲时恢复\n * window.requestldlecallback",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 面试题1",frontmatter:{title:"React 面试题1",date:"2022-07-04T18:01:11.000Z",permalink:"/pages/158846/",categories:["大前端","React","面试题"],tags:["大前端","React","面试题"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050201.React%20%E9%9D%A2%E8%AF%95%E9%A2%981.html",relativePath:"10.大前端/1050.React/1050201.React 面试题1.md",key:"v-3d78375a",path:"/pages/158846/",headers:[{level:3,title:"组件之间如何通讯？",slug:"组件之间如何通讯",normalizedTitle:"组件之间如何通讯？",charIndex:2},{level:3,title:"JSX 本质是什么",slug:"jsx-本质是什么",normalizedTitle:"jsx 本质是什么",charIndex:59},{level:3,title:"Context 是什么，如何应用？",slug:"context-是什么-如何应用",normalizedTitle:"context 是什么，如何应用？",charIndex:105},{level:3,title:"shouldComponentUpdate 用途",slug:"shouldcomponentupdate-用途",normalizedTitle:"shouldcomponentupdate 用途",charIndex:191}],headersStr:"组件之间如何通讯？ JSX 本质是什么 Context 是什么，如何应用？ shouldComponentUpdate 用途",content:"# 组件之间如何通讯？\n\n * 父子组件 props\n * 自定义事件\n * Redux 和 Context\n\n\n# JSX 本质是什么\n\n * createElement\n * 执行返回 vnode\n\n\n# Context 是什么，如何应用？\n\n * 父组件，向其下所有子孙组件传递信息\n * 如一些简单的公共信息：主题色、语言等\n * 复杂的公共信息，请用 redux\n\n\n# shouldComponentUpdate 用途\n\n * 性能优化\n * 配合 “不可变值〞一起使用，否则会出错",normalizedContent:"# 组件之间如何通讯？\n\n * 父子组件 props\n * 自定义事件\n * redux 和 context\n\n\n# jsx 本质是什么\n\n * createelement\n * 执行返回 vnode\n\n\n# context 是什么，如何应用？\n\n * 父组件，向其下所有子孙组件传递信息\n * 如一些简单的公共信息：主题色、语言等\n * 复杂的公共信息，请用 redux\n\n\n# shouldcomponentupdate 用途\n\n * 性能优化\n * 配合 “不可变值〞一起使用，否则会出错",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 面试题2",frontmatter:{title:"React 面试题2",date:"2022-07-04T18:01:11.000Z",permalink:"/pages/247d4c/",categories:["大前端","React","面试题"],tags:["大前端","React","面试题"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050202.React%20%E9%9D%A2%E8%AF%95%E9%A2%982.html",relativePath:"10.大前端/1050.React/1050202.React 面试题2.md",key:"v-451b2d5a",path:"/pages/247d4c/",headers:[{level:3,title:"setState 场景题",slug:"setstate-场景题",normalizedTitle:"setstate 场景题",charIndex:2},{level:3,title:"什么是纯函数",slug:"什么是纯函数",normalizedTitle:"什么是纯函数",charIndex:21},{level:3,title:"React 发起 ajax 应该再在哪个生命周期",slug:"react-发起-ajax-应该再在哪个生命周期",normalizedTitle:"react 发起 ajax 应该再在哪个生命周期",charIndex:98},{level:3,title:"渲染列表，为何使用 key",slug:"渲染列表-为何使用-key",normalizedTitle:"渲染列表，为何使用 key",charIndex:164},{level:3,title:"函数组件和 class 组件区别",slug:"函数组件和-class-组件区别",normalizedTitle:"函数组件和 class 组件区别",charIndex:277},{level:3,title:"什么是受控组件",slug:"什么是受控组件",normalizedTitle:"什么是受控组件",charIndex:358},{level:3,title:"何时使用异步组件",slug:"何时使用异步组件",normalizedTitle:"何时使用异步组件",charIndex:429},{level:3,title:"多个组件有公共逻辑，如何抽离",slug:"多个组件有公共逻辑-如何抽离",normalizedTitle:"多个组件有公共逻辑，如何抽离",charIndex:470},{level:3,title:"redux 如何进行异步请求",slug:"redux-如何进行异步请求",normalizedTitle:"redux 如何进行异步请求",charIndex:535}],headersStr:"setState 场景题 什么是纯函数 React 发起 ajax 应该再在哪个生命周期 渲染列表，为何使用 key 函数组件和 class 组件区别 什么是受控组件 何时使用异步组件 多个组件有公共逻辑，如何抽离 redux 如何进行异步请求",content:"# setState 场景题\n\n\n\n\n# 什么是纯函数\n\n * 返回一个新值，没有副作用（不会”偷偷〞 修改其他值）\n * 重点：不可变值\n * 如 arr1 = arr.slice()\n\n\n# React 发起 ajax 应该再在哪个生命周期\n\n * 同Vue mouted\n * componentDidMount\n\n\n# 渲染列表，为何使用 key\n\n * 同 Vue。必须用 key，且不能是 index 和 random\n * diff 算法中通过 tag 和key 来判断，是否是 sameNode\n * 减少渲染次数，提升渲染性能\n\n\n# 函数组件和 class 组件区别\n\n * 纯函数，输入 props，输出 JSX\n * 没有实例，没有生命周期，没有 state\n * 不能扩展其他方法\n\n\n# 什么是受控组件\n\n * 表单的值，受 state 控制\n * 需要自行监听 onChange，更新 state\n * 对比非受控组件\n\n\n# 何时使用异步组件\n\n * 同 Vue\n * 加载大组件\n * 路由懒加载\n\n\n# 多个组件有公共逻辑，如何抽离\n\n * 高阶组件\n * Render Props\n * mixin 已被 React 废弃\n\n\n# redux 如何进行异步请求\n\n * 使用异步 action\n * 如 redux-thunk",normalizedContent:"# setstate 场景题\n\n\n\n\n# 什么是纯函数\n\n * 返回一个新值，没有副作用（不会”偷偷〞 修改其他值）\n * 重点：不可变值\n * 如 arr1 = arr.slice()\n\n\n# react 发起 ajax 应该再在哪个生命周期\n\n * 同vue mouted\n * componentdidmount\n\n\n# 渲染列表，为何使用 key\n\n * 同 vue。必须用 key，且不能是 index 和 random\n * diff 算法中通过 tag 和key 来判断，是否是 samenode\n * 减少渲染次数，提升渲染性能\n\n\n# 函数组件和 class 组件区别\n\n * 纯函数，输入 props，输出 jsx\n * 没有实例，没有生命周期，没有 state\n * 不能扩展其他方法\n\n\n# 什么是受控组件\n\n * 表单的值，受 state 控制\n * 需要自行监听 onchange，更新 state\n * 对比非受控组件\n\n\n# 何时使用异步组件\n\n * 同 vue\n * 加载大组件\n * 路由懒加载\n\n\n# 多个组件有公共逻辑，如何抽离\n\n * 高阶组件\n * render props\n * mixin 已被 react 废弃\n\n\n# redux 如何进行异步请求\n\n * 使用异步 action\n * 如 redux-thunk",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 面试题3",frontmatter:{title:"React 面试题3",date:"2022-07-04T18:23:08.000Z",permalink:"/pages/f00d6f/",categories:["大前端","React","面试题"],tags:["大前端","React","面试题"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050203.React%20%E9%9D%A2%E8%AF%95%E9%A2%983.html",relativePath:"10.大前端/1050.React/1050203.React 面试题3.md",key:"v-4cbe235a",path:"/pages/f00d6f/",headers:[{level:3,title:"react-router 如何配置懒加载",slug:"react-router-如何配置懒加载",normalizedTitle:"react-router 如何配置懒加载",charIndex:2},{level:3,title:"PureComponent 有何区别",slug:"purecomponent-有何区别",normalizedTitle:"purecomponent 有何区别",charIndex:29},{level:3,title:"React 事件和 DOM 事件的区别",slug:"react-事件和-dom-事件的区别",normalizedTitle:"react 事件和 dom 事件的区别",charIndex:108},{level:3,title:"React 性能优化",slug:"react-性能优化",normalizedTitle:"react 性能优化",charIndex:228},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0}],headersStr:"react-router 如何配置懒加载 PureComponent 有何区别 React 事件和 DOM 事件的区别 React 性能优化 ",content:"# react-router 如何配置懒加载\n\n\n\n\n# PureComponent 有何区别\n\n * 实现了浅比较的 shouldComponentupdate\n * 优化性能\n * 但要结合不可变值使用\n\n\n# React 事件和 DOM 事件的区别\n\n * 所有事件挂载到 document 上 （17以后挂在在root组件上）\n * event 不是原生的，是 SyntheticEvent 合成事件对象\n * dispatchEvent\n\n\n# React 性能优化\n\n * 渲染列表时加 key\n * 自定义事件、DOM 事件及时销毁\n * 合理使用异步组件\n * 减少函数 bind this 的次数\n * 合理使用 SCU PureComponent 和 memo\n * 合理使用 Immutable.js\n\n\n#",normalizedContent:"# react-router 如何配置懒加载\n\n\n\n\n# purecomponent 有何区别\n\n * 实现了浅比较的 shouldcomponentupdate\n * 优化性能\n * 但要结合不可变值使用\n\n\n# react 事件和 dom 事件的区别\n\n * 所有事件挂载到 document 上 （17以后挂在在root组件上）\n * event 不是原生的，是 syntheticevent 合成事件对象\n * dispatchevent\n\n\n# react 性能优化\n\n * 渲染列表时加 key\n * 自定义事件、dom 事件及时销毁\n * 合理使用异步组件\n * 减少函数 bind this 的次数\n * 合理使用 scu purecomponent 和 memo\n * 合理使用 immutable.js\n\n\n#",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"React 面试题5",frontmatter:{title:"React 面试题5",date:"2022-07-04T18:26:50.000Z",permalink:"/pages/d1bd46/",categories:["大前端","React","面试题"],tags:["大前端","React","面试题"]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050205.React%20%E9%9D%A2%E8%AF%95%E9%A2%985.html",relativePath:"10.大前端/1050.React/1050205.React 面试题5.md",key:"v-5c040f5a",path:"/pages/d1bd46/",headers:[{level:3,title:"React 和 Vue 的区别",slug:"react-和-vue-的区别",normalizedTitle:"react 和 vue 的区别",charIndex:2},{level:3,title:"那个更好 ？",slug:"那个更好",normalizedTitle:"那个更好 ？",charIndex:355}],headersStr:"React 和 Vue 的区别 那个更好 ？",content:"# React 和 Vue 的区别\n\n * 都支持组件化\n\n * 都是数据驱动视图\n\n * 都使用 vdom 操作 DOM\n\n * React 使用 JSX 拥抱 JS，Vue 使用模板拥抱 html\n\n * React 函数式编程，Vue 生命力式编程\n   \n   * React 使用 setState 函数式的去改变并最终返回一个试图\n   * Vue 中提前声明 变量，后期监听数据变化，触发组件更新\n\n * React 更多需要自力更生，Vue 把想要的都给你\n   \n   * React 不会给你像watch computed 一些指令给你，更多的是给你一个框架级的能力和一些setState核心函数\n   * Vue 基本功能都以指令的方式去实现了 循环vfor 数据绑定vmode\n\n\n# 那个更好 ？\n\n到最后，真正用React 或者 Vue 做一个项目，业务，复杂的页面的时候。很多都是设计层面的问题\n\n当项目复杂度上来了就不仅仅框架能解决的了的，可能是设计 业务 可能是项目需求变更的情况，甚至是压榨开发工具的情况。\n\n没必要争论那个框架好，想php是世界上最好的语言 这些意义都不是很大。\n\n总之就是考虑你个人情况 和公司团队的情况，综合选择哪一个框架 哪一个成本更低等方面",normalizedContent:"# react 和 vue 的区别\n\n * 都支持组件化\n\n * 都是数据驱动视图\n\n * 都使用 vdom 操作 dom\n\n * react 使用 jsx 拥抱 js，vue 使用模板拥抱 html\n\n * react 函数式编程，vue 生命力式编程\n   \n   * react 使用 setstate 函数式的去改变并最终返回一个试图\n   * vue 中提前声明 变量，后期监听数据变化，触发组件更新\n\n * react 更多需要自力更生，vue 把想要的都给你\n   \n   * react 不会给你像watch computed 一些指令给你，更多的是给你一个框架级的能力和一些setstate核心函数\n   * vue 基本功能都以指令的方式去实现了 循环vfor 数据绑定vmode\n\n\n# 那个更好 ？\n\n到最后，真正用react 或者 vue 做一个项目，业务，复杂的页面的时候。很多都是设计层面的问题\n\n当项目复杂度上来了就不仅仅框架能解决的了的，可能是设计 业务 可能是项目需求变更的情况，甚至是压榨开发工具的情况。\n\n没必要争论那个框架好，想php是世界上最好的语言 这些意义都不是很大。\n\n总之就是考虑你个人情况 和公司团队的情况，综合选择哪一个框架 哪一个成本更低等方面",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"仿jira项目笔记 项目起航：第5章 JWT、用户认证与异步请求",frontmatter:{title:"仿jira项目笔记 项目起航：第5章 JWT、用户认证与异步请求",date:"2022-07-18T22:29:17.000Z",permalink:"/pages/96e286/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050401.%E4%BB%BFjira%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%20%E9%A1%B9%E7%9B%AE%E8%B5%B7%E8%88%AA%EF%BC%9A%E7%AC%AC5%E7%AB%A0%20JWT%E3%80%81%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html",relativePath:"10.大前端/1050.React/1050401.仿jira项目笔记 项目起航：第5章 JWT、用户认证与异步请求.md",key:"v-5cc78d4e",path:"/pages/96e286/",headers:[{level:3,title:"5-7 用fetch抽象通用HTTP请求方法，增强通用性",slug:"_5-7-用fetch抽象通用http请求方法-增强通用性",normalizedTitle:"5-7 用fetch抽象通用http请求方法，增强通用性",charIndex:758},{level:3,title:"5-8 用useHttp管理JWT和登录状态，保持登录状态",slug:"_5-8-用usehttp管理jwt和登录状态-保持登录状态",normalizedTitle:"5-8 用usehttp管理jwt和登录状态，保持登录状态",charIndex:791},{level:3,title:"5-9 TS的联合类型、Partial和Omit介绍",slug:"_5-9-ts的联合类型、partial和omit介绍",normalizedTitle:"5-9 ts的联合类型、partial和omit介绍",charIndex:872}],headersStr:"5-7 用fetch抽象通用HTTP请求方法，增强通用性 5-8 用useHttp管理JWT和登录状态，保持登录状态 5-9 TS的联合类型、Partial和Omit介绍",content:'service-work 代理\n\nnpx imooc-jira-tool\n\n修改src/index.ts\n\nimport React from "react";\nimport ReactDOM from "react-dom";\nimport "./index.css";\nimport App from "./App";\nimport reportWebVitals from "./reportWebVitals";\nimport { loadDevTools } from "jira-dev-tool";\n\nloadDevTools(() =>\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById("root")\n  )\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n如果遇到这个错误，需要执行下命令\n\n\n\nnpx msw init public\n\n注册用户 /login 改为 /register\n\n\n# 5-7 用fetch抽象通用HTTP请求方法，增强通用性\n\n\n# 5-8 用useHttp管理JWT和登录状态，保持登录状态\n\nParameters<typeof http> // 获取http方法入参类型 \n\n\n1\n\n\n\n# 5-9 TS的联合类型、Partial和Omit介绍\n\n * 联合类型\n\nlet myFavoriteNumber: string | number | {}\n\n\n1\n\n * 交叉类型 &\n * 类型别名\n\ninterface 没法实现 Utility type：\n\n如：Parameters<typeof *>\n\nUtility type 就是通过泛型传入其他类型 然后对这个类型进行某种操作\n\n如：对下面类型的所有参数都变成可选类型\n\ntype Person = {\n\tname: string;\n\tage: number\n}\n// 对类型的所有参数都变成可选类型\nconst XiaoMing: Partial<Person> = {name: \'xiaoming\'}\n\n// 只需要大多数属性 去掉小部分属性\nconst shenMiRen: Omit<Person, \'name\'>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nPartial 的实现\n\ntype Partial<T> = {\n  [p in keyof T]?: T[P] \n}\n\n\n1\n2\n3\n\n\n问题\n\n\n\n对象为空，因为对象值有很多类型 如对方法结构是不成立的\n\n如果需要明确的键值对 可以这样\n\nexport const cleanObject = (object: {[key: string]: unknown}) => {...}\n\n\n1\n',normalizedContent:'service-work 代理\n\nnpx imooc-jira-tool\n\n修改src/index.ts\n\nimport react from "react";\nimport reactdom from "react-dom";\nimport "./index.css";\nimport app from "./app";\nimport reportwebvitals from "./reportwebvitals";\nimport { loaddevtools } from "jira-dev-tool";\n\nloaddevtools(() =>\n  reactdom.render(\n    <react.strictmode>\n      <app />\n    </react.strictmode>,\n    document.getelementbyid("root")\n  )\n);\n\n// if you want to start measuring performance in your app, pass a function\n// to log results (for example: reportwebvitals(console.log))\n// or send to an analytics endpoint. learn more: https://bit.ly/cra-vitals\nreportwebvitals();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n如果遇到这个错误，需要执行下命令\n\n\n\nnpx msw init public\n\n注册用户 /login 改为 /register\n\n\n# 5-7 用fetch抽象通用http请求方法，增强通用性\n\n\n# 5-8 用usehttp管理jwt和登录状态，保持登录状态\n\nparameters<typeof http> // 获取http方法入参类型 \n\n\n1\n\n\n\n# 5-9 ts的联合类型、partial和omit介绍\n\n * 联合类型\n\nlet myfavoritenumber: string | number | {}\n\n\n1\n\n * 交叉类型 &\n * 类型别名\n\ninterface 没法实现 utility type：\n\n如：parameters<typeof *>\n\nutility type 就是通过泛型传入其他类型 然后对这个类型进行某种操作\n\n如：对下面类型的所有参数都变成可选类型\n\ntype person = {\n\tname: string;\n\tage: number\n}\n// 对类型的所有参数都变成可选类型\nconst xiaoming: partial<person> = {name: \'xiaoming\'}\n\n// 只需要大多数属性 去掉小部分属性\nconst shenmiren: omit<person, \'name\'>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\npartial 的实现\n\ntype partial<t> = {\n  [p in keyof t]?: t[p] \n}\n\n\n1\n2\n3\n\n\n问题\n\n\n\n对象为空，因为对象值有很多类型 如对方法结构是不成立的\n\n如果需要明确的键值对 可以这样\n\nexport const cleanobject = (object: {[key: string]: unknown}) => {...}\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"仿jira项目笔记 项目起航：项目初始化与配置",frontmatter:{title:"仿jira项目笔记 项目起航：项目初始化与配置",date:"2022-07-18T22:29:17.000Z",permalink:"/pages/bb30f8/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050401.%E4%BB%BFjira%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%20%E9%A1%B9%E7%9B%AE%E8%B5%B7%E8%88%AA%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E9%85%8D%E7%BD%AE.html",relativePath:"10.大前端/1050.React/1050401.仿jira项目笔记 项目起航：项目初始化与配置.md",key:"v-38307c66",path:"/pages/bb30f8/",headers:[{level:2,title:"项目初始化",slug:"项目初始化",normalizedTitle:"项目初始化",charIndex:2},{level:3,title:"mock",slug:"mock",normalizedTitle:"mock",charIndex:12},{level:3,title:"prettier",slug:"prettier",normalizedTitle:"prettier",charIndex:34},{level:4,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:46},{level:4,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:85},{level:4,title:"配合eslint使用",slug:"配合eslint使用",normalizedTitle:"配合eslint使用",charIndex:192},{level:4,title:"配合 git hook",slug:"配合-git-hook",normalizedTitle:"配合 git hook",charIndex:390}],headersStr:"项目初始化 mock prettier 安装 配置 配合eslint使用 配合 git hook",content:'# 项目初始化\n\n\n# mock\n\njson-server\n\n\n# prettier\n\n# 安装\n\nyarn add --dev --exact prettier\n\n# 配置\n\n添加配置文件\n\necho {}> .prettierrc.json\n\n添加.prettierignore文件\n\n# Ignore artifacts:\nbuild\ncoverage\n\n\n1\n2\n3\n\n\n# 配合eslint使用\n\n安装依赖\n\nyarn add eslint-config-prettier -D\n\n配置package.json\n\n  "eslintConfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest",\n      "prettier"\n    ]\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 配合 git hook\n\nyarn add --dev husky lint-staged\nnpx husky install\nnpm set-script prepare "husky install"\nnpx husky add .husky/pre-commit "npx lint-staged"\n\n\n1\n2\n3\n4\n\n\n配置lint-staged\n\n\n\n\n1\n',normalizedContent:'# 项目初始化\n\n\n# mock\n\njson-server\n\n\n# prettier\n\n# 安装\n\nyarn add --dev --exact prettier\n\n# 配置\n\n添加配置文件\n\necho {}> .prettierrc.json\n\n添加.prettierignore文件\n\n# ignore artifacts:\nbuild\ncoverage\n\n\n1\n2\n3\n\n\n# 配合eslint使用\n\n安装依赖\n\nyarn add eslint-config-prettier -d\n\n配置package.json\n\n  "eslintconfig": {\n    "extends": [\n      "react-app",\n      "react-app/jest",\n      "prettier"\n    ]\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 配合 git hook\n\nyarn add --dev husky lint-staged\nnpx husky install\nnpm set-script prepare "husky install"\nnpx husky add .husky/pre-commit "npx lint-staged"\n\n\n1\n2\n3\n4\n\n\n配置lint-staged\n\n\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"第6章 CSS 其实很简单 - 用 CSS-in-JS 添加样式",frontmatter:{title:"第6章 CSS 其实很简单 - 用 CSS-in-JS 添加样式",date:"2022-07-25T23:52:50.000Z",permalink:"/pages/e398d0/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050406.%E7%AC%AC6%E7%AB%A0%20CSS%20%E5%85%B6%E5%AE%9E%E5%BE%88%E7%AE%80%E5%8D%95%20-%20%E7%94%A8%20CSS-in-JS%20%E6%B7%BB%E5%8A%A0%E6%A0%B7%E5%BC%8F.html",relativePath:"10.大前端/1050.React/1050406.第6章 CSS 其实很简单 - 用 CSS-in-JS 添加样式.md",key:"v-2bd8c78e",path:"/pages/e398d0/",headersStr:null,content:"第6章 CSS 其实很简单 - 用 CSS-in-JS 添加样式\n\nemotion\n\nhttps://github.com/emotion-js/emotion\n\nvscode 插件\n\n名称: vscode-styled-components\nID: styled-components.vscode-styled-components\n说明: Syntax highlighting for styled-components\n版本: 1.7.4\n发布者: Styled Components\nVS Marketplace 链接: https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"第6章 css 其实很简单 - 用 css-in-js 添加样式\n\nemotion\n\nhttps://github.com/emotion-js/emotion\n\nvscode 插件\n\n名称: vscode-styled-components\nid: styled-components.vscode-styled-components\n说明: syntax highlighting for styled-components\n版本: 1.7.4\n发布者: styled components\nvs marketplace 链接: https://marketplace.visualstudio.com/items?itemname=styled-components.vscode-styled-components\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"第8章 Hook，路由，与 URL 状态管理",frontmatter:{title:"第8章 Hook，路由，与 URL 状态管理",date:"2022-07-25T23:52:50.000Z",permalink:"/pages/a9bba7/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050408.%E7%AC%AC8%E7%AB%A0%20Hook%EF%BC%8C%E8%B7%AF%E7%94%B1%EF%BC%8C%E4%B8%8E%20URL%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html",relativePath:"10.大前端/1050.React/1050408.第8章 Hook，路由，与 URL 状态管理.md",key:"v-5492dfdc",path:"/pages/a9bba7/",headers:[{level:2,title:"⽤useRef实现useDocumentTitle - useRef与Hook 闭包详解",slug:"用useref实现usedocumenttitle-useref与hook-闭包详解",normalizedTitle:"⽤useref实现usedocumenttitle - useref与hook 闭包详解",charIndex:2},{level:2,title:"添加项目列表和项目详情路由",slug:"添加项目列表和项目详情路由",normalizedTitle:"添加项目列表和项目详情路由",charIndex:831},{level:3,title:"安装react-router",slug:"安装react-router",normalizedTitle:"安装react-router",charIndex:849},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:894}],headersStr:"⽤useRef实现useDocumentTitle - useRef与Hook 闭包详解 添加项目列表和项目详情路由 安装react-router 使用",content:'# ⽤useRef实现useDocumentTitle - useRef与Hook 闭包详解\n\n闭包与React hook 可看我另外一篇文章《react hook 与 闭包》\n\n// src/screens/project-list/index.tsx\nimport { useDebounce, useDocumentTitle } from "../../utils";\n\n...\nexport const ProjectListScreen = () => {\n  useDocumentTitle(\'项目列表\', false)\n  ...\n  \n  \n  \n// src/utils/index.ts\nexport const useDocumentTitle = (\n  title: string,\n  keepOnUnmount: boolean = true\n) => {\n  const oldTitle = useRef(document.title).current;\n  // 页面加载时: 旧title\n  // 加载后：新title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  useEffect(() => {\n    return () => {\n      if (!keepOnUnmount) {\n        // 如果不指定依赖，读到的就是旧title\n        document.title = oldTitle;\n      }\n    };\n  }, [oldTitle, keepOnUnmount]);\n};\n\n  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 添加项目列表和项目详情路由\n\n\n# 安装react-router\n\nyarn add react-router -S\n\n\n# 使用\n\n// src/authenticated-app.tsx\nimport { Routes, Route } from "react-router";\n\n...\nexport const AuthentictedApp = () => {\n  return (\n    <Container>\n      <PageHeader></PageHeader>\n      <Routes>\n        <Route path=\'/project\' element={<ProjectListScreen />} />\n        <Route path=\'/project/:projectId/*\' element={<ProjectScreen />} />\n      </Routes>\n    </Container>\n  );\n};\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n新增项目详情页面\n\n// src/authenticated-app.tsx\n...\nimport { ProjectScreen } from "screens/project";\n...\n\n\n// src/screens/project/index.tsx\nimport React from "react"\n\nexport const ProjectScreen = () => {\n    return <div>project</div>\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n',normalizedContent:'# ⽤useref实现usedocumenttitle - useref与hook 闭包详解\n\n闭包与react hook 可看我另外一篇文章《react hook 与 闭包》\n\n// src/screens/project-list/index.tsx\nimport { usedebounce, usedocumenttitle } from "../../utils";\n\n...\nexport const projectlistscreen = () => {\n  usedocumenttitle(\'项目列表\', false)\n  ...\n  \n  \n  \n// src/utils/index.ts\nexport const usedocumenttitle = (\n  title: string,\n  keeponunmount: boolean = true\n) => {\n  const oldtitle = useref(document.title).current;\n  // 页面加载时: 旧title\n  // 加载后：新title\n  useeffect(() => {\n    document.title = title;\n  }, [title]);\n\n  useeffect(() => {\n    return () => {\n      if (!keeponunmount) {\n        // 如果不指定依赖，读到的就是旧title\n        document.title = oldtitle;\n      }\n    };\n  }, [oldtitle, keeponunmount]);\n};\n\n  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 添加项目列表和项目详情路由\n\n\n# 安装react-router\n\nyarn add react-router -s\n\n\n# 使用\n\n// src/authenticated-app.tsx\nimport { routes, route } from "react-router";\n\n...\nexport const authentictedapp = () => {\n  return (\n    <container>\n      <pageheader></pageheader>\n      <routes>\n        <route path=\'/project\' element={<projectlistscreen />} />\n        <route path=\'/project/:projectid/*\' element={<projectscreen />} />\n      </routes>\n    </container>\n  );\n};\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n新增项目详情页面\n\n// src/authenticated-app.tsx\n...\nimport { projectscreen } from "screens/project";\n...\n\n\n// src/screens/project/index.tsx\nimport react from "react"\n\nexport const projectscreen = () => {\n    return <div>project</div>\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"pro-components 源码学习",frontmatter:{title:"pro-components 源码学习",date:"2023-09-11T23:46:37.000Z",permalink:"/pages/82ebb2/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050501.pro-components%20%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0.html",relativePath:"10.大前端/1050.React/1050501.pro-components 源码学习.md",key:"v-f23f5676",path:"/pages/82ebb2/",headers:[{level:2,title:"Description",slug:"description",normalizedTitle:"description",charIndex:2}],headersStr:"Description",content:"# Description",normalizedContent:"# description",charsets:{},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"ant-design Spin组件封装",frontmatter:{title:"ant-design Spin组件封装",date:"2023-03-29T20:43:49.000Z",permalink:"/pages/88bcac/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050600.ant-design%20Spin%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85.html",relativePath:"10.大前端/1050.React/1050600.ant-design Spin组件封装.md",key:"v-411c38d0",path:"/pages/88bcac/",headers:[{level:2,title:"何时使用",slug:"何时使用",normalizedTitle:"何时使用",charIndex:30}],headersStr:"何时使用",content:"# Spin加载中\n\n用于页面和区块的加载中状态。\n\n\n# 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n结合后端数据, 请求hooks 做加载效果 数据校验,过滤操作\n\n请求hooks封装( 最终效果与ahooks中 useRequest一致)\n\nconst {data, loading, error} = useRequest()\n\n\n1\n\n\nconst queryResult = useRequest()\n\n\n1\n",normalizedContent:"# spin加载中\n\n用于页面和区块的加载中状态。\n\n\n# 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n结合后端数据, 请求hooks 做加载效果 数据校验,过滤操作\n\n请求hooks封装( 最终效果与ahooks中 userequest一致)\n\nconst {data, loading, error} = userequest()\n\n\n1\n\n\nconst queryresult = userequest()\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{frontmatter:{title:null,date:"2023-02-08T23:40:22.000Z",permalink:"/pages/7db6a2/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1050851.React%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",relativePath:"10.大前端/1050.React/1050851.React 生命周期.md",key:"v-2f349092",path:"/pages/7db6a2/",headers:[{level:3,title:"生命周期背后的设计思想：把握 React 中的“大方向”",slug:"生命周期背后的设计思想-把握-react-中的-大方向",normalizedTitle:"生命周期背后的设计思想：把握 react 中的“大方向”",charIndex:372},{level:4,title:"虚拟 DOM：核心算法的基石",slug:"虚拟-dom-核心算法的基石",normalizedTitle:"虚拟 dom：核心算法的基石",charIndex:577},{level:4,title:"组件化：工程化思想在框架中的落地",slug:"组件化-工程化思想在框架中的落地",normalizedTitle:"组件化：工程化思想在框架中的落地",charIndex:935},{level:4,title:"生命周期方法的本质：组件的“灵魂”与“躯干”",slug:"生命周期方法的本质-组件的-灵魂-与-躯干",normalizedTitle:"生命周期方法的本质：组件的“灵魂”与“躯干”",charIndex:1361},{level:3,title:"拆解 React 生命周期：从 React 15 说起",slug:"拆解-react-生命周期-从-react-15-说起",normalizedTitle:"拆解 react 生命周期：从 react 15 说起",charIndex:2215},{level:4,title:"Mounting 阶段：组件的初始化渲染（挂载）",slug:"mounting-阶段-组件的初始化渲染-挂载",normalizedTitle:"mounting 阶段：组件的初始化渲染（挂载）",charIndex:4895},{level:4,title:"Updating 阶段：组件的更新",slug:"updating-阶段-组件的更新",normalizedTitle:"updating 阶段：组件的更新",charIndex:5791},{level:4,title:"Unmounting 阶段：组件的卸载",slug:"unmounting-阶段-组件的卸载",normalizedTitle:"unmounting 阶段：组件的卸载",charIndex:9220},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:327}],headersStr:"生命周期背后的设计思想：把握 React 中的“大方向” 虚拟 DOM：核心算法的基石 组件化：工程化思想在框架中的落地 生命周期方法的本质：组件的“灵魂”与“躯干” 拆解 React 生命周期：从 React 15 说起 Mounting 阶段：组件的初始化渲染（挂载） Updating 阶段：组件的更新 Unmounting 阶段：组件的卸载 总结",content:'React 生命周期已经是一个老生常谈的话题了，几乎没有哪一门 React 入门教材会省略对组件生命周期的介绍。然而，入门教材在设计上往往追求的是“简单省事、迅速上手”，这就导致许多同学对于生命周期知识的刻板印象为“背就完了、别想太多”。\n\n“背就完了”这样简单粗暴的学习方式，或许可以帮助你理解“What to do”，到达“How to do”，但却不能帮助你去思考和认知“Why to do”。作为一个专业的 React 开发者，我们必须要求自己在知其然的基础上，知其所以然。\n\n在本课时和下一个课时，我将抱着帮你做到“知其所以然”的目的，以 React 的基本原理为引子，对 React 15、React 16 两个版本的生命周期进行探讨、比对和总结，通过搞清楚一个又一个的“Why”，来帮你建立系统而完善的生命周期知识体系。\n\n\n# 生命周期背后的设计思想：把握 React 中的“大方向”\n\n在介绍具体的生命周期之前，我想先带你初步理解 React 框架中的一些关键的设计思想，以便为你后续的学习提供不可或缺的“加速度”。\n\n如果你经常翻阅 React 官网或者 React 官方的一些文章，你会发现“组件”和“虚拟 DOM”这两个词的出镜率是非常高的，它们是 React 基本原理中极为关键的两个概念，也是我们这个小节的学习切入点。\n\n# 虚拟 DOM：核心算法的基石\n\n通过 01 课时的学习，你已经知晓了虚拟 DOM 节点的基本形态，现在我们需要简单了解下虚拟 DOM 在整个 React 工作流中的作用。\n\n组件在初始化时，会通过调用生命周期中的 render 方法，生成虚拟 DOM，然后再通过调用 ReactDOM.render 方法，实现虚拟 DOM 到真实 DOM 的转换。\n\n当组件更新时，会再次通过调用 render 方法生成新的虚拟 DOM，然后借助 diff（这是一个非常关键的算法，我将在“模块二：核心原理”重点讲解）定位出两次虚拟 DOM 的差异，从而针对发生变化的真实 DOM 作定向更新。\n\n以上就是 React 框架核心算法的大致流程。对于这套关键的工作流来说，“虚拟 DOM”是所有操作的大前提，是核心算法的基石。\n\n# 组件化：工程化思想在框架中的落地\n\n组件化是一种优秀的软件设计思想，也是 React 团队在研发效能方面所做的一个重要的努力。\n\n在一个 React 项目中，几乎所有的可见/不可见的内容都可以被抽离为各种各样的组件，每个组件既是“封闭”的，也是“开放”的。\n\n所谓“封闭”，主要是针对“渲染工作流”（指从组件数据改变到组件实际更新发生的过程）来说的。在组件自身的渲染工作流中，每个组件都只处理它内部的渲染逻辑。在没有数据流交互的情况下，组件与组件之间可以做到“各自为政”。\n\n而所谓“开放”，则是针对组件间通信来说的。React 允许开发者基于“单向数据流”的原则完成组件间的通信。而组件之间的通信又将改变通信双方/某一方内部的数据，进而对渲染结果构成影响。所以说在数据这个“红娘”的牵线搭桥之下，组件之间又是彼此开放的，是可以相互影响的。\n\n这一“开放”与“封闭”兼具的特性，使得 React 组件既专注又灵活，具备高度的可重用性和可维护性。\n\n# 生命周期方法的本质：组件的“灵魂”与“躯干”\n\n之前我曾经在社区读过一篇文章，文中将 render 方法形容为 React 组件的“灵魂”。当时我对这句话产生了非常强烈的共鸣，这里我就想以这个曾经打动过我的比喻为引子，帮助你从宏观上建立对 React 生命周期的感性认知。\n\n注意，这里提到的 render 方法，和我们 01 课时所说的 ReactDOM.render 可不是一个东西，它指的是 React 组件内部的这个生命周期方法：\n\nclass LifeCycle extends React.Component {\n\nrender() { console.log("render方法执行"); return ( <div className="container"> this is content </div> ); } } \n\n\n1\n\n\n前面咱们介绍了虚拟 DOM、组件化，倘若把这两块知识整合一下，你就会发现这两个概念似乎都在围着 render 这个生命周期打转：虚拟 DOM 自然不必多说，它的生成都要仰仗 render；而组件化概念中所提及的“渲染工作流”，这里指的是从组件数据改变到组件实际更新发生的过程，这个过程的实现同样离不开 render。\n\n由此看来，render 方法在整个组件生命周期中确实举足轻重，它担得起“灵魂”这个有分量的比喻。那么如果将 render 方法比作组件的“灵魂”，render 之外的生命周期方法就完全可以理解为是组件的“躯干”。\n\n“躯干”未必总是会做具体的事情（比如说我们可以选择性地省略对 render 之外的任何生命周期方法内容的编写），而“灵魂”却总是充实的（render 函数却坚决不能省略）；倘若“躯干”做了点什么，往往都会直接或间接地影响到“灵魂”（因为即便是 render 之外的生命周期逻辑，也大部分是在为 render 层面的效果服务）；“躯干”和“灵魂”一起，共同构成了 React 组件完整而不可分割的“生命时间轴”。\n\n\n# 拆解 React 生命周期：从 React 15 说起\n\n我发现时下许多资料在讲解 React 生命周期时，喜欢直接拿 React 16 开刀。这样做虽然省事儿，却也模糊掉了新老生命周期变化背后的“Why”（关于两者的差异，我们会在“03 课时”中详细讲解）。这里为了把这个“Why”拎出来，我将首先带你认识 React 15 的生命周期流程。\n\n在 React 15 中，大家需要关注以下几个生命周期方法：\n\nconstructor()\ncomponentWillReceiveProps()\nshouldComponentUpdate()\ncomponentWillMount()\ncomponentWillUpdate()\ncomponentDidUpdate()\ncomponentDidMount()\nrender()\ncomponentWillUnmount()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 如果你接触 React 足够早，或许会记得还有 getDefaultProps 和 getInitState 这两个方法，它们都是 React.createClass() 模式下初始化数据的方法。由于这种写法在 ES6 普及后已经不常见，这里不再详细展开。\n\n这些生命周期方法是如何彼此串联、相互依存的呢？这里我为你总结了一张大图：\n\n\n\n接下来，我就围绕这张大图，分阶段讨论组件生命周期的运作规律。在学习的过程中，下面这个 Demo 可以帮助你具体地验证每个阶段的工作流程：\n\nimport React from "react"; import ReactDOM from "react-dom"; // 定义子组件 class LifeCycle extends React.Component { constructor(props) { console.log("进入constructor"); super(props); // state 可以在 constructor 里初始化 this.state = { text: "子组件的文本" }; } // 初始化渲染时调用 componentWillMount() { console.log("componentWillMount方法执行"); } // 初始化渲染时调用 componentDidMount() { console.log("componentDidMount方法执行"); } // 父组件修改组件的props时会调用 componentWillReceiveProps(nextProps) { console.log("componentWillReceiveProps方法执行"); } // 组件更新时调用 shouldComponentUpdate(nextProps, nextState) { console.log("shouldComponentUpdate方法执行"); return true; } // 组件更新时调用 componentWillUpdate(nextProps, nextState) { console.log("componentWillUpdate方法执行"); } // 组件更新后调用 componentDidUpdate(preProps, preState) { console.log("componentDidUpdate方法执行"); } // 组件卸载时调用 componentWillUnmount() { console.log("子组件的componentWillUnmount方法执行"); } // 点击按钮，修改子组件文本内容的方法 changeText = () => { this.setState({ text: "修改后的子组件文本" }); }; render() { console.log("render方法执行"); return (\n\n修改子组件文本内容\n\n{this.state.text}\n\n{this.props.text}\n\n); } } // 定义 LifeCycle 组件的父组件 class LifeCycleContainer extends React.Component {\n\n\n\n// state 也可以像这样用属性声明的形式初始化 state = { text: "父组件的文本", hideChild: false }; // 点击按钮，修改父组件文本的方法 changeText = () => { this.setState({ text: "修改后的父组件文本" }); }; // 点击按钮，隐藏（卸载）LifeCycle 组件的方法 hideChild = () => { this.setState({ hideChild: true }); }; render() { return ( <div className="fatherContainer"> <button onClick={this.changeText} className="changeText"> 修改父组件文本内容 </button> <button onClick={this.hideChild} className="hideChild"> 隐藏子组件 </button> {this.state.hideChild ? null : <LifeCycle text={this.state.text} />} </div> ); } } ReactDOM.render(<LifeCycleContainer />, document.getElementById("root")); \n\n\n1\n\n\n该入口文件对应的 index.html 中预置了 id 为 root 的真实 DOM 节点作为根节点，body 标签内容如下：\n\n<body>\n  <div id="root"></div>\n</body>\n\n\n1\n2\n3\n\n\n这个 Demo 渲染到浏览器上大概是这样的：\n\n\n\n此处由于我们强调的是对生命周期执行规律的验证，所以样式上从简，你也可以根据自己的喜好添加 CSS 相关的内容。\n\n接下来我们就结合这个 Demo 和开头的生命周期大图，一起来看看挂载、更新、卸载这 3 个阶段，React 组件都经历了哪些事情。\n\n# Mounting 阶段：组件的初始化渲染（挂载）\n\n挂载过程在组件的一生中仅会发生一次，在这个过程中，组件被初始化，然后会被渲染到真实 DOM 里，完成所谓的“首次渲染”。\n\n在挂载阶段，一个 React 组件会按照顺序经历如下图所示的生命周期：\n\n\n\n首先我们来看 constructor 方法，该方法仅仅在挂载的时候被调用一次，我们可以在该方法中对 this.state 进行初始化：\n\nconstructor(props) {\n  console.log("进入constructor");\n  super(props);\n  // state 可以在 constructor 里初始化\n  this.state = { text: "子组件的文本" };\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\ncomponentWillMount、componentDidMount 方法同样只会在挂载阶段被调用一次。其中 componentWillMount 会在执行 render 方法前被触发，一些同学习惯在这个方法里做一些初始化的操作，但这些操作往往会伴随一些风险或者说不必要性（这一点大家先建立认知，具体原因将在“03 课时”展开讲解）。\n\n接下来 render 方法被触发。注意 render 在执行过程中并不会去操作真实 DOM（也就是说不会渲染），它的职能是把需要渲染的内容返回出来。真实 DOM 的渲染工作，在挂载阶段是由 ReactDOM.render 来承接的。\n\ncomponentDidMount 方法在渲染结束后被触发，此时因为真实 DOM 已经挂载到了页面上，我们可以在这个生命周期里执行真实 DOM 相关的操作。此外，类似于异步请求、数据初始化这样的操作也大可以放在这个生命周期来做（侧面印证了 componentWillMount 真的很鸡肋）。\n\n这一整个流程对应的其实就是我们 Demo 页面刚刚打开时，组件完成初始化渲染的过程。下图是 Demo 中的 LifeCycle 组件在挂载过程中控制台的输出，你可以用它来验证挂载过程中生命周期顺序的正确性：\n\n\n\n# Updating 阶段：组件的更新\n\n组件的更新分为两种：一种是由父组件更新触发的更新；另一种是组件自身调用自己的 setState 触发的更新。这两种更新对应的生命周期流程如下图所示：\n\n\n\ncomponentWillReceiProps 到底是由什么触发的？\n\n从图中你可以明显看出，父组件触发的更新和组件自身的更新相比，多出了这样一个生命周期方法：\n\ncomponentWillReceiveProps(nextProps)\n\n\n1\n\n\n在这个生命周期方法里，nextProps 表示的是接收到新 props 内容，而现有的 props （相对于 nextProps 的“旧 props”）我们可以通过 this.props 拿到，由此便能够感知到 props 的变化。\n\n写到这里，就不得不在“变化”这个动作上深挖一下了。我在一些社区文章里，包括一些候选人面试时的回答里，都不约而同地见过/听过这样一种说法：componentWillReceiveProps 是在组件的 props 内容发生了变化时被触发的。\n\n这种说法不够严谨。远的不说，就拿咱们上文给出的 Demo 开刀，该界面的控制台输出在初始化完成后是这样的：\n\n\n\n注意，我们代码里面，LifeCycleContainer 这个父组件传递给子组件 LifeCycle 的 props 只有一个 text：\n\n<LifeCycle text={this.state.text} />\n\n\n1\n\n\n假如我点击“修改父组件文本内容”这个按钮，父组件的 this.state.text 会发生改变，进而带动子组件的 this.props.text 发生改变。此时一定会触发 componentWillReceiveProps 这个生命周期，这是毋庸置疑的：\n\n\n\n但如果我现在对父组件的结构进行一个小小的修改，给它一个和子组件完全无关的 state（this.state.ownText），同时相应地给到一个修改这个 state 的方法（this.changeOwnText），并用一个新的 button 按钮来承接这个触发的动作。\n\n改变后的 LifeCycleContainer 如下所示：\n\n// 定义 LifeCycle 组件的父组件\nclass LifeCycleContainer extends React.Component {\n  // state 也可以像这样用属性声明的形式初始化\n  state = {\n    text: "父组件的文本",\n    // 新增的只与父组件有关的 state\n    ownText: "仅仅和父组件有关的文本",\n    hideChild: false\n  };\n  changeText = () => {\n    this.setState({\n      text: "修改后的父组件文本"\n    });\n  };\n  // 修改 ownText 的方法\n  changeOwnText = () => {\n    this.setState({\n      ownText: "修改后的父组件自有文本"\n    });\n  };\n  hideChild = () => {\n    this.setState({\n      hideChild: true\n    });\n  };\n  render() {\n    return (\n      <div className="fatherContainer">\n        {/* 新的button按钮 */}\n        <button onClick={this.changeOwnText} className="changeText">\n          修改父组件自有文本内容\n        </button>\n        <button onClick={this.changeText} className="changeText">\n          修改父组件文本内容\n        </button>\n        <button onClick={this.hideChild} className="hideChild">\n          隐藏子组件\n        </button>\n        <p> {this.state.ownText} </p>\n        {this.state.hideChild ? null : <LifeCycle text={this.state.text} />}\n      </div>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n新的界面如下图所示：\n\n\n\n可以看到，this.state.ownText 这个状态和子组件完全无关。但是当我点击“修改父组件自有文本内容”这个按钮的时候，componentReceiveProps 仍然被触发了，效果如下图所示：\n\n\n\n耳听为虚，眼见为实。面对这样的运行结果，我不由得要带你复习一下 React 官方文档中的这句话：\n\n\n\ncomponentReceiveProps 并不是由 props 的变化触发的，而是由父组件的更新触发的，这个结论，请你谨记。\n\n组件自身 setState 触发的更新\n\nthis.setState() 调用后导致的更新流程，前面大图中已经有体现，这里我直接沿用上一个 Demo 来做演示。若我们点击上一个 Demo 中的“修改子组件文本内容”这个按钮：\n\n\n\n这个动作将会触发子组件 LifeCycle 自身的更新流程，随之被触发的生命周期函数如下图增加的 console 内容所示：\n\n\n\n先来说说 componentWillUpdate 和 componentDidUpdate 这一对好基友。\n\ncomponentWillUpdate 会在 render 前被触发，它和 componentWillMount 类似，允许你在里面做一些不涉及真实 DOM 操作的准备工作；而 componentDidUpdate 则在组件更新完毕后被触发，和 componentDidMount 类似，这个生命周期也经常被用来处理 DOM 操作。此外，我们也常常将 componentDidUpdate 的执行作为子组件更新完毕的标志通知到父组件。\n\nrender 与性能：初识 shouldComponentUpdate\n\n这里需要重点提一下 shouldComponentUpdate 这个生命周期方法，它的调用形式如下所示：\n\nshouldComponentUpdate(nextProps, nextState)\n\n\n1\n\n\nrender 方法由于伴随着对虚拟 DOM 的构建和对比，过程可以说相当耗时。而在 React 当中，很多时候我们会不经意间就频繁地调用了 render。为了避免不必要的 render 操作带来的性能开销，React 为我们提供了 shouldComponentUpdate 这个口子。\n\nReact 组件会根据 shouldComponentUpdate 的返回值，来决定是否执行该方法之后的生命周期，进而决定是否对组件进行re-render（重渲染）。shouldComponentUpdate 的默认值为 true，也就是说“无条件 re-render”。在实际的开发中，我们往往通过手动往 shouldComponentUpdate 中填充判定逻辑，或者直接在项目中引入 PureComponent 等最佳实践，来实现“有条件的 re-render”。\n\n关于 shouldComponentUpdate 及 PureComponent 对 React 的优化，我们会在后续的性能小节中详细展开。这里你只需要认识到 shouldComponentUpdate 的基本使用及其与 React 性能之间的关联关系即可。\n\n# Unmounting 阶段：组件的卸载\n\n组件的销毁阶段本身是比较简单的，只涉及一个生命周期，如下图所示：\n\n\n\n对应上文的 Demo 来看，我们点击“隐藏子组件”后就可以把 LifeCycle 从父组件中移除掉，进而实现卸载的效果。整个过程如下图所示：\n\n\n\n这个生命周期本身不难理解，我们重点说说怎么触发它。组件销毁的常见原因有以下两个。\n\n * 组件在父组件中被移除了：这种情况相对比较直观，对应的就是我们上图描述的这个过程。\n * 组件中设置了 key 属性，父组件在 render 的过程中，发现 key 值和上一次不一致，那么这个组件就会被干掉。\n\n在本课时，只要能够理解到 1 就可以了。对于 2 这种情况，你只需要先记住有这样一种现象，这就够了。至于组件里面为什么要设置 key，为什么 key 改变后组件就必须被干掉？要回答这个问题，需要你先理解 React 的“调和过程”，而“调和过程”也会是我们第二模块中重点讲解的一个内容。这里我先把这个知识点点出来，方便你定位我们整个知识体系里的重难点。\n\n\n# 总结\n\n在本课时，我们对 React 设计思想中的“虚拟 DOM”和“组件化”这两个关键概念形成了初步的理解，同时也对 React 15 中的生命周期进行了系统的学习和总结。到这里，你已经了解到了 React 生命周期在很长一段“过去”里的形态。\n\n而在 React 16 中，组件的生命周期其实已经发生了一系列的变化。这些变化到底是什么样的，它们背后又蕴含着 React 团队怎样的思量呢？\n\n古人说“以史为镜，可以知兴衰”。在下个课时，我们将一起去“照镜子”，对 React 新旧生命周期进行对比，并探求变化的动机。',normalizedContent:'react 生命周期已经是一个老生常谈的话题了，几乎没有哪一门 react 入门教材会省略对组件生命周期的介绍。然而，入门教材在设计上往往追求的是“简单省事、迅速上手”，这就导致许多同学对于生命周期知识的刻板印象为“背就完了、别想太多”。\n\n“背就完了”这样简单粗暴的学习方式，或许可以帮助你理解“what to do”，到达“how to do”，但却不能帮助你去思考和认知“why to do”。作为一个专业的 react 开发者，我们必须要求自己在知其然的基础上，知其所以然。\n\n在本课时和下一个课时，我将抱着帮你做到“知其所以然”的目的，以 react 的基本原理为引子，对 react 15、react 16 两个版本的生命周期进行探讨、比对和总结，通过搞清楚一个又一个的“why”，来帮你建立系统而完善的生命周期知识体系。\n\n\n# 生命周期背后的设计思想：把握 react 中的“大方向”\n\n在介绍具体的生命周期之前，我想先带你初步理解 react 框架中的一些关键的设计思想，以便为你后续的学习提供不可或缺的“加速度”。\n\n如果你经常翻阅 react 官网或者 react 官方的一些文章，你会发现“组件”和“虚拟 dom”这两个词的出镜率是非常高的，它们是 react 基本原理中极为关键的两个概念，也是我们这个小节的学习切入点。\n\n# 虚拟 dom：核心算法的基石\n\n通过 01 课时的学习，你已经知晓了虚拟 dom 节点的基本形态，现在我们需要简单了解下虚拟 dom 在整个 react 工作流中的作用。\n\n组件在初始化时，会通过调用生命周期中的 render 方法，生成虚拟 dom，然后再通过调用 reactdom.render 方法，实现虚拟 dom 到真实 dom 的转换。\n\n当组件更新时，会再次通过调用 render 方法生成新的虚拟 dom，然后借助 diff（这是一个非常关键的算法，我将在“模块二：核心原理”重点讲解）定位出两次虚拟 dom 的差异，从而针对发生变化的真实 dom 作定向更新。\n\n以上就是 react 框架核心算法的大致流程。对于这套关键的工作流来说，“虚拟 dom”是所有操作的大前提，是核心算法的基石。\n\n# 组件化：工程化思想在框架中的落地\n\n组件化是一种优秀的软件设计思想，也是 react 团队在研发效能方面所做的一个重要的努力。\n\n在一个 react 项目中，几乎所有的可见/不可见的内容都可以被抽离为各种各样的组件，每个组件既是“封闭”的，也是“开放”的。\n\n所谓“封闭”，主要是针对“渲染工作流”（指从组件数据改变到组件实际更新发生的过程）来说的。在组件自身的渲染工作流中，每个组件都只处理它内部的渲染逻辑。在没有数据流交互的情况下，组件与组件之间可以做到“各自为政”。\n\n而所谓“开放”，则是针对组件间通信来说的。react 允许开发者基于“单向数据流”的原则完成组件间的通信。而组件之间的通信又将改变通信双方/某一方内部的数据，进而对渲染结果构成影响。所以说在数据这个“红娘”的牵线搭桥之下，组件之间又是彼此开放的，是可以相互影响的。\n\n这一“开放”与“封闭”兼具的特性，使得 react 组件既专注又灵活，具备高度的可重用性和可维护性。\n\n# 生命周期方法的本质：组件的“灵魂”与“躯干”\n\n之前我曾经在社区读过一篇文章，文中将 render 方法形容为 react 组件的“灵魂”。当时我对这句话产生了非常强烈的共鸣，这里我就想以这个曾经打动过我的比喻为引子，帮助你从宏观上建立对 react 生命周期的感性认知。\n\n注意，这里提到的 render 方法，和我们 01 课时所说的 reactdom.render 可不是一个东西，它指的是 react 组件内部的这个生命周期方法：\n\nclass lifecycle extends react.component {\n\nrender() { console.log("render方法执行"); return ( <div classname="container"> this is content </div> ); } } \n\n\n1\n\n\n前面咱们介绍了虚拟 dom、组件化，倘若把这两块知识整合一下，你就会发现这两个概念似乎都在围着 render 这个生命周期打转：虚拟 dom 自然不必多说，它的生成都要仰仗 render；而组件化概念中所提及的“渲染工作流”，这里指的是从组件数据改变到组件实际更新发生的过程，这个过程的实现同样离不开 render。\n\n由此看来，render 方法在整个组件生命周期中确实举足轻重，它担得起“灵魂”这个有分量的比喻。那么如果将 render 方法比作组件的“灵魂”，render 之外的生命周期方法就完全可以理解为是组件的“躯干”。\n\n“躯干”未必总是会做具体的事情（比如说我们可以选择性地省略对 render 之外的任何生命周期方法内容的编写），而“灵魂”却总是充实的（render 函数却坚决不能省略）；倘若“躯干”做了点什么，往往都会直接或间接地影响到“灵魂”（因为即便是 render 之外的生命周期逻辑，也大部分是在为 render 层面的效果服务）；“躯干”和“灵魂”一起，共同构成了 react 组件完整而不可分割的“生命时间轴”。\n\n\n# 拆解 react 生命周期：从 react 15 说起\n\n我发现时下许多资料在讲解 react 生命周期时，喜欢直接拿 react 16 开刀。这样做虽然省事儿，却也模糊掉了新老生命周期变化背后的“why”（关于两者的差异，我们会在“03 课时”中详细讲解）。这里为了把这个“why”拎出来，我将首先带你认识 react 15 的生命周期流程。\n\n在 react 15 中，大家需要关注以下几个生命周期方法：\n\nconstructor()\ncomponentwillreceiveprops()\nshouldcomponentupdate()\ncomponentwillmount()\ncomponentwillupdate()\ncomponentdidupdate()\ncomponentdidmount()\nrender()\ncomponentwillunmount()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 如果你接触 react 足够早，或许会记得还有 getdefaultprops 和 getinitstate 这两个方法，它们都是 react.createclass() 模式下初始化数据的方法。由于这种写法在 es6 普及后已经不常见，这里不再详细展开。\n\n这些生命周期方法是如何彼此串联、相互依存的呢？这里我为你总结了一张大图：\n\n\n\n接下来，我就围绕这张大图，分阶段讨论组件生命周期的运作规律。在学习的过程中，下面这个 demo 可以帮助你具体地验证每个阶段的工作流程：\n\nimport react from "react"; import reactdom from "react-dom"; // 定义子组件 class lifecycle extends react.component { constructor(props) { console.log("进入constructor"); super(props); // state 可以在 constructor 里初始化 this.state = { text: "子组件的文本" }; } // 初始化渲染时调用 componentwillmount() { console.log("componentwillmount方法执行"); } // 初始化渲染时调用 componentdidmount() { console.log("componentdidmount方法执行"); } // 父组件修改组件的props时会调用 componentwillreceiveprops(nextprops) { console.log("componentwillreceiveprops方法执行"); } // 组件更新时调用 shouldcomponentupdate(nextprops, nextstate) { console.log("shouldcomponentupdate方法执行"); return true; } // 组件更新时调用 componentwillupdate(nextprops, nextstate) { console.log("componentwillupdate方法执行"); } // 组件更新后调用 componentdidupdate(preprops, prestate) { console.log("componentdidupdate方法执行"); } // 组件卸载时调用 componentwillunmount() { console.log("子组件的componentwillunmount方法执行"); } // 点击按钮，修改子组件文本内容的方法 changetext = () => { this.setstate({ text: "修改后的子组件文本" }); }; render() { console.log("render方法执行"); return (\n\n修改子组件文本内容\n\n{this.state.text}\n\n{this.props.text}\n\n); } } // 定义 lifecycle 组件的父组件 class lifecyclecontainer extends react.component {\n\n\n\n// state 也可以像这样用属性声明的形式初始化 state = { text: "父组件的文本", hidechild: false }; // 点击按钮，修改父组件文本的方法 changetext = () => { this.setstate({ text: "修改后的父组件文本" }); }; // 点击按钮，隐藏（卸载）lifecycle 组件的方法 hidechild = () => { this.setstate({ hidechild: true }); }; render() { return ( <div classname="fathercontainer"> <button onclick={this.changetext} classname="changetext"> 修改父组件文本内容 </button> <button onclick={this.hidechild} classname="hidechild"> 隐藏子组件 </button> {this.state.hidechild ? null : <lifecycle text={this.state.text} />} </div> ); } } reactdom.render(<lifecyclecontainer />, document.getelementbyid("root")); \n\n\n1\n\n\n该入口文件对应的 index.html 中预置了 id 为 root 的真实 dom 节点作为根节点，body 标签内容如下：\n\n<body>\n  <div id="root"></div>\n</body>\n\n\n1\n2\n3\n\n\n这个 demo 渲染到浏览器上大概是这样的：\n\n\n\n此处由于我们强调的是对生命周期执行规律的验证，所以样式上从简，你也可以根据自己的喜好添加 css 相关的内容。\n\n接下来我们就结合这个 demo 和开头的生命周期大图，一起来看看挂载、更新、卸载这 3 个阶段，react 组件都经历了哪些事情。\n\n# mounting 阶段：组件的初始化渲染（挂载）\n\n挂载过程在组件的一生中仅会发生一次，在这个过程中，组件被初始化，然后会被渲染到真实 dom 里，完成所谓的“首次渲染”。\n\n在挂载阶段，一个 react 组件会按照顺序经历如下图所示的生命周期：\n\n\n\n首先我们来看 constructor 方法，该方法仅仅在挂载的时候被调用一次，我们可以在该方法中对 this.state 进行初始化：\n\nconstructor(props) {\n  console.log("进入constructor");\n  super(props);\n  // state 可以在 constructor 里初始化\n  this.state = { text: "子组件的文本" };\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\ncomponentwillmount、componentdidmount 方法同样只会在挂载阶段被调用一次。其中 componentwillmount 会在执行 render 方法前被触发，一些同学习惯在这个方法里做一些初始化的操作，但这些操作往往会伴随一些风险或者说不必要性（这一点大家先建立认知，具体原因将在“03 课时”展开讲解）。\n\n接下来 render 方法被触发。注意 render 在执行过程中并不会去操作真实 dom（也就是说不会渲染），它的职能是把需要渲染的内容返回出来。真实 dom 的渲染工作，在挂载阶段是由 reactdom.render 来承接的。\n\ncomponentdidmount 方法在渲染结束后被触发，此时因为真实 dom 已经挂载到了页面上，我们可以在这个生命周期里执行真实 dom 相关的操作。此外，类似于异步请求、数据初始化这样的操作也大可以放在这个生命周期来做（侧面印证了 componentwillmount 真的很鸡肋）。\n\n这一整个流程对应的其实就是我们 demo 页面刚刚打开时，组件完成初始化渲染的过程。下图是 demo 中的 lifecycle 组件在挂载过程中控制台的输出，你可以用它来验证挂载过程中生命周期顺序的正确性：\n\n\n\n# updating 阶段：组件的更新\n\n组件的更新分为两种：一种是由父组件更新触发的更新；另一种是组件自身调用自己的 setstate 触发的更新。这两种更新对应的生命周期流程如下图所示：\n\n\n\ncomponentwillreceiprops 到底是由什么触发的？\n\n从图中你可以明显看出，父组件触发的更新和组件自身的更新相比，多出了这样一个生命周期方法：\n\ncomponentwillreceiveprops(nextprops)\n\n\n1\n\n\n在这个生命周期方法里，nextprops 表示的是接收到新 props 内容，而现有的 props （相对于 nextprops 的“旧 props”）我们可以通过 this.props 拿到，由此便能够感知到 props 的变化。\n\n写到这里，就不得不在“变化”这个动作上深挖一下了。我在一些社区文章里，包括一些候选人面试时的回答里，都不约而同地见过/听过这样一种说法：componentwillreceiveprops 是在组件的 props 内容发生了变化时被触发的。\n\n这种说法不够严谨。远的不说，就拿咱们上文给出的 demo 开刀，该界面的控制台输出在初始化完成后是这样的：\n\n\n\n注意，我们代码里面，lifecyclecontainer 这个父组件传递给子组件 lifecycle 的 props 只有一个 text：\n\n<lifecycle text={this.state.text} />\n\n\n1\n\n\n假如我点击“修改父组件文本内容”这个按钮，父组件的 this.state.text 会发生改变，进而带动子组件的 this.props.text 发生改变。此时一定会触发 componentwillreceiveprops 这个生命周期，这是毋庸置疑的：\n\n\n\n但如果我现在对父组件的结构进行一个小小的修改，给它一个和子组件完全无关的 state（this.state.owntext），同时相应地给到一个修改这个 state 的方法（this.changeowntext），并用一个新的 button 按钮来承接这个触发的动作。\n\n改变后的 lifecyclecontainer 如下所示：\n\n// 定义 lifecycle 组件的父组件\nclass lifecyclecontainer extends react.component {\n  // state 也可以像这样用属性声明的形式初始化\n  state = {\n    text: "父组件的文本",\n    // 新增的只与父组件有关的 state\n    owntext: "仅仅和父组件有关的文本",\n    hidechild: false\n  };\n  changetext = () => {\n    this.setstate({\n      text: "修改后的父组件文本"\n    });\n  };\n  // 修改 owntext 的方法\n  changeowntext = () => {\n    this.setstate({\n      owntext: "修改后的父组件自有文本"\n    });\n  };\n  hidechild = () => {\n    this.setstate({\n      hidechild: true\n    });\n  };\n  render() {\n    return (\n      <div classname="fathercontainer">\n        {/* 新的button按钮 */}\n        <button onclick={this.changeowntext} classname="changetext">\n          修改父组件自有文本内容\n        </button>\n        <button onclick={this.changetext} classname="changetext">\n          修改父组件文本内容\n        </button>\n        <button onclick={this.hidechild} classname="hidechild">\n          隐藏子组件\n        </button>\n        <p> {this.state.owntext} </p>\n        {this.state.hidechild ? null : <lifecycle text={this.state.text} />}\n      </div>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n新的界面如下图所示：\n\n\n\n可以看到，this.state.owntext 这个状态和子组件完全无关。但是当我点击“修改父组件自有文本内容”这个按钮的时候，componentreceiveprops 仍然被触发了，效果如下图所示：\n\n\n\n耳听为虚，眼见为实。面对这样的运行结果，我不由得要带你复习一下 react 官方文档中的这句话：\n\n\n\ncomponentreceiveprops 并不是由 props 的变化触发的，而是由父组件的更新触发的，这个结论，请你谨记。\n\n组件自身 setstate 触发的更新\n\nthis.setstate() 调用后导致的更新流程，前面大图中已经有体现，这里我直接沿用上一个 demo 来做演示。若我们点击上一个 demo 中的“修改子组件文本内容”这个按钮：\n\n\n\n这个动作将会触发子组件 lifecycle 自身的更新流程，随之被触发的生命周期函数如下图增加的 console 内容所示：\n\n\n\n先来说说 componentwillupdate 和 componentdidupdate 这一对好基友。\n\ncomponentwillupdate 会在 render 前被触发，它和 componentwillmount 类似，允许你在里面做一些不涉及真实 dom 操作的准备工作；而 componentdidupdate 则在组件更新完毕后被触发，和 componentdidmount 类似，这个生命周期也经常被用来处理 dom 操作。此外，我们也常常将 componentdidupdate 的执行作为子组件更新完毕的标志通知到父组件。\n\nrender 与性能：初识 shouldcomponentupdate\n\n这里需要重点提一下 shouldcomponentupdate 这个生命周期方法，它的调用形式如下所示：\n\nshouldcomponentupdate(nextprops, nextstate)\n\n\n1\n\n\nrender 方法由于伴随着对虚拟 dom 的构建和对比，过程可以说相当耗时。而在 react 当中，很多时候我们会不经意间就频繁地调用了 render。为了避免不必要的 render 操作带来的性能开销，react 为我们提供了 shouldcomponentupdate 这个口子。\n\nreact 组件会根据 shouldcomponentupdate 的返回值，来决定是否执行该方法之后的生命周期，进而决定是否对组件进行re-render（重渲染）。shouldcomponentupdate 的默认值为 true，也就是说“无条件 re-render”。在实际的开发中，我们往往通过手动往 shouldcomponentupdate 中填充判定逻辑，或者直接在项目中引入 purecomponent 等最佳实践，来实现“有条件的 re-render”。\n\n关于 shouldcomponentupdate 及 purecomponent 对 react 的优化，我们会在后续的性能小节中详细展开。这里你只需要认识到 shouldcomponentupdate 的基本使用及其与 react 性能之间的关联关系即可。\n\n# unmounting 阶段：组件的卸载\n\n组件的销毁阶段本身是比较简单的，只涉及一个生命周期，如下图所示：\n\n\n\n对应上文的 demo 来看，我们点击“隐藏子组件”后就可以把 lifecycle 从父组件中移除掉，进而实现卸载的效果。整个过程如下图所示：\n\n\n\n这个生命周期本身不难理解，我们重点说说怎么触发它。组件销毁的常见原因有以下两个。\n\n * 组件在父组件中被移除了：这种情况相对比较直观，对应的就是我们上图描述的这个过程。\n * 组件中设置了 key 属性，父组件在 render 的过程中，发现 key 值和上一次不一致，那么这个组件就会被干掉。\n\n在本课时，只要能够理解到 1 就可以了。对于 2 这种情况，你只需要先记住有这样一种现象，这就够了。至于组件里面为什么要设置 key，为什么 key 改变后组件就必须被干掉？要回答这个问题，需要你先理解 react 的“调和过程”，而“调和过程”也会是我们第二模块中重点讲解的一个内容。这里我先把这个知识点点出来，方便你定位我们整个知识体系里的重难点。\n\n\n# 总结\n\n在本课时，我们对 react 设计思想中的“虚拟 dom”和“组件化”这两个关键概念形成了初步的理解，同时也对 react 15 中的生命周期进行了系统的学习和总结。到这里，你已经了解到了 react 生命周期在很长一段“过去”里的形态。\n\n而在 react 16 中，组件的生命周期其实已经发生了一系列的变化。这些变化到底是什么样的，它们背后又蕴含着 react 团队怎样的思量呢？\n\n古人说“以史为镜，可以知兴衰”。在下个课时，我们将一起去“照镜子”，对 react 新旧生命周期进行对比，并探求变化的动机。',charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"Vue 放弃繁琐的render函数，拥抱JSX",frontmatter:{title:"Vue 放弃繁琐的render函数，拥抱JSX",date:"2021-11-29T22:33:14.000Z",permalink:"/pages/5e7846/",categories:["大前端","React"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1050.React/1510.Vue%20%E6%94%BE%E5%BC%83%E7%B9%81%E7%90%90%E7%9A%84render%E5%87%BD%E6%95%B0%EF%BC%8C%E6%8B%A5%E6%8A%B1JSX.html",relativePath:"10.大前端/1050.React/1510.Vue 放弃繁琐的render函数，拥抱JSX.md",key:"v-b2f966b2",path:"/pages/5e7846/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:2},{level:2,title:"安装配置",slug:"安装配置",normalizedTitle:"安装配置",charIndex:1316},{level:3,title:"babel7 (vue cli 默认是使用了babel7的）",slug:"babel7-vue-cli-默认是使用了babel7的",normalizedTitle:"babel7 (vue cli 默认是使用了babel7的）",charIndex:1325},{level:3,title:"安装babel插件",slug:"安装babel插件",normalizedTitle:"安装babel插件",charIndex:1360},{level:4,title:"babel 6",slug:"babel-6",normalizedTitle:"babel 6",charIndex:1850},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:1344},{level:3,title:"slot",slug:"slot",normalizedTitle:"slot",charIndex:633},{level:4,title:"Table-column Scoped Slot",slug:"table-column-scoped-slot",normalizedTitle:"table-column scoped slot",charIndex:2555}],headersStr:"背景 安装配置 babel7 (vue cli 默认是使用了babel7的） 安装babel插件 babel 6 使用 slot Table-column Scoped Slot",content:"# 背景\n\n如果你写了很多 render 函数，可能会觉得下面这样的代码写起来很痛苦：\n\ncreateElement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createElement('span', 'Hello'),\n    ' world!'\n  ]\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n[\n\t{ label: '最近更新时间', prop: 'update_time', align: 'center', visible: false },\n  {\n    label: '操作', align: 'center', 'min-width': '180px', render: (h, { row }) => {\n      return h('div',\n        [h('el-popconfirm', {\n          props: { title: '确定删除吗？', 'confirm-button-type': 'danger' },\n          class: 'mr-10',\n          on: {\n            confirm: () => { this.delItem(row) }\n          }\n        },\n        [h('el-button', { slot: 'reference', props: { size: 'mini', type: 'danger' }}, '删除')]),\n        h('el-button', { props: { size: 'mini', type: 'primary' }, nativeOn: { click: () => { this.editItem(row) } }}, '编辑')]\n      )\n    }\n  }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n特别是对应的模板如此简单的情况下：\n\n<anchored-heading :level='1'>\n  <span>Hello</span> world!\n</anchored-heading>\n\n\n1\n2\n3\n\n\n<el-popconfirm\n\ttitle='确定删除吗？'\n\t'confirm-button-type'='danger'  \n  onConfirm='() => this.delItem(row)'\n>\n   <el-button slot='reference' size='mini' type='danger'>删除</el-button>\n</el-popconfirm>\n\n<el-button size='mini' type='danger' onClick={() => this.editItem(row)}>编辑</el-button>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 安装配置\n\n\n# babel7 (vue cli 默认是使用了babel7的）\n\n\n# 安装babel插件\n\nnpm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n\n * 配置babel.config.js\n\nmodule.exports = {\n  presets: ['@vue/babel-preset-jsx'],\n}\n\n\n1\n2\n3\n\n\n> 如果你出现这个错误： https://github.com/vuejs/jsx/issues/34\n\nDuplicate declaration \"h\" (This is an error on an internal node. Probably an internal error.) 试试这个（需要说明H函数传递）\n\nmodule.exports = {\n  presets: [\n    [\n      '@vue/babel-preset-jsx',\n      {\n        injectH: false\n      }\n    ]\n  ]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# babel 6\n\nnpm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-preset-env --save-dev\n\n * 配置.babelrc\n\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n\n\n1\n2\n3\n4\n\n\n\n# 使用\n\n我这里举例比较复杂的例子 也是我遇到的\n\n\n# slot\n\n正常的code是这样的, element-ui举例\n\n<el-table-column\n  label=\"姓名\"\n  width=\"180\">\n  <template slot-scope=\"scope\">\n    <el-popover trigger=\"hover\" placement=\"top\">\n      <p>姓名: {{ scope.row.name }}</p>\n      <p>住址: {{ scope.row.address }}</p>\n      <div slot=\"reference\" class=\"name-wrapper\">\n        <el-tag size=\"medium\">{{ scope.row.name }}</el-tag>\n      </div>\n    </el-popover>\n  </template>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# Table-column Scoped Slot\n\nNAME     说明\n—        自定义列的内容，参数为 { row, column, $index }\nheader   自定义表头的内容. 参数为 { column, $index }\n\n🍖转换成jsx就是\n\n<el-table-column\n  label='姓名'\n  width='180' {\n    ...{\n      scopedSlots: {\n        default: scope => {\n          return <el-popover trigger='hover' placement='top'>\n            <p>姓名: { scope.row.name }</p>\n            <p>住址: { scope.row.address }</p>\n            <div slot='reference' class='name-wrapper'>\n              <el-tag size='medium'>{ scope.row.name }</el-tag>\n            </div>\n          </el-popover>\n        }\n      }\n    }\n  }>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n",normalizedContent:"# 背景\n\n如果你写了很多 render 函数，可能会觉得下面这样的代码写起来很痛苦：\n\ncreateelement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createelement('span', 'hello'),\n    ' world!'\n  ]\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n[\n\t{ label: '最近更新时间', prop: 'update_time', align: 'center', visible: false },\n  {\n    label: '操作', align: 'center', 'min-width': '180px', render: (h, { row }) => {\n      return h('div',\n        [h('el-popconfirm', {\n          props: { title: '确定删除吗？', 'confirm-button-type': 'danger' },\n          class: 'mr-10',\n          on: {\n            confirm: () => { this.delitem(row) }\n          }\n        },\n        [h('el-button', { slot: 'reference', props: { size: 'mini', type: 'danger' }}, '删除')]),\n        h('el-button', { props: { size: 'mini', type: 'primary' }, nativeon: { click: () => { this.edititem(row) } }}, '编辑')]\n      )\n    }\n  }\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n特别是对应的模板如此简单的情况下：\n\n<anchored-heading :level='1'>\n  <span>hello</span> world!\n</anchored-heading>\n\n\n1\n2\n3\n\n\n<el-popconfirm\n\ttitle='确定删除吗？'\n\t'confirm-button-type'='danger'  \n  onconfirm='() => this.delitem(row)'\n>\n   <el-button slot='reference' size='mini' type='danger'>删除</el-button>\n</el-popconfirm>\n\n<el-button size='mini' type='danger' onclick={() => this.edititem(row)}>编辑</el-button>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 安装配置\n\n\n# babel7 (vue cli 默认是使用了babel7的）\n\n\n# 安装babel插件\n\nnpm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props\n\n * 配置babel.config.js\n\nmodule.exports = {\n  presets: ['@vue/babel-preset-jsx'],\n}\n\n\n1\n2\n3\n\n\n> 如果你出现这个错误： https://github.com/vuejs/jsx/issues/34\n\nduplicate declaration \"h\" (this is an error on an internal node. probably an internal error.) 试试这个（需要说明h函数传递）\n\nmodule.exports = {\n  presets: [\n    [\n      '@vue/babel-preset-jsx',\n      {\n        injecth: false\n      }\n    ]\n  ]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# babel 6\n\nnpm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-preset-env --save-dev\n\n * 配置.babelrc\n\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n\n\n1\n2\n3\n4\n\n\n\n# 使用\n\n我这里举例比较复杂的例子 也是我遇到的\n\n\n# slot\n\n正常的code是这样的, element-ui举例\n\n<el-table-column\n  label=\"姓名\"\n  width=\"180\">\n  <template slot-scope=\"scope\">\n    <el-popover trigger=\"hover\" placement=\"top\">\n      <p>姓名: {{ scope.row.name }}</p>\n      <p>住址: {{ scope.row.address }}</p>\n      <div slot=\"reference\" class=\"name-wrapper\">\n        <el-tag size=\"medium\">{{ scope.row.name }}</el-tag>\n      </div>\n    </el-popover>\n  </template>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# table-column scoped slot\n\nname     说明\n—        自定义列的内容，参数为 { row, column, $index }\nheader   自定义表头的内容. 参数为 { column, $index }\n\n🍖转换成jsx就是\n\n<el-table-column\n  label='姓名'\n  width='180' {\n    ...{\n      scopedslots: {\n        default: scope => {\n          return <el-popover trigger='hover' placement='top'>\n            <p>姓名: { scope.row.name }</p>\n            <p>住址: { scope.row.address }</p>\n            <div slot='reference' class='name-wrapper'>\n              <el-tag size='medium'>{ scope.row.name }</el-tag>\n            </div>\n          </el-popover>\n        }\n      }\n    }\n  }>\n</el-table-column>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n",charsets:{cjk:!0},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"微信小程序入门",frontmatter:{title:"微信小程序入门",date:"2022-01-13T16:31:19.000Z",permalink:"/pages/855e3e/",categories:["大前端","小程序"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1060.%E5%B0%8F%E7%A8%8B%E5%BA%8F/106002.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8.html",relativePath:"10.大前端/1060.小程序/106002.微信小程序入门.md",key:"v-e5fe87ee",path:"/pages/855e3e/",headers:[{level:2,title:"小程序开发者账号注册",slug:"小程序开发者账号注册",normalizedTitle:"小程序开发者账号注册",charIndex:66},{level:2,title:"微信开发者工具",slug:"微信开发者工具",normalizedTitle:"微信开发者工具",charIndex:183},{level:2,title:"小程序在线Demo",slug:"小程序在线demo",normalizedTitle:"小程序在线demo",charIndex:269},{level:2,title:"主体文件结构",slug:"主体文件结构",normalizedTitle:"主体文件结构",charIndex:297},{level:2,title:"页面文件结构",slug:"页面文件结构",normalizedTitle:"页面文件结构",charIndex:427},{level:2,title:"app.json 配置项列表",slug:"app-json-配置项列表",normalizedTitle:"app.json 配置项列表",charIndex:641},{level:3,title:"window配置",slug:"window配置",normalizedTitle:"window配置",charIndex:920},{level:3,title:"tabBar",slug:"tabbar",normalizedTitle:"tabbar",charIndex:829},{level:2,title:"常用布局标签",slug:"常用布局标签",normalizedTitle:"常用布局标签",charIndex:2744},{level:2,title:"常用表单标签",slug:"常用表单标签",normalizedTitle:"常用表单标签",charIndex:3004},{level:2,title:"轮播图组件",slug:"轮播图组件",normalizedTitle:"轮播图组件",charIndex:3093},{level:2,title:"生命周期函数",slug:"生命周期函数",normalizedTitle:"生命周期函数",charIndex:3428},{level:2,title:"页面相关事件处理函数",slug:"页面相关事件处理函数",normalizedTitle:"页面相关事件处理函数",charIndex:1497},{level:2,title:"数据绑定  {{ }}",slug:"数据绑定",normalizedTitle:"数据绑定  {{ }}",charIndex:null},{level:3,title:"特别注意",slug:"特别注意",normalizedTitle:"特别注意",charIndex:4189},{level:2,title:"列表渲染  wx:for",slug:"列表渲染-wx-for",normalizedTitle:"列表渲染  wx:for",charIndex:null},{level:3,title:"wx:key   提高列表渲染时排序的效率",slug:"wx-key-提高列表渲染时排序的效率",normalizedTitle:"wx:key   提高列表渲染时排序的效率",charIndex:null},{level:2,title:"条件渲染  wx:if   wx:else   wx:elif",slug:"条件渲染-wx-if-wx-else-wx-elif",normalizedTitle:"条件渲染  wx:if   wx:else   wx:elif",charIndex:null},{level:3,title:"wx:if 与 hidden 区别",slug:"wx-if-与-hidden-区别",normalizedTitle:"wx:if 与 hidden 区别",charIndex:4999},{level:2,title:"事件",slug:"事件",normalizedTitle:"事件",charIndex:1501},{level:3,title:"事件绑定和冒泡",slug:"事件绑定和冒泡",normalizedTitle:"事件绑定和冒泡",charIndex:5182},{level:3,title:"常用事件类型",slug:"常用事件类型",normalizedTitle:"常用事件类型",charIndex:5283},{level:3,title:"事件传参注意",slug:"事件传参注意",normalizedTitle:"事件传参注意",charIndex:5570},{level:2,title:"WXS  脚本",slug:"wxs-脚本",normalizedTitle:"wxs  脚本",charIndex:null}],headersStr:"小程序开发者账号注册 微信开发者工具 小程序在线Demo 主体文件结构 页面文件结构 app.json 配置项列表 window配置 tabBar 常用布局标签 常用表单标签 轮播图组件 生命周期函数 页面相关事件处理函数 数据绑定  {{ }} 特别注意 列表渲染  wx:for wx:key   提高列表渲染时排序的效率 条件渲染  wx:if   wx:else   wx:elif wx:if 与 hidden 区别 事件 事件绑定和冒泡 常用事件类型 事件传参注意 WXS  脚本",content:'# 微信小程序账号与工具\n\n在线文档：https://mp.weixin.qq.com/debug/wxadoc/dev/\n\n\n# 小程序开发者账号注册\n\n微信公众平台：https://mp.weixin.qq.com/\n\n小程序开发者账号注册：https://mp.weixin.qq.com/wxopen/waregister?action=step1\n\n\n# 微信开发者工具\n\n微信开发者工具：https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\n\n\n# 小程序在线Demo\n\n\n# 微信小程序文件结构\n\n\n# 主体文件结构\n\n主体部分由三个文件组成，必须放在项目的根目录，如下：\n\n文件         必填   作用\napp.js     是    小程序逻辑\napp.json   是    小程序公共设置\napp.wxss   否    小程序公共样式表\n\n\n# 页面文件结构\n\n页面由四个文件组成，分别是：\n\n文件类型   必填   作用\njs     是    页面逻辑 ( 微信小程序没有window和document对象 )\nwxml   是    页面结构 ( XML语法，不是HTML语法 )\nwxss   否    页面样式表 ( 拓展了rpx尺寸单位，微信专属响应式像素 )\njson   否    页面配置 ( 不能写注释，否则编译报错 )\n\n\n# 微信小程序配置\n\n\n# app.json 配置项列表\n\n> app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。\n\n属性       类型             必填   描述\npages    String Array   是    设置页面路径\nwindow   Object         否    设置默认页面的窗口表现\ntabBar   Object         否    设置底部 tab 的表现\ndebug    Boolean        否    设置是否开启 debug 模式\n\n\n# window配置\n\n> 用于设置小程序的状态栏、导航条、标题、窗口背景色。\n> \n> 注意：页面的.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键。\n\n属性                             类型         默认值       描述\nnavigationBarBackgroundColor   HexColor   #000000   导航栏背景颜色，如"#000000"\nnavigationBarTextStyle         String     white     导航栏标题颜色，仅支持 black/white\nnavigationBarTitleText         String               导航栏标题文字内容\nbackgroundColor                HexColor   #ffffff   窗口的背景色\nbackgroundTextStyle            String     dark      下拉背景字体、loading 图的样式，仅支持 dark/light\nenablePullDownRefresh          Boolean    false     是否开启下拉刷新，详见页面相关事件处理函数。\nonReachBottomDistance          Number     50        页面上拉触底事件触发时距页面底部距离，单位为px\n\n\n# tabBar\n\n如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。\n\nTip：\n\n 1. 当设置 position 为 top 时，将不会显示 icon。\n 2. tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。\n\n属性说明：\n\n属性                类型         必填   默认值      描述\ncolor             HexColor   是             tab 上的文字默认颜色\nselectedColor     HexColor   是             tab 上的文字选中时的颜色\nbackgroundColor   HexColor   是             tab 的背景色\nborderStyle       String     否    black    tabbar上边框的颜色， 仅支持 black/white\nlist              Array      是             tab 的列表，详见 list 属性说明，最少2个、最多5个 tab\nposition          String     否    bottom   可选值 bottom、top，设置成top是无图标\n\n其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：\n\n属性                 类型       必填   说明\npagePath           String   是    页面路径，必须在 pages 中先定义\ntext               String   是    tab 上按钮文字\niconPath           String   否    图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top\n                                 时，此参数无效\nselectedIconPath   String   否    选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top\n                                 时，此参数无效\n\n图示：\n\n\n# 微信小程序组件(标签)\n\n组件文档：https://mp.weixin.qq.com/debug/wxadoc/dev/component/\n\n\n# 常用布局标签\n\n<view></view>\t\t\t\t相当于    <div></div>\n<text></text>\t\t\t\t相当于    <span></span>\n<image></image>\t\t\t\t相当于    <img />\n<navigator></navigator>\t\t相当于    <a></a>\n<block></block>\t\t\t\t区块标签，不会渲染到页面\n\n\n1\n2\n3\n4\n5\n\n\n注意：image组件默认宽度300px、高度225px，很多时候我们都不需要这个默认宽高，记得手动设置宽高\n\n\n# 常用表单标签\n\n<button></button>\n<input type="text" />\t\t\t\t\n<checkbox />\n<radio/>\n\n\n1\n2\n3\n4\n\n\n\n# 轮播图组件\n\n<swiper indicator-dots="是否显示面板指示点" autoplay="是否自动切换" interval="自动切换时间间隔" duration="滑动动画时长">\n\t<swiper-item>\n      \t<image src="图片路径1" width="375" height="150"/>\n    </swiper-item>\n\t<swiper-item>\n      \t<image src="图片路径2" width="375" height="150"/>\n    </swiper-item>\n</swiper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n探索：实现无缝轮播怎么办？\n\n\n# 微信小程序页面函数\n\n\n# 生命周期函数\n\nPage({\n  /** 页面的初始数据 */\n  data: {\n  },\n  /** 生命周期函数--监听页面加载 */\n  onLoad: function (options) {\n  },\n  /** 生命周期函数--监听页面初次渲染完成 */\n  onReady: function () {\n  },\n  /** 生命周期函数--监听页面显示 */\n  onShow: function () {\n  },\n  /** 生命周期函数--监听页面隐藏 */\n  onHide: function () {\n  },\n  /** 生命周期函数--监听页面卸载 */\n  onUnload: function () {\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 页面相关事件处理函数\n\n /** 页面相关事件处理函数--监听用户下拉动作 */\n  onPullDownRefresh: function () {\n  },\n  /** 页面上拉触底事件的处理函数 */\n  onReachBottom: function () {\n  },\n  /** 用户点击右上角分享 */\n  onShareAppMessage: function () {\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# WXML 布局\n\n\n# 数据绑定 {{ }}\n\n\x3c!--wxml--\x3e\n<view> {{message}} </view>\n\n\n1\n2\n\n\n// page.js\nPage({\n  data: {\n    message: \'Hello MINA!\'\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 特别注意\n\n 1. 花括号和引号之间不能有空格\n 2. 不要直接写 checked="false"，其计算结果是一个字符串，转成 boolean 类型后代表真值。\n\n<checkbox checked="false"> </checkbox>\t\t\t\t\t其计算结果是一个字符串，转成 boolean 类型后变成了 true\n<checkbox checked="{{false}}"> </checkbox>\t\t\t\t正确写法\n\n\n1\n2\n\n\n\n# 列表渲染 wx:for\n\n\x3c!--wxml--\x3e\n<view wx:for="{{array}}"> {{item}} </view>\n\n\n1\n2\n\n\n// page.js\nPage({\n  data: {\n    array: [1, 2, 3, 4, 5]\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# wx:key 提高列表渲染时排序的效率\n\nwx:key 的值以两种形式提供\n\n 1. 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。\n 2. 保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。\n\n\n# 条件渲染 wx:if wx:else wx:elif\n\n\x3c!--wxml--\x3e\n<view wx:if="{{length >= 80}}"> 优秀 </view>\n<view wx:elif="{{length >= 60}}"> 良好 </view>\n<view wx:else> 加油 </view>\n\n\n1\n2\n3\n4\n\n\n// page.js\nPage({\n  data: {\n    length: \'95\'\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# wx:if 与 hidden 区别\n\nwx:if 是否渲染， hidden 是否隐藏。\n\n一般来说，wx:if 有更高的切换消耗而 hidden 有更高的初始渲染消耗。\n\n因此，如果需要频繁切换的情景下，用 hidden 更好。\n\n\n# 事件\n\n * 事件对象可以获取额外信息，如 id, dataset(自定义属性集合), touches(触摸点坐标)。\n\n\n# 事件绑定和冒泡\n\n 1. 冒泡事件 bind事件类型 如 bindtap bindlongpress\n 2. 非冒泡事件 catch事件类型 如 catchtap catchlongpress\n\n\n# 常用事件类型\n\n类型          触发条件\ntap         手指触摸后马上离开\nlongpress   手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发\n\n\x3c!--wxml--\x3e\n<view data-index="自定义属性" bindtap="tapHandle"> 点我触发事件 </view>\n\n\n1\n2\n\n\n// page.js\nPage({\n  tapHandle: function(event) {\n    console.log(event)\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 事件传参注意\n\n小程序绑定事件只能写函数名称，不能通过括号方式传参。\n\n\x3c!--wxml--\x3e\n<view bindtap="tapHandle(520)"> 点我触发事件 </view>\t\t\t\t\t\t\t\t错误，事件不能触发\n<view data-index="520" bindtap="tapHandle"> 点我触发事件 </view>\t\n\n\n1\n2\n3\n\n\n// page.js\nPage({\n  tapHandle: function(event) {\n     console.log( event.target.dataset.index );  // 输出标签自定义属性上的index值\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# WXS 脚本\n\nWXS（WeiXin Script）是小程序的一套脚本语言，功能类似<script>标签，用于在视图层定义函数(比较少用)。\n\n\x3c!--wxml--\x3e\n<wxs module="foo">\nvar sum = function(a,b){\n  return a+b;\n};\n// 这里可以导出一个对象，这个对象可以直接在界面上使用 \nmodule.exports.sum = sum;\n</wxs>\n\n<view> {{foo.sum}} </view>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# WXSS 样式\n\nWXSS(WeiXin Style Sheets)是一套样式语言。\n\n与 CSS 相比，WXSS 扩展以下2个特性：\n\n * 尺寸单位 rpx ( responsive pixel 响应式像素)\n * 样式导入 @import "样式表路径";\n\n\n# 常用快捷键\n\n快捷键               说明\nshift + alt + F   格式化代码\nctrl + P          跳到文件\nctrl + E          跳到最近文件',normalizedContent:'# 微信小程序账号与工具\n\n在线文档：https://mp.weixin.qq.com/debug/wxadoc/dev/\n\n\n# 小程序开发者账号注册\n\n微信公众平台：https://mp.weixin.qq.com/\n\n小程序开发者账号注册：https://mp.weixin.qq.com/wxopen/waregister?action=step1\n\n\n# 微信开发者工具\n\n微信开发者工具：https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\n\n\n# 小程序在线demo\n\n\n# 微信小程序文件结构\n\n\n# 主体文件结构\n\n主体部分由三个文件组成，必须放在项目的根目录，如下：\n\n文件         必填   作用\napp.js     是    小程序逻辑\napp.json   是    小程序公共设置\napp.wxss   否    小程序公共样式表\n\n\n# 页面文件结构\n\n页面由四个文件组成，分别是：\n\n文件类型   必填   作用\njs     是    页面逻辑 ( 微信小程序没有window和document对象 )\nwxml   是    页面结构 ( xml语法，不是html语法 )\nwxss   否    页面样式表 ( 拓展了rpx尺寸单位，微信专属响应式像素 )\njson   否    页面配置 ( 不能写注释，否则编译报错 )\n\n\n# 微信小程序配置\n\n\n# app.json 配置项列表\n\n> app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。\n\n属性       类型             必填   描述\npages    string array   是    设置页面路径\nwindow   object         否    设置默认页面的窗口表现\ntabbar   object         否    设置底部 tab 的表现\ndebug    boolean        否    设置是否开启 debug 模式\n\n\n# window配置\n\n> 用于设置小程序的状态栏、导航条、标题、窗口背景色。\n> \n> 注意：页面的.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键。\n\n属性                             类型         默认值       描述\nnavigationbarbackgroundcolor   hexcolor   #000000   导航栏背景颜色，如"#000000"\nnavigationbartextstyle         string     white     导航栏标题颜色，仅支持 black/white\nnavigationbartitletext         string               导航栏标题文字内容\nbackgroundcolor                hexcolor   #ffffff   窗口的背景色\nbackgroundtextstyle            string     dark      下拉背景字体、loading 图的样式，仅支持 dark/light\nenablepulldownrefresh          boolean    false     是否开启下拉刷新，详见页面相关事件处理函数。\nonreachbottomdistance          number     50        页面上拉触底事件触发时距页面底部距离，单位为px\n\n\n# tabbar\n\n如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabbar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。\n\ntip：\n\n 1. 当设置 position 为 top 时，将不会显示 icon。\n 2. tabbar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。\n\n属性说明：\n\n属性                类型         必填   默认值      描述\ncolor             hexcolor   是             tab 上的文字默认颜色\nselectedcolor     hexcolor   是             tab 上的文字选中时的颜色\nbackgroundcolor   hexcolor   是             tab 的背景色\nborderstyle       string     否    black    tabbar上边框的颜色， 仅支持 black/white\nlist              array      是             tab 的列表，详见 list 属性说明，最少2个、最多5个 tab\nposition          string     否    bottom   可选值 bottom、top，设置成top是无图标\n\n其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：\n\n属性                 类型       必填   说明\npagepath           string   是    页面路径，必须在 pages 中先定义\ntext               string   是    tab 上按钮文字\niconpath           string   否    图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top\n                                 时，此参数无效\nselectediconpath   string   否    选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top\n                                 时，此参数无效\n\n图示：\n\n\n# 微信小程序组件(标签)\n\n组件文档：https://mp.weixin.qq.com/debug/wxadoc/dev/component/\n\n\n# 常用布局标签\n\n<view></view>\t\t\t\t相当于    <div></div>\n<text></text>\t\t\t\t相当于    <span></span>\n<image></image>\t\t\t\t相当于    <img />\n<navigator></navigator>\t\t相当于    <a></a>\n<block></block>\t\t\t\t区块标签，不会渲染到页面\n\n\n1\n2\n3\n4\n5\n\n\n注意：image组件默认宽度300px、高度225px，很多时候我们都不需要这个默认宽高，记得手动设置宽高\n\n\n# 常用表单标签\n\n<button></button>\n<input type="text" />\t\t\t\t\n<checkbox />\n<radio/>\n\n\n1\n2\n3\n4\n\n\n\n# 轮播图组件\n\n<swiper indicator-dots="是否显示面板指示点" autoplay="是否自动切换" interval="自动切换时间间隔" duration="滑动动画时长">\n\t<swiper-item>\n      \t<image src="图片路径1" width="375" height="150"/>\n    </swiper-item>\n\t<swiper-item>\n      \t<image src="图片路径2" width="375" height="150"/>\n    </swiper-item>\n</swiper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n探索：实现无缝轮播怎么办？\n\n\n# 微信小程序页面函数\n\n\n# 生命周期函数\n\npage({\n  /** 页面的初始数据 */\n  data: {\n  },\n  /** 生命周期函数--监听页面加载 */\n  onload: function (options) {\n  },\n  /** 生命周期函数--监听页面初次渲染完成 */\n  onready: function () {\n  },\n  /** 生命周期函数--监听页面显示 */\n  onshow: function () {\n  },\n  /** 生命周期函数--监听页面隐藏 */\n  onhide: function () {\n  },\n  /** 生命周期函数--监听页面卸载 */\n  onunload: function () {\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 页面相关事件处理函数\n\n /** 页面相关事件处理函数--监听用户下拉动作 */\n  onpulldownrefresh: function () {\n  },\n  /** 页面上拉触底事件的处理函数 */\n  onreachbottom: function () {\n  },\n  /** 用户点击右上角分享 */\n  onshareappmessage: function () {\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# wxml 布局\n\n\n# 数据绑定 {{ }}\n\n\x3c!--wxml--\x3e\n<view> {{message}} </view>\n\n\n1\n2\n\n\n// page.js\npage({\n  data: {\n    message: \'hello mina!\'\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 特别注意\n\n 1. 花括号和引号之间不能有空格\n 2. 不要直接写 checked="false"，其计算结果是一个字符串，转成 boolean 类型后代表真值。\n\n<checkbox checked="false"> </checkbox>\t\t\t\t\t其计算结果是一个字符串，转成 boolean 类型后变成了 true\n<checkbox checked="{{false}}"> </checkbox>\t\t\t\t正确写法\n\n\n1\n2\n\n\n\n# 列表渲染 wx:for\n\n\x3c!--wxml--\x3e\n<view wx:for="{{array}}"> {{item}} </view>\n\n\n1\n2\n\n\n// page.js\npage({\n  data: {\n    array: [1, 2, 3, 4, 5]\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# wx:key 提高列表渲染时排序的效率\n\nwx:key 的值以两种形式提供\n\n 1. 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。\n 2. 保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。\n\n\n# 条件渲染 wx:if wx:else wx:elif\n\n\x3c!--wxml--\x3e\n<view wx:if="{{length >= 80}}"> 优秀 </view>\n<view wx:elif="{{length >= 60}}"> 良好 </view>\n<view wx:else> 加油 </view>\n\n\n1\n2\n3\n4\n\n\n// page.js\npage({\n  data: {\n    length: \'95\'\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# wx:if 与 hidden 区别\n\nwx:if 是否渲染， hidden 是否隐藏。\n\n一般来说，wx:if 有更高的切换消耗而 hidden 有更高的初始渲染消耗。\n\n因此，如果需要频繁切换的情景下，用 hidden 更好。\n\n\n# 事件\n\n * 事件对象可以获取额外信息，如 id, dataset(自定义属性集合), touches(触摸点坐标)。\n\n\n# 事件绑定和冒泡\n\n 1. 冒泡事件 bind事件类型 如 bindtap bindlongpress\n 2. 非冒泡事件 catch事件类型 如 catchtap catchlongpress\n\n\n# 常用事件类型\n\n类型          触发条件\ntap         手指触摸后马上离开\nlongpress   手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发\n\n\x3c!--wxml--\x3e\n<view data-index="自定义属性" bindtap="taphandle"> 点我触发事件 </view>\n\n\n1\n2\n\n\n// page.js\npage({\n  taphandle: function(event) {\n    console.log(event)\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 事件传参注意\n\n小程序绑定事件只能写函数名称，不能通过括号方式传参。\n\n\x3c!--wxml--\x3e\n<view bindtap="taphandle(520)"> 点我触发事件 </view>\t\t\t\t\t\t\t\t错误，事件不能触发\n<view data-index="520" bindtap="taphandle"> 点我触发事件 </view>\t\n\n\n1\n2\n3\n\n\n// page.js\npage({\n  taphandle: function(event) {\n     console.log( event.target.dataset.index );  // 输出标签自定义属性上的index值\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# wxs 脚本\n\nwxs（weixin script）是小程序的一套脚本语言，功能类似<script>标签，用于在视图层定义函数(比较少用)。\n\n\x3c!--wxml--\x3e\n<wxs module="foo">\nvar sum = function(a,b){\n  return a+b;\n};\n// 这里可以导出一个对象，这个对象可以直接在界面上使用 \nmodule.exports.sum = sum;\n</wxs>\n\n<view> {{foo.sum}} </view>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# wxss 样式\n\nwxss(weixin style sheets)是一套样式语言。\n\n与 css 相比，wxss 扩展以下2个特性：\n\n * 尺寸单位 rpx ( responsive pixel 响应式像素)\n * 样式导入 @import "样式表路径";\n\n\n# 常用快捷键\n\n快捷键               说明\nshift + alt + f   格式化代码\nctrl + p          跳到文件\nctrl + e          跳到最近文件',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"uniapp物联网无网络智能配对模块",frontmatter:{title:"uniapp物联网无网络智能配对模块",date:"2021-11-29T22:36:50.000Z",permalink:"/pages/a18549/",categories:["大前端","小程序"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1060.%E5%B0%8F%E7%A8%8B%E5%BA%8F/1610.uniapp%E7%89%A9%E8%81%94%E7%BD%91%E6%97%A0%E7%BD%91%E7%BB%9C%E6%99%BA%E8%83%BD%E9%85%8D%E5%AF%B9%E6%A8%A1%E5%9D%97.html",relativePath:"10.大前端/1060.小程序/1610.uniapp物联网无网络智能配对模块.md",key:"v-384fdc07",path:"/pages/a18549/",headers:[{level:2,title:"引入致前",slug:"引入致前",normalizedTitle:"引入致前",charIndex:2},{level:2,title:"嵌入方法",slug:"嵌入方法",normalizedTitle:"嵌入方法",charIndex:276}],headersStr:"引入致前 嵌入方法",content:"# 引入致前\n\n * 腾讯云技术文档：物联网开发平台 https://cloud.tencent.com/document/product/1081/40773\n * npm: https://www.npmjs.com/package/qcloud-iotexplorer-appdev-sdk\n * demo: https://github.com/tencentyun/qcloud-iotexplorer-appdev-node-sdk\n   * 可以直接在github上搜索qcloud-iotexplorer-appdev-sdk\n\n\n# 嵌入方法\n\n * 新建qcloud-iotexplorer-appdev-sdk.js\n\nqcloud-iotexplorer-appdev-sdk.js\n\n * main.js\n\n......\nconst {\n\tQcloudIotExplorerAppDevSdk\n} = require('@/utils/qcloud-iotexplorer-appdev-sdk');\nVue.use(uView);\n\n......\nvar _sdk = new QcloudIotExplorerAppDevSdk({\n\tdebug: true,\n\tappKey: '',\n\tgetAccessToken: () => {\n\t\tconsole.log('getAccessToken...');\n\t},\n\twsConfig: {}\n});\n\nVue.prototype._sdk = _sdk\n_sdk.init();\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 使用\n\n挂载到vue实例上就很好使用啦 通过打开手机gps，通过api接口获取wifi信息及填入的密码 以广播的形式发送 具体事项根据业务来 贴上我们产品的图\n\n......\nthis._sdk.connectDevice({\n  connectType: 'smartconfig',\n  connectOpts: {\n    targetWifiInfo: wifiInfo,\n    bindDeviceToken: '123456789',\n    onProgress(progress) {\n      console.log('onProgress', progress);\n    },\n    onError(error) {\n      console.error('onError', error);\n    },\n    onComplete() {\n      console.log('onComplete');\n      // this.clearAllId();\n    }\n  }\n});\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",normalizedContent:"# 引入致前\n\n * 腾讯云技术文档：物联网开发平台 https://cloud.tencent.com/document/product/1081/40773\n * npm: https://www.npmjs.com/package/qcloud-iotexplorer-appdev-sdk\n * demo: https://github.com/tencentyun/qcloud-iotexplorer-appdev-node-sdk\n   * 可以直接在github上搜索qcloud-iotexplorer-appdev-sdk\n\n\n# 嵌入方法\n\n * 新建qcloud-iotexplorer-appdev-sdk.js\n\nqcloud-iotexplorer-appdev-sdk.js\n\n * main.js\n\n......\nconst {\n\tqcloudiotexplorerappdevsdk\n} = require('@/utils/qcloud-iotexplorer-appdev-sdk');\nvue.use(uview);\n\n......\nvar _sdk = new qcloudiotexplorerappdevsdk({\n\tdebug: true,\n\tappkey: '',\n\tgetaccesstoken: () => {\n\t\tconsole.log('getaccesstoken...');\n\t},\n\twsconfig: {}\n});\n\nvue.prototype._sdk = _sdk\n_sdk.init();\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 使用\n\n挂载到vue实例上就很好使用啦 通过打开手机gps，通过api接口获取wifi信息及填入的密码 以广播的形式发送 具体事项根据业务来 贴上我们产品的图\n\n......\nthis._sdk.connectdevice({\n  connecttype: 'smartconfig',\n  connectopts: {\n    targetwifiinfo: wifiinfo,\n    binddevicetoken: '123456789',\n    onprogress(progress) {\n      console.log('onprogress', progress);\n    },\n    onerror(error) {\n      console.error('onerror', error);\n    },\n    oncomplete() {\n      console.log('oncomplete');\n      // this.clearallid();\n    }\n  }\n});\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",charsets:{cjk:!0},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"uniapp最快入门",frontmatter:{title:"uniapp最快入门",date:"2022-01-11T14:12:57.000Z",permalink:"/pages/bca428/",categories:["大前端","跨端"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1070.%E8%B7%A8%E7%AB%AF/107000.uniapp%E6%9C%80%E5%BF%AB%E5%85%A5%E9%97%A8.html",relativePath:"10.大前端/1070.跨端/107000.uniapp最快入门.md",key:"v-ba498c5e",path:"/pages/bca428/",headers:[{level:2,title:"下载工具",slug:"下载工具",normalizedTitle:"下载工具",charIndex:9},{level:3,title:"插件安装",slug:"插件安装",normalizedTitle:"插件安装",charIndex:69},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:303},{level:2,title:"项目demo",slug:"项目demo",normalizedTitle:"项目demo",charIndex:382}],headersStr:"下载工具 插件安装 使用 项目demo",content:"正文开始\n\n\n# 下载工具\n\n * 微信小程序开发者工具\n\n * HbuilderX\n   \n   * 下载App开发版\n\n\n\n\n\n\n# 插件安装\n\nHbuilderX 以下简称 hbx\n\n注册一个hbx账号，然后登陆\n\nhbx 常用插件安装\n\nHBuilderX启动后，点击菜单【工具】【插件安装】，即可打开插件安装窗口。前端很多插件前往插件市场安装\n\n * scss/sass编译\n\n * prettier\n\n * eslint-js\n\n * Vue/Vuex/Vue Router代码块\n\n * eslint-plugin-vue\n\n * typescript编译\n\n * htmlhint\n\n\n# 使用\n\n * 启动小程序开发者工具\n   * 设置/通用设置/开启服务端口\n   * \n * 打开hbx\n   * 设置/微信开发者路径\n   * \n\n\n# 项目demo\n\n * 新建uni-app 项目，选择Hello uni-app\n   \n   * \n\n * 配置文件\n   \n   * \n\n * 运行/小程序模拟器/微信小程序工具\n   \n   * \n\n * 至此就能看到结果页面\n   \n   * ",normalizedContent:"正文开始\n\n\n# 下载工具\n\n * 微信小程序开发者工具\n\n * hbuilderx\n   \n   * 下载app开发版\n\n\n\n\n\n\n# 插件安装\n\nhbuilderx 以下简称 hbx\n\n注册一个hbx账号，然后登陆\n\nhbx 常用插件安装\n\nhbuilderx启动后，点击菜单【工具】【插件安装】，即可打开插件安装窗口。前端很多插件前往插件市场安装\n\n * scss/sass编译\n\n * prettier\n\n * eslint-js\n\n * vue/vuex/vue router代码块\n\n * eslint-plugin-vue\n\n * typescript编译\n\n * htmlhint\n\n\n# 使用\n\n * 启动小程序开发者工具\n   * 设置/通用设置/开启服务端口\n   * \n * 打开hbx\n   * 设置/微信开发者路径\n   * \n\n\n# 项目demo\n\n * 新建uni-app 项目，选择hello uni-app\n   \n   * \n\n * 配置文件\n   \n   * \n\n * 运行/小程序模拟器/微信小程序工具\n   \n   * \n\n * 至此就能看到结果页面\n   \n   * ",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"uniapp 项目基建",frontmatter:{title:"uniapp 项目基建",date:"2021-11-29T22:35:55.000Z",permalink:"/pages/44c230/",categories:["大前端","跨端"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1070.%E8%B7%A8%E7%AB%AF/107001.uniapp%20%E9%A1%B9%E7%9B%AE%E5%9F%BA%E5%BB%BA.html",relativePath:"10.大前端/1070.跨端/107001.uniapp 项目基建.md",key:"v-51c53022",path:"/pages/44c230/",headers:[{level:2,title:"初始化仓库",slug:"初始化仓库",normalizedTitle:"初始化仓库",charIndex:33},{level:2,title:"预设CSS",slug:"预设css",normalizedTitle:"预设css",charIndex:43},{level:3,title:"公共样式 (/styles/common.scss)",slug:"公共样式-styles-common-scss",normalizedTitle:"公共样式 (/styles/common.scss)",charIndex:53},{level:3,title:"css 变量预设(/styles/variable.scss)",slug:"css-变量预设-styles-variable-scss",normalizedTitle:"css 变量预设(/styles/variable.scss)",charIndex:974},{level:2,title:"项目搭建基本所需的JS封装处理",slug:"项目搭建基本所需的js封装处理",normalizedTitle:"项目搭建基本所需的js封装处理",charIndex:1010},{level:3,title:"api 请求",slug:"api-请求",normalizedTitle:"api 请求",charIndex:1030}],headersStr:"初始化仓库 预设CSS 公共样式 (/styles/common.scss) css 变量预设(/styles/variable.scss) 项目搭建基本所需的JS封装处理 api 请求",content:"不使用UI组件库中的基建文件 避免文件包过大 性能等原因\n\n\n# 初始化仓库\n\n\n# 预设CSS\n\n\n# 公共样式 (/styles/common.scss)\n\n// 定义内外边距，历遍1-80\n@for $i from 0 through 80 {\n\t// 只要双数和能被5除尽的数\n\t@if $i % 2 == 0 or $i % 5 == 0 {\n\t\t// 得出：u-margin-30或者u-m-30\n\t\t.u-margin-#{$i}, .u-m-#{$i} {\n\t\t\tmargin: $i + rpx!important;\n\t\t}\n\t\t\n\t\t// 得出：u-padding-30或者u-p-30\n\t\t.u-padding-#{$i}, .u-p-#{$i} {\n\t\t\tpadding: $i + rpx!important;\n\t\t}\n\t\t\n\t\t@each $short, $long in l left, t top, r right, b bottom {\n\t\t\t// 缩写版，结果如： u-m-l-30\n\t\t\t// 定义外边距\n\t\t\t.u-m-#{$short}-#{$i} {\n\t\t\t\tmargin-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t\t\n\t\t\t// 定义内边距\n\t\t\t.u-p-#{$short}-#{$i} {\n\t\t\t\tpadding-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t\t\n\t\t\t// 完整版，结果如：u-margin-left-30\n\t\t\t// 定义外边距\n\t\t\t.u-margin-#{$long}-#{$i} {\n\t\t\t\tmargin-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t\t\n\t\t\t// 定义内边距\n\t\t\t.u-padding-#{$long}-#{$i} {\n\t\t\t\tpadding-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# css 变量预设(/styles/variable.scss)\n\n\n# 项目搭建基本所需的JS封装处理\n\n\n# api 请求",normalizedContent:"不使用ui组件库中的基建文件 避免文件包过大 性能等原因\n\n\n# 初始化仓库\n\n\n# 预设css\n\n\n# 公共样式 (/styles/common.scss)\n\n// 定义内外边距，历遍1-80\n@for $i from 0 through 80 {\n\t// 只要双数和能被5除尽的数\n\t@if $i % 2 == 0 or $i % 5 == 0 {\n\t\t// 得出：u-margin-30或者u-m-30\n\t\t.u-margin-#{$i}, .u-m-#{$i} {\n\t\t\tmargin: $i + rpx!important;\n\t\t}\n\t\t\n\t\t// 得出：u-padding-30或者u-p-30\n\t\t.u-padding-#{$i}, .u-p-#{$i} {\n\t\t\tpadding: $i + rpx!important;\n\t\t}\n\t\t\n\t\t@each $short, $long in l left, t top, r right, b bottom {\n\t\t\t// 缩写版，结果如： u-m-l-30\n\t\t\t// 定义外边距\n\t\t\t.u-m-#{$short}-#{$i} {\n\t\t\t\tmargin-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t\t\n\t\t\t// 定义内边距\n\t\t\t.u-p-#{$short}-#{$i} {\n\t\t\t\tpadding-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t\t\n\t\t\t// 完整版，结果如：u-margin-left-30\n\t\t\t// 定义外边距\n\t\t\t.u-margin-#{$long}-#{$i} {\n\t\t\t\tmargin-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t\t\n\t\t\t// 定义内边距\n\t\t\t.u-padding-#{$long}-#{$i} {\n\t\t\t\tpadding-#{$long}: $i + rpx!important;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# css 变量预设(/styles/variable.scss)\n\n\n# 项目搭建基本所需的js封装处理\n\n\n# api 请求",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"uniapp问题记录",frontmatter:{title:"uniapp问题记录",date:"2022-05-26T00:39:57.000Z",permalink:"/pages/b4bd7f/",categories:["大前端","跨端"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1070.%E8%B7%A8%E7%AB%AF/107002.uniapp%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html",relativePath:"10.大前端/1070.跨端/107002.uniapp问题记录.md",key:"v-259471da",path:"/pages/b4bd7f/",headersStr:null,content:" * 静态资源\n   \n   文件夹名称一定要为static,否则微信小程序平台就会报错文件找不到\n\n * vue中模板一定要全\n   \n   必须都有tempalte script style 标签",normalizedContent:" * 静态资源\n   \n   文件夹名称一定要为static,否则微信小程序平台就会报错文件找不到\n\n * vue中模板一定要全\n   \n   必须都有tempalte script style 标签",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"uniapp物联网无网络智能配对模块",frontmatter:{title:"uniapp物联网无网络智能配对模块",date:"2021-12-16T17:57:54.000Z",permalink:"/pages/0bf715/",categories:["大前端","跨端"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1070.%E8%B7%A8%E7%AB%AF/107010.uniapp%E7%89%A9%E8%81%94%E7%BD%91%E6%97%A0%E7%BD%91%E7%BB%9C%E6%99%BA%E8%83%BD%E9%85%8D%E5%AF%B9%E6%A8%A1%E5%9D%97.html",relativePath:"10.大前端/1070.跨端/107010.uniapp物联网无网络智能配对模块.md",key:"v-bf002aaa",path:"/pages/0bf715/",headers:[{level:2,title:"引入致前",slug:"引入致前",normalizedTitle:"引入致前",charIndex:2},{level:2,title:"嵌入方法",slug:"嵌入方法",normalizedTitle:"嵌入方法",charIndex:279}],headersStr:"引入致前 嵌入方法",content:"# 引入致前\n\n * 腾讯云技术文档：物联网开发平台 https://cloud.tencent.com/document/product/1081/40773\n\n * npm: https://www.npmjs.com/package/qcloud-iotexplorer-appdev-sdk\n\n * demo: https://github.com/tencentyun/qcloud-iotexplorer-appdev-node-sdk\n\n * * 可以直接在github上搜索qcloud-iotexplorer-appdev-sdk\n\n\n# 嵌入方法\n\n * 新建qcloud-iotexplorer-appdev-sdk.js\n\n📎qcloud-iotexplorer-appdev-sdk.js\n\n * main.js\n\n......\nconst {\n\tQcloudIotExplorerAppDevSdk\n} = require('@/utils/qcloud-iotexplorer-appdev-sdk');\nVue.use(uView);\n\n......\nvar _sdk = new QcloudIotExplorerAppDevSdk({\n\tdebug: true,\n\tappKey: '',\n\tgetAccessToken: () => {\n\t\tconsole.log('getAccessToken...');\n\t},\n\twsConfig: {}\n});\n\nVue.prototype._sdk = _sdk\n_sdk.init();\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 使用\n\n挂载到vue实例上就很好使用啦\n\n通过打开手机gps，通过api接口获取wifi信息及填入的密码 以广播的形式发送 具体事项根据业务来\n\n贴上我们产品的图\n\n\n\n......\nthis._sdk.connectDevice({\n  connectType: 'smartconfig',\n  connectOpts: {\n    targetWifiInfo: wifiInfo,\n    bindDeviceToken: '123456789',\n    onProgress(progress) {\n      console.log('onProgress', progress);\n    },\n    onError(error) {\n      console.error('onError', error);\n    },\n    onComplete() {\n      console.log('onComplete');\n      // this.clearAllId();\n    }\n  }\n});\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",normalizedContent:"# 引入致前\n\n * 腾讯云技术文档：物联网开发平台 https://cloud.tencent.com/document/product/1081/40773\n\n * npm: https://www.npmjs.com/package/qcloud-iotexplorer-appdev-sdk\n\n * demo: https://github.com/tencentyun/qcloud-iotexplorer-appdev-node-sdk\n\n * * 可以直接在github上搜索qcloud-iotexplorer-appdev-sdk\n\n\n# 嵌入方法\n\n * 新建qcloud-iotexplorer-appdev-sdk.js\n\n📎qcloud-iotexplorer-appdev-sdk.js\n\n * main.js\n\n......\nconst {\n\tqcloudiotexplorerappdevsdk\n} = require('@/utils/qcloud-iotexplorer-appdev-sdk');\nvue.use(uview);\n\n......\nvar _sdk = new qcloudiotexplorerappdevsdk({\n\tdebug: true,\n\tappkey: '',\n\tgetaccesstoken: () => {\n\t\tconsole.log('getaccesstoken...');\n\t},\n\twsconfig: {}\n});\n\nvue.prototype._sdk = _sdk\n_sdk.init();\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 使用\n\n挂载到vue实例上就很好使用啦\n\n通过打开手机gps，通过api接口获取wifi信息及填入的密码 以广播的形式发送 具体事项根据业务来\n\n贴上我们产品的图\n\n\n\n......\nthis._sdk.connectdevice({\n  connecttype: 'smartconfig',\n  connectopts: {\n    targetwifiinfo: wifiinfo,\n    binddevicetoken: '123456789',\n    onprogress(progress) {\n      console.log('onprogress', progress);\n    },\n    onerror(error) {\n      console.error('onerror', error);\n    },\n    oncomplete() {\n      console.log('oncomplete');\n      // this.clearallid();\n    }\n  }\n});\n......\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"桌面端程序Electron入门到熟练",frontmatter:{title:"桌面端程序Electron入门到熟练",date:"2021-12-30T13:33:17.000Z",permalink:"/pages/0ba794/",categories:["大前端","Electron"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1080.Electron/108010.%E6%A1%8C%E9%9D%A2%E7%AB%AF%E7%A8%8B%E5%BA%8FElectron%E5%85%A5%E9%97%A8%E5%88%B0%E7%86%9F%E7%BB%83.html",relativePath:"10.大前端/1080.Electron/108010.桌面端程序Electron入门到熟练.md",key:"v-3101e03e",path:"/pages/0ba794/",headers:[{level:2,title:"打包",slug:"打包",normalizedTitle:"打包",charIndex:554},{level:2,title:"vue + electron",slug:"vue-electron",normalizedTitle:"vue + electron",charIndex:635}],headersStr:"打包 vue + electron",content:'*node.js*: 听过*Electron*的都知道他使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序, 在现在的以单页面应用程序为主的前端环境来看, 毫无疑问需要用的*node.js*环境\n\nElectron 有两种进程：主进程和渲染进程。\n\n * 主进程通过创建 BrowserWindow 实例来创建 网页。 每一个 BrowserWindow 实例在其渲染过程中运行网页， 当一个 BrowserWindow 实例被销毁时，对应的渲染过程也会被终止。\n * 主进程 管理 所有网页及其对应的渲染进程。\n\n----------------------------------------\n\n * 渲染进程只能管理相应的网页， 一个渲染进程的崩溃不会影响其他渲染进程。\n * 渲染进程通过 IPC 与主进程通信在网在页上执行 GUI 操作。 出于安全和可能的资源泄漏考虑，直接从渲染器进程中调用与本地 GUI 有关的 API 受到限制。\n\n----------------------------------------\n\n进程之间的通信可以通过 Inter-Process Communication(IPC) 模块进行：ipcMain 和 ipcRenderer\n\n\n# 打包\n\n * 第一种 最简打包\n\nnpm install electron-packager -g\nelectron-packager .\n\n\n1\n2\n\n\n\n# vue + electron\n\n * electron-vue 上次更新时间是4年前 毫无疑问再大前端这个领域是过时的了, 这里使用插件创建**Vue CLI Plugin Electron Builder** https://nklayman.github.io/vue-cli-plugin-electron-builder/\n\n * 创建完成后就按正常vue项目开始基建\n\n * 导入normalize.css npm i normalize.css -S\n\n// 全局css\nimport "normalize.css/normalize.css"; // a modern alternative to CSS resets\n\n\n1\n2\n\n\n * 使用element-ui框架\n\n * * npm i element-ui -S\n   * main.js 引入\n\nimport ElementUI from "element-ui";\nimport "element-ui/lib/theme-chalk/index.css";\n\nVue.use(ElementUI);\n\n\n1\n2\n3\n4\n',normalizedContent:'*node.js*: 听过*electron*的都知道他使用 javascript，html 和 css 构建跨平台的桌面应用程序, 在现在的以单页面应用程序为主的前端环境来看, 毫无疑问需要用的*node.js*环境\n\nelectron 有两种进程：主进程和渲染进程。\n\n * 主进程通过创建 browserwindow 实例来创建 网页。 每一个 browserwindow 实例在其渲染过程中运行网页， 当一个 browserwindow 实例被销毁时，对应的渲染过程也会被终止。\n * 主进程 管理 所有网页及其对应的渲染进程。\n\n----------------------------------------\n\n * 渲染进程只能管理相应的网页， 一个渲染进程的崩溃不会影响其他渲染进程。\n * 渲染进程通过 ipc 与主进程通信在网在页上执行 gui 操作。 出于安全和可能的资源泄漏考虑，直接从渲染器进程中调用与本地 gui 有关的 api 受到限制。\n\n----------------------------------------\n\n进程之间的通信可以通过 inter-process communication(ipc) 模块进行：ipcmain 和 ipcrenderer\n\n\n# 打包\n\n * 第一种 最简打包\n\nnpm install electron-packager -g\nelectron-packager .\n\n\n1\n2\n\n\n\n# vue + electron\n\n * electron-vue 上次更新时间是4年前 毫无疑问再大前端这个领域是过时的了, 这里使用插件创建**vue cli plugin electron builder** https://nklayman.github.io/vue-cli-plugin-electron-builder/\n\n * 创建完成后就按正常vue项目开始基建\n\n * 导入normalize.css npm i normalize.css -s\n\n// 全局css\nimport "normalize.css/normalize.css"; // a modern alternative to css resets\n\n\n1\n2\n\n\n * 使用element-ui框架\n\n * * npm i element-ui -s\n   * main.js 引入\n\nimport elementui from "element-ui";\nimport "element-ui/lib/theme-chalk/index.css";\n\nvue.use(elementui);\n\n\n1\n2\n3\n4\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"electron 学习使用",frontmatter:{title:"electron 学习使用",date:"2021-12-06T21:02:58.000Z",permalink:"/pages/b4aa88/",categories:["大前端","Electron"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1080.Electron/10810.electron%20%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8.html",relativePath:"10.大前端/1080.Electron/10810.electron 学习使用.md",key:"v-957d58aa",path:"/pages/b4aa88/",headers:[{level:2,title:"两个进程",slug:"两个进程",normalizedTitle:"两个进程",charIndex:88},{level:3,title:"通信",slug:"通信",normalizedTitle:"通信",charIndex:112},{level:3,title:"remote api",slug:"remote-api",normalizedTitle:"remote api",charIndex:146},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:3,title:"devtron",slug:"devtron",normalizedTitle:"devtron",charIndex:924},{level:2,title:"",slug:"-2",normalizedTitle:"",charIndex:0},{level:2,title:"前端框架vue+electron",slug:"前端框架vue-electron",normalizedTitle:"前端框架vue+electron",charIndex:1303}],headersStr:"两个进程 通信 remote api  devtron  前端框架vue+electron",content:" * * 前言\n     \n     前端就是牛逼, 抢完Android``iOS工程师的活儿, 后端的活儿, 就开始抢桌面应用的活儿了\n     \n     \n     # 两个进程\n     \n     \n     # 通信\n     \n     \n     \n     \n     # remote api\n     \n     remote 模块为渲染进程（web页面）和主进程通信（IPC）提供了一种简单方法。\n     \n     在Electron中, GUI 相关的模块 (如 dialog、menu 等) 仅在主进程中可用, 在渲染进程中不可用。 为了在渲染进程中使用它们, ipc 模块是向主进程发送进程间消息所必需的。 使用 remote 模块, 你可以调用 main 进程对象的方法, 而不必显式发送进程间消息, 类似于 Java 的 RMI 。\n     \n     例如：从渲染进程创建浏览器窗口\n     \n     const { BrowserWindow } = require('electron').remote\n     const win = new BrowserWindow({ width: 800, height: 600 })\n     win.loadURL('https://github.com')\n     Copy\n     \n     \n     1\n     2\n     3\n     4\n     \n     \n     注意: 反过来（如果需要从主进程访问渲染进程），可以使用 webContents. executeJavascript 。\n     \n     注意事项： 因为安全原因，remote 模块能在以下几种情况下被禁用：\n     \n     * BrowserWindow - 通过设置 enableRemoteModule 选项为 false。\n     * <webview> - 通过把 enableremotemodule属性设置成 false。\n     \n     \n     \n     \n     #\n     \n     \n     # devtron\n     \n     https://www.electronjs.org/devtron\n     \n     # Install Devtron\n     $ npm install --save-dev devtron\n     // Run the following from the Console tab of your app's DevTools\n     require('devtron').install()\n     // You should now see a Devtron tab added to the DevTools\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n     \n     \n     #\n     \n     \n     # 前端框架vue+electron\n     \n     * 安装vue-cli 3脚手架, cmd中输入vue ui\n     \n     * 创建普通一个项目, 路由使用hash模式\n     \n     * * \n     \n     * 添加插件,搜索electron, 直接选第一个没毛病\n     \n     * * \n       * 想要了解的附上地址: https://nklayman.github.io/vue-cli-plugin-electron-builder/\n     \n     * 进入项目 npm run electron:server\n     \n     * * \n     \n     * 结果:\n     \n     * * ",normalizedContent:" * * 前言\n     \n     前端就是牛逼, 抢完android``ios工程师的活儿, 后端的活儿, 就开始抢桌面应用的活儿了\n     \n     \n     # 两个进程\n     \n     \n     # 通信\n     \n     \n     \n     \n     # remote api\n     \n     remote 模块为渲染进程（web页面）和主进程通信（ipc）提供了一种简单方法。\n     \n     在electron中, gui 相关的模块 (如 dialog、menu 等) 仅在主进程中可用, 在渲染进程中不可用。 为了在渲染进程中使用它们, ipc 模块是向主进程发送进程间消息所必需的。 使用 remote 模块, 你可以调用 main 进程对象的方法, 而不必显式发送进程间消息, 类似于 java 的 rmi 。\n     \n     例如：从渲染进程创建浏览器窗口\n     \n     const { browserwindow } = require('electron').remote\n     const win = new browserwindow({ width: 800, height: 600 })\n     win.loadurl('https://github.com')\n     copy\n     \n     \n     1\n     2\n     3\n     4\n     \n     \n     注意: 反过来（如果需要从主进程访问渲染进程），可以使用 webcontents. executejavascript 。\n     \n     注意事项： 因为安全原因，remote 模块能在以下几种情况下被禁用：\n     \n     * browserwindow - 通过设置 enableremotemodule 选项为 false。\n     * <webview> - 通过把 enableremotemodule属性设置成 false。\n     \n     \n     \n     \n     #\n     \n     \n     # devtron\n     \n     https://www.electronjs.org/devtron\n     \n     # install devtron\n     $ npm install --save-dev devtron\n     // run the following from the console tab of your app's devtools\n     require('devtron').install()\n     // you should now see a devtron tab added to the devtools\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n     \n     \n     #\n     \n     \n     # 前端框架vue+electron\n     \n     * 安装vue-cli 3脚手架, cmd中输入vue ui\n     \n     * 创建普通一个项目, 路由使用hash模式\n     \n     * * \n     \n     * 添加插件,搜索electron, 直接选第一个没毛病\n     \n     * * \n       * 想要了解的附上地址: https://nklayman.github.io/vue-cli-plugin-electron-builder/\n     \n     * 进入项目 npm run electron:server\n     \n     * * \n     \n     * 结果:\n     \n     * * ",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"GIS前端开发常用网站收录",frontmatter:{title:"GIS前端开发常用网站收录",date:"2023-02-04T16:45:10.000Z",permalink:"/pages/1db4ef/",categories:["大前端","WebGL&GIS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1085.WebGL&GIS/1085010.GIS%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95.html",relativePath:"10.大前端/1085.WebGL&GIS/1085010.GIS前端开发常用网站收录.md",key:"v-07ea42ec",path:"/pages/1db4ef/",headersStr:null,content:"> 地理空间数据云\n> \n> 由 中国科学院计算机网络信息中心 和 国家基础学科公共科学数据中心 做的数据提供平台\n> \n> https://www.gscloud.cn/sources/accessdata/310?pid=302\n\n\n\n> cesium lab\n> \n> 把上个网站的数据做 地形切片 影像切片等\n> \n> http://www.cesiumlab.com/\n\n",normalizedContent:"> 地理空间数据云\n> \n> 由 中国科学院计算机网络信息中心 和 国家基础学科公共科学数据中心 做的数据提供平台\n> \n> https://www.gscloud.cn/sources/accessdata/310?pid=302\n\n\n\n> cesium lab\n> \n> 把上个网站的数据做 地形切片 影像切片等\n> \n> http://www.cesiumlab.com/\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"Cesium 学习",frontmatter:{title:"Cesium 学习",date:"2023-02-06T11:16:56.000Z",permalink:"/pages/c04b9d/",categories:["大前端","WebGL&GIS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1085.WebGL&GIS/1086200.Cesium%20%E5%AD%A6%E4%B9%A0.html",relativePath:"10.大前端/1085.WebGL&GIS/1086200.Cesium 学习.md",key:"v-0a701b72",path:"/pages/c04b9d/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"Cesium 应用各类型地理数据",frontmatter:{title:"Cesium 应用各类型地理数据",date:"2023-02-06T11:18:53.000Z",permalink:"/pages/1d1752/",categories:["大前端","WebGL&GIS"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1085.WebGL&GIS/1086241.Cesium%20%E5%BA%94%E7%94%A8%E5%90%84%E7%B1%BB%E5%9E%8B%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE.html",relativePath:"10.大前端/1085.WebGL&GIS/1086241.Cesium 应用各类型地理数据.md",key:"v-1f897546",path:"/pages/1d1752/",headers:[{level:2,title:"加载GEOJSON数据",slug:"加载geojson数据",normalizedTitle:"加载geojson数据",charIndex:2},{level:2,title:"KML数据",slug:"kml数据",normalizedTitle:"kml数据",charIndex:18},{level:2,title:"CZML数据",slug:"czml数据",normalizedTitle:"czml数据",charIndex:28},{level:4,title:"案例: 追踪航班飞行",slug:"案例-追踪航班飞行",normalizedTitle:"案例: 追踪航班飞行",charIndex:866},{level:2,title:"3DTiles与性能监控",slug:"_3dtiles与性能监控",normalizedTitle:"3dtiles与性能监控",charIndex:881}],headersStr:"加载GEOJSON数据 KML数据 CZML数据 案例: 追踪航班飞行 3DTiles与性能监控",content:'# 加载GEOJSON数据\n\n\n# KML数据\n\n\n# CZML数据\n\nconst czml = [\n\t{\n\t\tid: "document",\n\t\tname: "CZML Point - Time Dynamic",\n\t\tversion: "1.0"\n\t},\n\t{\n\t\tid: "point",\n\t\tavailability: "2012-08-04****/****", // 物体在什么时间范围可用\n\t\tposition: {\n\t\t\teoch: "2012-08-04****", // 设置物体起始时间\n\t\t\tcartographicDegrees: [***], // 设置四个维度, 1维是时间, 2维是精度, 3纬度, 4高度\n\t\t},\t\t\n\t\tpoint: {\n\t\t\tcolor: {**},\n\t\t\toutlineColor: {rgb***},\n\t\t\toutlineWidth: 3,\n\t\t\tpixelSize: 15\n\t\t}\n\t}\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n * 加载czml数据\n   \n   ...\n   const viewer = new Cesium.Viewer(\'cesiumContainer\', {\n     // 是否显示信息窗口\n     infoBox: false,\n     shouldAnimate: true\n   })\n   ...\n   let promiseData = Cesium.CzmlDataSource.load(czml);\n   promiseData.then((dataSource) => {\n     viewer.dataSources.add(dataSource);\n   })\n   ...\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n# 案例: 追踪航班飞行\n\n\n# 3DTiles与性能监控\n\n> 3D Tiles: 使用 3D Tiles 将建筑 CAD 模型与摄影测量数据融合，数据由 Bentley Systems 提供。\n> \n> https://github.com/CesiumGS/3d-tiles\n\n...\n// 添加3D 建筑\nlet tiles3d = new Cesium.createOsmBuildings()\nconst osmBuildings = viewer.scene.primitives.add(tiles3d)\n\n\n1\n2\n3\n4\n\n\n数据解析: tileset.json\n\n{\n  root: { // 主物体\n    "refine": "ADD", // 对物体的处理  是添加或者替换\n    "content": {\n      "uri": "parent.b3dm", // 物体贴图文件\n      "boundingVolume": {\n        "regon": [****] // 物体范围\n      }\n    }\n  },\n  "children": [ // 子物体 如多个瓦片\n    \n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nconst tileset = new Cesium.Cesium3DTileset({\n  url: \'./tileset.json\',\n})\nviewer.scene.primitives.add(tileset);\ntileset.readyPromise.then(tileset => {\n  viewer.zoomTo(tileset)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n',normalizedContent:'# 加载geojson数据\n\n\n# kml数据\n\n\n# czml数据\n\nconst czml = [\n\t{\n\t\tid: "document",\n\t\tname: "czml point - time dynamic",\n\t\tversion: "1.0"\n\t},\n\t{\n\t\tid: "point",\n\t\tavailability: "2012-08-04****/****", // 物体在什么时间范围可用\n\t\tposition: {\n\t\t\teoch: "2012-08-04****", // 设置物体起始时间\n\t\t\tcartographicdegrees: [***], // 设置四个维度, 1维是时间, 2维是精度, 3纬度, 4高度\n\t\t},\t\t\n\t\tpoint: {\n\t\t\tcolor: {**},\n\t\t\toutlinecolor: {rgb***},\n\t\t\toutlinewidth: 3,\n\t\t\tpixelsize: 15\n\t\t}\n\t}\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n * 加载czml数据\n   \n   ...\n   const viewer = new cesium.viewer(\'cesiumcontainer\', {\n     // 是否显示信息窗口\n     infobox: false,\n     shouldanimate: true\n   })\n   ...\n   let promisedata = cesium.czmldatasource.load(czml);\n   promisedata.then((datasource) => {\n     viewer.datasources.add(datasource);\n   })\n   ...\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n# 案例: 追踪航班飞行\n\n\n# 3dtiles与性能监控\n\n> 3d tiles: 使用 3d tiles 将建筑 cad 模型与摄影测量数据融合，数据由 bentley systems 提供。\n> \n> https://github.com/cesiumgs/3d-tiles\n\n...\n// 添加3d 建筑\nlet tiles3d = new cesium.createosmbuildings()\nconst osmbuildings = viewer.scene.primitives.add(tiles3d)\n\n\n1\n2\n3\n4\n\n\n数据解析: tileset.json\n\n{\n  root: { // 主物体\n    "refine": "add", // 对物体的处理  是添加或者替换\n    "content": {\n      "uri": "parent.b3dm", // 物体贴图文件\n      "boundingvolume": {\n        "regon": [****] // 物体范围\n      }\n    }\n  },\n  "children": [ // 子物体 如多个瓦片\n    \n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nconst tileset = new cesium.cesium3dtileset({\n  url: \'./tileset.json\',\n})\nviewer.scene.primitives.add(tileset);\ntileset.readypromise.then(tileset => {\n  viewer.zoomto(tileset)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n',charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"在浏览器中直接使用npm包",frontmatter:{title:"在浏览器中直接使用npm包",date:"2021-12-16T14:07:13.000Z",permalink:"/pages/622cd4/",categories:["大前端","浏览器"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1090.%E6%B5%8F%E8%A7%88%E5%99%A8/109001.%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8npm%E5%8C%85.html",relativePath:"10.大前端/1090.浏览器/109001.在浏览器中直接使用npm包.md",key:"v-db165b2e",path:"/pages/622cd4/",headersStr:null,content:"很多时候我门使用一个npm测试语句往往很麻烦，需要下载，引入一些步骤，如果不符合需求的还得移除这个包\n\n现在可以在浏览器中直接使用了 npmInstall('moment')的方式在控制台进行调试\n\n如 qs（具有一些附加安全性的查询字符串解析和字符串化库） 这个插件\n\n * 先初始化这个方法\n   \n   * // 存储原始传入的名称\n     let pkg_name_origin = null;\n     const npmInstall = (originName) => {\n       // Trim string\n       const name = originName.trim();\n       pkg_name_origin = name;\n       // 三种引入方式\n       // 如果是一个有效的URL，直接通过<script />标签插入\n       if (/^https?:\\/\\//.test(name)) return injectScript(name);\n       // 如果指定了版本，尝试使用unpkg加载\n       if (name.indexOf('@') !== -1) return unpkg(name);\n       // 否则，尝试使用cdnjs搜索\n       return cdnjs(name);\n     };\n     \n     // 在页面中插入<script />标签\n     const injectScript = (url) => {\n       const script = document.createElement('script');\n       script.src = url;\n       script.onload = () => {\n         console.log(pkg_name_origin, ' 安装成功。');\n       };\n       script.onerror = () => {\n         console.log(pkg_name_origin, ' 安装失败。');\n       };\n       document.body.appendChild(script);\n       // document.body.removeChild(script);\n     };\n     \n     const unpkg = (name) => {\n       injectScript(`https://unpkg.com/${name}`);\n     };\n     \n     const cdnjs = async (name) => {\n       const searchPromise = await fetch(\n         `https://api.cdnjs.com/libraries?search=${name}`,\n         // 不显示referrer的任何信息在请求头中\n         { referrerPolicy: 'no-referrer' }\n       );\n       const { results, total } = await searchPromise.json();\n       if (total === 0) {\n         console.error('Sorry, ', name, ' not found, please try another keyword.');\n         return;\n       }\n     \n       // 取结果中最相关的一条\n       const { name: exactName, latest: url } = results[0];\n       if (name !== exactName) {\n         console.log(name, ' not found, import ', exactName, ' instead.');\n       }\n       // 通过<script />标签插入\n       injectScript(url);\n     };\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     50\n     51\n     52\n     53\n     54\n     \n   \n   * 如果不想每次都引用这个方法可以使用chrome插件\n     \n     * \n\n * 在浏览器中控制台引入\n   \n   * npmInstall('qs') 或者使用插件的方式$i('qs')\n   * \n\n * 测试使用， 我门调取一个qs api, 这里是使用Qs的变量\n   \n   * ",normalizedContent:"很多时候我门使用一个npm测试语句往往很麻烦，需要下载，引入一些步骤，如果不符合需求的还得移除这个包\n\n现在可以在浏览器中直接使用了 npminstall('moment')的方式在控制台进行调试\n\n如 qs（具有一些附加安全性的查询字符串解析和字符串化库） 这个插件\n\n * 先初始化这个方法\n   \n   * // 存储原始传入的名称\n     let pkg_name_origin = null;\n     const npminstall = (originname) => {\n       // trim string\n       const name = originname.trim();\n       pkg_name_origin = name;\n       // 三种引入方式\n       // 如果是一个有效的url，直接通过<script />标签插入\n       if (/^https?:\\/\\//.test(name)) return injectscript(name);\n       // 如果指定了版本，尝试使用unpkg加载\n       if (name.indexof('@') !== -1) return unpkg(name);\n       // 否则，尝试使用cdnjs搜索\n       return cdnjs(name);\n     };\n     \n     // 在页面中插入<script />标签\n     const injectscript = (url) => {\n       const script = document.createelement('script');\n       script.src = url;\n       script.onload = () => {\n         console.log(pkg_name_origin, ' 安装成功。');\n       };\n       script.onerror = () => {\n         console.log(pkg_name_origin, ' 安装失败。');\n       };\n       document.body.appendchild(script);\n       // document.body.removechild(script);\n     };\n     \n     const unpkg = (name) => {\n       injectscript(`https://unpkg.com/${name}`);\n     };\n     \n     const cdnjs = async (name) => {\n       const searchpromise = await fetch(\n         `https://api.cdnjs.com/libraries?search=${name}`,\n         // 不显示referrer的任何信息在请求头中\n         { referrerpolicy: 'no-referrer' }\n       );\n       const { results, total } = await searchpromise.json();\n       if (total === 0) {\n         console.error('sorry, ', name, ' not found, please try another keyword.');\n         return;\n       }\n     \n       // 取结果中最相关的一条\n       const { name: exactname, latest: url } = results[0];\n       if (name !== exactname) {\n         console.log(name, ' not found, import ', exactname, ' instead.');\n       }\n       // 通过<script />标签插入\n       injectscript(url);\n     };\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     50\n     51\n     52\n     53\n     54\n     \n   \n   * 如果不想每次都引用这个方法可以使用chrome插件\n     \n     * \n\n * 在浏览器中控制台引入\n   \n   * npminstall('qs') 或者使用插件的方式$i('qs')\n   * \n\n * 测试使用， 我门调取一个qs api, 这里是使用qs的变量\n   \n   * ",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"前端单页面应用实现服务端渲染",frontmatter:{title:"前端单页面应用实现服务端渲染",date:"2021-12-16T17:47:05.000Z",permalink:"/pages/898648/",categories:["大前端","浏览器"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1090.%E6%B5%8F%E8%A7%88%E5%99%A8/109002.%E5%89%8D%E7%AB%AF%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93.html",relativePath:"10.大前端/1090.浏览器/109002.前端单页面应用实现服务端渲染.md",key:"v-640aa13f",path:"/pages/898648/",headers:[{level:2,title:"服务端渲染方式",slug:"服务端渲染方式",normalizedTitle:"服务端渲染方式",charIndex:39},{level:2,title:"后端模板渲染",slug:"后端模板渲染",normalizedTitle:"后端模板渲染",charIndex:52},{level:2,title:"第三方框架 nuxt  next",slug:"第三方框架-nuxt-next",normalizedTitle:"第三方框架 nuxt  next",charIndex:null},{level:2,title:"Rendertron",slug:"rendertron",normalizedTitle:"rendertron",charIndex:280},{level:2,title:"部署方法",slug:"部署方法",normalizedTitle:"部署方法",charIndex:688},{level:2,title:"查看已经被收录的网站",slug:"查看已经被收录的网站",normalizedTitle:"查看已经被收录的网站",charIndex:2089},{level:2,title:"提交要收录的网站",slug:"提交要收录的网站",normalizedTitle:"提交要收录的网站",charIndex:2134}],headersStr:"服务端渲染方式 后端模板渲染 第三方框架 nuxt  next Rendertron 部署方法 查看已经被收录的网站 提交要收录的网站",content:"提醒：此方法过于简单，没有任何学习成本，只需要在服务器上配置一番即可\n\n\n# 服务端渲染方式\n\n 1. 后端模板渲染 如: ejs jinjia等\n 2. 借助第三方框架 nuxt next\n\n * * vue相关的 Nuxt\n   * react 相关的 Next\n\n 1. rendertron(主要介绍)\n\n\n# 后端模板渲染\n\n算是传统解决方案, 由服务端渲染成html返回给浏览器\n\n\n# 第三方框架 nuxt next\n\n * 有学习成本, 需要熟悉对应框架api\n\n * 服务端要node环境编译\n\n * 当访问量大的时候页面加载会变慢\n\n\n# Rendertron\n\n主要介绍的就是该方法\n\n诞生就是为了做SEO的。先说说原理，听完你就知道是个好东西了。\n\nRendertron是nodejs框架下的产物，是google-chrome旗下的的配套产品。\n\n首先，服务器上装有个google-chrome，rendertron把他打开，然后在服务器（官方推荐express）中增加中间件\n\n先判断UA（user-agent）里面有没有带有类似Baiduspider（百度爬虫）等字样，\n\n如果没有，就像正常的单页面服务器那样，把原始html推送出去，由客户端浏览器完成js、css渲染的工作；\n\n如果带有指定UA头字样，就先把网页推送给本地服务器那个google-chrome，等他渲染好对应页面后，把渲染好的html结果推送出去。\n\n贴上地址\n\ngithub地址: https://github.com/GoogleChrome/rendertron\n\n\n# 部署方法\n\n * docker镜像地址:\n\nhttps://hub.docker.com/r/yamitzky/rendertron\n\n * 安装无头浏览器\n\n在ubuntu服务器上使用Chrome Headless - 简书\n\nlinux 安装 Headless Chrome - bambooleaf - CSDN博客\n\nChromeheadless安装与使用 - 探索技术世界 - CSDN博客\n\n * 贴入某些搜索引擎的UA\n\nbaidu：Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\nGoogle：Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\nSogou：Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)\nYahoo：Mozilla/5.0 (compatible; Yahoo! Slurp/3.0; http://help.yahoo.com/help/us/ysearch/slurp)\n百度网页搜索 User-agent\nBaiduspider \n谷歌User-agent\nGooglebot\nMSN User-agent\nMSNBot\n有道User-agent\nYoudaoBot\n搜狗User-agent\nSogou inst spider\nSogou spider2\nSogou blog\nSogou News Spider\nSogou Orion spider\n即刻User-agent\nJikeSpider\n搜搜User-agent\nSosospider\n360User-agent\n360Spider\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n当然还有其他的搜索引擎的\n\nconst botUserAgents = [\n  'Baiduspider',\n  'bingbot',\n  'Embedly',\n  'facebookexternalhit',\n  'LinkedInBot',\n  'outbrain',\n  'pinterest',\n  'quora link preview',\n  'rogerbot',\n  'showyoubot',\n  'Slackbot',\n  'TelegramBot',\n  'Twitterbot',\n  'vkShare',\n  'W3C_Validator',\n  'WhatsApp',\n];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 如果你的项目中没有用到 node那么 就是用nginx配置请求转发\n\n if ($http_user_agent ~ \"(botUserAgents1)|(botUserAgents2))\"){\trewrite ^/(.*)$ http://***/rendertron/http://** }\n\n\n1\n\n\n\n# 查看已经被收录的网站\n\n在百度搜索框中搜索\n\nsite:xxx.com\n\n\n1\n\n\n\n# 提交要收录的网站\n\n附上链接 https://ziyuan.baidu.com/linksubmit/url\n\n我之前公司用的效果:\n\n",normalizedContent:"提醒：此方法过于简单，没有任何学习成本，只需要在服务器上配置一番即可\n\n\n# 服务端渲染方式\n\n 1. 后端模板渲染 如: ejs jinjia等\n 2. 借助第三方框架 nuxt next\n\n * * vue相关的 nuxt\n   * react 相关的 next\n\n 1. rendertron(主要介绍)\n\n\n# 后端模板渲染\n\n算是传统解决方案, 由服务端渲染成html返回给浏览器\n\n\n# 第三方框架 nuxt next\n\n * 有学习成本, 需要熟悉对应框架api\n\n * 服务端要node环境编译\n\n * 当访问量大的时候页面加载会变慢\n\n\n# rendertron\n\n主要介绍的就是该方法\n\n诞生就是为了做seo的。先说说原理，听完你就知道是个好东西了。\n\nrendertron是nodejs框架下的产物，是google-chrome旗下的的配套产品。\n\n首先，服务器上装有个google-chrome，rendertron把他打开，然后在服务器（官方推荐express）中增加中间件\n\n先判断ua（user-agent）里面有没有带有类似baiduspider（百度爬虫）等字样，\n\n如果没有，就像正常的单页面服务器那样，把原始html推送出去，由客户端浏览器完成js、css渲染的工作；\n\n如果带有指定ua头字样，就先把网页推送给本地服务器那个google-chrome，等他渲染好对应页面后，把渲染好的html结果推送出去。\n\n贴上地址\n\ngithub地址: https://github.com/googlechrome/rendertron\n\n\n# 部署方法\n\n * docker镜像地址:\n\nhttps://hub.docker.com/r/yamitzky/rendertron\n\n * 安装无头浏览器\n\n在ubuntu服务器上使用chrome headless - 简书\n\nlinux 安装 headless chrome - bambooleaf - csdn博客\n\nchromeheadless安装与使用 - 探索技术世界 - csdn博客\n\n * 贴入某些搜索引擎的ua\n\nbaidu：mozilla/5.0 (compatible; baiduspider/2.0; +http://www.baidu.com/search/spider.html)\ngoogle：mozilla/5.0 (compatible; googlebot/2.1; +http://www.google.com/bot.html)\nsogou：sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)\nyahoo：mozilla/5.0 (compatible; yahoo! slurp/3.0; http://help.yahoo.com/help/us/ysearch/slurp)\n百度网页搜索 user-agent\nbaiduspider \n谷歌user-agent\ngooglebot\nmsn user-agent\nmsnbot\n有道user-agent\nyoudaobot\n搜狗user-agent\nsogou inst spider\nsogou spider2\nsogou blog\nsogou news spider\nsogou orion spider\n即刻user-agent\njikespider\n搜搜user-agent\nsosospider\n360user-agent\n360spider\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n当然还有其他的搜索引擎的\n\nconst botuseragents = [\n  'baiduspider',\n  'bingbot',\n  'embedly',\n  'facebookexternalhit',\n  'linkedinbot',\n  'outbrain',\n  'pinterest',\n  'quora link preview',\n  'rogerbot',\n  'showyoubot',\n  'slackbot',\n  'telegrambot',\n  'twitterbot',\n  'vkshare',\n  'w3c_validator',\n  'whatsapp',\n];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 如果你的项目中没有用到 node那么 就是用nginx配置请求转发\n\n if ($http_user_agent ~ \"(botuseragents1)|(botuseragents2))\"){\trewrite ^/(.*)$ http://***/rendertron/http://** }\n\n\n1\n\n\n\n# 查看已经被收录的网站\n\n在百度搜索框中搜索\n\nsite:xxx.com\n\n\n1\n\n\n\n# 提交要收录的网站\n\n附上链接 https://ziyuan.baidu.com/linksubmit/url\n\n我之前公司用的效果:\n\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"快速测试某个请求在浏览器中是否跨域",frontmatter:{title:"快速测试某个请求在浏览器中是否跨域",date:"2021-12-16T17:51:06.000Z",permalink:"/pages/7f0791/",categories:["大前端","浏览器"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1090.%E6%B5%8F%E8%A7%88%E5%99%A8/109010.%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E6%9F%90%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%98%AF%E5%90%A6%E8%B7%A8%E5%9F%9F.html",relativePath:"10.大前端/1090.浏览器/109010.快速测试某个请求在浏览器中是否跨域.md",key:"v-5c0a68a2",path:"/pages/7f0791/",headers:[{level:2,title:"post请求",slug:"post请求",normalizedTitle:"post请求",charIndex:827}],headersStr:"post请求",content:'在浏览器中打开F12 打开控制台\n\n键入以下代码 回车即可\n\n/*\n * @Description: 测试在浏览器中是否跨域\n * @Author: 仲灏<izhaong 164165005@qq.com>\n * @Date: 2020-12-16 10:02:08\n * @LastEditors: 仲灏<izhaong 164165005@qq.com>\n * @LastEditTime: 2020-12-17 10:09:56\n */\n(function loadXMLDoc() {\n  var xmlhttp;\n  xmlhttp = new XMLHttpRequest();\n  xmlhttp.onreadystatecatechange = function () {};\n\n  xmlhttp.open(\n    "get",\n    "https://zjksmartbus.toponedt.com/travelpc/vendor/list",\n    true\n  );\n  xmlhttp.setRequestHeader(\n    "token",\n    "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI2IiwiY3JlYXRlZCI6MTYwODE3MDgzNzQ5MywiZXhwIjoxNjA4MTc4MDM3fQ.jwUzGz8OCJz2hfQlBQkB50j1ZYpJnfMn4OdeBPO5upIwdbpjrtFt4iOi38L_zu9l_jEmEVHHk0G9jIOQMoHcDQ"\n  );\n  xmlhttp.withCredentials = true;\n  xmlhttp.send();\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n\n以上出现 cors 即为跨域\n\n\n# post请求\n\n例如 登录接口\n\n(function loadXMLDoc() {\n    var request = new XMLHttpRequest();\n    request.open(\'POST\', \'http://××××/api/login\');\n    request.setRequestHeader("Content-type","application/json");\n    send_data = {\n      "mobile": "11",\n      "password": "1",\n      "smsCode": "1111",\n      "type": 0\n    }\n    request.send(JSON.stringify(send_data));\n    request.onload = function(e){\n        console.log("请求成功")\n        console.log(request.status, "请求的URL的相应状态")\n        console.log(request.readyState, "请求的结果，一般都是4")\n        if (request.status === 200) {\n            alert(\'设置回调事件成功！\');\n        }\n        else{\n            alert(\'设置失败，请重试！\');\n        }\n    }\n    request.onerror = function(e){\n       alert(\'请求失败\')\n    }\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n',normalizedContent:'在浏览器中打开f12 打开控制台\n\n键入以下代码 回车即可\n\n/*\n * @description: 测试在浏览器中是否跨域\n * @author: 仲灏<izhaong 164165005@qq.com>\n * @date: 2020-12-16 10:02:08\n * @lasteditors: 仲灏<izhaong 164165005@qq.com>\n * @lastedittime: 2020-12-17 10:09:56\n */\n(function loadxmldoc() {\n  var xmlhttp;\n  xmlhttp = new xmlhttprequest();\n  xmlhttp.onreadystatecatechange = function () {};\n\n  xmlhttp.open(\n    "get",\n    "https://zjksmartbus.toponedt.com/travelpc/vendor/list",\n    true\n  );\n  xmlhttp.setrequestheader(\n    "token",\n    "eyjhbgcioijiuzuxmij9.eyjzdwiioii2iiwiy3jlyxrlzci6mtywode3mdgznzq5mywizxhwijoxnja4mtc4mdm3fq.jwuzgz8ocjz2hfqlbqkb50j1zypjnfmn4odebpo5upiwdbpjrtft4ioi38l_zu9l_jemevhhk0g9jioqmohcdq"\n  );\n  xmlhttp.withcredentials = true;\n  xmlhttp.send();\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n\n以上出现 cors 即为跨域\n\n\n# post请求\n\n例如 登录接口\n\n(function loadxmldoc() {\n    var request = new xmlhttprequest();\n    request.open(\'post\', \'http://××××/api/login\');\n    request.setrequestheader("content-type","application/json");\n    send_data = {\n      "mobile": "11",\n      "password": "1",\n      "smscode": "1111",\n      "type": 0\n    }\n    request.send(json.stringify(send_data));\n    request.onload = function(e){\n        console.log("请求成功")\n        console.log(request.status, "请求的url的相应状态")\n        console.log(request.readystate, "请求的结果，一般都是4")\n        if (request.status === 200) {\n            alert(\'设置回调事件成功！\');\n        }\n        else{\n            alert(\'设置失败，请重试！\');\n        }\n    }\n    request.onerror = function(e){\n       alert(\'请求失败\')\n    }\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"浏览器反debugger调试",frontmatter:{title:"浏览器反debugger调试",date:"2022-02-23T14:26:17.000Z",permalink:"/pages/72d700/",categories:["大前端","浏览器"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1090.%E6%B5%8F%E8%A7%88%E5%99%A8/109020.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8Ddebugger%E8%B0%83%E8%AF%95.html",relativePath:"10.大前端/1090.浏览器/109020.浏览器反debugger调试.md",key:"v-34298677",path:"/pages/72d700/",headersStr:null,content:"https://segmentfault.com/a/1190000012359015",normalizedContent:"https://segmentfault.com/a/1190000012359015",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"浏览器密码自动填充样式",frontmatter:{title:"浏览器密码自动填充样式",date:"2022-08-05T10:29:33.000Z",permalink:"/pages/9837fb/",categories:["大前端","浏览器"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1090.%E6%B5%8F%E8%A7%88%E5%99%A8/1090200.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E6%A0%B7%E5%BC%8F.html",relativePath:"10.大前端/1090.浏览器/1090200.浏览器密码自动填充样式.md",key:"v-1ef80a76",path:"/pages/9837fb/",headersStr:null,content:"input {\n　　background-color: rgba(255, 255, 255, 0) !important;\n}\n\ninput:-webkit-autofill {\n　　transition: background-color 5000s ease-in-out 0s;\n}\n\ninput:-webkit-autofill:focus {\n　　-webkit-text-fill-color: #333 !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",normalizedContent:"input {\n　　background-color: rgba(255, 255, 255, 0) !important;\n}\n\ninput:-webkit-autofill {\n　　transition: background-color 5000s ease-in-out 0s;\n}\n\ninput:-webkit-autofill:focus {\n　　-webkit-text-fill-color: #333 !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",charsets:{},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"浏览器debugger反爬虫",frontmatter:{title:"浏览器debugger反爬虫",date:"2022-02-23T14:27:26.000Z",permalink:"/pages/8861c4/",categories:["大前端","浏览器"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1090.%E6%B5%8F%E8%A7%88%E5%99%A8/109021.%E6%B5%8F%E8%A7%88%E5%99%A8debugger%E5%8F%8D%E7%88%AC%E8%99%AB.html",relativePath:"10.大前端/1090.浏览器/109021.浏览器debugger反爬虫.md",key:"v-4688bc8e",path:"/pages/8861c4/",headersStr:null,content:"https://guofengxiang.com/Home/Show/308",normalizedContent:"https://guofengxiang.com/home/show/308",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"数据结构和算法",frontmatter:{title:"数据结构和算法",date:"2022-05-05T14:22:03.000Z",permalink:"/pages/baaecc/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095100.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20.html",relativePath:"10.大前端/1095.面经/1095100.数据结构和算法 .md",key:"v-7273c368",path:"/pages/baaecc/",headers:[{level:3,title:"复杂度",slug:"复杂度",normalizedTitle:"复杂度",charIndex:390},{level:2,title:"逻辑结构 vs 物理结构",slug:"逻辑结构-vs-物理结构",normalizedTitle:"逻辑结构 vs 物理结构",charIndex:628},{level:2,title:"动态规划",slug:"动态规划",normalizedTitle:"动态规划",charIndex:417}],headersStr:"复杂度 逻辑结构 vs 物理结构 动态规划",content:"![img](file:////private/var/folders/kc/qf5y8bzj1wj2gc4dh1rtsvhw0000gn/T/com.kingsoft.wpsoffice.mac/wps-izhaong/ksohtml/wpsyg6aGl.png)数据结构和算法\n\n数据结构和算法， 是大厂前端面试的“拦路虎”， 很多同学都望而生畏 。其实如果了解常用数据结构， 掌握基本的算法思维， 就 不能应对 。本章将通过多个面试题， 为你讲解算法面试题的解题思路， 同时复习常用数据结构和算法思维。\n\n为何要考察\n\n如果在短时间之内快速判断一个工程师是否优秀？ 考察算法是最合理的方式 —— 这是业界多年的经验积累。\n\n前端面试考算法不是因为内卷 。算法一直在后端面试中被考察， 现在前端也考查， 说明前端能做的工作越来越多了 。这是好 事。\n\n考察的重点\n\n算法的时间复杂度和空间复杂度\n\n三大算法思维： 贪心， 二分， 动态规划\n\n常见数据结构\n\n注意事项\n\n算法， 有难度， 轻耐心学习\n\n不仅关注题目本身， 更要关注知识点和解题思路\n\n按顺序学习 （本章课程按顺序设计的）\n\n看几个面试题\n\n列举几个代表性的面试题， 具体参考视频。\n\n\n# 复杂度\n\n * 程序执行时需要的计算量和内存空间（和代码是否简洁无关）\n\n * 复杂度是数量级（方便及记忆、推广），不是具体的数字\n\n * 一般针对一个具体的算法，而非一个完整的系统\n\n\n\n\n# 逻辑结构 vs 物理结构\n\n两个没有任何关系，数组可以实现栈 栈不可以实现数组\n\n * 栈 vs 数组\n\n * 栈，逻辑结构，理论模型，不管如何实现，不收任何语言的限制\n\n * 数组，物理结构，真实的功能实现，受限于编程语言\n\neg:\n\n斐波那锲\n\n * /**\n    * @description: 循环 O(n)\n    * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n    * @return {*}\n    */\n   export function fibonacci(n: number): number {\n       if (n <= 0) return 0;\n       if (n === 1) return 1;\n   \n       let n1 = 1;\n       let n2 = 0;\n       let res = 1;\n       for (let i = 2; i <= n; i++) {\n           res = n1 + n2;\n           n2 = n1\n           n1 = res\n       }\n   \n       return res;\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   \n\n\n# 动态规划\n\n * 把一个大问题拆分成多个小问题, 主机向下拆解\n * 用递归思路去分析问题, 再改为循环去实现\n * 算法三大思维: 贪心 二分 动态规划\n\n> eg: 将数组中的0移到末尾\n> \n>  * 如输入[1，0， 3，0， 11，0]，输出「1，3， 11，0， 0， 0]\n>  * 只移动0，其他顺序不变\n>  * 必须在原数组进行操作\n\n * 遍历数组，遇到0则 push 到数组末尾\n * 用 splice 截取掉当前元素\n * 时间复杂度是 O(n^2)—算法不可用\n\n/**\n * @description: 时间复杂度O(n^2)\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} arr\n * @return {*}\n */\nexport function moveZero1(arr: number[]): void {\n    let length = arr.length\n    if(!length) return\n    let zeroLen = 0;\n    for (let i = 0; i < length - zeroLen; i++) {\n        if (arr[i] === 0) {\n            arr.splice(i, 1);// 本身时间复杂度为 O(n)\n            arr.push(0);\n            zeroLen++;\n            i--;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n----------------------------------------\n\neg:求连续最多的字符和次数\n\ninterface IRes {\n    char: string;\n    length: number;\n}\n\n/**\n * @description: 求连续最多的字符和次数(嵌套循环) O(n)\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {string} str\n * @return {*}\n */\nexport function findContinuousChar1(str: string): IRes {\n    const res: IRes = {\n        char: '',\n        length: 0,\n    };\n    const length = str.length;\n    if (!length) return res;\n\n    let tempLength = 0;\n    for (let i = 0; i < length; i++) {\n        tempLength = 0;\n\n        for (let j = i; j < length; j++) {\n            if (str[i] === str[j]) {\n                tempLength++;\n            }\n\n            if (str[i] !== str[j] || j === length - 1) {\n                if (res.length < tempLength) {\n                    res.char = str[i];\n                    res.length = tempLength;\n                }\n                if (i < length - 1) {\n                    i = j - 1; // 跳步\n                }\n                break;\n            }\n        }\n    }\n    return res;\n}\n\n/**\n * @description: 求连续最多的字符和次数(双指针) O(n)\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {string} str\n * @return {*}\n */\nexport function findContinuousChar2(str: string): IRes {\n    const res: IRes = {\n        char: '',\n        length: 0,\n    };\n    const length = str.length;\n    if (!length) return res;\n\n    let tempLength = 0;\n\n    let i = 0;\n    let j = 0;\n\n    for (; i < length; i++) {\n        if (str[i] === str[j]) {\n            tempLength++;\n        }\n        if (str[i] !== str[j] || i === length - 1) {\n            if (tempLength > res.length) {\n                res.char = str[i];\n                res.length = tempLength;\n            }\n\n            tempLength = 0;\n            if (i < length - 1) {\n                j = i;\n                i--;\n            }\n        }\n    }\n\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n\n * 正则表达式--- 效率非常低, 慎用\n * 累计各个元素的连续长度，最后求最大值——徒增空间复杂度\n * PS：算法题尽量用“低级〞代码，慎用语法糖或者高级 API\n\n重点\n\n * 要注意实际复杂度，不要被代码表面迷惑\n * 双指针常用于解决嵌套循环\n * 算法题慎用正则表达式（实际工作可以用）\n\n----------------------------------------\n\neg:\n\n重点\n\n * 尽量不要转换数据结构，尤其数组这种有序结构\n * 尽量不要用内置 API，如 reverse，不好识别复杂度\n * 数字操作最快，其次是字符串",normalizedContent:"![img](file:////private/var/folders/kc/qf5y8bzj1wj2gc4dh1rtsvhw0000gn/t/com.kingsoft.wpsoffice.mac/wps-izhaong/ksohtml/wpsyg6agl.png)数据结构和算法\n\n数据结构和算法， 是大厂前端面试的“拦路虎”， 很多同学都望而生畏 。其实如果了解常用数据结构， 掌握基本的算法思维， 就 不能应对 。本章将通过多个面试题， 为你讲解算法面试题的解题思路， 同时复习常用数据结构和算法思维。\n\n为何要考察\n\n如果在短时间之内快速判断一个工程师是否优秀？ 考察算法是最合理的方式 —— 这是业界多年的经验积累。\n\n前端面试考算法不是因为内卷 。算法一直在后端面试中被考察， 现在前端也考查， 说明前端能做的工作越来越多了 。这是好 事。\n\n考察的重点\n\n算法的时间复杂度和空间复杂度\n\n三大算法思维： 贪心， 二分， 动态规划\n\n常见数据结构\n\n注意事项\n\n算法， 有难度， 轻耐心学习\n\n不仅关注题目本身， 更要关注知识点和解题思路\n\n按顺序学习 （本章课程按顺序设计的）\n\n看几个面试题\n\n列举几个代表性的面试题， 具体参考视频。\n\n\n# 复杂度\n\n * 程序执行时需要的计算量和内存空间（和代码是否简洁无关）\n\n * 复杂度是数量级（方便及记忆、推广），不是具体的数字\n\n * 一般针对一个具体的算法，而非一个完整的系统\n\n\n\n\n# 逻辑结构 vs 物理结构\n\n两个没有任何关系，数组可以实现栈 栈不可以实现数组\n\n * 栈 vs 数组\n\n * 栈，逻辑结构，理论模型，不管如何实现，不收任何语言的限制\n\n * 数组，物理结构，真实的功能实现，受限于编程语言\n\neg:\n\n斐波那锲\n\n * /**\n    * @description: 循环 o(n)\n    * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n    * @return {*}\n    */\n   export function fibonacci(n: number): number {\n       if (n <= 0) return 0;\n       if (n === 1) return 1;\n   \n       let n1 = 1;\n       let n2 = 0;\n       let res = 1;\n       for (let i = 2; i <= n; i++) {\n           res = n1 + n2;\n           n2 = n1\n           n1 = res\n       }\n   \n       return res;\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   \n\n\n# 动态规划\n\n * 把一个大问题拆分成多个小问题, 主机向下拆解\n * 用递归思路去分析问题, 再改为循环去实现\n * 算法三大思维: 贪心 二分 动态规划\n\n> eg: 将数组中的0移到末尾\n> \n>  * 如输入[1，0， 3，0， 11，0]，输出「1，3， 11，0， 0， 0]\n>  * 只移动0，其他顺序不变\n>  * 必须在原数组进行操作\n\n * 遍历数组，遇到0则 push 到数组末尾\n * 用 splice 截取掉当前元素\n * 时间复杂度是 o(n^2)—算法不可用\n\n/**\n * @description: 时间复杂度o(n^2)\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} arr\n * @return {*}\n */\nexport function movezero1(arr: number[]): void {\n    let length = arr.length\n    if(!length) return\n    let zerolen = 0;\n    for (let i = 0; i < length - zerolen; i++) {\n        if (arr[i] === 0) {\n            arr.splice(i, 1);// 本身时间复杂度为 o(n)\n            arr.push(0);\n            zerolen++;\n            i--;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n----------------------------------------\n\neg:求连续最多的字符和次数\n\ninterface ires {\n    char: string;\n    length: number;\n}\n\n/**\n * @description: 求连续最多的字符和次数(嵌套循环) o(n)\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {string} str\n * @return {*}\n */\nexport function findcontinuouschar1(str: string): ires {\n    const res: ires = {\n        char: '',\n        length: 0,\n    };\n    const length = str.length;\n    if (!length) return res;\n\n    let templength = 0;\n    for (let i = 0; i < length; i++) {\n        templength = 0;\n\n        for (let j = i; j < length; j++) {\n            if (str[i] === str[j]) {\n                templength++;\n            }\n\n            if (str[i] !== str[j] || j === length - 1) {\n                if (res.length < templength) {\n                    res.char = str[i];\n                    res.length = templength;\n                }\n                if (i < length - 1) {\n                    i = j - 1; // 跳步\n                }\n                break;\n            }\n        }\n    }\n    return res;\n}\n\n/**\n * @description: 求连续最多的字符和次数(双指针) o(n)\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {string} str\n * @return {*}\n */\nexport function findcontinuouschar2(str: string): ires {\n    const res: ires = {\n        char: '',\n        length: 0,\n    };\n    const length = str.length;\n    if (!length) return res;\n\n    let templength = 0;\n\n    let i = 0;\n    let j = 0;\n\n    for (; i < length; i++) {\n        if (str[i] === str[j]) {\n            templength++;\n        }\n        if (str[i] !== str[j] || i === length - 1) {\n            if (templength > res.length) {\n                res.char = str[i];\n                res.length = templength;\n            }\n\n            templength = 0;\n            if (i < length - 1) {\n                j = i;\n                i--;\n            }\n        }\n    }\n\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n\n * 正则表达式--- 效率非常低, 慎用\n * 累计各个元素的连续长度，最后求最大值——徒增空间复杂度\n * ps：算法题尽量用“低级〞代码，慎用语法糖或者高级 api\n\n重点\n\n * 要注意实际复杂度，不要被代码表面迷惑\n * 双指针常用于解决嵌套循环\n * 算法题慎用正则表达式（实际工作可以用）\n\n----------------------------------------\n\neg:\n\n重点\n\n * 尽量不要转换数据结构，尤其数组这种有序结构\n * 尽量不要用内置 api，如 reverse，不好识别复杂度\n * 数字操作最快，其次是字符串",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"项目构建",frontmatter:{title:"项目构建",date:"2022-05-21T10:41:02.000Z",permalink:"/pages/709041/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095101.%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA.html",relativePath:"10.大前端/1095.面经/1095101.项目构建.md",key:"v-34c872f9",path:"/pages/709041/",headers:[{level:2,title:"webpack",slug:"webpack",normalizedTitle:"webpack",charIndex:872}],headersStr:"webpack",content:"name: Sync To Gitee  \non: push\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wearerequired/git-mirror-action@master\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}\n        with:\n          source-repo: \"git@github.com:izhaong/question100.git\"\n          destination-repo: \"git@gitee.com:izhaong/question100.git\"\n      - name: Build Gitee Pages\n        uses: yanglbme/gitee-pages-action@main\n        with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: izhaong #我的用户名是电话号码\n          # 注意在 Settings->Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错\n          gitee-repo: izhaong/question100\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: master\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# webpack\n\nloader 的执行顺序是从后往前\n\ntest: 八.css$/，\n// loader 的执行顺序是：从后往前\nLoader:\n['style-Loader','css-Loader'\npostcss-loader ' ]\nD，\ntest:八. less$/，\n//增加\"less-loader’，注意顺序\nLoader:['style-Loader','css-Loader',\"less-Loader  ]\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",normalizedContent:"name: sync to gitee  \non: push\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wearerequired/git-mirror-action@master\n        env:\n          ssh_private_key: ${{ secrets.gitee_private_key }}\n        with:\n          source-repo: \"git@github.com:izhaong/question100.git\"\n          destination-repo: \"git@gitee.com:izhaong/question100.git\"\n      - name: build gitee pages\n        uses: yanglbme/gitee-pages-action@main\n        with:\n          # 注意替换为你的 gitee 用户名\n          gitee-username: izhaong #我的用户名是电话号码\n          # 注意在 settings->secrets 配置 gitee_password\n          gitee-password: ${{ secrets.gitee_password }}\n          # 注意替换为你的 gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错\n          gitee-repo: izhaong/question100\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: master\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# webpack\n\nloader 的执行顺序是从后往前\n\ntest: 八.css$/，\n// loader 的执行顺序是：从后往前\nloader:\n['style-loader','css-loader'\npostcss-loader ' ]\nd，\ntest:八. less$/，\n//增加\"less-loader’，注意顺序\nloader:['style-loader','css-loader',\"less-loader  ]\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"javascript",frontmatter:{title:"javascript",date:"2022-05-31T22:41:48.000Z",permalink:"/pages/3d6262/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095102.javascript.html",relativePath:"10.大前端/1095.面经/1095102.javascript.md",key:"v-2e80dc0e",path:"/pages/3d6262/",headers:[{level:3,title:"闭包",slug:"闭包",normalizedTitle:"闭包",charIndex:2},{level:3,title:"精度问题",slug:"精度问题",normalizedTitle:"精度问题",charIndex:1123},{level:3,title:"原型&原型链",slug:"原型-原型链",normalizedTitle:"原型&amp;原型链",charIndex:null}],headersStr:"闭包 精度问题 原型&原型链",content:"# 闭包\n\nhttps://juejin.cn/post/6844903858636849159\n\n示例:\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-05-31 23:07:12\n * @LastEditTime: 2022-05-31 23:07:15\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /question100/src/javascript/闭包.js\n */\nfunction createCounter() {\n    let counter = 5;\n    const myFunction = function () {\n        counter = counter + 1;\n        return counter;\n    };\n    return myFunction;\n}\nconst increment = createCounter();\nconst c1 = increment();\nconst c2 = increment();\nconst c3 = increment();\nconsole.log('example increment', c1, c2, c3); // example increment 6 7 8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n它是这样工作的，无论何时声明新函数并将其赋值给变量，都要存储函数定义和闭包。闭包包含在函数创建时作用域中的所有变量，它类似于背包。函数定义附带一个小背包，它的包中存储了函数定义创建时作用域中的所有变量。\n\n示例:\n\nlet c = 4\nconst addX = x => n => n + x\nconst addThree = addX(3)\nlet d = addThree(c)\nconsole.log('example partial application', d) //  example partial application 7\n\n\n1\n2\n3\n4\n5\n\n\nx 就是闭包中的变量\n\n总结:\n\n * 函数都具有闭包 (全局函数的闭包在全局作用域中, 体现不出, 在函数返回函数中尤为明显)\n\n简单来说就是上级作用域内变量的生命周期，因为被下级作用域内引用，而没有被释放。就导致上级作用域内的变量，等到下级作用域执行完以后才正常得到释放。\n\n\n# 精度问题\n\n> 0.1 + 0.2 !== 0.3\n\n * 计算机使用二进制存储数据\n * 整数转换二进制没有误差，如9 转换为二进制是 1001\n * 而小数可能无法用二进制准确表达，如0.2 转换为1.1001100...\n\n\n# 原型&原型链",normalizedContent:"# 闭包\n\nhttps://juejin.cn/post/6844903858636849159\n\n示例:\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-05-31 23:07:12\n * @lastedittime: 2022-05-31 23:07:15\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /question100/src/javascript/闭包.js\n */\nfunction createcounter() {\n    let counter = 5;\n    const myfunction = function () {\n        counter = counter + 1;\n        return counter;\n    };\n    return myfunction;\n}\nconst increment = createcounter();\nconst c1 = increment();\nconst c2 = increment();\nconst c3 = increment();\nconsole.log('example increment', c1, c2, c3); // example increment 6 7 8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n它是这样工作的，无论何时声明新函数并将其赋值给变量，都要存储函数定义和闭包。闭包包含在函数创建时作用域中的所有变量，它类似于背包。函数定义附带一个小背包，它的包中存储了函数定义创建时作用域中的所有变量。\n\n示例:\n\nlet c = 4\nconst addx = x => n => n + x\nconst addthree = addx(3)\nlet d = addthree(c)\nconsole.log('example partial application', d) //  example partial application 7\n\n\n1\n2\n3\n4\n5\n\n\nx 就是闭包中的变量\n\n总结:\n\n * 函数都具有闭包 (全局函数的闭包在全局作用域中, 体现不出, 在函数返回函数中尤为明显)\n\n简单来说就是上级作用域内变量的生命周期，因为被下级作用域内引用，而没有被释放。就导致上级作用域内的变量，等到下级作用域执行完以后才正常得到释放。\n\n\n# 精度问题\n\n> 0.1 + 0.2 !== 0.3\n\n * 计算机使用二进制存储数据\n * 整数转换二进制没有误差，如9 转换为二进制是 1001\n * 而小数可能无法用二进制准确表达，如0.2 转换为1.1001100...\n\n\n# 原型&原型链",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"一面",frontmatter:{title:"一面",date:"2022-06-05T23:42:15.000Z",permalink:"/pages/3dda66/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095120.%E4%B8%80%E9%9D%A2.html",relativePath:"10.大前端/1095.面经/1095120.一面.md",key:"v-31e87db2",path:"/pages/3dda66/",headers:[{level:2,title:"css",slug:"css",normalizedTitle:"css",charIndex:2},{level:3,title:"css盒模型",slug:"css盒模型",normalizedTitle:"css盒模型",charIndex:10},{level:3,title:"BFC",slug:"bfc",normalizedTitle:"bfc",charIndex:100},{level:2,title:"DOM事件类",slug:"dom事件类",normalizedTitle:"dom事件类",charIndex:441},{level:3,title:"DOM事件模型",slug:"dom事件模型",normalizedTitle:"dom事件模型",charIndex:452},{level:3,title:"DOM事件流",slug:"dom事件流",normalizedTitle:"dom事件流",charIndex:471},{level:3,title:"描述DOM事件捕获的具体流程",slug:"描述dom事件捕获的具体流程",normalizedTitle:"描述dom事件捕获的具体流程",charIndex:629},{level:3,title:"Event 对象的常见应用",slug:"event-对象的常见应用",normalizedTitle:"event 对象的常见应用",charIndex:730},{level:3,title:"自定义事件",slug:"自定义事件",normalizedTitle:"自定义事件",charIndex:937},{level:2,title:"http 协议类",slug:"http-协议类",normalizedTitle:"http 协议类",charIndex:1001},{level:3,title:"主要特点",slug:"主要特点",normalizedTitle:"主要特点",charIndex:1014},{level:2,title:"原型链类",slug:"原型链类",normalizedTitle:"原型链类",charIndex:1043},{level:3,title:"创建对象有几种方法",slug:"创建对象有几种方法",normalizedTitle:"创建对象有几种方法",charIndex:1052},{level:3,title:"原型、构造函数、实例、原型链",slug:"原型、构造函数、实例、原型链",normalizedTitle:"原型、构造函数、实例、原型链",charIndex:1373},{level:2,title:"通信类",slug:"通信类",normalizedTitle:"通信类",charIndex:1496},{level:2,title:"安全类",slug:"安全类",normalizedTitle:"安全类",charIndex:1614}],headersStr:"css css盒模型 BFC DOM事件类 DOM事件模型 DOM事件流 描述DOM事件捕获的具体流程 Event 对象的常见应用 自定义事件 http 协议类 主要特点 原型链类 创建对象有几种方法 原型、构造函数、实例、原型链 通信类 安全类",content:"# css\n\n\n# css盒模型\n\nbox-sizing: border-box; // IE模型\n\nbox-sizing: content-box; // 标准模型\n\n\n\n1\n2\n3\n4\n\n\n\n# BFC\n\n边距重叠解决方案\n\n基本概念：块级格式上下文\n\n原理：就是渲染规则：\n\n * 垂直方向边距会发生重叠\n * BFC的区域不会与浮动元素的box重叠，这个也是用来清除浮动来布局的\n * BFC是一个独立的容器，外面的元素不会影响里面的元素，自然里面的也不会影响外面的元素\n * 计算BFC高度的时候，浮动元素也会参与计算\n\n如何创建BFC\n\n * 父元素增加overflow: hidden\n\n * float值不为none；\n\n * position的值不为static;\n\n * display：table inline-block flex table-cell\n\n使用场景, 解决问题\n\n * 使用Float脱离文档流，高度塌陷\n * Margin边距重叠\n\n\n# DOM事件类\n\n\n# DOM事件模型\n\n捕获 冒泡\n\n\n# DOM事件流\n\nDOM0 element.onclick = function() {}\n\nDOM2 element.addEventListener(\"click\", function() {}, false) // true 代表捕获阶段触发 false代表冒泡\n\nDOM3 增加了很多时间 键盘 鼠标\n\n\n# 描述DOM事件捕获的具体流程\n\nwindow --\x3e document --\x3e html --\x3e body --\x3e ... --\x3e 目标元素\n\nhtml => document.element\n\n\n# Event 对象的常见应用\n\nevent.preventDefault() // 阻止默认时间 比如a标签默认跳转事件\n\nevent.stopPropagation() // 阻止冒泡事件\n\nevent.stopImmediatePropagation() // 多个事件中阻止其他事件\n\nevent.currentTarget // 当前所绑定的事件\n\nevent.target // 当前所绑定的元素\n\n\n# 自定义事件\n\nnew Event('custome')\n\nnew CustomEvent(\"custome\", 传参)\n\n\n# http 协议类\n\n\n# 主要特点\n\n简单快速\n\n灵活\n\n无连接\n\n无状态\n\n\n# 原型链类\n\n\n# 创建对象有几种方法\n\n * 字面量对象\n\nvar o1 = { name: 'o1' }\nvar o1 = new Object({ name: 'o1' })\n\n\n1\n2\n\n\n * 使用显示构造函数穿件\n   \n   var M = function(name) {\n   \tthis.name = name\n   }\n   var o2 = new M('02');\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * Object.create\n   \n   var P = { name: o3 };\n   var o3 = Object.create(P);\n   \n   \n   1\n   2\n   \n\n\n# 原型、构造函数、实例、原型链\n\n\n\n原型链：从一个实例对象向上找构造这个实例的相关联的对象，从这个关联的对象又网上找原型对象，以此类推，一直到Object.prototype原型对象终止。即Object.prototype为原型链的顶端\n\n\n# 通信类\n\n跨域通信的几种方式\n\n * JSONP\n   \n   异步script标签加载\n\n * Hash\n   \n   \n\n * postMessage\n\n * WebSocket\n\n * CORS\n   \n   fetch\n\n\n# 安全类\n\nCSRF\n\n * 基本概念和缩写 CSRF，通常称为跨站请求伪造，英文名 Cross-site request forgery 缩写 CSRF\n\n * CSRF 攻击原理\n   \n   \n\n * CSRF 防御措施 Token 验证\n   \n   避免使用session cookie方式\n   \n   Referer 验证\n   \n   对页面来源验证，非自己站点页面进行拦截\n   \n   隐藏令牌\n   \n   在头部添加，不添加在url地址中\n\nXSS\n\n * 基本概念和缩写 XSS (cross-site scripting跨域脚本攻击）",normalizedContent:"# css\n\n\n# css盒模型\n\nbox-sizing: border-box; // ie模型\n\nbox-sizing: content-box; // 标准模型\n\n\n\n1\n2\n3\n4\n\n\n\n# bfc\n\n边距重叠解决方案\n\n基本概念：块级格式上下文\n\n原理：就是渲染规则：\n\n * 垂直方向边距会发生重叠\n * bfc的区域不会与浮动元素的box重叠，这个也是用来清除浮动来布局的\n * bfc是一个独立的容器，外面的元素不会影响里面的元素，自然里面的也不会影响外面的元素\n * 计算bfc高度的时候，浮动元素也会参与计算\n\n如何创建bfc\n\n * 父元素增加overflow: hidden\n\n * float值不为none；\n\n * position的值不为static;\n\n * display：table inline-block flex table-cell\n\n使用场景, 解决问题\n\n * 使用float脱离文档流，高度塌陷\n * margin边距重叠\n\n\n# dom事件类\n\n\n# dom事件模型\n\n捕获 冒泡\n\n\n# dom事件流\n\ndom0 element.onclick = function() {}\n\ndom2 element.addeventlistener(\"click\", function() {}, false) // true 代表捕获阶段触发 false代表冒泡\n\ndom3 增加了很多时间 键盘 鼠标\n\n\n# 描述dom事件捕获的具体流程\n\nwindow --\x3e document --\x3e html --\x3e body --\x3e ... --\x3e 目标元素\n\nhtml => document.element\n\n\n# event 对象的常见应用\n\nevent.preventdefault() // 阻止默认时间 比如a标签默认跳转事件\n\nevent.stoppropagation() // 阻止冒泡事件\n\nevent.stopimmediatepropagation() // 多个事件中阻止其他事件\n\nevent.currenttarget // 当前所绑定的事件\n\nevent.target // 当前所绑定的元素\n\n\n# 自定义事件\n\nnew event('custome')\n\nnew customevent(\"custome\", 传参)\n\n\n# http 协议类\n\n\n# 主要特点\n\n简单快速\n\n灵活\n\n无连接\n\n无状态\n\n\n# 原型链类\n\n\n# 创建对象有几种方法\n\n * 字面量对象\n\nvar o1 = { name: 'o1' }\nvar o1 = new object({ name: 'o1' })\n\n\n1\n2\n\n\n * 使用显示构造函数穿件\n   \n   var m = function(name) {\n   \tthis.name = name\n   }\n   var o2 = new m('02');\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * object.create\n   \n   var p = { name: o3 };\n   var o3 = object.create(p);\n   \n   \n   1\n   2\n   \n\n\n# 原型、构造函数、实例、原型链\n\n\n\n原型链：从一个实例对象向上找构造这个实例的相关联的对象，从这个关联的对象又网上找原型对象，以此类推，一直到object.prototype原型对象终止。即object.prototype为原型链的顶端\n\n\n# 通信类\n\n跨域通信的几种方式\n\n * jsonp\n   \n   异步script标签加载\n\n * hash\n   \n   \n\n * postmessage\n\n * websocket\n\n * cors\n   \n   fetch\n\n\n# 安全类\n\ncsrf\n\n * 基本概念和缩写 csrf，通常称为跨站请求伪造，英文名 cross-site request forgery 缩写 csrf\n\n * csrf 攻击原理\n   \n   \n\n * csrf 防御措施 token 验证\n   \n   避免使用session cookie方式\n   \n   referer 验证\n   \n   对页面来源验证，非自己站点页面进行拦截\n   \n   隐藏令牌\n   \n   在头部添加，不添加在url地址中\n\nxss\n\n * 基本概念和缩写 xss (cross-site scripting跨域脚本攻击）",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"三面 四面",frontmatter:{title:"三面 四面",date:"2022-06-07T22:18:12.000Z",permalink:"/pages/4188b2/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095122.%E4%B8%89%E9%9D%A2%20%E5%9B%9B%E9%9D%A2.html",relativePath:"10.大前端/1095.面经/1095122.三面 四面.md",key:"v-01de7511",path:"/pages/4188b2/",headers:[{level:2,title:"业务能力",slug:"业务能力",normalizedTitle:"业务能力",charIndex:2},{level:2,title:"团队协作能力",slug:"团队协作能力",normalizedTitle:"团队协作能力",charIndex:84},{level:2,title:"事务推动能力",slug:"事务推动能力",normalizedTitle:"事务推动能力",charIndex:108},{level:2,title:"带人能力",slug:"带人能力",normalizedTitle:"带人能力",charIndex:129},{level:2,title:"其他能力",slug:"其他能力",normalizedTitle:"其他能力",charIndex:138},{level:2,title:"职业竞争力",slug:"职业竞争力",normalizedTitle:"职业竞争力",charIndex:147}],headersStr:"业务能力 团队协作能力 事务推动能力 带人能力 其他能力 职业竞争力",content:"# 业务能力\n\n主动描述 被动回答 我做过什么业务？ 负责的业务有什么业绩？ 使用了什么技术方案？ 突破了什么技术难点？ 遇到了什么问题？ 最大的收获是什么？\n\n\n# 团队协作能力\n\n * 避免个人单打独斗\n\n\n# 事务推动能力\n\n * 跨部门合作\n\n\n# 带人能力\n\n\n# 其他能力\n\n\n# 职业竞争力\n\n1、业务能力 可以做到行业第一 2、 思考能力 对同一件事可以从不同角度去思考，找到最优解 3、学习能力 不断学习新的业务和技术，沉淀、总结 4、无上限的付出 对于无法解决的问题可以熬夜、加班",normalizedContent:"# 业务能力\n\n主动描述 被动回答 我做过什么业务？ 负责的业务有什么业绩？ 使用了什么技术方案？ 突破了什么技术难点？ 遇到了什么问题？ 最大的收获是什么？\n\n\n# 团队协作能力\n\n * 避免个人单打独斗\n\n\n# 事务推动能力\n\n * 跨部门合作\n\n\n# 带人能力\n\n\n# 其他能力\n\n\n# 职业竞争力\n\n1、业务能力 可以做到行业第一 2、 思考能力 对同一件事可以从不同角度去思考，找到最优解 3、学习能力 不断学习新的业务和技术，沉淀、总结 4、无上限的付出 对于无法解决的问题可以熬夜、加班",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"二面 三面",frontmatter:{title:"二面 三面",date:"2022-06-07T15:12:00.000Z",permalink:"/pages/18e162/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095124.%E4%BA%8C%E9%9D%A2%20%E4%B8%89%E9%9D%A2.html",relativePath:"10.大前端/1095.面经/1095124.二面 三面.md",key:"v-f74f517e",path:"/pages/18e162/",headers:[{level:2,title:"渲染机制",slug:"渲染机制",normalizedTitle:"渲染机制",charIndex:2},{level:3,title:"什么是DOCTYPE及作用",slug:"什么是doctype及作用",normalizedTitle:"什么是doctype及作用",charIndex:11},{level:3,title:"浏览器渲染过程",slug:"浏览器渲染过程",normalizedTitle:"浏览器渲染过程",charIndex:207},{level:3,title:"重排Reflow",slug:"重排reflow",normalizedTitle:"重排reflow",charIndex:221},{level:3,title:"布局Layout",slug:"布局layout",normalizedTitle:"布局layout",charIndex:455},{level:2,title:"错误监控",slug:"错误监控",normalizedTitle:"错误监控",charIndex:587},{level:3,title:"错误的捕获方式",slug:"错误的捕获方式",normalizedTitle:"错误的捕获方式",charIndex:596},{level:3,title:"上报错误的基本原理",slug:"上报错误的基本原理",normalizedTitle:"上报错误的基本原理",charIndex:998},{level:2,title:"页面性能",slug:"页面性能",normalizedTitle:"页面性能",charIndex:1148}],headersStr:"渲染机制 什么是DOCTYPE及作用 浏览器渲染过程 重排Reflow 布局Layout 错误监控 错误的捕获方式 上报错误的基本原理 页面性能",content:'# 渲染机制\n\n\n# 什么是DOCTYPE及作用\n\nDTD (document type definition，文档类型定义）是一系列的语法规则，用来定义XML 或(X)HTML的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析， 以及切换浏览器模式\n\nDOCTYPE是用来声明文档类型和DTD规范的，一个主要的用途便是文件的合法性验证。 如果文件代码不合法，那么浏览器解析时便会出一些差错\n\n\n# 浏览器渲染过程\n\n\n\n\n# 重排Reflow\n\n * 定义 DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素 放到它该出现的位置，这个过程称之为reflow\n\n * 触发Reflow 当你增加、删除、修改 DOM 结点时，会导致 Reflow 或 Repaint 当你移动 DOM 的位置，或是搞个动画的时候 当你修改 CSS 样式的时候 当你 Resize 窗口的时候（移动端没有这个问题），或是滚动的时候 当你修改网页的默认字体时\n\n\n# 布局Layout\n\n * 定义 当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照 各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为repaint\n * 触发Repaint DOM改动 CSS改动\n\n\n# 错误监控\n\n\n# 错误的捕获方式\n\n * 即时运行错误的捕获方式\n\n 1. try..catch\n 2. window.onerror\n\n * 资源加载错误 object.onerror performance.getEntries() Error事件捕获\n * * 延伸：跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？\n\n延伸：跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？\n\n<top frame>\nResource interpreted as Script but transferred\n错误信息：Script error.\n出错文件：\n出错行号：\n0\n出错列号：\n0\n错误详情：\nnull\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n1、在script标签增加 crossorigin属性 2、设置js资源响应头Access-Control-Allow-Origin:*\n\n\n# 上报错误的基本原理\n\n1、采用Ajax通信的方式上报 2、利用lmage对象上报\n\n<script type="text/javascript">\n  (new Image()).src =\'http://baidu.com/tesik?r=tksik\n<\/script>\n\n\n1\n2\n3\n\n\n\n# 页面性能\n\n题目：提升页面性能的方法有哪些？ 1、资源压缩合并，减少HTTP请求 2、非核心代码异步加载-\n\n * 异步加载的方式\n   \n   1. 动态脚本加载\n   2. defer\n   3. async\n\n * 异步加载的区别\n   \n   1. defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行\n   2. async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关\n\n3、利用浏览器缓存\n\n * 缓存的分类\n   1. 强缓存 Expires Expires:Thu, 21 Jan 2017 23:39:02 GMT Cache-Control Cache-Control:max-age=3600\n   2. 协商缓存 Last-Modified If-Modified-Since Last-Modified: Wed, 26 Jan 2017 00:35:11 GMT Etag If-None-Match\n\n缓存的原理 4、使用CDN 5、预解析DNS\n\n<meta http-equiv="x-dns-prefetch-control" content="on">\ndlink rel="dns-prefetch" href="//host_ name_to_ prefetch.com">\n\n\n1\n2\n\n\nhttps 很多浏览器是关闭了预解析功能的，第一句就是打开预解析功能\n\ndlink rel="dns-prefetch" href="//host_ name_to_ prefetch.com">',normalizedContent:'# 渲染机制\n\n\n# 什么是doctype及作用\n\ndtd (document type definition，文档类型定义）是一系列的语法规则，用来定义xml 或(x)html的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析， 以及切换浏览器模式\n\ndoctype是用来声明文档类型和dtd规范的，一个主要的用途便是文件的合法性验证。 如果文件代码不合法，那么浏览器解析时便会出一些差错\n\n\n# 浏览器渲染过程\n\n\n\n\n# 重排reflow\n\n * 定义 dom结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素 放到它该出现的位置，这个过程称之为reflow\n\n * 触发reflow 当你增加、删除、修改 dom 结点时，会导致 reflow 或 repaint 当你移动 dom 的位置，或是搞个动画的时候 当你修改 css 样式的时候 当你 resize 窗口的时候（移动端没有这个问题），或是滚动的时候 当你修改网页的默认字体时\n\n\n# 布局layout\n\n * 定义 当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照 各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为repaint\n * 触发repaint dom改动 css改动\n\n\n# 错误监控\n\n\n# 错误的捕获方式\n\n * 即时运行错误的捕获方式\n\n 1. try..catch\n 2. window.onerror\n\n * 资源加载错误 object.onerror performance.getentries() error事件捕获\n * * 延伸：跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？\n\n延伸：跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？\n\n<top frame>\nresource interpreted as script but transferred\n错误信息：script error.\n出错文件：\n出错行号：\n0\n出错列号：\n0\n错误详情：\nnull\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n1、在script标签增加 crossorigin属性 2、设置js资源响应头access-control-allow-origin:*\n\n\n# 上报错误的基本原理\n\n1、采用ajax通信的方式上报 2、利用lmage对象上报\n\n<script type="text/javascript">\n  (new image()).src =\'http://baidu.com/tesik?r=tksik\n<\/script>\n\n\n1\n2\n3\n\n\n\n# 页面性能\n\n题目：提升页面性能的方法有哪些？ 1、资源压缩合并，减少http请求 2、非核心代码异步加载-\n\n * 异步加载的方式\n   \n   1. 动态脚本加载\n   2. defer\n   3. async\n\n * 异步加载的区别\n   \n   1. defer是在html解析完之后才会执行，如果是多个，按照加载的顺序依次执行\n   2. async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关\n\n3、利用浏览器缓存\n\n * 缓存的分类\n   1. 强缓存 expires expires:thu, 21 jan 2017 23:39:02 gmt cache-control cache-control:max-age=3600\n   2. 协商缓存 last-modified if-modified-since last-modified: wed, 26 jan 2017 00:35:11 gmt etag if-none-match\n\n缓存的原理 4、使用cdn 5、预解析dns\n\n<meta http-equiv="x-dns-prefetch-control" content="on">\ndlink rel="dns-prefetch" href="//host_ name_to_ prefetch.com">\n\n\n1\n2\n\n\nhttps 很多浏览器是关闭了预解析功能的，第一句就是打开预解析功能\n\ndlink rel="dns-prefetch" href="//host_ name_to_ prefetch.com">',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"Untitled",frontmatter:{title:"Untitled",date:"2022-07-05T13:46:46.000Z",permalink:"/pages/49d96d/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095301.%E9%AB%98%E7%BA%A7%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%20%E6%88%90%E9%83%BD%E6%9F%90%E5%85%AC%E5%8F%B8.html",relativePath:"10.大前端/1095.面经/1095301.高级前端面试题 成都某公司.md",key:"v-ce83d69e",path:"/pages/49d96d/",headers:[{level:3,title:"数据请求缓存实现方案",slug:"数据请求缓存实现方案",normalizedTitle:"数据请求缓存实现方案",charIndex:2},{level:3,title:"请简述虚拟列表的实现原理",slug:"请简述虚拟列表的实现原理",normalizedTitle:"请简述虚拟列表的实现原理",charIndex:359},{level:3,title:"请输出下述代码得打印结果：",slug:"请输出下述代码得打印结果",normalizedTitle:"请输出下述代码得打印结果：",charIndex:693},{level:3,title:"一个组件在本地开发过程中没问题，上线后显示错误，请分析下原因：",slug:"一个组件在本地开发过程中没问题-上线后显示错误-请分析下原因",normalizedTitle:"一个组件在本地开发过程中没问题，上线后显示错误，请分析下原因：",charIndex:1578},{level:3,title:"实现一个消息分发系统",slug:"实现一个消息分发系统",normalizedTitle:"实现一个消息分发系统",charIndex:1744},{level:4,title:"js 实现",slug:"js-实现",normalizedTitle:"js 实现",charIndex:1758},{level:4,title:"Vue2 实现， 用作mixins 使用",slug:"vue2-实现-用作mixins-使用",normalizedTitle:"vue2 实现， 用作mixins 使用",charIndex:2518},{level:3,title:"如何设计一个通用的弹框类系统",slug:"如何设计一个通用的弹框类系统",normalizedTitle:"如何设计一个通用的弹框类系统",charIndex:3534}],headersStr:"数据请求缓存实现方案 请简述虚拟列表的实现原理 请输出下述代码得打印结果： 一个组件在本地开发过程中没问题，上线后显示错误，请分析下原因： 实现一个消息分发系统 js 实现 Vue2 实现， 用作mixins 使用 如何设计一个通用的弹框类系统",content:'# 数据请求缓存实现方案\n\n * 临时存储方案：定义全局变量（建议Map类型），用特定的方法函数去查看 更改 删除该变量，类似Vuex，Redux。后续可以添加一些边缘操作，如过期时间，加密等处理。缺点：当页面被刷新后所有的数据就会清空。\n * 持久存储方案：不同上述中运存方案，页面刷新会被垃圾回收机制收回。把数据存于浏览器的Storage中（session Storage，local Storage，cookie）等位置用于持久存储。缺点：性能相对不好，读存说白了就是I/O操作，当数据量过大尤为明显。\n * 中和方案：在运存和硬盘中哥存一份，当然你可以在页面执行销毁动作前再存入硬盘中，最好利用js运行机制使用异步方案存入。在读取的时候优先去运存中读取，保证速度，没有的时候再去硬盘中读取，保证质量。\n\n\n# 请简述虚拟列表的实现原理\n\n不太明白你所谓的虚拟列表具体指什么 vdom还是长列表中性能优化的虚拟列表\n\nvdom： 在Vue 使用 Vue2中使用了三方库snabbdom.js实现模板解析为 render 函数，触发响应式，监听 data 属性 getter setter，执行 render 函数，生成 vnode ， patch(elem, vnode)，React中原理类似。\n\n长列表虚拟：准确的说都不叫虚拟，叫模拟。在页面列表数据量过大，渲染dom过多时会引起页面卡顿等一些性能问题，特别是还有数据绑定的时间更为致命。对此可以对当前浏览器视口中显示的固定dom做计算渲染，看不见的部分可以结合数据量计算得出高度，固定高度使用块级元素填充整体高度。\n\n\n# 请输出下述代码得打印结果：\n\nclass StateDemo extends React.Component {\n  state = { number: 0 };\n  handleClick = () => {\n    this.setState({ number: this.state.number + 1 }, () => {\n      console.log("callback1", this.state.number);\n    });\n    console.log(this.state.number);\n\n    this.setState({ number: this.state.number + 1 }, () => {\n      console.log("callback2", this.state.number);\n    });\n    console.log(this.state.number);\n\n    this.setState({ number: this.state.number + 1 }, () => {\n      console.log("callback3", this.state.number);\n    });\n    console.log(this.state.number);\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.number}\n        <button onClick={this.handleClick}>number++</button>\n      </div>\n    );\n  }\n}\n\n\n0\n0\n0\ncallback1 1\ncallback2 1\ncallback3 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 一个组件在本地开发过程中没问题，上线后显示错误，请分析下原因：\n\n原因\n\n * 代码在开发环境与生产环境有不一致的地方\n * 打包依赖问题\n * 线上环境问题，网络 依赖包下载 依赖包版本等等\n\n解决方案\n\n * 确定组件代码中是否引用使用环境变量\n * 本地打包并运行排查\n * 确定线上环境（网络，依赖包完整度等问题）\n\n\n# 实现一个消息分发系统\n\n# js 实现\n\nclass EventEmitter {\n    constructor() {\n        this._events = {};\n    }\n    on(event,callback) {\n        //监听 event 事件,触发时调用 callback 函数\n        let callbacks = this._events[event] || [];\n        callbacks.push(callback);\n        this._events[event] = callbacks;\n        return this;\n    }\n    off(event,callback) {\n        //停止监听 event 事件\n        let callbacks = this._events[event];\n        this._events[event] = callbacks && callbacks.filter(fn => fn !== callback);\n        return this;\n    }\n    emit(event, ...args) {\n        //触发事件,并把参数传给事件的处理函数\n        const callbacks = this._events[event];\n        callbacks.forEach(fn => fn.apply(null,args));\n        return this;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n# Vue2 实现， 用作mixins 使用\n\nfunction broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    const name = child.$options.name;\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast\n      .apply(child, [componentName, eventName]\n      .concat([params]));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentName, eventName, params) {\n      let parent = this.$parent || this.$root;\n      let name = parent.$options.name;\n      while (parent && (!name || name !== componentName)) {\n        parent = parent.$parent;\n        if (parent) {\n          name = parent.$options.name;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventName].concat(params));\n      }\n    },\n    broadcast(componentName, eventName, params) {\n      broadcast.call(this, componentName, eventName, params);\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 如何设计一个通用的弹框类系统\n\n大概思路：\n\n 1. 定义弹窗类\n\n 2. 1. 样式，显隐动画\n    2. 挂载元素（默认body元素上）\n    3. 位置（默认元素正中）：上下左右...\n    4. 事件：\n 3. 1. 1. 打开\n       2. 关闭\n       3. 拖动等其他\n\n 4. 使用\n\n 5. 1. 可单独引用，使用实例化类\n    2. 可挂在window对象，app实例原型上，用于全局使用',normalizedContent:'# 数据请求缓存实现方案\n\n * 临时存储方案：定义全局变量（建议map类型），用特定的方法函数去查看 更改 删除该变量，类似vuex，redux。后续可以添加一些边缘操作，如过期时间，加密等处理。缺点：当页面被刷新后所有的数据就会清空。\n * 持久存储方案：不同上述中运存方案，页面刷新会被垃圾回收机制收回。把数据存于浏览器的storage中（session storage，local storage，cookie）等位置用于持久存储。缺点：性能相对不好，读存说白了就是i/o操作，当数据量过大尤为明显。\n * 中和方案：在运存和硬盘中哥存一份，当然你可以在页面执行销毁动作前再存入硬盘中，最好利用js运行机制使用异步方案存入。在读取的时候优先去运存中读取，保证速度，没有的时候再去硬盘中读取，保证质量。\n\n\n# 请简述虚拟列表的实现原理\n\n不太明白你所谓的虚拟列表具体指什么 vdom还是长列表中性能优化的虚拟列表\n\nvdom： 在vue 使用 vue2中使用了三方库snabbdom.js实现模板解析为 render 函数，触发响应式，监听 data 属性 getter setter，执行 render 函数，生成 vnode ， patch(elem, vnode)，react中原理类似。\n\n长列表虚拟：准确的说都不叫虚拟，叫模拟。在页面列表数据量过大，渲染dom过多时会引起页面卡顿等一些性能问题，特别是还有数据绑定的时间更为致命。对此可以对当前浏览器视口中显示的固定dom做计算渲染，看不见的部分可以结合数据量计算得出高度，固定高度使用块级元素填充整体高度。\n\n\n# 请输出下述代码得打印结果：\n\nclass statedemo extends react.component {\n  state = { number: 0 };\n  handleclick = () => {\n    this.setstate({ number: this.state.number + 1 }, () => {\n      console.log("callback1", this.state.number);\n    });\n    console.log(this.state.number);\n\n    this.setstate({ number: this.state.number + 1 }, () => {\n      console.log("callback2", this.state.number);\n    });\n    console.log(this.state.number);\n\n    this.setstate({ number: this.state.number + 1 }, () => {\n      console.log("callback3", this.state.number);\n    });\n    console.log(this.state.number);\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.number}\n        <button onclick={this.handleclick}>number++</button>\n      </div>\n    );\n  }\n}\n\n\n0\n0\n0\ncallback1 1\ncallback2 1\ncallback3 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 一个组件在本地开发过程中没问题，上线后显示错误，请分析下原因：\n\n原因\n\n * 代码在开发环境与生产环境有不一致的地方\n * 打包依赖问题\n * 线上环境问题，网络 依赖包下载 依赖包版本等等\n\n解决方案\n\n * 确定组件代码中是否引用使用环境变量\n * 本地打包并运行排查\n * 确定线上环境（网络，依赖包完整度等问题）\n\n\n# 实现一个消息分发系统\n\n# js 实现\n\nclass eventemitter {\n    constructor() {\n        this._events = {};\n    }\n    on(event,callback) {\n        //监听 event 事件,触发时调用 callback 函数\n        let callbacks = this._events[event] || [];\n        callbacks.push(callback);\n        this._events[event] = callbacks;\n        return this;\n    }\n    off(event,callback) {\n        //停止监听 event 事件\n        let callbacks = this._events[event];\n        this._events[event] = callbacks && callbacks.filter(fn => fn !== callback);\n        return this;\n    }\n    emit(event, ...args) {\n        //触发事件,并把参数传给事件的处理函数\n        const callbacks = this._events[event];\n        callbacks.foreach(fn => fn.apply(null,args));\n        return this;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n# vue2 实现， 用作mixins 使用\n\nfunction broadcast(componentname, eventname, params) {\n  this.$children.foreach(child => {\n    const name = child.$options.name;\n    if (name === componentname) {\n      child.$emit.apply(child, [eventname].concat(params));\n    } else {\n      broadcast\n      .apply(child, [componentname, eventname]\n      .concat([params]));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentname, eventname, params) {\n      let parent = this.$parent || this.$root;\n      let name = parent.$options.name;\n      while (parent && (!name || name !== componentname)) {\n        parent = parent.$parent;\n        if (parent) {\n          name = parent.$options.name;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventname].concat(params));\n      }\n    },\n    broadcast(componentname, eventname, params) {\n      broadcast.call(this, componentname, eventname, params);\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 如何设计一个通用的弹框类系统\n\n大概思路：\n\n 1. 定义弹窗类\n\n 2. 1. 样式，显隐动画\n    2. 挂载元素（默认body元素上）\n    3. 位置（默认元素正中）：上下左右...\n    4. 事件：\n 3. 1. 1. 打开\n       2. 关闭\n       3. 拖动等其他\n\n 4. 使用\n\n 5. 1. 可单独引用，使用实例化类\n    2. 可挂在window对象，app实例原型上，用于全局使用',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:58:01",lastUpdatedTimestamp:1660474681e3},{title:"初级面试题",frontmatter:{title:"初级面试题",date:"2022-11-14T11:41:47.000Z",permalink:"/pages/b63ad7/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/1095400.%E5%88%9D%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98.html",relativePath:"10.大前端/1095.面经/1095400.初级面试题.md",key:"v-0433bcc2",path:"/pages/b63ad7/",headers:[{level:2,title:"html & css",slug:"html-css",normalizedTitle:"html &amp; css",charIndex:null},{level:2,title:"JS & ES6",slug:"js-es6",normalizedTitle:"js &amp; es6",charIndex:null},{level:3,title:"分割平衡字符串",slug:"分割平衡字符串",normalizedTitle:"分割平衡字符串",charIndex:186}],headersStr:"html & css JS & ES6 分割平衡字符串",content:'该题为网上收集并用于我司初级前端面试\n\n\n# html & css\n\n示例：\n\n\n\n * 圣杯布局， 如上图左右两栏固定宽度，中间部分自适应\n   \n   * 左右固定宽度200px, 中间自动撑开；所有元素高度为100px。\n\n * 至少三种方式实现\n\n提示：\n\n为了节约时间，非关键代码已经写好放在同目录layout.html文件中\n\n\n# JS & ES6\n\n\n# 分割平衡字符串\n\n在一个 平衡字符串 中，\'L\' 和 \'R\' 字符的数量是相同的。\n\n给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。\n\n**注意：**分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。\n\n返回可以通过分割得到的平衡字符串的 最大数量 。\n\n示例 1：\n\n输入：s = "RLRRLLRLRL"\n输出：4\n解释：s 可以分割为 "RL"、"RRLL"、"RL"、"RL" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：s = "RLLLLRRRLR"\n输出：3\n解释：s 可以分割为 "RL"、"LLLRRR"、"LR" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：s = "LLLLRRRR"\n输出：1\n解释：s 只能保持原样 "LLLLRRRR".\n\n\n1\n2\n3\n\n\n示例 4：\n\n输入：s = "RLRRRLLRLL"\n输出：2\n解释：s 可以分割为 "RL"、"RRRLLRLL" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n\n\n1\n2\n3\n\n\n提示：\n\n * 1 <= s.length <= 1000\n * s[i] = \'L\' 或 \'R\'\n * s 是一个 平衡 字符串\n\n为了节约时间，非关键代码已经写好放在同目录splitAStringInBalancedStrings.js文件中',normalizedContent:'该题为网上收集并用于我司初级前端面试\n\n\n# html & css\n\n示例：\n\n\n\n * 圣杯布局， 如上图左右两栏固定宽度，中间部分自适应\n   \n   * 左右固定宽度200px, 中间自动撑开；所有元素高度为100px。\n\n * 至少三种方式实现\n\n提示：\n\n为了节约时间，非关键代码已经写好放在同目录layout.html文件中\n\n\n# js & es6\n\n\n# 分割平衡字符串\n\n在一个 平衡字符串 中，\'l\' 和 \'r\' 字符的数量是相同的。\n\n给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。\n\n**注意：**分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。\n\n返回可以通过分割得到的平衡字符串的 最大数量 。\n\n示例 1：\n\n输入：s = "rlrrllrlrl"\n输出：4\n解释：s 可以分割为 "rl"、"rrll"、"rl"、"rl" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：s = "rllllrrrlr"\n输出：3\n解释：s 可以分割为 "rl"、"lllrrr"、"lr" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：s = "llllrrrr"\n输出：1\n解释：s 只能保持原样 "llllrrrr".\n\n\n1\n2\n3\n\n\n示例 4：\n\n输入：s = "rlrrrllrll"\n输出：2\n解释：s 可以分割为 "rl"、"rrrllrll" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n\n\n1\n2\n3\n\n\n提示：\n\n * 1 <= s.length <= 1000\n * s[i] = \'l\' 或 \'r\'\n * s 是一个 平衡 字符串\n\n为了节约时间，非关键代码已经写好放在同目录splitastringinbalancedstrings.js文件中',charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"new",frontmatter:{title:"new",date:"2022-06-06T02:15:06.000Z",permalink:"/pages/641ae2/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/new.html",relativePath:"10.大前端/1095.面经/new.md",key:"v-432df53c",path:"/pages/641ae2/",headersStr:null,content:"new 的过程中做了什么\n\n 1. 一个新对象被创建。它继承自foo.prototype\n\n 2. 构造函数 foo 被执行。执行的时候，相应的传参会被传入，同时上下文(this)\n    \n    会被指定为这个新实例。new foo 等同于 new foo(，只能用在不传递任何参数的情况\n\n 3. 如果构造函数返回了一个“对象”，那么这个对象会取代整个new出来的结果。如果构造\n    \n    函数没有返回对象，那么new出来的结果为步骤1创建的对象\n\n手动实现new方法\n\nvar M = function(name) {\n\tthis.name = name\n}\n\n\n1\n2\n3\n\n\nconst n1 = new N()\n\nconst n2 = new2(N)\n\nfunction new2(func) {\n  const o = {}\n  o.__proto__ = func.prototype\n  const k = func.call(o)\n  \n  // 如果有返回值\n  if(typeof k === 'object') {\n    return k\n  } else {\n    return o\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n",normalizedContent:"new 的过程中做了什么\n\n 1. 一个新对象被创建。它继承自foo.prototype\n\n 2. 构造函数 foo 被执行。执行的时候，相应的传参会被传入，同时上下文(this)\n    \n    会被指定为这个新实例。new foo 等同于 new foo(，只能用在不传递任何参数的情况\n\n 3. 如果构造函数返回了一个“对象”，那么这个对象会取代整个new出来的结果。如果构造\n    \n    函数没有返回对象，那么new出来的结果为步骤1创建的对象\n\n手动实现new方法\n\nvar m = function(name) {\n\tthis.name = name\n}\n\n\n1\n2\n3\n\n\nconst n1 = new n()\n\nconst n2 = new2(n)\n\nfunction new2(func) {\n  const o = {}\n  o.__proto__ = func.prototype\n  const k = func.call(o)\n  \n  // 如果有返回值\n  if(typeof k === 'object') {\n    return k\n  } else {\n    return o\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"名词解释",frontmatter:{title:"名词解释",date:"2022-06-14T18:30:26.000Z",permalink:"/pages/da94ea/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A.html",relativePath:"10.大前端/1095.面经/名词解释.md",key:"v-818c779e",path:"/pages/da94ea/",headers:[{level:3,title:"Saas服务",slug:"saas服务",normalizedTitle:"saas服务",charIndex:2},{level:4,title:"例子：",slug:"例子",normalizedTitle:"例子：",charIndex:399},{level:3,title:"微前端",slug:"微前端",normalizedTitle:"微前端",charIndex:551},{level:2,title:"价值",slug:"价值",normalizedTitle:"价值",charIndex:649},{level:3,title:"低代码",slug:"低代码",normalizedTitle:"低代码",charIndex:787}],headersStr:"Saas服务 例子： 微前端 价值 低代码",content:"# Saas服务\n\n理解：\n\n软件即服务\n\n以前\n\n①去软件官网或者一些软件汇总平台去下载软件包，这类平台有太平洋、华军、天空等；\n\n②将下载好的软件安装包（后缀.exe）（或者压缩包（后缀.rar或zip）进行解压缩），安装到Windows电脑的D盘上；\n\n③桌面点击应用快捷方式，打开软件操作，操作的时候记得随时保存，否则系统崩了或者电脑突然死机基本工作成果凉凉；\n\n④定期升级软件，放置因为升级导致有些功能无法使用；\n\n⑤谨慎使用电脑，防止杀毒软件和安全软件误删除关联文件...\n\n⑥软件不用记得要卸载，还要把注册表的残留文件删干净，不然电脑会多出很多垃圾...\n\n现在\n\n①打开浏览器；\n\n②输入SaaS地址打开页面；\n\n③开始使用\n\n如果你想升级软件，直接刷新页面即可；\n\n如果你想卸载软件，等等，因为没有安装环节，也就没有卸载这件事了，你需要做的就是直接关闭页面或者关闭浏览器。\n\n# 例子：\n\n其实你日常用的很多产品，都是SaaS，比如：\n\n使用【石墨文档】来随时随地读写团队的文件；\n\n使用【印象笔记】或【有道云笔记】来记录自己的灵感；\n\n使用【百度网盘】来上传和下载自己的照片视频；\n\n使用【钉钉】来进行团队管理；\n\n使用【问卷星】来收集自己发出去的问卷...\n\n现在流行云\n\n\n# 微前端\n\n微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为把多个小型前端应用聚合为一的应用。各个前端应用还可以独立开发、独立部署。\n\n\n# 价值\n\n微前端架构具备以下几个核心价值：\n\n * 技术栈无关 主框架不限制接入应用的技术栈，子应用具备完全自主权\n * 独立开发、独立部署 子应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新\n * 独立运行时 每个子应用之间状态隔离，运行时状态不共享\n\n\n# 低代码",normalizedContent:"# saas服务\n\n理解：\n\n软件即服务\n\n以前\n\n①去软件官网或者一些软件汇总平台去下载软件包，这类平台有太平洋、华军、天空等；\n\n②将下载好的软件安装包（后缀.exe）（或者压缩包（后缀.rar或zip）进行解压缩），安装到windows电脑的d盘上；\n\n③桌面点击应用快捷方式，打开软件操作，操作的时候记得随时保存，否则系统崩了或者电脑突然死机基本工作成果凉凉；\n\n④定期升级软件，放置因为升级导致有些功能无法使用；\n\n⑤谨慎使用电脑，防止杀毒软件和安全软件误删除关联文件...\n\n⑥软件不用记得要卸载，还要把注册表的残留文件删干净，不然电脑会多出很多垃圾...\n\n现在\n\n①打开浏览器；\n\n②输入saas地址打开页面；\n\n③开始使用\n\n如果你想升级软件，直接刷新页面即可；\n\n如果你想卸载软件，等等，因为没有安装环节，也就没有卸载这件事了，你需要做的就是直接关闭页面或者关闭浏览器。\n\n# 例子：\n\n其实你日常用的很多产品，都是saas，比如：\n\n使用【石墨文档】来随时随地读写团队的文件；\n\n使用【印象笔记】或【有道云笔记】来记录自己的灵感；\n\n使用【百度网盘】来上传和下载自己的照片视频；\n\n使用【钉钉】来进行团队管理；\n\n使用【问卷星】来收集自己发出去的问卷...\n\n现在流行云\n\n\n# 微前端\n\n微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为把多个小型前端应用聚合为一的应用。各个前端应用还可以独立开发、独立部署。\n\n\n# 价值\n\n微前端架构具备以下几个核心价值：\n\n * 技术栈无关 主框架不限制接入应用的技术栈，子应用具备完全自主权\n * 独立开发、独立部署 子应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新\n * 独立运行时 每个子应用之间状态隔离，运行时状态不共享\n\n\n# 低代码",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"手动实现ES6继承",frontmatter:{title:"手动实现ES6继承",date:"2022-06-06T02:44:50.000Z",permalink:"/pages/098047/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0ES6%E7%BB%A7%E6%89%BF.html",relativePath:"10.大前端/1095.面经/手动实现ES6继承.md",key:"v-58553816",path:"/pages/098047/",headers:[{level:3,title:"借助构造函数实现",slug:"借助构造函数实现",normalizedTitle:"借助构造函数实现",charIndex:2}],headersStr:"借助构造函数实现",content:"# 借助构造函数实现\n\nfunction parent1() {\n  this.name = 'parent1'\n}\n\nfunction child1() {\n  this.name = 'child1'\n\tthis.age = 18\n  \n  // 继承this上下文\n  parent1.call(this)\n}\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n// 原型链继承\n\nfunction parent2() {\n  this.name = 'parent1'\n}\n\nfunction child2() {\n  this.name = 'child1'\n\tthis.age = 18\n}\n\n\nchild1.prototype = new parent2()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n共享了原型对象地址\n\n组合方式解决\n\n\nfunction parent3() {\n  this.name = 'parent1'\n}\n\nfunction child3() {\n  this.name = 'child1'\n\tthis.age = 18\n  \n  parent3.call(this)\n}\n\nchild3.prototype = new parent3()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n缺点：重复实例化了 而且后面的原型链中方法用不着\n\nchild3.prototype = parent3.prototype\n\n\n1\n\n\n问题： 会导致实例的__proto__.constructor 指向parent3\n\nchild3.prototype = Object.create(parent3.prototype)",normalizedContent:"# 借助构造函数实现\n\nfunction parent1() {\n  this.name = 'parent1'\n}\n\nfunction child1() {\n  this.name = 'child1'\n\tthis.age = 18\n  \n  // 继承this上下文\n  parent1.call(this)\n}\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n// 原型链继承\n\nfunction parent2() {\n  this.name = 'parent1'\n}\n\nfunction child2() {\n  this.name = 'child1'\n\tthis.age = 18\n}\n\n\nchild1.prototype = new parent2()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n共享了原型对象地址\n\n组合方式解决\n\n\nfunction parent3() {\n  this.name = 'parent1'\n}\n\nfunction child3() {\n  this.name = 'child1'\n\tthis.age = 18\n  \n  parent3.call(this)\n}\n\nchild3.prototype = new parent3()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n缺点：重复实例化了 而且后面的原型链中方法用不着\n\nchild3.prototype = parent3.prototype\n\n\n1\n\n\n问题： 会导致实例的__proto__.constructor 指向parent3\n\nchild3.prototype = object.create(parent3.prototype)",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"打包构建",frontmatter:{title:"打包构建",date:"2022-06-04T17:43:47.000Z",permalink:"/pages/d3f7cb/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA.html",relativePath:"10.大前端/1095.面经/打包构建.md",key:"v-f593c2e0",path:"/pages/d3f7cb/",headers:[{level:3,title:"loader",slug:"loader",normalizedTitle:"loader",charIndex:2},{level:4,title:"异常检测",slug:"异常检测",normalizedTitle:"异常检测",charIndex:12},{level:4,title:"国际化",slug:"国际化",normalizedTitle:"国际化",charIndex:152},{level:3,title:"Plugin",slug:"plugin",normalizedTitle:"plugin",charIndex:256}],headersStr:"loader 异常检测 国际化 Plugin",content:"# loader\n\n# 异常检测\n\n做前端代码的异常监控，需要对前端的错误捕获；可能就需要在业务代码逻辑中添加try catch去捕获异常上报到线上，实时的去预警；这样就会导致代码混乱还容易出错；\n\n如果使用webpack loader就很好的去解决，为所有function添加try catch\n\n# 国际化\n\n也可以自定义模板替换相应的语言， 如 `source.replace(\"$title$\", '中文标题')\n\n总结来说，就是如果你需要对源代码做一层包装，那么你就可以使用loader来实现\n\n\n# Plugin\n\n在打包的具体时刻，你想做一些事情， 比如打包前清空dist目录\n\neg: 在打包后添加一个copyright.txt 文件\n\nclass CoryrightWebpackPlugin {\n  apple(compiler) {\n    comiler.hooks.emit.tapAsync(\"CopyrightWebpackPlugin\", (compilation, cb) => {\n      compilation.assets['copyright.txt'] = {\n        source: function() {\n          return 'copyright by izhaong';\n        },\n        size: function() {\n          return 20;\n        }\n      };\n      cb();\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",normalizedContent:"# loader\n\n# 异常检测\n\n做前端代码的异常监控，需要对前端的错误捕获；可能就需要在业务代码逻辑中添加try catch去捕获异常上报到线上，实时的去预警；这样就会导致代码混乱还容易出错；\n\n如果使用webpack loader就很好的去解决，为所有function添加try catch\n\n# 国际化\n\n也可以自定义模板替换相应的语言， 如 `source.replace(\"$title$\", '中文标题')\n\n总结来说，就是如果你需要对源代码做一层包装，那么你就可以使用loader来实现\n\n\n# plugin\n\n在打包的具体时刻，你想做一些事情， 比如打包前清空dist目录\n\neg: 在打包后添加一个copyright.txt 文件\n\nclass coryrightwebpackplugin {\n  apple(compiler) {\n    comiler.hooks.emit.tapasync(\"copyrightwebpackplugin\", (compilation, cb) => {\n      compilation.assets['copyright.txt'] = {\n        source: function() {\n          return 'copyright by izhaong';\n        },\n        size: function() {\n          return 20;\n        }\n      };\n      cb();\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"框架",frontmatter:{title:"框架",date:"2022-06-08T21:33:46.000Z",permalink:"/pages/aa434e/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/%E6%A1%86%E6%9E%B6.html",relativePath:"10.大前端/1095.面经/框架.md",key:"v-69595f78",path:"/pages/aa434e/",headers:[{level:2,title:"虚拟dom",slug:"虚拟dom",normalizedTitle:"虚拟dom",charIndex:2},{level:3,title:"通过 snabbdom 学习 vdom",slug:"通过-snabbdom-学习-vdom",normalizedTitle:"通过 snabbdom 学习 vdom",charIndex:25},{level:3,title:"初次渲染过程",slug:"初次渲染过程",normalizedTitle:"初次渲染过程",charIndex:137},{level:3,title:"更新过程",slug:"更新过程",normalizedTitle:"更新过程",charIndex:270},{level:3,title:"异步渲染",slug:"异步渲染",normalizedTitle:"异步渲染",charIndex:375},{level:3,title:"history 路由",slug:"history-路由",normalizedTitle:"history 路由",charIndex:444},{level:3,title:"面试题",slug:"面试题",normalizedTitle:"面试题",charIndex:565},{level:4,title:"为何在v-for 中用 key",slug:"为何在v-for-中用-key",normalizedTitle:"为何在v-for 中用 key",charIndex:572},{level:4,title:"双向数据绑定 v-model 的实现原理",slug:"双向数据绑定-v-model-的实现原理",normalizedTitle:"双向数据绑定 v-model 的实现原理",charIndex:681},{level:4,title:"对MVVM的理解",slug:"对mvvm的理解",normalizedTitle:"对mvvm的理解",charIndex:807},{level:4,title:"为何组件 data 必须是一个函数？",slug:"为何组件-data-必须是一个函数",normalizedTitle:"为何组件 data 必须是一个函数？",charIndex:821},{level:4,title:"ajax 请求应该放在哪个生命周期",slug:"ajax-请求应该放在哪个生命周期",normalizedTitle:"ajax 请求应该放在哪个生命周期",charIndex:858},{level:4,title:"如何自己实现 v-model",slug:"如何自己实现-v-model",normalizedTitle:"如何自己实现 v-model",charIndex:944},{level:4,title:"Vuex 中 action 和 mutation 有何区别",slug:"vuex-中-action-和-mutation-有何区别",normalizedTitle:"vuex 中 action 和 mutation 有何区别",charIndex:1293},{level:4,title:"Vue 常见性能优化方式",slug:"vue-常见性能优化方式",normalizedTitle:"vue 常见性能优化方式",charIndex:1400}],headersStr:"虚拟dom 通过 snabbdom 学习 vdom 初次渲染过程 更新过程 异步渲染 history 路由 面试题 为何在v-for 中用 key 双向数据绑定 v-model 的实现原理 对MVVM的理解 为何组件 data 必须是一个函数？ ajax 请求应该放在哪个生命周期 如何自己实现 v-model Vuex 中 action 和 mutation 有何区别 Vue 常见性能优化方式",content:'# 虚拟dom\n\nsnabbdom.js\n\n\n# 通过 snabbdom 学习 vdom\n\n * 简洁强大的 vdom 库，易学易用\n * Vue 参考它实现的 vdom 和 diff\n * https://github.com/snabbdom/snabbdom\n\n\n# 初次渲染过程\n\n * 解析模板为 render 函数（或在开发环境已完成，vue-loader）\n * 触发响应式，监听 data 属性 getter setter\n * 执行 render 函数，生成 vnode ， patch(elem, vnode)\n\n\n# 更新过程\n\n * 修改 data，触发 setter（此前在 getter 中己被监听）\n * 重新执行 render 函数，生成 newVnode\n * patch(vnode, newVnode)\n\n\n# 异步渲染\n\n * 回顾 $nextTick\n * 汇总 data 的修改，一次性更新视图\n * 减少 DOM 操作次数，提高性能\n\n\n# history 路由\n\n * hash - window.onhashchange\n * H5 history - history.pushState 和 window.onpopstate\n * H5 history 需要后端支持\n\n\n# 面试题\n\n# 为何在v-for 中用 key\n\n * 必须用 key，且不能是 index 和 random\n * diff 算法中通过 tag 和 key 来判断，是否是 sameNode\n * 减少渲染次数，提升渲染性能\n\n# 双向数据绑定 v-model 的实现原理\n\n * input 元素的 value = this.name\n * 绑定 input 事件 this.name = $event.target.value\n * data 更新触发 re-render\n\n# 对MVVM的理解\n\n\n\n# 为何组件 data 必须是一个函数？\n\n闭包，避免data污染全局\n\n# ajax 请求应该放在哪个生命周期\n\n * mounted\n * JS是单线程的，ajax 异步获取数据\n * 放在 mounted 之前没有用，只会让逻辑更加混乱\n\n# 如何自己实现 v-model\n\nv-model是一个语法糖,如下:\n\n    <input type="text" v-model="name" />\n\n\n1\n\n\n其实等同于下面的代码:\n\n    <input type="text" :value="name" @input="name = $event.target.value" />\n\n\n1\n\n\n实现\n\n    \x3c!-- 定义子组件 --\x3e\n    <child-model v-model="name" />\n    \x3c!-- 子组件 --\x3e\n    <input type="text" :value="value" @input="$emit(\'input\', $event.target.value)"\n\n\n1\n2\n3\n4\n\n\n# Vuex 中 action 和 mutation 有何区别\n\n * action 中处理异步，mutation 不可以\n * mutation 做原子操作\n * action 可以整合多个 mutation\n\n# Vue 常见性能优化方式\n\n * 合理使用 V-show 和 v-if\n\n * 合理使用 computed\n\n * V-for 时加 key 以及避免和 v-if 同时使用\n\n * 自定义事件、DOM 事件及时销毁 合理使用异步组件 合理使用 keep-alive\n\n * data 层级不要太深 使用 vue-loader 在开发环境做模板编译（预编译）',normalizedContent:'# 虚拟dom\n\nsnabbdom.js\n\n\n# 通过 snabbdom 学习 vdom\n\n * 简洁强大的 vdom 库，易学易用\n * vue 参考它实现的 vdom 和 diff\n * https://github.com/snabbdom/snabbdom\n\n\n# 初次渲染过程\n\n * 解析模板为 render 函数（或在开发环境已完成，vue-loader）\n * 触发响应式，监听 data 属性 getter setter\n * 执行 render 函数，生成 vnode ， patch(elem, vnode)\n\n\n# 更新过程\n\n * 修改 data，触发 setter（此前在 getter 中己被监听）\n * 重新执行 render 函数，生成 newvnode\n * patch(vnode, newvnode)\n\n\n# 异步渲染\n\n * 回顾 $nexttick\n * 汇总 data 的修改，一次性更新视图\n * 减少 dom 操作次数，提高性能\n\n\n# history 路由\n\n * hash - window.onhashchange\n * h5 history - history.pushstate 和 window.onpopstate\n * h5 history 需要后端支持\n\n\n# 面试题\n\n# 为何在v-for 中用 key\n\n * 必须用 key，且不能是 index 和 random\n * diff 算法中通过 tag 和 key 来判断，是否是 samenode\n * 减少渲染次数，提升渲染性能\n\n# 双向数据绑定 v-model 的实现原理\n\n * input 元素的 value = this.name\n * 绑定 input 事件 this.name = $event.target.value\n * data 更新触发 re-render\n\n# 对mvvm的理解\n\n\n\n# 为何组件 data 必须是一个函数？\n\n闭包，避免data污染全局\n\n# ajax 请求应该放在哪个生命周期\n\n * mounted\n * js是单线程的，ajax 异步获取数据\n * 放在 mounted 之前没有用，只会让逻辑更加混乱\n\n# 如何自己实现 v-model\n\nv-model是一个语法糖,如下:\n\n    <input type="text" v-model="name" />\n\n\n1\n\n\n其实等同于下面的代码:\n\n    <input type="text" :value="name" @input="name = $event.target.value" />\n\n\n1\n\n\n实现\n\n    \x3c!-- 定义子组件 --\x3e\n    <child-model v-model="name" />\n    \x3c!-- 子组件 --\x3e\n    <input type="text" :value="value" @input="$emit(\'input\', $event.target.value)"\n\n\n1\n2\n3\n4\n\n\n# vuex 中 action 和 mutation 有何区别\n\n * action 中处理异步，mutation 不可以\n * mutation 做原子操作\n * action 可以整合多个 mutation\n\n# vue 常见性能优化方式\n\n * 合理使用 v-show 和 v-if\n\n * 合理使用 computed\n\n * v-for 时加 key 以及避免和 v-if 同时使用\n\n * 自定义事件、dom 事件及时销毁 合理使用异步组件 合理使用 keep-alive\n\n * data 层级不要太深 使用 vue-loader 在开发环境做模板编译（预编译）',charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"自治高级面试题",frontmatter:{title:"自治高级面试题",date:"2022-06-06T02:07:02.000Z",permalink:"/pages/44fb57/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/%E8%87%AA%E6%B2%BB%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98.html",relativePath:"10.大前端/1095.面经/自治高级面试题.md",key:"v-31ed20a4",path:"/pages/44fb57/",headersStr:null,content:"为什么\n\nconst a1 = [1, 2]\n\na1 instanceof Object // true \na1 instanceof Array // true\n\n\n1\n2\n3\n4\n\n\n答案：\n\na1.__proto__.constructor === Array // true\na1.__proto__.constructor === Object // false\n\n\n1\n2\n\n\n缓存：\n\n缓存的分类\n\n 1. 强缓存 Expires Expires:Thu, 21 Jan 2017 23:39:02 GMT Cache-Control Cache-Control:max-age=3600\n 2. 协商缓存 Last-Modified If-Modified-Since Last-Modified: Wed, 26 Jan 2017 00:35:11 GMT Etag If-None-Match\n\nhttps://segmentfault.com/a/1190000040748678",normalizedContent:"为什么\n\nconst a1 = [1, 2]\n\na1 instanceof object // true \na1 instanceof array // true\n\n\n1\n2\n3\n4\n\n\n答案：\n\na1.__proto__.constructor === array // true\na1.__proto__.constructor === object // false\n\n\n1\n2\n\n\n缓存：\n\n缓存的分类\n\n 1. 强缓存 expires expires:thu, 21 jan 2017 23:39:02 gmt cache-control cache-control:max-age=3600\n 2. 协商缓存 last-modified if-modified-since last-modified: wed, 26 jan 2017 00:35:11 gmt etag if-none-match\n\nhttps://segmentfault.com/a/1190000040748678",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"Untitled",frontmatter:{title:"Untitled",date:"2022-06-02T00:29:43.000Z",permalink:"/pages/243fe4/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E8%AF%95%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%8A%80%E5%B7%A7.html",relativePath:"10.大前端/1095.面经/面试模拟与技巧.md",key:"v-486aed96",path:"/pages/243fe4/",headers:[{level:3,title:"面试模拟与技巧",slug:"面试模拟与技巧",normalizedTitle:"面试模拟与技巧",charIndex:2},{level:3,title:"面试准备",slug:"面试准备",normalizedTitle:"面试准备",charIndex:14},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:314},{level:3,title:"复习指南",slug:"复习指南",normalizedTitle:"复习指南",charIndex:489}],headersStr:"面试模拟与技巧 面试准备 总结 复习指南",content:"# 面试模拟与技巧\n\n\n# 面试准备\n\n * 职位描述（JD)分析\n\n * 业务分析或实战模拟\n   \n   官网 resource\n\n * 技术栈准备\n   \n   框架： vue\n   \n   构建：webpack rollup\n\n * 自我介绍\n   \n   简历 •基本信息，姓名-年龄-手机-邮箱-籍贯 • 学历，博士》硕士》本科》大专 •工作经历，时间-公司-岗位-职责-技术栈-业绩 开源项目，Github和说明 自我陈述 •把握面试的沟通方向 •豁达、自信的适度发挥\n   \n   实例 •自如谈兴趣、巧妙示实例、适时讨疑问 • 节奏要适宜、切忌小聪明 实战 •方向要对，过程要细 •胆子要大、心态要和\n\n\n# 总结\n\n * 一面\n   * 重基础、懂原理，要思考、知进退、势不可挡\n * 二面\n   * 横向扩展、项目结合，做到有的放矢\n * 三面\n   * 有经验、懂合作、有担当、懂规矩、察言观色\n * 终面\n   * 会沟通、要上进、好性格、有主见、强逻辑、无可挑剔\n * 复盘\n   * 胜不骄、败不馁、总结经验、步步为营、多拿几个offer\n\n\n# 复习指南\n\n课程中主要涉及的重点、难点，对于一些很基础的知识点没有涉及，如css选择器、html标签等等 对于很基础的知识点，大家可以参考 http：//www。w3school。com。cn/，把HTML、 HTML5、 CSS、 CSS3、 JavaScript等再快速看一遍，有基础的同学估计2天就能都过一遍\n\n对于算法题，每个公司都是临时发挥，很难押题，建议还是把一些基础算法弄清楚、到时候把 算法组合起来去解决问题，时间充裕的话可以刷LeetCode， https：//leetcode。com/problemset/algorithms/\n\n复习指南 快速排序:https://segmentfault.com/a/1190000009426421 选择排序:https://segmentfault.com/a/1190000009366805 希尔排序:https://segmentfault.com/a/1190000009461832 堆栈:https://juejin.im/entry/58759e79128fe1006b48cdfd 队列:https:/juejin.im/entry/58759e79128fe1006b48cdfd 链表:https://juejin.im/entry/58759e79128fe1006b48cdfd 递归:https://segmentfault.com/a/1190000009857470 波兰式和逆波兰式:http://www.cnblogs.com/chenying99/p/3675876.html, https://github.com/Tairraos/rpn.is/blob/masterlrpn.is",normalizedContent:"# 面试模拟与技巧\n\n\n# 面试准备\n\n * 职位描述（jd)分析\n\n * 业务分析或实战模拟\n   \n   官网 resource\n\n * 技术栈准备\n   \n   框架： vue\n   \n   构建：webpack rollup\n\n * 自我介绍\n   \n   简历 •基本信息，姓名-年龄-手机-邮箱-籍贯 • 学历，博士》硕士》本科》大专 •工作经历，时间-公司-岗位-职责-技术栈-业绩 开源项目，github和说明 自我陈述 •把握面试的沟通方向 •豁达、自信的适度发挥\n   \n   实例 •自如谈兴趣、巧妙示实例、适时讨疑问 • 节奏要适宜、切忌小聪明 实战 •方向要对，过程要细 •胆子要大、心态要和\n\n\n# 总结\n\n * 一面\n   * 重基础、懂原理，要思考、知进退、势不可挡\n * 二面\n   * 横向扩展、项目结合，做到有的放矢\n * 三面\n   * 有经验、懂合作、有担当、懂规矩、察言观色\n * 终面\n   * 会沟通、要上进、好性格、有主见、强逻辑、无可挑剔\n * 复盘\n   * 胜不骄、败不馁、总结经验、步步为营、多拿几个offer\n\n\n# 复习指南\n\n课程中主要涉及的重点、难点，对于一些很基础的知识点没有涉及，如css选择器、html标签等等 对于很基础的知识点，大家可以参考 http：//www。w3school。com。cn/，把html、 html5、 css、 css3、 javascript等再快速看一遍，有基础的同学估计2天就能都过一遍\n\n对于算法题，每个公司都是临时发挥，很难押题，建议还是把一些基础算法弄清楚、到时候把 算法组合起来去解决问题，时间充裕的话可以刷leetcode， https：//leetcode。com/problemset/algorithms/\n\n复习指南 快速排序:https://segmentfault.com/a/1190000009426421 选择排序:https://segmentfault.com/a/1190000009366805 希尔排序:https://segmentfault.com/a/1190000009461832 堆栈:https://juejin.im/entry/58759e79128fe1006b48cdfd 队列:https:/juejin.im/entry/58759e79128fe1006b48cdfd 链表:https://juejin.im/entry/58759e79128fe1006b48cdfd 递归:https://segmentfault.com/a/1190000009857470 波兰式和逆波兰式:http://www.cnblogs.com/chenying99/p/3675876.html, https://github.com/tairraos/rpn.is/blob/masterlrpn.is",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"项目",frontmatter:{title:"项目",date:"2022-06-12T15:47:49.000Z",permalink:"/pages/7267bc/",categories:["大前端","面经"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1095.%E9%9D%A2%E7%BB%8F/%E9%A1%B9%E7%9B%AE.html",relativePath:"10.大前端/1095.面经/项目.md",key:"v-1c6576d1",path:"/pages/7267bc/",headers:[{level:2,title:"如何讲解",slug:"如何讲解",normalizedTitle:"如何讲解",charIndex:2},{level:2,title:"项目流程",slug:"项目流程",normalizedTitle:"项目流程",charIndex:47},{level:3,title:"Stage1 -需求分析",slug:"stage1-需求分析",normalizedTitle:"stage1 -需求分析",charIndex:56},{level:3,title:"Stage2 - 技术方案设计",slug:"stage2-技术方案设计",normalizedTitle:"stage2 - 技术方案设计",charIndex:137},{level:3,title:"Stage3 - 开发",slug:"stage3-开发",normalizedTitle:"stage3 - 开发",charIndex:221},{level:3,title:"Stage4 - 联调",slug:"stage4-联调",normalizedTitle:"stage4 - 联调",charIndex:305},{level:4,title:"PM 加需求怎么办？",slug:"pm-加需求怎么办",normalizedTitle:"pm 加需求怎么办？",charIndex:368},{level:3,title:"Stage5-测试",slug:"stage5-测试",normalizedTitle:"stage5-测试",charIndex:473},{level:4,title:"”我电脑没问题呀！”",slug:"我电脑没问题呀",normalizedTitle:"”我电脑没问题呀！”",charIndex:541},{level:3,title:"Stage6 -上线",slug:"stage6-上线",normalizedTitle:"stage6 -上线",charIndex:611},{level:2,title:"项目沟通",slug:"项目沟通",normalizedTitle:"项目沟通",charIndex:690}],headersStr:"如何讲解 项目流程 Stage1 -需求分析 Stage2 - 技术方案设计 Stage3 - 开发 Stage4 - 联调 PM 加需求怎么办？ Stage5-测试 ”我电脑没问题呀！” Stage6 -上线 项目沟通",content:"# 如何讲解\n\n * 项目的所有角色\n * 项目的全流程\n * 各个阶段中的常见问题\n\n\n# 项目流程\n\n\n# Stage1 -需求分析\n\n * 了解背景\n * 开发难度如何\n * 质疑需求是否合理\n * 是否需要其他支持\n * 需求是否闭环\n * 不要急于给排期\n\n\n# Stage2 - 技术方案设计\n\n * 求简，不过渡设计\n * 组内评审\n * 产出文档\n * 和 RD CRD 沟通\n * 找准设计重点\n * 发出会议结论\n\n\n# Stage3 - 开发\n\n * 如何反馈排期\n * 及时单元测试\n * 符合开发规范\n * Mock API\n * 写出开发文档\n * Code Review\n\n\n# Stage4 - 联调\n\n * 和 RD CRD 技术联调\n * 让 UE 确定视觉效果\n * 让 PM 确定产品功能\n\n# PM 加需求怎么办？\n\n * 不能拒绝，走需求变更流程即可\n * 如果公司有规定，则按规定走\n * 否则，发起项目组和 leader 的评审，重新评估排期\n\n如果需求很小，可以发个邮件或者在群里说一下\n\n\n# Stage5-测试\n\n * 提测发邮件，抄送项目组\n * 测试问题要详细记录\n * 有问题及时沟通，QA和 FE 天生信息不对称\n\n# ”我电脑没问题呀！”\n\n * 不要说这句话！\n * 当面讨论，让 QA 帮你复现\n * 如果需要特定设备才能复现，让 QA提供设备\n\n\n# Stage6 -上线\n\n * 上线之后及时通知 QA回归测试\n * 上线之后及时同步给 PM 和项目组\n * 如有问题，及时回滚。先止损，再排查问题\n\n\n# 项目沟通\n\n * 多人协作，沟通是最重要的事情\n * 每日一沟通（如站会），有事说事，无事报平安\n * 及时识别风险，及时汇报",normalizedContent:"# 如何讲解\n\n * 项目的所有角色\n * 项目的全流程\n * 各个阶段中的常见问题\n\n\n# 项目流程\n\n\n# stage1 -需求分析\n\n * 了解背景\n * 开发难度如何\n * 质疑需求是否合理\n * 是否需要其他支持\n * 需求是否闭环\n * 不要急于给排期\n\n\n# stage2 - 技术方案设计\n\n * 求简，不过渡设计\n * 组内评审\n * 产出文档\n * 和 rd crd 沟通\n * 找准设计重点\n * 发出会议结论\n\n\n# stage3 - 开发\n\n * 如何反馈排期\n * 及时单元测试\n * 符合开发规范\n * mock api\n * 写出开发文档\n * code review\n\n\n# stage4 - 联调\n\n * 和 rd crd 技术联调\n * 让 ue 确定视觉效果\n * 让 pm 确定产品功能\n\n# pm 加需求怎么办？\n\n * 不能拒绝，走需求变更流程即可\n * 如果公司有规定，则按规定走\n * 否则，发起项目组和 leader 的评审，重新评估排期\n\n如果需求很小，可以发个邮件或者在群里说一下\n\n\n# stage5-测试\n\n * 提测发邮件，抄送项目组\n * 测试问题要详细记录\n * 有问题及时沟通，qa和 fe 天生信息不对称\n\n# ”我电脑没问题呀！”\n\n * 不要说这句话！\n * 当面讨论，让 qa 帮你复现\n * 如果需要特定设备才能复现，让 qa提供设备\n\n\n# stage6 -上线\n\n * 上线之后及时通知 qa回归测试\n * 上线之后及时同步给 pm 和项目组\n * 如有问题，及时回滚。先止损，再排查问题\n\n\n# 项目沟通\n\n * 多人协作，沟通是最重要的事情\n * 每日一沟通（如站会），有事说事，无事报平安\n * 及时识别风险，及时汇报",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"编码之道-设计模式原则",frontmatter:{title:"编码之道-设计模式原则",date:"2022-11-03T09:27:49.000Z",permalink:"/pages/c14f49/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/1020158.%E7%BC%96%E7%A0%81%E4%B9%8B%E9%81%93-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99.html",relativePath:"10.大前端/1099.其他/1020158.编码之道-设计模式原则.md",key:"v-b990e9a2",path:"/pages/c14f49/",headers:[{level:3,title:"设计模式原则",slug:"设计模式原则",normalizedTitle:"设计模式原则",charIndex:144},{level:4,title:"S – Single Responsibility Principle\t单一职责原则",slug:"s-single-responsibility-principle单一职责原则",normalizedTitle:"s – single responsibility principle\t单一职责原则",charIndex:null},{level:4,title:"O – OpenClosed Principle\t开放/封闭原则 开闭原则",slug:"o-openclosed-principle开放-封闭原则-开闭原则",normalizedTitle:"o – openclosed principle\t开放/封闭原则 开闭原则",charIndex:null},{level:4,title:"L – Liskov Substitution Principle\t里氏替换原则",slug:"l-liskov-substitution-principle里氏替换原则",normalizedTitle:"l – liskov substitution principle\t里氏替换原则",charIndex:null},{level:4,title:"I – Interface Segregation Principle\t接口隔离原则",slug:"i-interface-segregation-principle接口隔离原则",normalizedTitle:"i – interface segregation principle\t接口隔离原则",charIndex:null},{level:4,title:"D – Dependency Inversion Principle\t依赖倒置原则",slug:"d-dependency-inversion-principle依赖倒置原则",normalizedTitle:"d – dependency inversion principle\t依赖倒置原则",charIndex:null},{level:4,title:"L – Law of Demeter\t迪米特原则",slug:"l-law-of-demeter迪米特原则",normalizedTitle:"l – law of demeter\t迪米特原则",charIndex:null}],headersStr:"设计模式原则 S – Single Responsibility Principle\t单一职责原则 O – OpenClosed Principle\t开放/封闭原则 开闭原则 L – Liskov Substitution Principle\t里氏替换原则 I – Interface Segregation Principle\t接口隔离原则 D – Dependency Inversion Principle\t依赖倒置原则 L – Law of Demeter\t迪米特原则",content:"> 设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案。设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。 --- 维基百科\n\n对于这类抽象的的理论属于编码之\"道\"；咱通过实践结合来加深理解\n\n\n# 设计模式原则\n\n设计模式其实是针对面向对象编程范式总结出来的解决方案，所以设计模式的原则都是围绕“类”和“接口”这两个概念来提出的，其中下面 6 个原则非常重要，因为这 6 个原则决定了设计模式的规范和标准。\n\n# S – Single Responsibility Principle 单一职责原则\n\n * 一个程序只做好一件事\n * 如果功能过于复杂就拆分开，每个部分保持独立\n\n应该有且仅有一个原因引起类的变更。这个原则很好理解，一个类代码量越多，功能就越复杂，维护成本也就越高。遵循单一职责原则可以有效地控制类的复杂度。\n\n像下面这种情形经常在项目中看到，一个公共类聚集了很多不相关的函数，这就违反了单一职责原则。\n\nclass Util {\n  static toTime(date) {\n    ...\n  }\n  static formatString(str) {\n    ...\n  }\n  static encode(str) {\n    ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# **O – OpenClosed Principle 开放/封闭原则 **开闭原则\n\n * 对扩展开放，对修改封闭\n * 增加需求时，扩展新代码，而非修改已有代码\n\n开闭原则指的就是对扩展开放、对修改关闭。编写代码的时候不可避免地会碰到修改的情况，而遵循开闭原则就意味着当代码需要修改时，可以通过编写新的代码来扩展已有的代码，而不是直接修改已有代码本身。\n\n下面的伪代码是一个常见的表单校验功能，校验内容包括用户名、密码、验证码，每个校验项都通过判断语句 if-else 来控制。\n\nfunction validate() {\n    // 校验用户名\n    if (!username) {\n        ...\n    } else {\n        ...\n    }\n    // 校验密码\n    if (!pswd){\n        ...\n    } else {\n        ...\n    }\n    // 校验验证码\n    if (!captcha) {\n        ...\n    } else {\n        ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n这么写看似没有问题，但其实可扩展性并不好，如果此时增加一个校验条件，就要修改 validate() 函数内容。\n\n下面的伪代码遵循开闭原则，将校验规则抽取出来，实现共同的接口 IValidateHandler，同时将函数 validate() 改成 Validation 类，通过 addValidateHandler() 函数添加校验规则，通过 validate() 函数校验表单。这样，当有新的校验规则出现时，只要实现 IValidateHandler 接口并调用 addValidateHandler() 函数即可，不需要修改类 Validation 的代码。\n\nclass Validation {\n    private validateHandlers: ValidateHandler[] = [];\n    public addValidateHandler(handler: IValidateHandler) {\n        this.validateHandlers.push(handler)\n    }\n    public validate() {\n        for (let i = 0; i < this.validateHandlers.length; i++) {\n            this.validateHandlers[i].validate();\n        }\n    }\n}\ninterface IValidateHandler {\n    validate(): boolean;\n}\nclass UsernameValidateHandler implements IValidateHandler {\n    public validate() {\n      ...\n    }\n}\nclass PwdValidateHandler implements IValidateHandler {\n    public validate() {\n      ...\n    }\n}\nclass CaptchaValidateHandler implements IValidateHandler {\n    public validate() {\n      ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n# L – Liskov Substitution Principle 里氏替换原则\n\n * 子类能覆盖父类\n * 父类能出现的地方子类就能出现\n\n里氏替换原则是指在使用父类的地方可以用它的任意子类进行替换。里氏替换原则是对类的继承复用作出的要求，要求子类可以随时替换掉其父类，同时功能不被破坏，父类的方法仍然能被使用。\n\n下面的代码就是一个违反里氏替换原则的例子，子类 Sparrow 重载了父类 Bird 的 getFood() 函数，但返回值发生了修改。那么如果使用 Bird 类实例的地方改成 Sparrow 类实例则会报错。\n\nclass Bird {\n  getFood() {\n    return '虫子'\n  }\n}\n\nclass Sparrow extends Bird {\n  getFood() {\n    return ['虫子', '稻谷']\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n对于这种需要重载的类，正确的做法应该是让子类和父类共同实现一个抽象类或接口。下面的代码就是实现了一个 IBird 接口来遵循里氏替换原则。\n\ninterface IBird {\n  getFood(): string[]\n}\n\nclass Bird implements IBird{\n  getFood() {\n    return ['虫子']\n  }\n}\n\nclass Sparrow implements IBird {\n  getFood() {\n    return ['虫子', '稻谷']\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n# I – Interface Segregation Principle 接口隔离原则\n\n * 保持接口的单一独立\n * 类似单一职责原则，这里更关注接口\n\n不应该依赖它不需要的接口，也就是说一个类对另一个类的依赖应该建立在最小的接口上。目的就是为了降低代码之间的耦合性，方便后续代码修改。\n\n下面就是一个违反接口隔离原则的反例，类 Dog 和类 Bird 都继承了接口 IAnimal，但是 Bird类并没有 swim函数，只能实现一个空函数 swim()。\n\ninterface IAnimal {\n  eat(): void\n  swim(): void\n}\nclass Dog implements IAnimal {\n  eat() {\n    ...\n  }\n  swim() {\n    ...\n  }\n}\nclass Bird implements IAnimal {\n  eat() {\n    ...\n  }\n  swim() {\n    // do nothing\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n# D – Dependency Inversion Principle 依赖倒置原则\n\n * 面向接口编程，依赖于抽象而不依赖于具体\n * 使用方只关注接口而不关注具体类的实现\n\n准确说应该是避免依赖倒置，好的依赖关系应该是类依赖于抽象接口，不应依赖于具体实现。这样设计的好处就是当依赖发生变化时，只需要传入对应的具体实例即可。\n\n下面的示例代码中，类 Passenger 的构造函数需要传入一个 Bike 类实例，然后在 start() 函数中调用 Bike 实例的 run() 函数。此时类 Passenger 和类 Bike 的耦合非常紧，如果现在要支持一个 Car 类则需要修改 Passenger 代码。\n\nclass Bike {\n  run() {\n    console.log('Bike run')\n  }\n}\nclass Passenger {\n  construct(Bike: bike) {\n    this.tool = bike\n  }\n  public start() {\n    this.tool.run()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果遵循依赖倒置原则，可以声明一个接口 ITransportation，让 Passenger 类的构造函数改为 ITransportation 类型，从而做到 Passenger 类和 Bike 类解耦，这样当 Passenger 需要支持 Car 类的时候，只需要新增 Car 类即可。\n\ninterface ITransportation {\n  run(): void\n}\nclass Bike implements ITransportation {\n  run() {\n    console.log('Bike run')\n  }\n}\nclass Car implements ITransportation {\n  run() {\n    console.log('Car run')\n  }\n}\nclass Passenger {\n  construct(ITransportation : transportation) {\n    this.tool = transportation\n  }\n  public start() {\n    this.tool.run()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# L – Law of Demeter 迪米特原则\n\n一个类对于其他类知道得越少越好，就是说一个对象应当对其他对象尽可能少的了解。这一条原则要求任何一个对象或者方法只能调用该对象本身和内部创建的对象实例，如果要调用外部的对象，只能通过参数的形式传递进来。这一点和纯函数的思想相似。\n\n下面的类 Store 就违反了迪米特原则，类内部使用了全局变量。\n\nclass Store {\n  set(key, value) {\n    window.localStorage.setItem(key, value)\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n一种改造方式就是在初始化的时候将 window.localstorage 作为参数传递给 Store 实例。\n\nclass Store {\n  construct(s) {\n    this._store = s\n  }\n  set(key, value) {\n    this._store.setItem(key, value)\n  }\n}\nnew Store(window.localstorage)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"> 设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案。设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。 --- 维基百科\n\n对于这类抽象的的理论属于编码之\"道\"；咱通过实践结合来加深理解\n\n\n# 设计模式原则\n\n设计模式其实是针对面向对象编程范式总结出来的解决方案，所以设计模式的原则都是围绕“类”和“接口”这两个概念来提出的，其中下面 6 个原则非常重要，因为这 6 个原则决定了设计模式的规范和标准。\n\n# s – single responsibility principle 单一职责原则\n\n * 一个程序只做好一件事\n * 如果功能过于复杂就拆分开，每个部分保持独立\n\n应该有且仅有一个原因引起类的变更。这个原则很好理解，一个类代码量越多，功能就越复杂，维护成本也就越高。遵循单一职责原则可以有效地控制类的复杂度。\n\n像下面这种情形经常在项目中看到，一个公共类聚集了很多不相关的函数，这就违反了单一职责原则。\n\nclass util {\n  static totime(date) {\n    ...\n  }\n  static formatstring(str) {\n    ...\n  }\n  static encode(str) {\n    ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# **o – openclosed principle 开放/封闭原则 **开闭原则\n\n * 对扩展开放，对修改封闭\n * 增加需求时，扩展新代码，而非修改已有代码\n\n开闭原则指的就是对扩展开放、对修改关闭。编写代码的时候不可避免地会碰到修改的情况，而遵循开闭原则就意味着当代码需要修改时，可以通过编写新的代码来扩展已有的代码，而不是直接修改已有代码本身。\n\n下面的伪代码是一个常见的表单校验功能，校验内容包括用户名、密码、验证码，每个校验项都通过判断语句 if-else 来控制。\n\nfunction validate() {\n    // 校验用户名\n    if (!username) {\n        ...\n    } else {\n        ...\n    }\n    // 校验密码\n    if (!pswd){\n        ...\n    } else {\n        ...\n    }\n    // 校验验证码\n    if (!captcha) {\n        ...\n    } else {\n        ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n这么写看似没有问题，但其实可扩展性并不好，如果此时增加一个校验条件，就要修改 validate() 函数内容。\n\n下面的伪代码遵循开闭原则，将校验规则抽取出来，实现共同的接口 ivalidatehandler，同时将函数 validate() 改成 validation 类，通过 addvalidatehandler() 函数添加校验规则，通过 validate() 函数校验表单。这样，当有新的校验规则出现时，只要实现 ivalidatehandler 接口并调用 addvalidatehandler() 函数即可，不需要修改类 validation 的代码。\n\nclass validation {\n    private validatehandlers: validatehandler[] = [];\n    public addvalidatehandler(handler: ivalidatehandler) {\n        this.validatehandlers.push(handler)\n    }\n    public validate() {\n        for (let i = 0; i < this.validatehandlers.length; i++) {\n            this.validatehandlers[i].validate();\n        }\n    }\n}\ninterface ivalidatehandler {\n    validate(): boolean;\n}\nclass usernamevalidatehandler implements ivalidatehandler {\n    public validate() {\n      ...\n    }\n}\nclass pwdvalidatehandler implements ivalidatehandler {\n    public validate() {\n      ...\n    }\n}\nclass captchavalidatehandler implements ivalidatehandler {\n    public validate() {\n      ...\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n# l – liskov substitution principle 里氏替换原则\n\n * 子类能覆盖父类\n * 父类能出现的地方子类就能出现\n\n里氏替换原则是指在使用父类的地方可以用它的任意子类进行替换。里氏替换原则是对类的继承复用作出的要求，要求子类可以随时替换掉其父类，同时功能不被破坏，父类的方法仍然能被使用。\n\n下面的代码就是一个违反里氏替换原则的例子，子类 sparrow 重载了父类 bird 的 getfood() 函数，但返回值发生了修改。那么如果使用 bird 类实例的地方改成 sparrow 类实例则会报错。\n\nclass bird {\n  getfood() {\n    return '虫子'\n  }\n}\n\nclass sparrow extends bird {\n  getfood() {\n    return ['虫子', '稻谷']\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n对于这种需要重载的类，正确的做法应该是让子类和父类共同实现一个抽象类或接口。下面的代码就是实现了一个 ibird 接口来遵循里氏替换原则。\n\ninterface ibird {\n  getfood(): string[]\n}\n\nclass bird implements ibird{\n  getfood() {\n    return ['虫子']\n  }\n}\n\nclass sparrow implements ibird {\n  getfood() {\n    return ['虫子', '稻谷']\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n# i – interface segregation principle 接口隔离原则\n\n * 保持接口的单一独立\n * 类似单一职责原则，这里更关注接口\n\n不应该依赖它不需要的接口，也就是说一个类对另一个类的依赖应该建立在最小的接口上。目的就是为了降低代码之间的耦合性，方便后续代码修改。\n\n下面就是一个违反接口隔离原则的反例，类 dog 和类 bird 都继承了接口 ianimal，但是 bird类并没有 swim函数，只能实现一个空函数 swim()。\n\ninterface ianimal {\n  eat(): void\n  swim(): void\n}\nclass dog implements ianimal {\n  eat() {\n    ...\n  }\n  swim() {\n    ...\n  }\n}\nclass bird implements ianimal {\n  eat() {\n    ...\n  }\n  swim() {\n    // do nothing\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n# d – dependency inversion principle 依赖倒置原则\n\n * 面向接口编程，依赖于抽象而不依赖于具体\n * 使用方只关注接口而不关注具体类的实现\n\n准确说应该是避免依赖倒置，好的依赖关系应该是类依赖于抽象接口，不应依赖于具体实现。这样设计的好处就是当依赖发生变化时，只需要传入对应的具体实例即可。\n\n下面的示例代码中，类 passenger 的构造函数需要传入一个 bike 类实例，然后在 start() 函数中调用 bike 实例的 run() 函数。此时类 passenger 和类 bike 的耦合非常紧，如果现在要支持一个 car 类则需要修改 passenger 代码。\n\nclass bike {\n  run() {\n    console.log('bike run')\n  }\n}\nclass passenger {\n  construct(bike: bike) {\n    this.tool = bike\n  }\n  public start() {\n    this.tool.run()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果遵循依赖倒置原则，可以声明一个接口 itransportation，让 passenger 类的构造函数改为 itransportation 类型，从而做到 passenger 类和 bike 类解耦，这样当 passenger 需要支持 car 类的时候，只需要新增 car 类即可。\n\ninterface itransportation {\n  run(): void\n}\nclass bike implements itransportation {\n  run() {\n    console.log('bike run')\n  }\n}\nclass car implements itransportation {\n  run() {\n    console.log('car run')\n  }\n}\nclass passenger {\n  construct(itransportation : transportation) {\n    this.tool = transportation\n  }\n  public start() {\n    this.tool.run()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# l – law of demeter 迪米特原则\n\n一个类对于其他类知道得越少越好，就是说一个对象应当对其他对象尽可能少的了解。这一条原则要求任何一个对象或者方法只能调用该对象本身和内部创建的对象实例，如果要调用外部的对象，只能通过参数的形式传递进来。这一点和纯函数的思想相似。\n\n下面的类 store 就违反了迪米特原则，类内部使用了全局变量。\n\nclass store {\n  set(key, value) {\n    window.localstorage.setitem(key, value)\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n一种改造方式就是在初始化的时候将 window.localstorage 作为参数传递给 store 实例。\n\nclass store {\n  construct(s) {\n    this._store = s\n  }\n  set(key, value) {\n    this._store.setitem(key, value)\n  }\n}\nnew store(window.localstorage)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"编码之道-设计模式分类",frontmatter:{title:"编码之道-设计模式分类",date:"2022-11-03T09:27:49.000Z",permalink:"/pages/e8db4a/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/1020159.%E7%BC%96%E7%A0%81%E4%B9%8B%E9%81%93-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB.html",relativePath:"10.大前端/1099.其他/1020159.编码之道-设计模式分类.md",key:"v-a15a4686",path:"/pages/e8db4a/",headers:[{level:3,title:"设计模式原则",slug:"设计模式原则",normalizedTitle:"设计模式原则",charIndex:144},{level:4,title:"S – Single Responsibility Principle\t单一职责原则",slug:"s-single-responsibility-principle单一职责原则",normalizedTitle:"s – single responsibility principle\t单一职责原则",charIndex:null},{level:4,title:"O – OpenClosed Principle\t开放/封闭原则 开闭原则",slug:"o-openclosed-principle开放-封闭原则-开闭原则",normalizedTitle:"o – openclosed principle\t开放/封闭原则 开闭原则",charIndex:null},{level:4,title:"L – Liskov Substitution Principle\t里氏替换原则",slug:"l-liskov-substitution-principle里氏替换原则",normalizedTitle:"l – liskov substitution principle\t里氏替换原则",charIndex:null},{level:4,title:"D – Dependency Inversion Principle\t依赖倒置原则",slug:"d-dependency-inversion-principle依赖倒置原则",normalizedTitle:"d – dependency inversion principle\t依赖倒置原则",charIndex:null},{level:4,title:"L – Law of Demeter\t迪米特原则",slug:"l-law-of-demeter迪米特原则",normalizedTitle:"l – law of demeter\t迪米特原则",charIndex:null},{level:3,title:"设计模式的分类",slug:"设计模式的分类",normalizedTitle:"设计模式的分类",charIndex:391},{level:4,title:"创建型",slug:"创建型",normalizedTitle:"创建型",charIndex:423},{level:4,title:"结构型",slug:"结构型",normalizedTitle:"结构型",charIndex:427},{level:4,title:"行为型",slug:"行为型",normalizedTitle:"行为型",charIndex:431},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:6858}],headersStr:"设计模式原则 S – Single Responsibility Principle\t单一职责原则 O – OpenClosed Principle\t开放/封闭原则 开闭原则 L – Liskov Substitution Principle\t里氏替换原则 D – Dependency Inversion Principle\t依赖倒置原则 L – Law of Demeter\t迪米特原则 设计模式的分类 创建型 结构型 行为型 总结",content:"> 设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案。设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。 --- 维基百科\n\n对于这类抽象的的理论属于编码之\"道\"；咱通过实践结合来加深理解\n\n\n# 设计模式原则\n\n# S – Single Responsibility Principle 单一职责原则\n\n# **O – OpenClosed Principle 开放/封闭原则 **开闭原则\n\n# L – Liskov Substitution Principle 里氏替换原则\n\n# D – Dependency Inversion Principle 依赖倒置原则\n\n# L – Law of Demeter 迪米特原则\n\n了解了设计模式原则之后，下面再来看看具体的设计模式。\n\n\n# 设计模式的分类\n\n经典的设计模式有 3 大类，共 23 种，包括创建型、结构型和行为型。\n\n# 创建型\n\n创建型模式的主要关注点是“如何创建和使用对象”，这些模式的核心特点就是将对象的创建与使用进行分离，从而降低系统的耦合度。使用者不需要关注对象的创建细节，对象的创建由相关的类来完成。\n\n具体包括下面几种模式：\n\n * 抽象工厂模，提供一个超级工厂类来创建其他工厂类，然后通过工厂类创建类实例；\n * 生成器模式，将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象；\n * 工厂方法模式，定义一个用于创建生成类的工厂类，由调用者提供的参数决定生成什么类实例；\n * 原型模式，将一个对象作为原型，通过对其进行克隆创建新的实例；\n * 单例模式，生成一个全局唯一的实例，同时提供访问这个实例的函数。\n\n工厂模式\n\nclass Product {\n    constructor(name) {\n        this.name = name\n    }\n    init() {\n        console.log('init')\n    }\n    fun() {\n        console.log('fun')\n    }\n}\n\nclass Factory {\n    create(name) {\n        return new Product(name)\n    }\n}\n\n// use\nlet factory = new Factory()\nlet p = factory.create('p1')\np.init()\np.fun()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。例如：\n\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    // 向 `resolve` 回调传递组件定义\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面的代码示例是 Vue.js 源码中使用单例模式的例子。其中，构造了一个唯一的数组 _installedPlugins 来保存插件，并同时提供了 Vue.use() 函数来新增插件。\n\n// src/core/global-api/use.js\nexport function initUse (Vue: GlobalAPI) {\n  Vue.use = function (plugin: Function | Object) {\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n    ......\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n下面的代码中，cloneVNode() 函数通过已有 vnode 实例来克隆新的实例，用到了原型模式。\n\n// src/core/vdom/vnode.js\nexport function cloneVNode (vnode: VNode): VNode {\n  const cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    \n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  )\n  cloned.ns = vnode.ns\n  cloned.isStatic = vnode.isStatic\n  cloned.key = vnode.key\n  cloned.isComment = vnode.isComment\n  cloned.fnContext = vnode.fnContext\n  cloned.fnOptions = vnode.fnOptions\n  cloned.fnScopeId = vnode.fnScopeId\n  cloned.asyncMeta = vnode.asyncMeta\n  cloned.isCloned = true\n  return cloned\n  \n  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n# 结构型\n\n结构型模式描述如何将类或对象组合在一起形成更大的结构。它分为类结构型模式和对象结构型模式，类结构型模式采用继承机制来组织接口和类，对象结构型模式釆用组合或聚合来生成新的对象。\n\n具体包括下面几种模式：\n\n * 适配器模式，将一个类的接口转换成另一个类的接口，使得原本由于接口不兼容而不能一起工作的类能一起工作；\n * 桥接模式，将抽象与实现分离，使它们可以独立变化，它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度；\n * 组合模式，将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性；\n * 装饰器模式，动态地给对象增加一些职责，即增加其额外的功能；\n * 外观模式，为多个复杂的子系统提供一个统一的对外接口，使这些子系统更加容易被访问；\n * 享元模式，运用共享技术来有效地支持大量细粒度对象的复用；\n * 代理模式，为某对象提供一种代理以控制对该对象的访问，即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。\n\nVue.js 在判断浏览器支持 Proxy 的情况下会使用代理模式，下面是具体源码：\n\n// src/core/instance/proxy.js\ninitProxy = function initProxy (vm) {\n  if (hasProxy) {\n    // determine which proxy handler to use\n    const options = vm.$options\n    const handlers = options.render && options.render._withStripped\n      ? getHandler\n      : hasHandler\n    vm._renderProxy = new Proxy(vm, handlers)\n  } else {\n    vm._renderProxy = vm\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nVue 的 Dep 类则应用了代理模式，调用 notify() 函数来通知 subs 数组中的 Watcher 实例。\n\n// src/core/observer/dep.js export default class Dep { static target: ?Watcher; id: number; subs: Array; constructor () { this.id = uid++ this.subs = [] } addSub (sub: Watcher) { this.subs.push(sub) } removeSub (sub: Watcher) { remove(this.subs, sub) } depend () { if (Dep.target) { Dep.target.addDep(this) } }\n\n notify () {   // stabilize the subscriber list first   const subs = this.subs.slice()   if (process.env.NODE_ENV !== 'production' && !config.async) {    // subs aren't sorted in scheduler if not running async    // we need to sort them now to make sure they fire in correct    // order    subs.sort((a, b) => a.id - b.id)   }   for (let i = 0, l = subs.length; i < l; i++) {    subs[i].update()   }  } } \n\n\n1\n\n\n# 行为型\n\n行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，它涉及算法与对象间职责的分配。\n\n行为型模式分为类行为模式和对象行为模式，类的行为模式采用继承机制在子类和父类之间分配行为，对象行为模式采用多态等方式来分配子类和父类的职责。\n\n具体包括下面几种模式：\n\n * 责任链模式，把请求从链中的一个对象传到下一个对象，直到请求被响应为止，通过这种方式去除对象之间的耦合；\n * 命令模式，将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开；\n * 策略模式，定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的用户；\n * 解释器模式，提供如何定义语言的文法，以及对语言句子的解释方法，即解释器；\n * 迭代器模式，提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示；\n * 中介者模式，定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解；\n * 备忘录模式，在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它；\n * 观察者模式，多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为；\n * 状态模式，类的行为基于状态对象而改变；\n * 访问者模式，在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问；\n * 模板方法模式，定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。\n\n下面是 Vue.js 中使用状态对象 renderContext 的部分源码：\n\n// src/core/instance/render.js\nexport function initRender (vm: Component) {\n  vm._vnode = null // the root of the child tree\n  vm._staticTrees = null // v-once cached trees\n  const options = vm.$options\n  const parentVnode = vm.$vnode = options._parentVnode // the placeholder node in parent tree\n  const renderContext = parentVnode && parentVnode.context\n  vm.$slots = resolveSlots(options._renderChildren, renderContext)\n  vm.$scopedSlots = emptyObject\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  ......\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nVue.js 中通过 Object.defineProperty 劫持再发送消息则属于观察者模式。\n\n// src/core/observer/index.js\nObject.defineProperty(obj, key, {\n  enumerable: true,\n  configurable: true,\n  get: function reactiveGetter () {\n    ......\n  },\n  set: function reactiveSetter (newVal) {\n    const value = getter ? getter.call(obj) : val\n    /* eslint-disable no-self-compare */\n    if (newVal === value || (newVal !== newVal && value !== value)) {\n      return\n    }\n    /* eslint-enable no-self-compare */\n    if (process.env.NODE_ENV !== 'production' && customSetter) {\n      customSetter()\n    }\n    // #7981: for accessor properties without setter\n    if (getter && !setter) return\n    if (setter) {\n      setter.call(obj, newVal)\n    } else {\n      val = newVal\n    }\n    childOb = !shallow && observe(newVal)\n    dep.notify()\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 总结\n\n虽然 JavaScript 并不是一门面向对象的语言，但设计模式的原则和思想对我们编写代码仍有很重要的指导意义。\n\n本课时介绍了设计模式的 6 个重要原则，包括开闭原则、里氏替换原则、依赖倒置原则、接口隔离原则、迪米特原则、单一职责原则，重点讨论了接口和类的使用方式；然后介绍了 3 类设计模式以及对应的例子，创建型模式重点关注如何创建类实例，结构型模式重点关注类之间如何组合，行为型模式关注多个类之间的函数调用关系。\n\n要全部记住 23 种设计模式有些困难，重点在于理解其背后的思想与目的，从而做到心中有数，在此之上配合编码实践，才能最终完全掌握。\n\n最后布置一道思考题：你还在框架代码中找到过哪些设计模式的应用？",normalizedContent:"> 设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案。设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。 --- 维基百科\n\n对于这类抽象的的理论属于编码之\"道\"；咱通过实践结合来加深理解\n\n\n# 设计模式原则\n\n# s – single responsibility principle 单一职责原则\n\n# **o – openclosed principle 开放/封闭原则 **开闭原则\n\n# l – liskov substitution principle 里氏替换原则\n\n# d – dependency inversion principle 依赖倒置原则\n\n# l – law of demeter 迪米特原则\n\n了解了设计模式原则之后，下面再来看看具体的设计模式。\n\n\n# 设计模式的分类\n\n经典的设计模式有 3 大类，共 23 种，包括创建型、结构型和行为型。\n\n# 创建型\n\n创建型模式的主要关注点是“如何创建和使用对象”，这些模式的核心特点就是将对象的创建与使用进行分离，从而降低系统的耦合度。使用者不需要关注对象的创建细节，对象的创建由相关的类来完成。\n\n具体包括下面几种模式：\n\n * 抽象工厂模，提供一个超级工厂类来创建其他工厂类，然后通过工厂类创建类实例；\n * 生成器模式，将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象；\n * 工厂方法模式，定义一个用于创建生成类的工厂类，由调用者提供的参数决定生成什么类实例；\n * 原型模式，将一个对象作为原型，通过对其进行克隆创建新的实例；\n * 单例模式，生成一个全局唯一的实例，同时提供访问这个实例的函数。\n\n工厂模式\n\nclass product {\n    constructor(name) {\n        this.name = name\n    }\n    init() {\n        console.log('init')\n    }\n    fun() {\n        console.log('fun')\n    }\n}\n\nclass factory {\n    create(name) {\n        return new product(name)\n    }\n}\n\n// use\nlet factory = new factory()\nlet p = factory.create('p1')\np.init()\np.fun()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。例如：\n\nvue.component('async-example', function (resolve, reject) {\n  settimeout(function () {\n    // 向 `resolve` 回调传递组件定义\n    resolve({\n      template: '<div>i am async!</div>'\n    })\n  }, 1000)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面的代码示例是 vue.js 源码中使用单例模式的例子。其中，构造了一个唯一的数组 _installedplugins 来保存插件，并同时提供了 vue.use() 函数来新增插件。\n\n// src/core/global-api/use.js\nexport function inituse (vue: globalapi) {\n  vue.use = function (plugin: function | object) {\n    const installedplugins = (this._installedplugins || (this._installedplugins = []))\n    if (installedplugins.indexof(plugin) > -1) {\n      return this\n    }\n    ......\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n下面的代码中，clonevnode() 函数通过已有 vnode 实例来克隆新的实例，用到了原型模式。\n\n// src/core/vdom/vnode.js\nexport function clonevnode (vnode: vnode): vnode {\n  const cloned = new vnode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    \n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentoptions,\n    vnode.asyncfactory\n  )\n  cloned.ns = vnode.ns\n  cloned.isstatic = vnode.isstatic\n  cloned.key = vnode.key\n  cloned.iscomment = vnode.iscomment\n  cloned.fncontext = vnode.fncontext\n  cloned.fnoptions = vnode.fnoptions\n  cloned.fnscopeid = vnode.fnscopeid\n  cloned.asyncmeta = vnode.asyncmeta\n  cloned.iscloned = true\n  return cloned\n  \n  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n# 结构型\n\n结构型模式描述如何将类或对象组合在一起形成更大的结构。它分为类结构型模式和对象结构型模式，类结构型模式采用继承机制来组织接口和类，对象结构型模式釆用组合或聚合来生成新的对象。\n\n具体包括下面几种模式：\n\n * 适配器模式，将一个类的接口转换成另一个类的接口，使得原本由于接口不兼容而不能一起工作的类能一起工作；\n * 桥接模式，将抽象与实现分离，使它们可以独立变化，它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度；\n * 组合模式，将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性；\n * 装饰器模式，动态地给对象增加一些职责，即增加其额外的功能；\n * 外观模式，为多个复杂的子系统提供一个统一的对外接口，使这些子系统更加容易被访问；\n * 享元模式，运用共享技术来有效地支持大量细粒度对象的复用；\n * 代理模式，为某对象提供一种代理以控制对该对象的访问，即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。\n\nvue.js 在判断浏览器支持 proxy 的情况下会使用代理模式，下面是具体源码：\n\n// src/core/instance/proxy.js\ninitproxy = function initproxy (vm) {\n  if (hasproxy) {\n    // determine which proxy handler to use\n    const options = vm.$options\n    const handlers = options.render && options.render._withstripped\n      ? gethandler\n      : hashandler\n    vm._renderproxy = new proxy(vm, handlers)\n  } else {\n    vm._renderproxy = vm\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nvue 的 dep 类则应用了代理模式，调用 notify() 函数来通知 subs 数组中的 watcher 实例。\n\n// src/core/observer/dep.js export default class dep { static target: ?watcher; id: number; subs: array; constructor () { this.id = uid++ this.subs = [] } addsub (sub: watcher) { this.subs.push(sub) } removesub (sub: watcher) { remove(this.subs, sub) } depend () { if (dep.target) { dep.target.adddep(this) } }\n\n notify () {   // stabilize the subscriber list first   const subs = this.subs.slice()   if (process.env.node_env !== 'production' && !config.async) {    // subs aren't sorted in scheduler if not running async    // we need to sort them now to make sure they fire in correct    // order    subs.sort((a, b) => a.id - b.id)   }   for (let i = 0, l = subs.length; i < l; i++) {    subs[i].update()   }  } } \n\n\n1\n\n\n# 行为型\n\n行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，它涉及算法与对象间职责的分配。\n\n行为型模式分为类行为模式和对象行为模式，类的行为模式采用继承机制在子类和父类之间分配行为，对象行为模式采用多态等方式来分配子类和父类的职责。\n\n具体包括下面几种模式：\n\n * 责任链模式，把请求从链中的一个对象传到下一个对象，直到请求被响应为止，通过这种方式去除对象之间的耦合；\n * 命令模式，将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开；\n * 策略模式，定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的用户；\n * 解释器模式，提供如何定义语言的文法，以及对语言句子的解释方法，即解释器；\n * 迭代器模式，提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示；\n * 中介者模式，定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解；\n * 备忘录模式，在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它；\n * 观察者模式，多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为；\n * 状态模式，类的行为基于状态对象而改变；\n * 访问者模式，在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问；\n * 模板方法模式，定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。\n\n下面是 vue.js 中使用状态对象 rendercontext 的部分源码：\n\n// src/core/instance/render.js\nexport function initrender (vm: component) {\n  vm._vnode = null // the root of the child tree\n  vm._statictrees = null // v-once cached trees\n  const options = vm.$options\n  const parentvnode = vm.$vnode = options._parentvnode // the placeholder node in parent tree\n  const rendercontext = parentvnode && parentvnode.context\n  vm.$slots = resolveslots(options._renderchildren, rendercontext)\n  vm.$scopedslots = emptyobject\n  // bind the createelement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationtype, alwaysnormalize\n  // internal version is used by render functions compiled from templates\n  ......\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nvue.js 中通过 object.defineproperty 劫持再发送消息则属于观察者模式。\n\n// src/core/observer/index.js\nobject.defineproperty(obj, key, {\n  enumerable: true,\n  configurable: true,\n  get: function reactivegetter () {\n    ......\n  },\n  set: function reactivesetter (newval) {\n    const value = getter ? getter.call(obj) : val\n    /* eslint-disable no-self-compare */\n    if (newval === value || (newval !== newval && value !== value)) {\n      return\n    }\n    /* eslint-enable no-self-compare */\n    if (process.env.node_env !== 'production' && customsetter) {\n      customsetter()\n    }\n    // #7981: for accessor properties without setter\n    if (getter && !setter) return\n    if (setter) {\n      setter.call(obj, newval)\n    } else {\n      val = newval\n    }\n    childob = !shallow && observe(newval)\n    dep.notify()\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 总结\n\n虽然 javascript 并不是一门面向对象的语言，但设计模式的原则和思想对我们编写代码仍有很重要的指导意义。\n\n本课时介绍了设计模式的 6 个重要原则，包括开闭原则、里氏替换原则、依赖倒置原则、接口隔离原则、迪米特原则、单一职责原则，重点讨论了接口和类的使用方式；然后介绍了 3 类设计模式以及对应的例子，创建型模式重点关注如何创建类实例，结构型模式重点关注类之间如何组合，行为型模式关注多个类之间的函数调用关系。\n\n要全部记住 23 种设计模式有些困难，重点在于理解其背后的思想与目的，从而做到心中有数，在此之上配合编码实践，才能最终完全掌握。\n\n最后布置一道思考题：你还在框架代码中找到过哪些设计模式的应用？",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"标准化编程规范解决方案",frontmatter:{title:"标准化编程规范解决方案",date:"2022-02-24T19:35:28.000Z",permalink:"/pages/f041f4/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/109010.%E6%A0%87%E5%87%86%E5%8C%96%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html",relativePath:"10.大前端/1099.其他/109010.标准化编程规范解决方案.md",key:"v-59d8bdc0",path:"/pages/f041f4/",headers:[{level:2,title:"编程规范",slug:"编程规范",normalizedTitle:"编程规范",charIndex:26},{level:3,title:"ESLint",slug:"eslint",normalizedTitle:"eslint",charIndex:35}],headersStr:"编程规范 ESLint",content:"工欲善其事，必先利其器。\n\n磨刀不误砍柴工\n\n\n# 编程规范\n\n\n# ESLint\n\n所有的配置文件都在 .eslintrc.js 中\n\nmodule.exports = {\n  extends: ['plugin:vue/recommended', 'eslint:recommended']\n}\n\n\n1\n2\n3\n\n\n",normalizedContent:"工欲善其事，必先利其器。\n\n磨刀不误砍柴工\n\n\n# 编程规范\n\n\n# eslint\n\n所有的配置文件都在 .eslintrc.js 中\n\nmodule.exports = {\n  extends: ['plugin:vue/recommended', 'eslint:recommended']\n}\n\n\n1\n2\n3\n\n\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"微前端",frontmatter:{title:"微前端",date:"2021-12-10T14:35:01.000Z",permalink:"/pages/95715c/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/109900.%E5%BE%AE%E5%89%8D%E7%AB%AF.html",relativePath:"10.大前端/1099.其他/109900.微前端.md",key:"v-6589c999",path:"/pages/95715c/",headers:[{level:2,title:"qiankun.js",slug:"qiankun-js",normalizedTitle:"qiankun.js",charIndex:2},{level:3,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:153},{level:4,title:"",slug:"",normalizedTitle:"",charIndex:0}],headersStr:"qiankun.js 原理 ",content:"# qiankun.js\n\n * qiankun 基于single-spa\n   * 基于single-spa基础上进行了封装,扩展了js沙箱样式隔离等\n   * 提供基座模式,基座用于注册、承载、启动子应用,子应用可以为独立的前端项目\n   * 提供了 单实例,多实例,应用通信,应用隔离等功能\n\n\n# 原理\n\nqiankun采用了运行时加载子应用，通过监听url change事件，在路由变化时，去匹配子应用进行加载挂载渲染，同时要求子应用必须暴露出三个生命周期钩子函数：\n\n * bootstrap：对应初始化，启动\n * mount：对应挂载渲染\n * unmount：对应卸载\n\n其内部是通过 import-html-entry ，来加载子应用，也就是 HTML Entry 的方式，通过设置html作为资源入口，加载远程html 解析DOM，从而获取js、css等静态资源来实现微前端的渲染。\n\n首先，当我们配置子应用的 entry 后，qiankun 会去通过 fetch 获取到子应用的 html 字符串拿到 html 字符串后，会通过一大堆正则去匹配获取 html 中对应的 js（内联、外联）、css（内联、外联）、注释、入口脚本 entry 等等。processTpl 方法会返回我们加载子应用所需要的四个组成部分：\n\n * template：html 模板\n * script：js 脚本（内联、外联）\n * styles：css 样式表（内联、外联）\n * entry：子应用入口 js 脚本文件 然后 会分别去获取外联js，外联css，并进行处理， 总结来讲， css全部处理成内联style，js会被一段匿名eval函数包裹，并且绑定window.proxy对象。具体流程如下\n\n\n\n接下来我们看下子应用在基座挂载后的DOM结构，从DOM结构中可以看出，qiankun是以HTML方式嵌入，且外联js也已经被import-html-entry处理。\n\n\n\n我们再看下子应用在基座挂载后的CSS，从乾坤注入的注释可以看出，外联css已经被处理成内联css嵌入。\n\n\n\n#",normalizedContent:"# qiankun.js\n\n * qiankun 基于single-spa\n   * 基于single-spa基础上进行了封装,扩展了js沙箱样式隔离等\n   * 提供基座模式,基座用于注册、承载、启动子应用,子应用可以为独立的前端项目\n   * 提供了 单实例,多实例,应用通信,应用隔离等功能\n\n\n# 原理\n\nqiankun采用了运行时加载子应用，通过监听url change事件，在路由变化时，去匹配子应用进行加载挂载渲染，同时要求子应用必须暴露出三个生命周期钩子函数：\n\n * bootstrap：对应初始化，启动\n * mount：对应挂载渲染\n * unmount：对应卸载\n\n其内部是通过 import-html-entry ，来加载子应用，也就是 html entry 的方式，通过设置html作为资源入口，加载远程html 解析dom，从而获取js、css等静态资源来实现微前端的渲染。\n\n首先，当我们配置子应用的 entry 后，qiankun 会去通过 fetch 获取到子应用的 html 字符串拿到 html 字符串后，会通过一大堆正则去匹配获取 html 中对应的 js（内联、外联）、css（内联、外联）、注释、入口脚本 entry 等等。processtpl 方法会返回我们加载子应用所需要的四个组成部分：\n\n * template：html 模板\n * script：js 脚本（内联、外联）\n * styles：css 样式表（内联、外联）\n * entry：子应用入口 js 脚本文件 然后 会分别去获取外联js，外联css，并进行处理， 总结来讲， css全部处理成内联style，js会被一段匿名eval函数包裹，并且绑定window.proxy对象。具体流程如下\n\n\n\n接下来我们看下子应用在基座挂载后的dom结构，从dom结构中可以看出，qiankun是以html方式嵌入，且外联js也已经被import-html-entry处理。\n\n\n\n我们再看下子应用在基座挂载后的css，从乾坤注入的注释可以看出，外联css已经被处理成内联css嵌入。\n\n\n\n#",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"性能优化",frontmatter:{title:"性能优化",date:"2023-09-17T19:45:16.000Z",permalink:"/pages/d3548d/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/1099014.%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",relativePath:"10.大前端/1099.其他/1099014.性能优化.md",key:"v-20b16aa4",path:"/pages/d3548d/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"微前端笔记",frontmatter:{title:"微前端笔记",date:"2021-12-15T22:10:18.000Z",permalink:"/pages/a6201f/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/109901.%E4%BD%BF%E7%94%A8qiankun%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html",relativePath:"10.大前端/1099.其他/109901.使用qiankun问题记录.md",key:"v-5b46cb28",path:"/pages/a6201f/",headers:[{level:2,title:"qiankun.js",slug:"qiankun-js",normalizedTitle:"qiankun.js",charIndex:2},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:3,title:"切换路由时微应用无反应",slug:"切换路由时微应用无反应",normalizedTitle:"切换路由时微应用无反应",charIndex:21},{level:3,title:"主应用中微应用加载自己的静态资源路径错误",slug:"主应用中微应用加载自己的静态资源路径错误",normalizedTitle:"主应用中微应用加载自己的静态资源路径错误",charIndex:218}],headersStr:"qiankun.js  切换路由时微应用无反应 主应用中微应用加载自己的静态资源路径错误",content:"# qiankun.js\n\n\n#\n\n\n# 切换路由时微应用无反应\n\n * 问题出在官方demo中 切换时把路由清空了\n\nvue2 配置：\n\nexport async function unmount() {\n  instance.$destroy();\n  instance.$el.innerHTML = '';\n  instance = null;\n  // router = null;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 主应用中微应用加载自己的静态资源路径错误\n\nvue2 配置：\n\nvue.config.js\n\nconst realname = 'https://merge.thingsiot.cn/'\nconst port = 8088\nconst publicPath = process.env.NODE_ENV === 'production' ? realname : `http://localhost:${port}`;\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('fonts')\n      .use('url-loader')\n      .loader('url-loader')\n      .options({\n        limit: 4096, // 小于4kb将会被打包成 base64\n        fallback: {\n          loader: 'file-loader',\n          options: {\n            name: 'fonts/[name].[hash:8].[ext]',\n            publicPath,\n          },\n        },\n      })\n      .end();\n    config.module\n      .rule('images')\n      .use('url-loader')\n      .loader('url-loader')\n      .options({\n        limit: 4096, // 小于4kb将会被打包成 base64\n        fallback: {\n          loader: 'file-loader',\n          options: {\n            name: 'img/[name].[hash:8].[ext]',\n            publicPath,\n          },\n        },\n      });\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n",normalizedContent:"# qiankun.js\n\n\n#\n\n\n# 切换路由时微应用无反应\n\n * 问题出在官方demo中 切换时把路由清空了\n\nvue2 配置：\n\nexport async function unmount() {\n  instance.$destroy();\n  instance.$el.innerhtml = '';\n  instance = null;\n  // router = null;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 主应用中微应用加载自己的静态资源路径错误\n\nvue2 配置：\n\nvue.config.js\n\nconst realname = 'https://merge.thingsiot.cn/'\nconst port = 8088\nconst publicpath = process.env.node_env === 'production' ? realname : `http://localhost:${port}`;\nmodule.exports = {\n  chainwebpack: (config) => {\n    config.module\n      .rule('fonts')\n      .use('url-loader')\n      .loader('url-loader')\n      .options({\n        limit: 4096, // 小于4kb将会被打包成 base64\n        fallback: {\n          loader: 'file-loader',\n          options: {\n            name: 'fonts/[name].[hash:8].[ext]',\n            publicpath,\n          },\n        },\n      })\n      .end();\n    config.module\n      .rule('images')\n      .use('url-loader')\n      .loader('url-loader')\n      .options({\n        limit: 4096, // 小于4kb将会被打包成 base64\n        fallback: {\n          loader: 'file-loader',\n          options: {\n            name: 'img/[name].[hash:8].[ext]',\n            publicpath,\n          },\n        },\n      });\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"编码原则",frontmatter:{title:"编码原则",date:"2022-11-01T16:59:50.000Z",permalink:"/pages/89993d/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/1099020.%E7%BC%96%E7%A0%81%E5%8E%9F%E5%88%99.html",relativePath:"10.大前端/1099.其他/1099020.编码原则.md",key:"v-4173bc9e",path:"/pages/89993d/",headersStr:null,content:"编码原则：Less code, less bug。\n\n在实现一个功能的时候，我们编写的代码越多，不仅开发成本越高，而且代码的健壮性也越差。 它和 KISS（Keep it simple, stupid）原则及奥卡姆剃刀原则（如无必要，勿增实体）有相同的意思，都是提倡编码简约。",normalizedContent:"编码原则：less code, less bug。\n\n在实现一个功能的时候，我们编写的代码越多，不仅开发成本越高，而且代码的健壮性也越差。 它和 kiss（keep it simple, stupid）原则及奥卡姆剃刀原则（如无必要，勿增实体）有相同的意思，都是提倡编码简约。",charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"Code review",frontmatter:{title:"Code review",date:"2022-06-21T18:23:12.000Z",permalink:"/pages/a6b1ff/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/1099100.Code%20review.html",relativePath:"10.大前端/1099.其他/1099100.Code review.md",key:"v-ecc0819e",path:"/pages/a6b1ff/",headers:[{level:2,title:"内容",slug:"内容",normalizedTitle:"内容",charIndex:2},{level:2,title:"时机",slug:"时机",normalizedTitle:"时机",charIndex:190},{level:2,title:"持续优化",slug:"持续优化",normalizedTitle:"持续优化",charIndex:262}],headersStr:"内容 时机 持续优化",content:"# 内容\n\n * 代码规范（eslint 不能全检查， 如变量命名、代码语义）\n\n * 重复的代码要抽离、复用\n\n * 单个函数内容过长， 需要拆分\n\n * 算法复杂度是否可用？是否可继续优化\n\n * 是否有安全漏洞？\n\n * 扩展性如何？（不用为了扩展而扩展， 不封闭就行）\n\n * 是否和现有的功能重复了？\n\n * 是否有完善的单元测试？\n\n * 组件设计是否合理？\n\n\n# 时机\n\n * 提交PR（或MR）时， 通过代码 diff 进行 Code review\n * 每周例行一次集体 Code review\n\n\n# 持续优化\n\n * 每次Code review 的问题要记录下\n * 归纳整理，形成自己的代码规范体系\n * 新加入的成员要提前学习，提前规避",normalizedContent:"# 内容\n\n * 代码规范（eslint 不能全检查， 如变量命名、代码语义）\n\n * 重复的代码要抽离、复用\n\n * 单个函数内容过长， 需要拆分\n\n * 算法复杂度是否可用？是否可继续优化\n\n * 是否有安全漏洞？\n\n * 扩展性如何？（不用为了扩展而扩展， 不封闭就行）\n\n * 是否和现有的功能重复了？\n\n * 是否有完善的单元测试？\n\n * 组件设计是否合理？\n\n\n# 时机\n\n * 提交pr（或mr）时， 通过代码 diff 进行 code review\n * 每周例行一次集体 code review\n\n\n# 持续优化\n\n * 每次code review 的问题要记录下\n * 归纳整理，形成自己的代码规范体系\n * 新加入的成员要提前学习，提前规避",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"设计模式之工厂模式",frontmatter:{title:"设计模式之工厂模式",date:"2022-11-07T16:44:25.000Z",permalink:"/pages/a08d44/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/1099300.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",relativePath:"10.大前端/1099.其他/1099300.设计模式之工厂模式.md",key:"v-6653d599",path:"/pages/a08d44/",headersStr:null,content:"例子1:\n\nclass Product {\n    constructor(name) {\n        this.name = name\n    }\n    init() {\n        console.log('init')\n    }\n    fun() {\n        console.log('fun')\n    }\n}\n\nclass Factory {\n    create(name) {\n        return new Product(name)\n    }\n}\n\n// use\nlet factory = new Factory()\nlet p = factory.create('p1')\np.init()\np.fun()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n",normalizedContent:"例子1:\n\nclass product {\n    constructor(name) {\n        this.name = name\n    }\n    init() {\n        console.log('init')\n    }\n    fun() {\n        console.log('fun')\n    }\n}\n\nclass factory {\n    create(name) {\n        return new product(name)\n    }\n}\n\n// use\nlet factory = new factory()\nlet p = factory.create('p1')\np.init()\np.fun()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"需求收集",frontmatter:{title:"需求收集",date:"2022-07-10T00:15:33.000Z",permalink:"/pages/992121/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/1099300.%E9%9C%80%E6%B1%82%E6%94%B6%E9%9B%86.html",relativePath:"10.大前端/1099.其他/1099300.需求收集.md",key:"v-54627bda",path:"/pages/992121/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"serverless",frontmatter:{title:"serverless",date:"2022-06-22T15:51:17.000Z",permalink:"/pages/997e94/",categories:["大前端","其他"],tags:[null]},regularPath:"/10.%E5%A4%A7%E5%89%8D%E7%AB%AF/1099.%E5%85%B6%E4%BB%96/109980.serverless.html",relativePath:"10.大前端/1099.其他/109980.serverless.md",key:"v-4602a18c",path:"/pages/997e94/",headers:[{level:2,title:"什么是 Serverless",slug:"什么是-serverless",normalizedTitle:"什么是 serverless",charIndex:2}],headersStr:"什么是 Serverless",content:"# 什么是 Serverless\n\n“server〞和“less〞两个单词组合而成 中文的意思就是 “无服务器” 不是语言或框架，而是一种软件的部署方式",normalizedContent:"# 什么是 serverless\n\n“server〞和“less〞两个单词组合而成 中文的意思就是 “无服务器” 不是语言或框架，而是一种软件的部署方式",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"java初学者maven项目建立",frontmatter:{title:"java初学者maven项目建立",date:"2021-12-24T18:25:31.000Z",permalink:"/pages/7e33b1/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200100.java%E5%88%9D%E5%AD%A6%E8%80%85maven%E9%A1%B9%E7%9B%AE%E5%BB%BA%E7%AB%8B.html",relativePath:"20.后端&运维/2001.Java/200100.java初学者maven项目建立.md",key:"v-4d20f12a",path:"/pages/7e33b1/",headers:[{level:2,title:"环境配置&编辑器",slug:"环境配置-编辑器",normalizedTitle:"环境配置&amp;编辑器",charIndex:null},{level:3,title:"Java jdk 1.8",slug:"java-jdk-1-8",normalizedTitle:"java jdk 1.8",charIndex:15},{level:3,title:"maven 3.3",slug:"maven-3-3",normalizedTitle:"maven 3.3",charIndex:32},{level:3,title:"IDEA 2021",slug:"idea-2021",normalizedTitle:"idea 2021",charIndex:46},{level:2,title:"新建maven web项目",slug:"新建maven-web项目",normalizedTitle:"新建maven web项目",charIndex:223}],headersStr:"环境配置&编辑器 Java jdk 1.8 maven 3.3 IDEA 2021 新建maven web项目",content:"# 环境配置&编辑器\n\n\n# Java jdk 1.8\n\n\n# maven 3.3\n\n\n# IDEA 2021\n\n\\1. 下载maven\n\n官方地址：http://maven.apache.org/download.cgi\n\n\n\n解压并新建一个本地仓库文件夹\n\n\n\n2.配置本地仓库路径\n\n\n\n\n\n3.配置maven环境变量\n\n\n\n\n\n\n\n\n\n\n\n4.在intellij idea中配置maven\n\n打开-file-settings\n\n\n\n\n# 新建maven web项目\n\n打开-file-new-project\n\n点击next\n\n\n\n点击next\n\n\n\n添加的配置为 archetypecatalog=internal\n\n点击next\n\n\n\n点击next\n\n\n\n点击finish后项目开始创建\n\n点击右下角查看进去\n\n\n\n6.maven web模板项目结构\n\n\n\n\n\n\n\n同样在main下新建test测试文件夹,再在此文件夹下新建java测试源码文件夹和resource测试资源文件夹\n\n\n\n也可以右键项目-选择open module settings打开项目配置页面更改\n\n\n\n7.配置依赖jar包\n\n",normalizedContent:"# 环境配置&编辑器\n\n\n# java jdk 1.8\n\n\n# maven 3.3\n\n\n# idea 2021\n\n\\1. 下载maven\n\n官方地址：http://maven.apache.org/download.cgi\n\n\n\n解压并新建一个本地仓库文件夹\n\n\n\n2.配置本地仓库路径\n\n\n\n\n\n3.配置maven环境变量\n\n\n\n\n\n\n\n\n\n\n\n4.在intellij idea中配置maven\n\n打开-file-settings\n\n\n\n\n# 新建maven web项目\n\n打开-file-new-project\n\n点击next\n\n\n\n点击next\n\n\n\n添加的配置为 archetypecatalog=internal\n\n点击next\n\n\n\n点击next\n\n\n\n点击finish后项目开始创建\n\n点击右下角查看进去\n\n\n\n6.maven web模板项目结构\n\n\n\n\n\n\n\n同样在main下新建test测试文件夹,再在此文件夹下新建java测试源码文件夹和resource测试资源文件夹\n\n\n\n也可以右键项目-选择open module settings打开项目配置页面更改\n\n\n\n7.配置依赖jar包\n\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Maven学习笔记",frontmatter:{title:"Maven学习笔记",date:"2021-12-30T13:26:24.000Z",permalink:"/pages/560807/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200110.Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",relativePath:"20.后端&运维/2001.Java/200110.Maven学习笔记.md",key:"v-e13e4a56",path:"/pages/560807/",headers:[{level:2,title:"https://juejin.cn/post/6844903543711907848",slug:"https-juejin-cn-post-6844903543711907848",normalizedTitle:"https://juejin.cn/post/6844903543711907848",charIndex:2},{level:2,title:"下载安装",slug:"下载安装",normalizedTitle:"下载安装",charIndex:49},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:306}],headersStr:"https://juejin.cn/post/6844903543711907848 下载安装 使用",content:'# https://juejin.cn/post/6844903543711907848\n\n\n# 下载安装\n\n下载 https://maven.apache.org/download.cgi\n\nhttps://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.zip\n\n添加环境变量\n\n如: path: D:\\Env\\apache-maven-3.8.1\\bin\n\n测试\n\nmvn -v\n\n\n1\n\n\n如果环境变量没有JAVA_HOME就会报错 所以也要配置好java的环境变量\n\n\n# 使用\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.tengj</groupId>\n    <artifactId>springBootDemo1</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>springBootDemo1</name>\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n代码的第一行是XML头，指定了该xml文档的版本和编码方式。 project是所有pom.xml的根元素，它还声明了一些POM相关的命名空间及xsd元素。 根元素下的第一个子元素modelVersion指定了当前的POM模型的版本，对于Maven3来说，它只能是4.0.0 代码中最重要是包含了groupId,artifactId和version了。这三个元素定义了一个项目基本的坐标，在Maven的世界，任何的jar、pom或者jar都是以基于这些基本的坐标进行区分的。\n\ngroupId定义了项目属于哪个组，随意命名，比如谷歌公司的myapp项目，就取名为 com.google.myapp\n\nartifactId定义了当前Maven项目在组中唯一的ID,比如定义hello-world。\n\nversion指定了项目当前的版本0.0.1-SNAPSHOT,SNAPSHOT意为快照，说明该项目还处于开发中，是不稳定的。\n\nname元素生命了一个对于用户更为友好的项目名称，虽然这不是必须的，但还是推荐为每个POM声明name,以方便信息交流',normalizedContent:'# https://juejin.cn/post/6844903543711907848\n\n\n# 下载安装\n\n下载 https://maven.apache.org/download.cgi\n\nhttps://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.zip\n\n添加环境变量\n\n如: path: d:\\env\\apache-maven-3.8.1\\bin\n\n测试\n\nmvn -v\n\n\n1\n\n\n如果环境变量没有java_home就会报错 所以也要配置好java的环境变量\n\n\n# 使用\n\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0" xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n    xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n    <groupid>com.tengj</groupid>\n    <artifactid>springbootdemo1</artifactid>\n    <version>0.0.1-snapshot</version>\n    <name>springbootdemo1</name>\n</project>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n代码的第一行是xml头，指定了该xml文档的版本和编码方式。 project是所有pom.xml的根元素，它还声明了一些pom相关的命名空间及xsd元素。 根元素下的第一个子元素modelversion指定了当前的pom模型的版本，对于maven3来说，它只能是4.0.0 代码中最重要是包含了groupid,artifactid和version了。这三个元素定义了一个项目基本的坐标，在maven的世界，任何的jar、pom或者jar都是以基于这些基本的坐标进行区分的。\n\ngroupid定义了项目属于哪个组，随意命名，比如谷歌公司的myapp项目，就取名为 com.google.myapp\n\nartifactid定义了当前maven项目在组中唯一的id,比如定义hello-world。\n\nversion指定了项目当前的版本0.0.1-snapshot,snapshot意为快照，说明该项目还处于开发中，是不稳定的。\n\nname元素生命了一个对于用户更为友好的项目名称，虽然这不是必须的，但还是推荐为每个pom声明name,以方便信息交流',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Untitled",frontmatter:{title:"Untitled",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/afae63/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200119.IDEA%E9%87%8D%E7%BD%AE%E8%AF%95%E7%94%A8%E6%9C%9F.html",relativePath:"20.后端&运维/2001.Java/200119.IDEA重置试用期.md",key:"v-8c5f8bc2",path:"/pages/afae63/",headersStr:null,content:"清除软件本身和缓存以外的数据，重启即可\n\n",normalizedContent:"清除软件本身和缓存以外的数据，重启即可\n\n",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"idea 插件推荐",frontmatter:{title:"idea 插件推荐",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/510f9f/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200120.idea%20%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90.html",relativePath:"20.后端&运维/2001.Java/200120.idea 插件推荐.md",key:"v-55723356",path:"/pages/510f9f/",headers:[{level:2,title:"仓库设置",slug:"仓库设置",normalizedTitle:"仓库设置",charIndex:8}],headersStr:"仓库设置",content:" * \n\n\n# 仓库设置\n\nhttps://plugins.zhile.io\n\n * IDE Eval Reset(重置试用期)\n\n插件列表\n\n * GitToolBox\n\n * maven helper\n\n * Alibaba Java Coding Guidelines",normalizedContent:" * \n\n\n# 仓库设置\n\nhttps://plugins.zhile.io\n\n * ide eval reset(重置试用期)\n\n插件列表\n\n * gittoolbox\n\n * maven helper\n\n * alibaba java coding guidelines",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"springboot项目学习笔记",frontmatter:{title:"springboot项目学习笔记",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/31a175/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200141.springboot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96.html",relativePath:"20.后端&运维/2001.Java/200141.springboot项目学习笔记1 项目初始化.md",key:"v-62615f84",path:"/pages/31a175/",headers:[{level:2,title:"初始化项目",slug:"初始化项目",normalizedTitle:"初始化项目",charIndex:3680},{level:3,title:"创建项目",slug:"创建项目",normalizedTitle:"创建项目",charIndex:3690},{level:3,title:"安装推荐插件",slug:"安装推荐插件",normalizedTitle:"安装推荐插件",charIndex:3743},{level:3,title:"整合mybatis genarete",slug:"整合mybatis-genarete",normalizedTitle:"整合mybatis genarete",charIndex:3796},{level:2,title:"controller层",slug:"controller层",normalizedTitle:"controller层",charIndex:4291},{level:2,title:"service层",slug:"service层",normalizedTitle:"service层",charIndex:4307},{level:3,title:"排除Logback依赖",slug:"排除logback依赖",normalizedTitle:"排除logback依赖",charIndex:4565},{level:3,title:"引入log4j2依赖",slug:"引入log4j2依赖",normalizedTitle:"引入log4j2依赖",charIndex:5016},{level:3,title:"配置log4j2",slug:"配置log4j2",normalizedTitle:"配置log4j2",charIndex:5227},{level:3,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:8974},{level:3,title:"建立过滤器，打印请求",slug:"建立过滤器-打印请求",normalizedTitle:"建立过滤器，打印请求",charIndex:9155}],headersStr:"初始化项目 创建项目 安装推荐插件 整合mybatis genarete controller层 service层 排除Logback依赖 引入log4j2依赖 配置log4j2 引入依赖 建立过滤器，打印请求",content:'<?xml version="1.0" encoding="UTF-8"?>\n<Configuration status="fatal">\n    <Properties>\n        <Property name="baseDir" value="${sys:user.home}/logs/izhaong-mall"/>\n    </Properties>\n\n    <Appenders>\n        <Console name="Console" target="SYSTEM_OUT">\n            \x3c!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --\x3e\n\n            <ThresholdFilter level="info" onMatch="ACCEPT"\n                             onMismatch="DENY"/>\n            <PatternLayout\n                    pattern="[%d{MM:dd HH:mm:ss.SSS}] [%level] [%logger{36}] - %msg%n"/>\n        </Console>\n\n\n\n        \x3c!--debug级别日志文件输出--\x3e\n        <RollingFile name="debug_appender" fileName="${baseDir}/debug.log"\n                     filePattern="${baseDir}/debug_%i.log.%d{yyyy-MM-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <Filters>\n                \x3c!-- 限制日志级别在debug及以上在info以下 --\x3e\n                <ThresholdFilter level="debug"/>\n                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>\n            </Filters>\n            \x3c!-- 日志格式 --\x3e\n            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <Policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <SizeBasedTriggeringPolicy size="100 MB"/>\n            </Policies>\n        </RollingFile>\n\n        \x3c!-- info级别日志文件输出 --\x3e\n        <RollingFile name="info_appender" fileName="${baseDir}/info.log"\n                     filePattern="${baseDir}/info_%i.log.%d{yyyy-MM-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <Filters>\n                \x3c!-- 限制日志级别在info及以上在error以下 --\x3e\n                <ThresholdFilter level="info"/>\n                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>\n            </Filters>\n            \x3c!-- 日志格式 --\x3e\n            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <Policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <SizeBasedTriggeringPolicy size="100 MB"/>\n            </Policies>\n        </RollingFile>\n\n        \x3c!-- error级别日志文件输出 --\x3e\n        <RollingFile name="error_appender" fileName="${baseDir}/error.log"\n                     filePattern="${baseDir}/error_%i.log.%d{yyyy-MM-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <Filters>\n                \x3c!-- 限制日志级别在error及以上 --\x3e\n                <ThresholdFilter level="error"/>\n            </Filters>\n            \x3c!-- 日志格式 --\x3e\n            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>\n            <Policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <SizeBasedTriggeringPolicy size="100 MB"/>\n            </Policies>\n        </RollingFile>\n    </Appenders>\n    <Loggers>\n\n        <logger name="org.springframework" level="info"\n                additivity="true">\n            <AppenderRef ref="Console" />\n            <AppenderRef ref="MyFile" />\n        </logger>\n\n        <Root level="debug">\n            <AppenderRef ref="Console"/>\n            <AppenderRef ref="debug_appender"/>\n            <AppenderRef ref="info_appender"/>\n            <AppenderRef ref="error_appender"/>\n        </Root>\n\n    </Loggers>\n</Configuration>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\n\n\n# 初始化项目\n\n\n# 创建项目\n\n * 在IDEA中：文件/新建项目\n * 选择springboot init\n * \n\n\n# 安装推荐插件\n\n在编辑器IEDA中安装\n\n * maven helper\n * mybatisX\n\n\n# 整合mybatis genarete\n\n * 添加mybatis依赖\n   \n           <dependency>\n               <groupId>org.mybatis.spring.boot</groupId>\n               <artifactId>mybatis-spring-boot-starter</artifactId>\n               <version>1.3.2</version>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 添加mysql依赖\n   \n           <dependency>\n               <groupId>mysql</groupId>\n               <artifactId>mysql-connector-java</artifactId>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# controller层\n\n\n# service层\n\n新建接口 userService\n\n新建接口实现类 userServiceImpl.java\n\n重写方法getUser\n\n查询数据库返回内容\n\n配置mybatis 告诉mybatis从哪里开始找\n\nmybatis.mapper-locations=classpath:mappers/*.xml\n\n\n1\n\n\n在主类中告知 UserMapper对象位置\n\n@MapperScan(basePackages = "com.imooc.mall.model.dao")\n\n\n1\n\n\n\n# 日志\n\n\n# 排除Logback依赖\n\n避免不同的日志组件冲突\n\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-logging</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 引入log4j2依赖\n\n可以不用指定版本，会自动匹配springboot的版本\n\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-log4j2</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# 配置log4j2\n\n<?xml version="1.0" encoding="UTF-8"?>\n<Configuration status="fatal">\n    <Properties>\n        <Property name="baseDir" value="${sys:user.home}/logs/izhaong-mall"/>\n    </Properties>\n\n    <Appenders>\n        <Console name="Console" target="SYSTEM_OUT">\n            \x3c!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --\x3e\n\n            <ThresholdFilter level="info" onMatch="ACCEPT"\n                             onMismatch="DENY"/>\n            <PatternLayout\n                    pattern="[%d{MM:dd HH:mm:ss.SSS}] [%level] [%logger{36}] - %msg%n"/>\n        </Console>\n\n\n\n        \x3c!--debug级别日志文件输出--\x3e\n        <RollingFile name="debug_appender" fileName="${baseDir}/debug.log"\n                     filePattern="${baseDir}/debug_%i.log.%d{yyyy-MM-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <Filters>\n                \x3c!-- 限制日志级别在debug及以上在info以下 --\x3e\n                <ThresholdFilter level="debug"/>\n                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>\n            </Filters>\n            \x3c!-- 日志格式 --\x3e\n            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <Policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <SizeBasedTriggeringPolicy size="100 MB"/>\n            </Policies>\n        </RollingFile>\n\n        \x3c!-- info级别日志文件输出 --\x3e\n        <RollingFile name="info_appender" fileName="${baseDir}/info.log"\n                     filePattern="${baseDir}/info_%i.log.%d{yyyy-MM-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <Filters>\n                \x3c!-- 限制日志级别在info及以上在error以下 --\x3e\n                <ThresholdFilter level="info"/>\n                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>\n            </Filters>\n            \x3c!-- 日志格式 --\x3e\n            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <Policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <SizeBasedTriggeringPolicy size="100 MB"/>\n            </Policies>\n        </RollingFile>\n\n        \x3c!-- error级别日志文件输出 --\x3e\n        <RollingFile name="error_appender" fileName="${baseDir}/error.log"\n                     filePattern="${baseDir}/error_%i.log.%d{yyyy-MM-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <Filters>\n                \x3c!-- 限制日志级别在error及以上 --\x3e\n                <ThresholdFilter level="error"/>\n            </Filters>\n            \x3c!-- 日志格式 --\x3e\n            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>\n            <Policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <SizeBasedTriggeringPolicy size="100 MB"/>\n            </Policies>\n        </RollingFile>\n    </Appenders>\n    <Loggers>\n\n        <logger name="org.springframework" level="info"\n                additivity="true">\n            <AppenderRef ref="Console" />\n            <AppenderRef ref="MyFile" />\n        </logger>\n\n        <Root level="debug">\n            <AppenderRef ref="Console"/>\n            <AppenderRef ref="debug_appender"/>\n            <AppenderRef ref="info_appender"/>\n            <AppenderRef ref="error_appender"/>\n        </Root>\n\n    </Loggers>\n</Configuration>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\n * 查看log日志文件中追加的内容\n\ntail -f 文件路径\n\n\n1\n\n\n\n# AOP统一处理Web请求日志\n\n\n# 引入依赖\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# 建立过滤器，打印请求\n\nfilter/WebLogAspect.java\n\npackage com.izhaong.mall.filter;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Arrays;\n\n@Aspect\n@Component\npublic class WebLogAspect {\n\n    private final Logger log = LoggerFactory.getLogger(WebLogAspect.class);\n\n    @Pointcut("execution(public * com.izhaong.mall.controller.*.*(..)))")\n    public void webLog() {\n\n    }\n\n    @Before("webLog()")\n    public void doBefore(JoinPoint joinPoint) {\n        // 收到请求 记录请求\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n\n        HttpServletRequest request = attributes.getRequest();\n\n        log.info("URL: " + request.getRequestURI());\n        log.info("METHOD: " + request.getMethod());\n        log.info("IP: " + request.getRemoteAddr());\n\n//        class info\n        log.info("CLASS_METHOD: " + joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName());\n\n        // params\n        log.info("PARAMS: " + Arrays.toString(joinPoint.getArgs()));\n    }\n\n    @AfterReturning(returning = "res", pointcut = "webLog()")\n    public void doAfterReturning(Object res) throws JsonProcessingException {\n        //处理完请求，返回内容\n        log.info("RESPONSE : " + new ObjectMapper().writeValueAsString(res));\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n',normalizedContent:'<?xml version="1.0" encoding="utf-8"?>\n<configuration status="fatal">\n    <properties>\n        <property name="basedir" value="${sys:user.home}/logs/izhaong-mall"/>\n    </properties>\n\n    <appenders>\n        <console name="console" target="system_out">\n            \x3c!--控制台只输出level及以上级别的信息（onmatch），其他的直接拒绝（onmismatch） --\x3e\n\n            <thresholdfilter level="info" onmatch="accept"\n                             onmismatch="deny"/>\n            <patternlayout\n                    pattern="[%d{mm:dd hh:mm:ss.sss}] [%level] [%logger{36}] - %msg%n"/>\n        </console>\n\n\n\n        \x3c!--debug级别日志文件输出--\x3e\n        <rollingfile name="debug_appender" filename="${basedir}/debug.log"\n                     filepattern="${basedir}/debug_%i.log.%d{yyyy-mm-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <filters>\n                \x3c!-- 限制日志级别在debug及以上在info以下 --\x3e\n                <thresholdfilter level="debug"/>\n                <thresholdfilter level="info" onmatch="deny" onmismatch="neutral"/>\n            </filters>\n            \x3c!-- 日志格式 --\x3e\n            <patternlayout pattern="[%d{hh:mm:ss:sss}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <timebasedtriggeringpolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <sizebasedtriggeringpolicy size="100 mb"/>\n            </policies>\n        </rollingfile>\n\n        \x3c!-- info级别日志文件输出 --\x3e\n        <rollingfile name="info_appender" filename="${basedir}/info.log"\n                     filepattern="${basedir}/info_%i.log.%d{yyyy-mm-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <filters>\n                \x3c!-- 限制日志级别在info及以上在error以下 --\x3e\n                <thresholdfilter level="info"/>\n                <thresholdfilter level="error" onmatch="deny" onmismatch="neutral"/>\n            </filters>\n            \x3c!-- 日志格式 --\x3e\n            <patternlayout pattern="[%d{hh:mm:ss:sss}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <timebasedtriggeringpolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <sizebasedtriggeringpolicy size="100 mb"/>\n            </policies>\n        </rollingfile>\n\n        \x3c!-- error级别日志文件输出 --\x3e\n        <rollingfile name="error_appender" filename="${basedir}/error.log"\n                     filepattern="${basedir}/error_%i.log.%d{yyyy-mm-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <filters>\n                \x3c!-- 限制日志级别在error及以上 --\x3e\n                <thresholdfilter level="error"/>\n            </filters>\n            \x3c!-- 日志格式 --\x3e\n            <patternlayout pattern="[%d{hh:mm:ss:sss}] [%p] - %l - %m%n"/>\n            <policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <timebasedtriggeringpolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <sizebasedtriggeringpolicy size="100 mb"/>\n            </policies>\n        </rollingfile>\n    </appenders>\n    <loggers>\n\n        <logger name="org.springframework" level="info"\n                additivity="true">\n            <appenderref ref="console" />\n            <appenderref ref="myfile" />\n        </logger>\n\n        <root level="debug">\n            <appenderref ref="console"/>\n            <appenderref ref="debug_appender"/>\n            <appenderref ref="info_appender"/>\n            <appenderref ref="error_appender"/>\n        </root>\n\n    </loggers>\n</configuration>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\n\n\n# 初始化项目\n\n\n# 创建项目\n\n * 在idea中：文件/新建项目\n * 选择springboot init\n * \n\n\n# 安装推荐插件\n\n在编辑器ieda中安装\n\n * maven helper\n * mybatisx\n\n\n# 整合mybatis genarete\n\n * 添加mybatis依赖\n   \n           <dependency>\n               <groupid>org.mybatis.spring.boot</groupid>\n               <artifactid>mybatis-spring-boot-starter</artifactid>\n               <version>1.3.2</version>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 添加mysql依赖\n   \n           <dependency>\n               <groupid>mysql</groupid>\n               <artifactid>mysql-connector-java</artifactid>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# controller层\n\n\n# service层\n\n新建接口 userservice\n\n新建接口实现类 userserviceimpl.java\n\n重写方法getuser\n\n查询数据库返回内容\n\n配置mybatis 告诉mybatis从哪里开始找\n\nmybatis.mapper-locations=classpath:mappers/*.xml\n\n\n1\n\n\n在主类中告知 usermapper对象位置\n\n@mapperscan(basepackages = "com.imooc.mall.model.dao")\n\n\n1\n\n\n\n# 日志\n\n\n# 排除logback依赖\n\n避免不同的日志组件冲突\n\n<dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-web</artifactid>\n            <exclusions>\n                <exclusion>\n                    <groupid>org.springframework.boot</groupid>\n                    <artifactid>spring-boot-starter-logging</artifactid>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 引入log4j2依赖\n\n可以不用指定版本，会自动匹配springboot的版本\n\n<dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-log4j2</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# 配置log4j2\n\n<?xml version="1.0" encoding="utf-8"?>\n<configuration status="fatal">\n    <properties>\n        <property name="basedir" value="${sys:user.home}/logs/izhaong-mall"/>\n    </properties>\n\n    <appenders>\n        <console name="console" target="system_out">\n            \x3c!--控制台只输出level及以上级别的信息（onmatch），其他的直接拒绝（onmismatch） --\x3e\n\n            <thresholdfilter level="info" onmatch="accept"\n                             onmismatch="deny"/>\n            <patternlayout\n                    pattern="[%d{mm:dd hh:mm:ss.sss}] [%level] [%logger{36}] - %msg%n"/>\n        </console>\n\n\n\n        \x3c!--debug级别日志文件输出--\x3e\n        <rollingfile name="debug_appender" filename="${basedir}/debug.log"\n                     filepattern="${basedir}/debug_%i.log.%d{yyyy-mm-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <filters>\n                \x3c!-- 限制日志级别在debug及以上在info以下 --\x3e\n                <thresholdfilter level="debug"/>\n                <thresholdfilter level="info" onmatch="deny" onmismatch="neutral"/>\n            </filters>\n            \x3c!-- 日志格式 --\x3e\n            <patternlayout pattern="[%d{hh:mm:ss:sss}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <timebasedtriggeringpolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <sizebasedtriggeringpolicy size="100 mb"/>\n            </policies>\n        </rollingfile>\n\n        \x3c!-- info级别日志文件输出 --\x3e\n        <rollingfile name="info_appender" filename="${basedir}/info.log"\n                     filepattern="${basedir}/info_%i.log.%d{yyyy-mm-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <filters>\n                \x3c!-- 限制日志级别在info及以上在error以下 --\x3e\n                <thresholdfilter level="info"/>\n                <thresholdfilter level="error" onmatch="deny" onmismatch="neutral"/>\n            </filters>\n            \x3c!-- 日志格式 --\x3e\n            <patternlayout pattern="[%d{hh:mm:ss:sss}] [%p] - %l - %m%n"/>\n            \x3c!-- 策略 --\x3e\n            <policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <timebasedtriggeringpolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <sizebasedtriggeringpolicy size="100 mb"/>\n            </policies>\n        </rollingfile>\n\n        \x3c!-- error级别日志文件输出 --\x3e\n        <rollingfile name="error_appender" filename="${basedir}/error.log"\n                     filepattern="${basedir}/error_%i.log.%d{yyyy-mm-dd}">\n            \x3c!-- 过滤器 --\x3e\n            <filters>\n                \x3c!-- 限制日志级别在error及以上 --\x3e\n                <thresholdfilter level="error"/>\n            </filters>\n            \x3c!-- 日志格式 --\x3e\n            <patternlayout pattern="[%d{hh:mm:ss:sss}] [%p] - %l - %m%n"/>\n            <policies>\n                \x3c!-- 每隔一天转存 --\x3e\n                <timebasedtriggeringpolicy interval="1" modulate="true"/>\n                \x3c!-- 文件大小 --\x3e\n                <sizebasedtriggeringpolicy size="100 mb"/>\n            </policies>\n        </rollingfile>\n    </appenders>\n    <loggers>\n\n        <logger name="org.springframework" level="info"\n                additivity="true">\n            <appenderref ref="console" />\n            <appenderref ref="myfile" />\n        </logger>\n\n        <root level="debug">\n            <appenderref ref="console"/>\n            <appenderref ref="debug_appender"/>\n            <appenderref ref="info_appender"/>\n            <appenderref ref="error_appender"/>\n        </root>\n\n    </loggers>\n</configuration>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\n * 查看log日志文件中追加的内容\n\ntail -f 文件路径\n\n\n1\n\n\n\n# aop统一处理web请求日志\n\n\n# 引入依赖\n\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-aop</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# 建立过滤器，打印请求\n\nfilter/weblogaspect.java\n\npackage com.izhaong.mall.filter;\n\nimport com.fasterxml.jackson.core.jsonprocessingexception;\nimport com.fasterxml.jackson.databind.objectmapper;\nimport org.aspectj.lang.joinpoint;\nimport org.aspectj.lang.annotation.afterreturning;\nimport org.aspectj.lang.annotation.aspect;\nimport org.aspectj.lang.annotation.before;\nimport org.aspectj.lang.annotation.pointcut;\nimport org.slf4j.logger;\nimport org.slf4j.loggerfactory;\nimport org.springframework.stereotype.component;\nimport org.springframework.web.context.request.requestcontextholder;\nimport org.springframework.web.context.request.servletrequestattributes;\n\nimport javax.servlet.http.httpservletrequest;\nimport java.util.arrays;\n\n@aspect\n@component\npublic class weblogaspect {\n\n    private final logger log = loggerfactory.getlogger(weblogaspect.class);\n\n    @pointcut("execution(public * com.izhaong.mall.controller.*.*(..)))")\n    public void weblog() {\n\n    }\n\n    @before("weblog()")\n    public void dobefore(joinpoint joinpoint) {\n        // 收到请求 记录请求\n        servletrequestattributes attributes = (servletrequestattributes) requestcontextholder.getrequestattributes();\n\n        httpservletrequest request = attributes.getrequest();\n\n        log.info("url: " + request.getrequesturi());\n        log.info("method: " + request.getmethod());\n        log.info("ip: " + request.getremoteaddr());\n\n//        class info\n        log.info("class_method: " + joinpoint.getsignature().getdeclaringtypename() + "." + joinpoint.getsignature().getname());\n\n        // params\n        log.info("params: " + arrays.tostring(joinpoint.getargs()));\n    }\n\n    @afterreturning(returning = "res", pointcut = "weblog()")\n    public void doafterreturning(object res) throws jsonprocessingexception {\n        //处理完请求，返回内容\n        log.info("response : " + new objectmapper().writevalueasstring(res));\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"springboot项目学习笔记2 用户模块",frontmatter:{title:"springboot项目学习笔记2 用户模块",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/2fbdac/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200142.springboot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%20%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97.html",relativePath:"20.后端&运维/2001.Java/200142.springboot项目学习笔记2 用户模块.md",key:"v-f471752a",path:"/pages/2fbdac/",headers:[{level:2,title:"用户模块",slug:"用户模块",normalizedTitle:"用户模块",charIndex:2},{level:2,title:"通用返回对象",slug:"通用返回对象",normalizedTitle:"通用返回对象",charIndex:11},{level:2,title:"密码加密",slug:"密码加密",normalizedTitle:"密码加密",charIndex:3414}],headersStr:"用户模块 通用返回对象 密码加密",content:'# 用户模块\n\n\n# 通用返回对象\n\n * 新建包：common\n * 新建类：ApiRestResponse\n\npackage com.izhaong.mall.common;\n\nimport com.izhaong.mall.exception.MallException;\n\npublic class ApiRestResponse<T> {\n\n    private static final int OK_CODE = 1000;\n    private static final String OK_MSG = "success";\n\n    private Integer status;\n    private String msg;\n    private T data;\n\n    public ApiRestResponse(Integer status, String msg, T data) {\n        this.status = status;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    public ApiRestResponse(Integer status, String msg) {\n        this.status = status;\n        this.msg = msg;\n    }\n\n    public ApiRestResponse() {\n        this(OK_CODE, OK_MSG);\n    }\n\n    public static <T> ApiRestResponse<T> success() {\n        return new ApiRestResponse<>();\n    }\n\n    public static <T> ApiRestResponse<T> success(T result) {\n        ApiRestResponse<T> response = new ApiRestResponse<>();\n        response.setData(result);\n        return response;\n    }\n\n    public static <T> ApiRestResponse<T> error(Integer code, String msg) {\n        return new ApiRestResponse<>(code, msg);\n    }\n\n    public static <T> ApiRestResponse<T> error(MallException ex) {\n        return new ApiRestResponse<>(ex.getCode(), ex.getMsg());\n    }\n\n    public Integer getStatus() {\n        return status;\n    }\n\n    public void setStatus(Integer status) {\n        this.status = status;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n * 新建异常包：exception\n\n * 新建异常类：MallException\n   \n   package com.izhaong.mall.exception;\n   \n   public class MallException {\n   \n       private final Integer code;\n       private final String msg;\n   \n       public MallException(Integer code, String msg) {\n           this.code = code;\n           this.msg = msg;\n       }\n   \n       public MallException(MallExceptionEnum exceptionEnum) {\n           this(exceptionEnum.getCode(), exceptionEnum.getMsg());\n       }\n   \n       public Integer getCode() {\n           return code;\n       }\n   \n       public String getMsg() {\n           return msg;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   \n\n * 新建异常枚举：MallExceptionEnum\n   \n   package com.izhaong.mall.exception;\n   \n   public enum MallExceptionEnum {\n       NEED_USER_NAME(10001, "用户名不能为空");\n   \n       Integer code;\n       String msg;\n   \n       MallExceptionEnum(Integer code, String msg) {\n           this.code = code;\n           this.msg = msg;\n       }\n   \n       public Integer getCode() {\n           return code;\n       }\n   \n       public void setCode(Integer code) {\n           this.code = code;\n       }\n   \n       public String getMsg() {\n           return msg;\n       }\n   \n       public void setMsg(String msg) {\n           this.msg = msg;\n       }\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   \n\n\n# 密码加密\n\n使用MD5加密\n\n * 新建软件包：util\n\n * 新建工具类：MD5Utils\n   \n   static修饰 方便其他人调用\n   \n   package com.izhaong.mall.util;\n   \n   import com.izhaong.mall.common.Constant;\n   import org.apache.tomcat.util.codec.binary.Base64;\n   import java.security.MessageDigest;\n   import java.security.NoSuchAlgorithmException;\n   \n   /**\n    * @author izhaong\n    */\n   public class MD5Utils {\n       public static String getMD5Str(String strVal) throws NoSuchAlgorithmException {\n           MessageDigest md5 = MessageDigest.getInstance("MD5");\n           return Base64.encodeBase64String(md5.digest((strVal + Constant.SAIT).getBytes()));\n       }\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n\n * 防止暴力破解，对其加盐\n   \n   * 定义常量：新建类：common/Constant\n     \n     package com.izhaong.mall.common;\n     \n     public class Constant {\n         public static final String SAIT = "dfa@fs1231";\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n\n * 使用\n   \n   service/UserServiceimpl.java\n   \n           try {\n               user.setPassword(MD5Utils.getMD5Str(password));\n           } catch (NoSuchAlgorithmException e) {\n               e.printStackTrace();\n           }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   ',normalizedContent:'# 用户模块\n\n\n# 通用返回对象\n\n * 新建包：common\n * 新建类：apirestresponse\n\npackage com.izhaong.mall.common;\n\nimport com.izhaong.mall.exception.mallexception;\n\npublic class apirestresponse<t> {\n\n    private static final int ok_code = 1000;\n    private static final string ok_msg = "success";\n\n    private integer status;\n    private string msg;\n    private t data;\n\n    public apirestresponse(integer status, string msg, t data) {\n        this.status = status;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    public apirestresponse(integer status, string msg) {\n        this.status = status;\n        this.msg = msg;\n    }\n\n    public apirestresponse() {\n        this(ok_code, ok_msg);\n    }\n\n    public static <t> apirestresponse<t> success() {\n        return new apirestresponse<>();\n    }\n\n    public static <t> apirestresponse<t> success(t result) {\n        apirestresponse<t> response = new apirestresponse<>();\n        response.setdata(result);\n        return response;\n    }\n\n    public static <t> apirestresponse<t> error(integer code, string msg) {\n        return new apirestresponse<>(code, msg);\n    }\n\n    public static <t> apirestresponse<t> error(mallexception ex) {\n        return new apirestresponse<>(ex.getcode(), ex.getmsg());\n    }\n\n    public integer getstatus() {\n        return status;\n    }\n\n    public void setstatus(integer status) {\n        this.status = status;\n    }\n\n    public string getmsg() {\n        return msg;\n    }\n\n    public void setmsg(string msg) {\n        this.msg = msg;\n    }\n\n    public t getdata() {\n        return data;\n    }\n\n    public void setdata(t data) {\n        this.data = data;\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n * 新建异常包：exception\n\n * 新建异常类：mallexception\n   \n   package com.izhaong.mall.exception;\n   \n   public class mallexception {\n   \n       private final integer code;\n       private final string msg;\n   \n       public mallexception(integer code, string msg) {\n           this.code = code;\n           this.msg = msg;\n       }\n   \n       public mallexception(mallexceptionenum exceptionenum) {\n           this(exceptionenum.getcode(), exceptionenum.getmsg());\n       }\n   \n       public integer getcode() {\n           return code;\n       }\n   \n       public string getmsg() {\n           return msg;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   \n\n * 新建异常枚举：mallexceptionenum\n   \n   package com.izhaong.mall.exception;\n   \n   public enum mallexceptionenum {\n       need_user_name(10001, "用户名不能为空");\n   \n       integer code;\n       string msg;\n   \n       mallexceptionenum(integer code, string msg) {\n           this.code = code;\n           this.msg = msg;\n       }\n   \n       public integer getcode() {\n           return code;\n       }\n   \n       public void setcode(integer code) {\n           this.code = code;\n       }\n   \n       public string getmsg() {\n           return msg;\n       }\n   \n       public void setmsg(string msg) {\n           this.msg = msg;\n       }\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   \n\n\n# 密码加密\n\n使用md5加密\n\n * 新建软件包：util\n\n * 新建工具类：md5utils\n   \n   static修饰 方便其他人调用\n   \n   package com.izhaong.mall.util;\n   \n   import com.izhaong.mall.common.constant;\n   import org.apache.tomcat.util.codec.binary.base64;\n   import java.security.messagedigest;\n   import java.security.nosuchalgorithmexception;\n   \n   /**\n    * @author izhaong\n    */\n   public class md5utils {\n       public static string getmd5str(string strval) throws nosuchalgorithmexception {\n           messagedigest md5 = messagedigest.getinstance("md5");\n           return base64.encodebase64string(md5.digest((strval + constant.sait).getbytes()));\n       }\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n\n * 防止暴力破解，对其加盐\n   \n   * 定义常量：新建类：common/constant\n     \n     package com.izhaong.mall.common;\n     \n     public class constant {\n         public static final string sait = "dfa@fs1231";\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n\n * 使用\n   \n   service/userserviceimpl.java\n   \n           try {\n               user.setpassword(md5utils.getmd5str(password));\n           } catch (nosuchalgorithmexception e) {\n               e.printstacktrace();\n           }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   ',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"springboot项目学习笔记3 分类模块",frontmatter:{title:"springboot项目学习笔记3 分类模块",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/2d5f32/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200143.springboot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%20%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9D%97.html",relativePath:"20.后端&运维/2001.Java/200143.springboot项目学习笔记3 分类模块.md",key:"v-62ff2e8c",path:"/pages/2d5f32/",headers:[{level:2,title:"后台添加分类",slug:"后台添加分类",normalizedTitle:"后台添加分类",charIndex:9},{level:2,title:"swagger 整合",slug:"swagger-整合",normalizedTitle:"swagger 整合",charIndex:5207},{level:2,title:"更新分类",slug:"更新分类",normalizedTitle:"更新分类",charIndex:7686},{level:2,title:"封装管理员校验过滤器",slug:"封装管理员校验过滤器",normalizedTitle:"封装管理员校验过滤器",charIndex:8348},{level:2,title:"后台目录列表",slug:"后台目录列表",normalizedTitle:"后台目录列表",charIndex:13052},{level:2,title:"前台列表",slug:"前台列表",normalizedTitle:"前台列表",charIndex:14758},{level:2,title:"redis 提高缓存",slug:"redis-提高缓存",normalizedTitle:"redis 提高缓存",charIndex:19004}],headersStr:"后台添加分类 swagger 整合 更新分类 封装管理员校验过滤器 后台目录列表 前台列表 redis 提高缓存",content:'# 分类\n\n\n# 后台添加分类\n\n * 创建controller，CategoryController\n   \n   @Controller\n   public class CategoryController {\n   \n       @Autowired\n       CategoryService categoryService;\n   \n       // 后台添加目录\n       @PostMapping("/admin/category/add")\n       @ResponseBody\n       public ApiRestResponse addCategory(HttpSession session, @RequestBody AddCategoryReq addCategoryReq) {\n   \n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   \n   \n   * 单独创建类：model/request/AddCategory\n     \n     package com.izhaong.mall.model.request;\n     \n     public class AddCategoryReq {\n             private String name;\n     \n             private Integer type;\n     \n             private Integer parentId;\n     \n             private Integer orderNum;\n     \n             public String getName() {\n                     return name;\n             }\n     \n             public void setName(String name) {\n                     this.name = name;\n             }\n     \n             public Integer getType() {\n                     return type;\n             }\n     \n             public void setType(Integer type) {\n                     this.type = type;\n             }\n     \n             public Integer getParentId() {\n                     return parentId;\n             }\n     \n             public void setParentId(Integer parentId) {\n                     this.parentId = parentId;\n             }\n     \n             public Integer getOrderNum() {\n                     return orderNum;\n             }\n     \n             public void setOrderNum(Integer orderNum) {\n                     this.orderNum = orderNum;\n             }\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     \n   \n   * 创建selectByName mapper\n     \n     public interface CategoryMapper {\n     \t\t...\n         Category selectByName(String name);\n       \t...\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n     \n       <select id="selectByName" parameterType="java.lang.String" resultMap="BaseResultMap">\n         select\n         <include refid="Base_Column_List" />\n         from imooc_mall_category\n         where name = #{name,jdbcType=VARCHAR}\n       </select>\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n\n创建service接口及实现类CategoryService，CategoryServiceImpl\n\npackage com.izhaong.mall.service.impl;\n\n\nimport com.izhaong.mall.exception.MallException;\nimport com.izhaong.mall.exception.MallExceptionEnum;\nimport com.izhaong.mall.model.dao.CategoryMapper;\nimport com.izhaong.mall.model.pojo.Category;\nimport com.izhaong.mall.model.request.AddCategoryReq;\nimport com.izhaong.mall.service.CategoryService;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class CategoryServiceImpl implements CategoryService {\n\n    CategoryMapper categoryMapper;\n\n    @Override\n    public void add(AddCategoryReq addCategoryReq) {\n        // 判断是否重名\n        Category category = new Category();\n        BeanUtils.copyProperties(addCategoryReq, category);\n\n        Category oldCate = categoryMapper.selectByName(addCategoryReq.getName());\n\n//        是抛出异常 不添加\n        if (oldCate != null) {\n            throw new MallException(MallExceptionEnum.NAME_EXISTED);\n        } else {\n            //        不是重名就插入数据\n            int count = categoryMapper.insertSelective(category);\n            if (count == 0) {\n                throw new MallException(MallExceptionEnum.INSERT_FAILED);\n            }\n        }\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n * 添加参数校验\n   \n   \n   \n   * 在全局异常中处理\n     \n     \t\t@ExceptionHandler(MethodArgumentNotValidException.class)\n         @ResponseBody\n         public ApiRestResponse handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {\n             logger.error("MethodArgumentNotValidException:", e);\n             return handleBindingResult(e.getBindingResult());\n         }\n     \n         private ApiRestResponse handleBindingResult(BindingResult result) {\n             //把异常处理为对外暴露的提示\n             List<String> list = new ArrayList<>();\n             if (result.hasErrors()) {\n                 List<ObjectError> allErrors = result.getAllErrors();\n                 // itli\n                 for (ObjectError objectError : allErrors) {\n                     String message = objectError.getDefaultMessage();\n                     list.add(message);\n                 }\n             }\n             if (list.size() == 0) {\n                 return ApiRestResponse.error(MallExceptionEnum.REQUEST_PARAM_ERROR);\n             }\n             return ApiRestResponse.error(MallExceptionEnum.REQUEST_PARAM_ERROR.getCode(), list.toString());\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     \n\n\n# swagger 整合\n\n * 引入依赖\n   \n   \t\t\t\t<dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger2</artifactId>\n               <version>2.9.2</version>\n           </dependency>\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger-ui</artifactId>\n               <version>2.9.2</version>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n * 在mainApplication 中开启使用\n   \n   @EnableSwagger2\n   public class MallApplication {\n   \n       public static void main(String[] args) {\n           SpringApplication.run(MallApplication.class, args);\n       }\n   \n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 添加配置文件\n   \n   // com.izhaong.mall/config/SpringFoxConfig\n   \n   public class SpringFoxConfig {\n       //访问http://localhost:8083/swagger-ui.html可以看到API文档\n       @Bean\n       public Docket api() {\n           return new Docket(DocumentationType.SWAGGER_2)\n                   .apiInfo(apiInfo())\n                   .select()\n                   .apis(RequestHandlerSelectors.any())\n                   .paths(PathSelectors.any())\n                   .build();\n       }\n   \n       private ApiInfo apiInfo() {\n           return new ApiInfoBuilder()\n                   .title("生鲜")\n                   .description("")\n                   .termsOfServiceUrl("")\n                   .build();\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   \n   \n   * 配置地址映射\n     \n     @Configuration\n     public class MallWebMvcConfig implements WebMvcConfigurer {\n     \n         @Override\n         public void addResourceHandlers(ResourceHandlerRegistry registry) {\n             registry.addResourceHandler("swagger-ui.html").addResourceLocations("classpath:/META-INF/resources/");\n             registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");\n         }\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     \n\n * 添加注解使用\n   \n   // 后台添加目录\n       @ApiOperation("后台添加目录")\n       @PostMapping("/admin/category/add")\n       @ResponseBody\n       public ApiRestResponse addCategory(HttpSession session, @Valid @RequestBody AddCategoryReq addCategoryReq) {\n         ...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 启动访问 http://localhost:8088/swagger-ui.html\n\n\n# 更新分类\n\n注意点：\n\n更新时需要对名称做校验\n\n// service\n\t\t@Override\n    public void update(Category updateCategory) {\n        if (updateCategory.getName() != null) {\n            Category categoryOld = categoryMapper.selectByName(updateCategory.getName());\n            if (categoryOld != null && categoryOld.getId().equals(updateCategory.getId())) {\n                throw new MallException(MallExceptionEnum.NAME_EXISTED);\n            }\n        }\n        int count = categoryMapper.updateByPrimaryKeySelective(updateCategory);\n        if (count == 0) {\n            throw new MallException(MallExceptionEnum.UPDATE_FAILD);\n        }\n    }\n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 封装管理员校验过滤器\n\n * 创建过滤器 AdminFilter\n   \n   package com.izhaong.mall.filter;\n   \n   public class AdminFilter implements Filter {\n   \t...\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 引入重写javax.servlet Filter\n   \n   public class AdminFilter implements Filter {\n   \n       @Autowired\n       UserService userService;\n   \n       @Override\n       public void init(FilterConfig filterConfig) throws ServletException {\n           Filter.super.init(filterConfig);\n       }\n   \n   \t\t@Override\n       public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n               FilterChain filterChain) throws IOException, ServletException {\n           HttpServletRequest request = (HttpServletRequest) servletRequest;\n           HttpSession session = request.getSession();\n           User currentUser = (User) session.getAttribute(Constant.IMOOC_MALL_USER);\n           if (currentUser == null) {\n               PrintWriter out = new HttpServletResponseWrapper(\n                       (HttpServletResponse) servletResponse).getWriter();\n               out.write("{\\n"\n                       + "    \\"status\\": 10007,\\n"\n                       + "    \\"msg\\": \\"NEED_LOGIN\\",\\n"\n                       + "    \\"data\\": null\\n"\n                       + "}");\n               out.flush();\n               out.close();\n               return;\n           }\n           //校验是否是管理员\n           boolean adminRole = userService.checkAdminRole(currentUser);\n           if (adminRole) {\n               filterChain.doFilter(servletRequest, servletResponse);\n           } else {\n               PrintWriter out = new HttpServletResponseWrapper(\n                       (HttpServletResponse) servletResponse).getWriter();\n               out.write("{\\n"\n                       + "    \\"status\\": 10009,\\n"\n                       + "    \\"msg\\": \\"NEED_ADMIN\\",\\n"\n                       + "    \\"data\\": null\\n"\n                       + "}");\n               out.flush();\n               out.close();\n           }\n       }\n   \n       @Override\n       public void destroy() {\n           Filter.super.destroy();\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   46\n   47\n   48\n   49\n   50\n   \n\n * 过滤器配置\n   \n   package com.imooc.mall.config;\n   \n   import com.imooc.mall.filter.AdminFilter;\n   import org.springframework.boot.web.servlet.FilterRegistrationBean;\n   import org.springframework.context.annotation.Bean;\n   import org.springframework.context.annotation.Configuration;\n   \n   /**\n    * 描述：     Admin过滤器的配置\n    */\n   @Configuration\n   public class AdminFilterConfig {\n   \n       @Bean\n       public AdminFilter adminFilter() {\n           return new AdminFilter();\n       }\n   \n       @Bean(name = "adminFilterConf")\n       public FilterRegistrationBean adminFilterConfig() {\n           FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n           filterRegistrationBean.setFilter(adminFilter());\n           filterRegistrationBean.addUrlPatterns("/admin/category/*");\n           filterRegistrationBean.addUrlPatterns("/admin/product/*");\n           filterRegistrationBean.addUrlPatterns("/admin/order/*");\n           filterRegistrationBean.setName("adminFilterConf");\n           return filterRegistrationBean;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   \n\n * 在删除功能中测试\n   \n   * controller\n     \n     package com.izhaong.mall.contraoller;\n     ...\n     \t\t@ApiOperation("后台删除目录")\n         @DeleteMapping("/admin/category/delete")\n         @ResponseBody\n         public ApiRestResponse updateCategory(@RequestParam Integer id) {\n             categoryService.delete(id);\n             return ApiRestResponse.success();\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     \n   \n   * service\n     \n     package com.izhaong.mall.service.impl;\n     ...\n     \t\t@Override\n         public void delete(Integer id) {\n             if (categoryMapper.selectByPrimaryKey(id) == null) {\n                 throw new MallException(MallExceptionEnum.DELETE_FAILED);\n             }\n             int i = categoryMapper.deleteByPrimaryKey(id);\n             if (i == 0) {\n                 throw new MallException(MallExceptionEnum.DELETE_FAILED);\n             }\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     \n\n\n# 后台目录列表\n\n * controller\n   \n       @ApiOperation("后台目录列表")\n       @GetMapping("/admin/category/list")\n       @ResponseBody\n       public ApiRestResponse listCategory(@RequestParam Integer pageNum, @RequestParam Integer pageSize) {\n           PageInfo pageinfo = categoryService.listForAdmin(pageNum, pageSize);\n           return ApiRestResponse.success(pageinfo);\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * service\n   \n       @Override\n       public PageInfo listForAdmin(Integer pageNum, Integer pageSize) {\n   \t\t\t...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   * 引入分页依赖\n     \n             <dependency>\n                 <groupId>com.github.pagehelper</groupId>\n                 <artifactId>pagehelper-spring-boot-starter</artifactId>\n                 <version>1.2.13</version>\n             </dependency>\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n   \n   * 使用分页\n     \n         @Override\n         public PageInfo listForAdmin(Integer pageNum, Integer pageSize) {\n             PageHelper.startPage(pageNum, pageSize, "type,order_num");\n             List<Category> list = categoryMapper.selectList();\n             return new PageInfo(list);\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n   \n   * 添加list mapper\n     \n     @Mapper\n     public interface CategoryMapper {\n       ...\n       List<Category> selectList();\n       ...\n     }  \n     \n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     \n     \n       <select id="selectList" resultMap="BaseResultMap">\n         select\n         <include refid="Base_Column_List" />\n         from imooc_mall_category\n       </select>\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n\n\n# 前台列表\n\n * controller\n   \n       @ApiOperation("前台目录列表")\n       @GetMapping("/category/list")\n       @ResponseBody\n       public ApiRestResponse listCategory() {\n           List<CategoryVO> list = categoryService.listForCustomer();\n           return ApiRestResponse.success(list);\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * service\n   \n       @Override\n       public List<CategoryVO> listForCustomer() {\n           return recursSelectList(0);\n       }\n   \n       public List<CategoryVO> recursSelectList(Integer parentId) {\n           List<CategoryVO> categoryVOList = new ArrayList<>();\n           List<Category> list = categoryMapper.selectByParentId(parentId);\n           if (!CollectionUtils.isEmpty(list)) {\n               for (int i = 0; i < list.size(); i++) {\n                   Category category = list.get(i);\n                   CategoryVO categoryVO = new CategoryVO();\n                   BeanUtils.copyProperties(category, categoryVO);\n                   categoryVOList.add(categoryVO);\n                   categoryVO.setChildCategory(recursSelectList(categoryVO.getId()));\n               }\n           }\n           return categoryVOList;\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   \n\n * mapper\n   \n   @Repository\n   public interface CategoryMapper {\n     ...\n   \tList<Category> selectCategoriesByParentId(Integer parentId);\n     ...\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n   \n     <select id="selectByParentId" resultMap="BaseResultMap">\n       select\n       <include refid="Base_Column_List" />\n       from imooc_mall_category\n       where parent_id = #{parentId,jdbcType=INTEGER}\n     </select>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 新建vo包，经过转换之后返回给前端的类\n   \n   package com.izhaong.mall.model.vo;\n   \n   import java.util.ArrayList;\n   import java.util.Date;\n   import java.util.List;\n   \n   public class CategoryVO {\n   \n       private Integer id;\n   \n       private String name;\n   \n       private Integer type;\n   \n       private Integer parentId;\n   \n       private Integer orderNum;\n   \n       private List<CategoryVO> childCategory = new ArrayList<>();\n   \n       private Date createTime;\n   \n       private Date updateTime;\n   \n       public List<CategoryVO> getChildCategory() {\n           return childCategory;\n       }\n   \n       public void setChildCategory(List<CategoryVO> childCategory) {\n           this.childCategory = childCategory;\n       }\n   \n       public Integer getId() {\n           return id;\n       }\n   \n       public void setId(Integer id) {\n           this.id = id;\n       }\n   \n       public String getName() {\n           return name;\n       }\n   \n       public void setName(String name) {\n           this.name = name == null ? null : name.trim();\n       }\n   \n       public Integer getType() {\n           return type;\n       }\n   \n       public void setType(Integer type) {\n           this.type = type;\n       }\n   \n       public Integer getParentId() {\n           return parentId;\n       }\n   \n       public void setParentId(Integer parentId) {\n           this.parentId = parentId;\n       }\n   \n       public Integer getOrderNum() {\n           return orderNum;\n       }\n   \n       public void setOrderNum(Integer orderNum) {\n           this.orderNum = orderNum;\n       }\n   \n       public Date getCreateTime() {\n           return createTime;\n       }\n   \n       public void setCreateTime(Date createTime) {\n           this.createTime = createTime;\n       }\n   \n       public Date getUpdateTime() {\n           return updateTime;\n       }\n   \n       public void setUpdateTime(Date updateTime) {\n           this.updateTime = updateTime;\n       }\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   46\n   47\n   48\n   49\n   50\n   51\n   52\n   53\n   54\n   55\n   56\n   57\n   58\n   59\n   60\n   61\n   62\n   63\n   64\n   65\n   66\n   67\n   68\n   69\n   70\n   71\n   72\n   73\n   74\n   75\n   76\n   77\n   78\n   79\n   80\n   81\n   82\n   83\n   84\n   85\n   86\n   87\n   88\n   89\n   \n\n\n# redis 提高缓存\n\nsprintboot集成redis\n\n * 引入依赖\n   \n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-data-redis</artifactId>\n           </dependency>\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-cache</artifactId>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 配置redis 连接\n   \n   spring.redis.host=127.0.0.1\n   spring.redis.port=6379\n   spring.redis.password=redispassword\n   \n   \n   1\n   2\n   3\n   \n\n * main注入 打开缓存功能\n   \n   @EnableCaching\n   public class MallApplication {\n       public static void main(String[] args) {\n           SpringApplication.run(MallApplication.class, args);\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 缓存配置\n   \n   package com.izhaong.mall.config;\n   \n   import org.springframework.cache.annotation.EnableCaching;\n   import org.springframework.context.annotation.Bean;\n   import org.springframework.context.annotation.Configuration;\n   import org.springframework.data.redis.cache.RedisCacheConfiguration;\n   import org.springframework.data.redis.cache.RedisCacheManager;\n   import org.springframework.data.redis.cache.RedisCacheWriter;\n   import org.springframework.data.redis.connection.RedisConnectionFactory;\n   \n   import java.time.Duration;\n   \n   /**\n    * 描述：     缓存的配置类\n    */\n   @Configuration\n   @EnableCaching\n   public class CachingConfig {\n   \n       @Bean\n       public RedisCacheManager redisCacheManager(RedisConnectionFactory connectionFactory) {\n           \n           RedisCacheWriter redisCacheWriter = RedisCacheWriter.lockingRedisCacheWriter(connectionFactory);\n           RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();\n           cacheConfiguration = cacheConfiguration.entryTtl(Duration.ofSeconds(30));\n   \n           RedisCacheManager redisCacheManager = new RedisCacheManager(redisCacheWriter, cacheConfiguration);\n           return redisCacheManager;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   \n\n * 使用，序列化class\n   \n   package com.imooc.mall.service.impl;\n   ...\n   \t\t@Override\n       @Cacheable(value = "listForCustomer")\n       public List<CategoryVO> listForCustomer() {\n           return recursSelectList(0);\n       }\n   ...\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n   \n   package com.izhaong.mall.model.vo;\n   \n   import java.io.Serializable;\n   ...\n   public class CategoryVO implements Serializable {\n     ...\n   }\n   ...\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   ',normalizedContent:'# 分类\n\n\n# 后台添加分类\n\n * 创建controller，categorycontroller\n   \n   @controller\n   public class categorycontroller {\n   \n       @autowired\n       categoryservice categoryservice;\n   \n       // 后台添加目录\n       @postmapping("/admin/category/add")\n       @responsebody\n       public apirestresponse addcategory(httpsession session, @requestbody addcategoryreq addcategoryreq) {\n   \n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   \n   \n   * 单独创建类：model/request/addcategory\n     \n     package com.izhaong.mall.model.request;\n     \n     public class addcategoryreq {\n             private string name;\n     \n             private integer type;\n     \n             private integer parentid;\n     \n             private integer ordernum;\n     \n             public string getname() {\n                     return name;\n             }\n     \n             public void setname(string name) {\n                     this.name = name;\n             }\n     \n             public integer gettype() {\n                     return type;\n             }\n     \n             public void settype(integer type) {\n                     this.type = type;\n             }\n     \n             public integer getparentid() {\n                     return parentid;\n             }\n     \n             public void setparentid(integer parentid) {\n                     this.parentid = parentid;\n             }\n     \n             public integer getordernum() {\n                     return ordernum;\n             }\n     \n             public void setordernum(integer ordernum) {\n                     this.ordernum = ordernum;\n             }\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     \n   \n   * 创建selectbyname mapper\n     \n     public interface categorymapper {\n     \t\t...\n         category selectbyname(string name);\n       \t...\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n     \n       <select id="selectbyname" parametertype="java.lang.string" resultmap="baseresultmap">\n         select\n         <include refid="base_column_list" />\n         from imooc_mall_category\n         where name = #{name,jdbctype=varchar}\n       </select>\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n\n创建service接口及实现类categoryservice，categoryserviceimpl\n\npackage com.izhaong.mall.service.impl;\n\n\nimport com.izhaong.mall.exception.mallexception;\nimport com.izhaong.mall.exception.mallexceptionenum;\nimport com.izhaong.mall.model.dao.categorymapper;\nimport com.izhaong.mall.model.pojo.category;\nimport com.izhaong.mall.model.request.addcategoryreq;\nimport com.izhaong.mall.service.categoryservice;\nimport org.springframework.beans.beanutils;\nimport org.springframework.stereotype.service;\n\n\n@service\npublic class categoryserviceimpl implements categoryservice {\n\n    categorymapper categorymapper;\n\n    @override\n    public void add(addcategoryreq addcategoryreq) {\n        // 判断是否重名\n        category category = new category();\n        beanutils.copyproperties(addcategoryreq, category);\n\n        category oldcate = categorymapper.selectbyname(addcategoryreq.getname());\n\n//        是抛出异常 不添加\n        if (oldcate != null) {\n            throw new mallexception(mallexceptionenum.name_existed);\n        } else {\n            //        不是重名就插入数据\n            int count = categorymapper.insertselective(category);\n            if (count == 0) {\n                throw new mallexception(mallexceptionenum.insert_failed);\n            }\n        }\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n * 添加参数校验\n   \n   \n   \n   * 在全局异常中处理\n     \n     \t\t@exceptionhandler(methodargumentnotvalidexception.class)\n         @responsebody\n         public apirestresponse handlemethodargumentnotvalidexception(methodargumentnotvalidexception e) {\n             logger.error("methodargumentnotvalidexception:", e);\n             return handlebindingresult(e.getbindingresult());\n         }\n     \n         private apirestresponse handlebindingresult(bindingresult result) {\n             //把异常处理为对外暴露的提示\n             list<string> list = new arraylist<>();\n             if (result.haserrors()) {\n                 list<objecterror> allerrors = result.getallerrors();\n                 // itli\n                 for (objecterror objecterror : allerrors) {\n                     string message = objecterror.getdefaultmessage();\n                     list.add(message);\n                 }\n             }\n             if (list.size() == 0) {\n                 return apirestresponse.error(mallexceptionenum.request_param_error);\n             }\n             return apirestresponse.error(mallexceptionenum.request_param_error.getcode(), list.tostring());\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     \n\n\n# swagger 整合\n\n * 引入依赖\n   \n   \t\t\t\t<dependency>\n               <groupid>io.springfox</groupid>\n               <artifactid>springfox-swagger2</artifactid>\n               <version>2.9.2</version>\n           </dependency>\n           <dependency>\n               <groupid>io.springfox</groupid>\n               <artifactid>springfox-swagger-ui</artifactid>\n               <version>2.9.2</version>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n * 在mainapplication 中开启使用\n   \n   @enableswagger2\n   public class mallapplication {\n   \n       public static void main(string[] args) {\n           springapplication.run(mallapplication.class, args);\n       }\n   \n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 添加配置文件\n   \n   // com.izhaong.mall/config/springfoxconfig\n   \n   public class springfoxconfig {\n       //访问http://localhost:8083/swagger-ui.html可以看到api文档\n       @bean\n       public docket api() {\n           return new docket(documentationtype.swagger_2)\n                   .apiinfo(apiinfo())\n                   .select()\n                   .apis(requesthandlerselectors.any())\n                   .paths(pathselectors.any())\n                   .build();\n       }\n   \n       private apiinfo apiinfo() {\n           return new apiinfobuilder()\n                   .title("生鲜")\n                   .description("")\n                   .termsofserviceurl("")\n                   .build();\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   \n   \n   * 配置地址映射\n     \n     @configuration\n     public class mallwebmvcconfig implements webmvcconfigurer {\n     \n         @override\n         public void addresourcehandlers(resourcehandlerregistry registry) {\n             registry.addresourcehandler("swagger-ui.html").addresourcelocations("classpath:/meta-inf/resources/");\n             registry.addresourcehandler("/webjars/**").addresourcelocations("classpath:/meta-inf/resources/webjars/");\n         }\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     \n\n * 添加注解使用\n   \n   // 后台添加目录\n       @apioperation("后台添加目录")\n       @postmapping("/admin/category/add")\n       @responsebody\n       public apirestresponse addcategory(httpsession session, @valid @requestbody addcategoryreq addcategoryreq) {\n         ...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * 启动访问 http://localhost:8088/swagger-ui.html\n\n\n# 更新分类\n\n注意点：\n\n更新时需要对名称做校验\n\n// service\n\t\t@override\n    public void update(category updatecategory) {\n        if (updatecategory.getname() != null) {\n            category categoryold = categorymapper.selectbyname(updatecategory.getname());\n            if (categoryold != null && categoryold.getid().equals(updatecategory.getid())) {\n                throw new mallexception(mallexceptionenum.name_existed);\n            }\n        }\n        int count = categorymapper.updatebyprimarykeyselective(updatecategory);\n        if (count == 0) {\n            throw new mallexception(mallexceptionenum.update_faild);\n        }\n    }\n \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 封装管理员校验过滤器\n\n * 创建过滤器 adminfilter\n   \n   package com.izhaong.mall.filter;\n   \n   public class adminfilter implements filter {\n   \t...\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 引入重写javax.servlet filter\n   \n   public class adminfilter implements filter {\n   \n       @autowired\n       userservice userservice;\n   \n       @override\n       public void init(filterconfig filterconfig) throws servletexception {\n           filter.super.init(filterconfig);\n       }\n   \n   \t\t@override\n       public void dofilter(servletrequest servletrequest, servletresponse servletresponse,\n               filterchain filterchain) throws ioexception, servletexception {\n           httpservletrequest request = (httpservletrequest) servletrequest;\n           httpsession session = request.getsession();\n           user currentuser = (user) session.getattribute(constant.imooc_mall_user);\n           if (currentuser == null) {\n               printwriter out = new httpservletresponsewrapper(\n                       (httpservletresponse) servletresponse).getwriter();\n               out.write("{\\n"\n                       + "    \\"status\\": 10007,\\n"\n                       + "    \\"msg\\": \\"need_login\\",\\n"\n                       + "    \\"data\\": null\\n"\n                       + "}");\n               out.flush();\n               out.close();\n               return;\n           }\n           //校验是否是管理员\n           boolean adminrole = userservice.checkadminrole(currentuser);\n           if (adminrole) {\n               filterchain.dofilter(servletrequest, servletresponse);\n           } else {\n               printwriter out = new httpservletresponsewrapper(\n                       (httpservletresponse) servletresponse).getwriter();\n               out.write("{\\n"\n                       + "    \\"status\\": 10009,\\n"\n                       + "    \\"msg\\": \\"need_admin\\",\\n"\n                       + "    \\"data\\": null\\n"\n                       + "}");\n               out.flush();\n               out.close();\n           }\n       }\n   \n       @override\n       public void destroy() {\n           filter.super.destroy();\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   46\n   47\n   48\n   49\n   50\n   \n\n * 过滤器配置\n   \n   package com.imooc.mall.config;\n   \n   import com.imooc.mall.filter.adminfilter;\n   import org.springframework.boot.web.servlet.filterregistrationbean;\n   import org.springframework.context.annotation.bean;\n   import org.springframework.context.annotation.configuration;\n   \n   /**\n    * 描述：     admin过滤器的配置\n    */\n   @configuration\n   public class adminfilterconfig {\n   \n       @bean\n       public adminfilter adminfilter() {\n           return new adminfilter();\n       }\n   \n       @bean(name = "adminfilterconf")\n       public filterregistrationbean adminfilterconfig() {\n           filterregistrationbean filterregistrationbean = new filterregistrationbean();\n           filterregistrationbean.setfilter(adminfilter());\n           filterregistrationbean.addurlpatterns("/admin/category/*");\n           filterregistrationbean.addurlpatterns("/admin/product/*");\n           filterregistrationbean.addurlpatterns("/admin/order/*");\n           filterregistrationbean.setname("adminfilterconf");\n           return filterregistrationbean;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   \n\n * 在删除功能中测试\n   \n   * controller\n     \n     package com.izhaong.mall.contraoller;\n     ...\n     \t\t@apioperation("后台删除目录")\n         @deletemapping("/admin/category/delete")\n         @responsebody\n         public apirestresponse updatecategory(@requestparam integer id) {\n             categoryservice.delete(id);\n             return apirestresponse.success();\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     \n   \n   * service\n     \n     package com.izhaong.mall.service.impl;\n     ...\n     \t\t@override\n         public void delete(integer id) {\n             if (categorymapper.selectbyprimarykey(id) == null) {\n                 throw new mallexception(mallexceptionenum.delete_failed);\n             }\n             int i = categorymapper.deletebyprimarykey(id);\n             if (i == 0) {\n                 throw new mallexception(mallexceptionenum.delete_failed);\n             }\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     \n\n\n# 后台目录列表\n\n * controller\n   \n       @apioperation("后台目录列表")\n       @getmapping("/admin/category/list")\n       @responsebody\n       public apirestresponse listcategory(@requestparam integer pagenum, @requestparam integer pagesize) {\n           pageinfo pageinfo = categoryservice.listforadmin(pagenum, pagesize);\n           return apirestresponse.success(pageinfo);\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * service\n   \n       @override\n       public pageinfo listforadmin(integer pagenum, integer pagesize) {\n   \t\t\t...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   \n   \n   * 引入分页依赖\n     \n             <dependency>\n                 <groupid>com.github.pagehelper</groupid>\n                 <artifactid>pagehelper-spring-boot-starter</artifactid>\n                 <version>1.2.13</version>\n             </dependency>\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n   \n   * 使用分页\n     \n         @override\n         public pageinfo listforadmin(integer pagenum, integer pagesize) {\n             pagehelper.startpage(pagenum, pagesize, "type,order_num");\n             list<category> list = categorymapper.selectlist();\n             return new pageinfo(list);\n         }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     \n   \n   * 添加list mapper\n     \n     @mapper\n     public interface categorymapper {\n       ...\n       list<category> selectlist();\n       ...\n     }  \n     \n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     \n     \n       <select id="selectlist" resultmap="baseresultmap">\n         select\n         <include refid="base_column_list" />\n         from imooc_mall_category\n       </select>\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n\n\n# 前台列表\n\n * controller\n   \n       @apioperation("前台目录列表")\n       @getmapping("/category/list")\n       @responsebody\n       public apirestresponse listcategory() {\n           list<categoryvo> list = categoryservice.listforcustomer();\n           return apirestresponse.success(list);\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n * service\n   \n       @override\n       public list<categoryvo> listforcustomer() {\n           return recursselectlist(0);\n       }\n   \n       public list<categoryvo> recursselectlist(integer parentid) {\n           list<categoryvo> categoryvolist = new arraylist<>();\n           list<category> list = categorymapper.selectbyparentid(parentid);\n           if (!collectionutils.isempty(list)) {\n               for (int i = 0; i < list.size(); i++) {\n                   category category = list.get(i);\n                   categoryvo categoryvo = new categoryvo();\n                   beanutils.copyproperties(category, categoryvo);\n                   categoryvolist.add(categoryvo);\n                   categoryvo.setchildcategory(recursselectlist(categoryvo.getid()));\n               }\n           }\n           return categoryvolist;\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   \n\n * mapper\n   \n   @repository\n   public interface categorymapper {\n     ...\n   \tlist<category> selectcategoriesbyparentid(integer parentid);\n     ...\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n   \n     <select id="selectbyparentid" resultmap="baseresultmap">\n       select\n       <include refid="base_column_list" />\n       from imooc_mall_category\n       where parent_id = #{parentid,jdbctype=integer}\n     </select>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 新建vo包，经过转换之后返回给前端的类\n   \n   package com.izhaong.mall.model.vo;\n   \n   import java.util.arraylist;\n   import java.util.date;\n   import java.util.list;\n   \n   public class categoryvo {\n   \n       private integer id;\n   \n       private string name;\n   \n       private integer type;\n   \n       private integer parentid;\n   \n       private integer ordernum;\n   \n       private list<categoryvo> childcategory = new arraylist<>();\n   \n       private date createtime;\n   \n       private date updatetime;\n   \n       public list<categoryvo> getchildcategory() {\n           return childcategory;\n       }\n   \n       public void setchildcategory(list<categoryvo> childcategory) {\n           this.childcategory = childcategory;\n       }\n   \n       public integer getid() {\n           return id;\n       }\n   \n       public void setid(integer id) {\n           this.id = id;\n       }\n   \n       public string getname() {\n           return name;\n       }\n   \n       public void setname(string name) {\n           this.name = name == null ? null : name.trim();\n       }\n   \n       public integer gettype() {\n           return type;\n       }\n   \n       public void settype(integer type) {\n           this.type = type;\n       }\n   \n       public integer getparentid() {\n           return parentid;\n       }\n   \n       public void setparentid(integer parentid) {\n           this.parentid = parentid;\n       }\n   \n       public integer getordernum() {\n           return ordernum;\n       }\n   \n       public void setordernum(integer ordernum) {\n           this.ordernum = ordernum;\n       }\n   \n       public date getcreatetime() {\n           return createtime;\n       }\n   \n       public void setcreatetime(date createtime) {\n           this.createtime = createtime;\n       }\n   \n       public date getupdatetime() {\n           return updatetime;\n       }\n   \n       public void setupdatetime(date updatetime) {\n           this.updatetime = updatetime;\n       }\n   }\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   46\n   47\n   48\n   49\n   50\n   51\n   52\n   53\n   54\n   55\n   56\n   57\n   58\n   59\n   60\n   61\n   62\n   63\n   64\n   65\n   66\n   67\n   68\n   69\n   70\n   71\n   72\n   73\n   74\n   75\n   76\n   77\n   78\n   79\n   80\n   81\n   82\n   83\n   84\n   85\n   86\n   87\n   88\n   89\n   \n\n\n# redis 提高缓存\n\nsprintboot集成redis\n\n * 引入依赖\n   \n           <dependency>\n               <groupid>org.springframework.boot</groupid>\n               <artifactid>spring-boot-starter-data-redis</artifactid>\n           </dependency>\n           <dependency>\n               <groupid>org.springframework.boot</groupid>\n               <artifactid>spring-boot-starter-cache</artifactid>\n           </dependency>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 配置redis 连接\n   \n   spring.redis.host=127.0.0.1\n   spring.redis.port=6379\n   spring.redis.password=redispassword\n   \n   \n   1\n   2\n   3\n   \n\n * main注入 打开缓存功能\n   \n   @enablecaching\n   public class mallapplication {\n       public static void main(string[] args) {\n           springapplication.run(mallapplication.class, args);\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 缓存配置\n   \n   package com.izhaong.mall.config;\n   \n   import org.springframework.cache.annotation.enablecaching;\n   import org.springframework.context.annotation.bean;\n   import org.springframework.context.annotation.configuration;\n   import org.springframework.data.redis.cache.rediscacheconfiguration;\n   import org.springframework.data.redis.cache.rediscachemanager;\n   import org.springframework.data.redis.cache.rediscachewriter;\n   import org.springframework.data.redis.connection.redisconnectionfactory;\n   \n   import java.time.duration;\n   \n   /**\n    * 描述：     缓存的配置类\n    */\n   @configuration\n   @enablecaching\n   public class cachingconfig {\n   \n       @bean\n       public rediscachemanager rediscachemanager(redisconnectionfactory connectionfactory) {\n           \n           rediscachewriter rediscachewriter = rediscachewriter.lockingrediscachewriter(connectionfactory);\n           rediscacheconfiguration cacheconfiguration = rediscacheconfiguration.defaultcacheconfig();\n           cacheconfiguration = cacheconfiguration.entryttl(duration.ofseconds(30));\n   \n           rediscachemanager rediscachemanager = new rediscachemanager(rediscachewriter, cacheconfiguration);\n           return rediscachemanager;\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   \n\n * 使用，序列化class\n   \n   package com.imooc.mall.service.impl;\n   ...\n   \t\t@override\n       @cacheable(value = "listforcustomer")\n       public list<categoryvo> listforcustomer() {\n           return recursselectlist(0);\n       }\n   ...\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n   \n   package com.izhaong.mall.model.vo;\n   \n   import java.io.serializable;\n   ...\n   public class categoryvo implements serializable {\n     ...\n   }\n   ...\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   ',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"springboot项目学习笔记4 商品模块",frontmatter:{title:"springboot项目学习笔记4 商品模块",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/2bcf71/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200144.springboot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%20%E5%95%86%E5%93%81%E6%A8%A1%E5%9D%97.html",relativePath:"20.后端&运维/2001.Java/200144.springboot项目学习笔记4 商品模块.md",key:"v-5a174d42",path:"/pages/2bcf71/",headers:[{level:2,title:"商品模块介绍",slug:"商品模块介绍",normalizedTitle:"商品模块介绍",charIndex:2},{level:2,title:"添加商品",slug:"添加商品",normalizedTitle:"添加商品",charIndex:161},{level:3,title:"添加后台商品管理controller",slug:"添加后台商品管理controller",normalizedTitle:"添加后台商品管理controller",charIndex:173},{level:3,title:"新增商品实体类 自定义在model request",slug:"新增商品实体类-自定义在model-request",normalizedTitle:"新增商品实体类 自定义在model request",charIndex:750},{level:3,title:"建立商品service",slug:"建立商品service",normalizedTitle:"建立商品service",charIndex:1913},{level:2,title:"UUID介绍",slug:"uuid介绍",normalizedTitle:"uuid介绍",charIndex:5980},{level:2,title:"图片上传",slug:"图片上传",normalizedTitle:"图片上传",charIndex:27},{level:3,title:"重命名上传文件",slug:"重命名上传文件",normalizedTitle:"重命名上传文件",charIndex:6104},{level:3,title:"创建文件",slug:"创建文件",normalizedTitle:"创建文件",charIndex:6615},{level:2,title:"自定义静态资源映射目录",slug:"自定义静态资源映射目录",normalizedTitle:"自定义静态资源映射目录",charIndex:8713},{level:2,title:"更新商品",slug:"更新商品",normalizedTitle:"更新商品",charIndex:35},{level:3,title:"model UpdateProductReq",slug:"model-updateproductreq",normalizedTitle:"model updateproductreq",charIndex:8803},{level:3,title:"controller",slug:"controller",normalizedTitle:"controller",charIndex:181},{level:3,title:"service",slug:"service",normalizedTitle:"service",charIndex:1917},{level:2,title:"删除商品",slug:"删除商品",normalizedTitle:"删除商品",charIndex:43},{level:2,title:"批量上下架",slug:"批量上下架",normalizedTitle:"批量上下架",charIndex:51},{level:3,title:"mapper",slug:"mapper",normalizedTitle:"mapper",charIndex:3953},{level:4,title:"SQL理解",slug:"sql理解",normalizedTitle:"sql理解",charIndex:11701},{level:2,title:"商品列表",slug:"商品列表",normalizedTitle:"商品列表",charIndex:62},{level:3,title:"service",slug:"service-2",normalizedTitle:"service",charIndex:1917}],headersStr:"商品模块介绍 添加商品 添加后台商品管理controller 新增商品实体类 自定义在model request 建立商品service UUID介绍 图片上传 重命名上传文件 创建文件 自定义静态资源映射目录 更新商品 model UpdateProductReq controller service 删除商品 批量上下架 mapper SQL理解 商品列表 service",content:'# 商品模块介绍\n\n后台\n\n * 新增商品\n   * 图片上传\n * 更新商品\n * 删除商品\n * 批量上下架操作\n * 商品列表\n\n前台\n\n----------------------------------------\n\n * 商品列表\n   \n   * 分类\n   \n   * 排序价格\n\n * 商品详情\n\n\n# 添加商品\n\n\n * # 添加后台商品管理controller\n   \n   @RestController 相当于在每个方法上都加了@ResponseBody\n   \n   package com.izhaong.mall.contraoller;\n   ...\n   @RestController\n   public class ProductAdminController {\n   \n       @Autowired\n       ProductService productService;\n     \n   \t\t@PostMapping("/admin/product/add")\n       public ApiRestResponse addProduct(@Valid @RequestBody AddProductReq addProductReq) {\n           productService.add(addProductReq);\n           return ApiRestResponse.success();\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n\n\n * # 新增商品实体类 自定义在model request\n   \n   * 添加校验\n     \n     package com.izhaong.mall.model.request;\n     \n     import javax.validation.constraints.Max;\n     import javax.validation.constraints.Min;\n     import javax.validation.constraints.NotNull;\n     \n     public class AddProductReq {\n         @NotNull(message = "商品名称不能为null")\n         private String name;\n     \n         @NotNull(message = "商品图片不能为null")\n     \n         private String image;\n     \n         private String detail;\n     \n         @NotNull(message = "商品分类不能为null")\n         private Integer categoryId;\n     \n         @NotNull(message = "商品价格不能为null")\n         @Min(value = 1,message = "价格不能小于1")\n         private Integer price;\n     \n         @NotNull(message = "商品库存不能为null")\n         @Max(value = 10000,message = "库存不能大于10000")\n         private Integer stock;\n     \n         private Integer status;\n     \t\t...\tgetter&setter\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     \n\n\n * # 建立商品service\n   \n   * 接口\n     \n     package com.izhaong.mall.service;\n     \n     import com.github.pagehelper.PageInfo;\n     import com.izhaong.mall.model.pojo.Product;\n     import com.izhaong.mall.model.request.AddProductReq;\n     import com.izhaong.mall.model.vo.CategoryVO;\n     \n     import java.util.List;\n     \n     public interface ProductService {\n         void add(AddProductReq addProductReq);\n     \n         void update(Product product);\n     \n         void delete(Integer id);\n     \n         PageInfo listForAdmin(Integer pageNum, Integer pageSize);\n     \n         List<CategoryVO> listForCustomer();\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     \n   \n   * 实现类\n     \n     package com.izhaong.mall.service.impl;\n     ...\n     @Service\n     public class ProductServiceImpl implements ProductService {\n     \n         @Autowired\n         ProductMapper productMapper;\n     \n         @Override\n         public void add(AddProductReq addProductReq) {\n             Product product = new Product();\n             BeanUtils.copyProperties(addProductReq, product);\n             // 重名情况处理\n     \n         }\n     \n         @Override\n         public void update(Product product) {\n     \n         }\n     \n         @Override\n         public void delete(Integer id) {\n     \n         }\n     \n         @Override\n         public PageInfo listForAdmin(Integer pageNum, Integer pageSize) {\n             return null;\n         }\n     \n         @Override\n         public List<CategoryVO> listForCustomer() {\n             return null;\n         }\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     \n     \n     * 重名情况处理：\n       \n       * 根据name查询, 新增mapper\n         \n         package com.izhaong.mall.model.dao;\n         ...\n         public interface ProductMapper {\n         \t...\n           Product selectByPrimaryKey(Integer id);\n           Product selectByName(String name);\n           ...\n         }\n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         \n         \n           ...\n         \t<select id="selectByName" parameterType="java.lang.String" resultMap="BaseResultMap">\n             select\n             <include refid="Base_Column_List" />\n             from imooc_mall_product\n             where name = #{name,jdbcType=VARCHAR}\n           </select>\n         \t...\n         \n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         9\n         \n       \n       * 如果有抛出异常，否则就插入\n         \n         @Service\n         public class ProductServiceImpl implements ProductService {\n         \n             @Autowired\n             ProductMapper productMapper;\n         \n             @Override\n             public void add(AddProductReq addProductReq) {\n                 Product product = new Product();\n                 BeanUtils.copyProperties(addProductReq, product);\n                 // 重名情况处理\n                 Product productOld = productMapper.selectByName(addProductReq.getName());\n                 if(productOld != null) {\n                     throw new MallException(MallExceptionEnum.NAME_EXISTED);\n                 }\n                 int count = productMapper.insertSelective(product);\n                 if(count == 0) {\n                     throw new MallException(MallExceptionEnum.INSERT_FAILED);\n                 }\n             }\n           ...\n         }\n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         9\n         10\n         11\n         12\n         13\n         14\n         15\n         16\n         17\n         18\n         19\n         20\n         21\n         22\n         \n\n\n# UUID介绍\n\n * 文件名UUID\n * 通用唯一识别码(Universally Unique Identifier )\n * 防止重名、防止爬图\n * 生成规则：日期和时间、MAC地址、HashCode、随机数\n\n\n# 图片上传\n\n\n * # 重命名上传文件\n   \n       @PostMapping("/admin/upload/file")\n       public ApiRestResponse upload (HttpServletRequest httpServletRequest, @RequestParam("file")MultipartFile file) {\n           String fileName = file.getOriginalFilename();\n           String suffixName = fileName.substring(fileName.lastIndexOf("."));\n   \n           UUID uuid = UUID.randomUUID();\n           String newFileName = uuid.toString() + suffixName;\n   \n   \t\t\t\t...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n\n * # 创建文件\n   \n   * 文件夹路径为配置变量\n     \n     package com.imooc.mall.common;\n     ...\n     public class Constant {\n         ...\n       \tpublic static String FILE_UPLOAD_DIR;\n     \n         @Value("${file.upload.dir}")\n         public void setFileUploadDir(String fileUploadDir) {\n             FILE_UPLOAD_DIR = fileUploadDir;\n         }\n         ...\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     \n     \n     * 文件夹吐过没有则创建， 对创建失败的情况做处理\n       \n              //如果文件夹不存在\n               if (!fileDirectory.exists()) {\n                   if (!fileDirectory.mkdir()) {\n                       throw new MallException(MallExceptionEnum.MKDIR_FAILED);\n                   }\n               }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       \n   \n   * 写入空文件中\n     \n             try {\n                 file.transferTo(destFile);\n             } catch (IOException e) {\n                 e.printStackTrace();\n             }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n   \n   * 返回地址\n     \n     * 获取本地服务地址\n       \n           private URI getHost(URI uri) {\n               URI effectiveURI;\n               try {\n                   effectiveURI = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(),\n                           null, null, null);\n               } catch (URISyntaxException e) {\n                   effectiveURI = null;\n               }\n               return effectiveURI;\n           }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       \n     \n     * 拼接地址，对失败做处理\n       \n               try {\n                   return ApiRestResponse\n                           .success(getHost(new URI(httpServletRequest.getRequestURL() + "")) + "/images/"\n                                   + newFileName);\n               } catch (URISyntaxException e) {\n                   return ApiRestResponse.error(MallExceptionEnum.UPLOAD_FAILED);\n               }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       \n\n\n# 自定义静态资源映射目录\n\n * 上传图片后回显\n * 配置SpringBootWebMvcConfig\n * 静态资源到本地目录映射\n * 演示打开图片\n\n\n# 更新商品\n\n\n# model UpdateProductReq\n\n一定要生成id和name的 getter和setter方法，在controller会用到id的get方法，在service实现类中用到了name的get方法\n\npublic class UpdateProductReq {\n    @NotNull(message = "id不能为空")\n    private Integer id;\n\n    private String name;\n\n    private String image;\n\n    private String detail;\n\n    private Integer categoryId;\n\n    @Min(value = 1, message = "价格不能小于1")\n    private Integer price;\n\n    @Max(value = 10000, message = "库存不能大于10000")\n    private Integer stock;\n\n    private Integer status;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# controller\n\n    @PutMapping("/admin/product/update")\n    public ApiRestResponse update(UpdateProductReq upProduct) {\n        Product product = new Product();\n        BeanUtils.copyProperties(upProduct, product);\n        productService.update(product);\n        return ApiRestResponse.success();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# service\n\n * 同名且不同id\n   \n       @Override\n       public void update(Product product) {\n   //        同名且不同id\n           Product productOld = productMapper.selectByName(product.getName());\n           if (productOld != null && !(productOld.getId().equals(product.getId()))) {\n               throw new MallException(MallExceptionEnum.NAME_EXISTED);\n           }\n           int count = productMapper.updateByPrimaryKeySelective(product);\n           if (count == 0) {\n               throw new MallException(MallExceptionEnum.UPDATE_FAILD);\n           }\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n\n# 删除商品\n\ncontroller\n\n    @DeleteMapping("/admin/product/delete")\n    public ApiRestResponse delete(int id) {\n        productService.delete(id);\n        return ApiRestResponse.success();\n    }\n\n\n1\n2\n3\n4\n5\n\n\nservice\n\n    @Override\n    public void delete(Integer id) {\n        Product product = productMapper.selectByPrimaryKey(id);\n        if (product == null) {\n            throw new MallException(MallExceptionEnum.UPDATE_FAILD);\n        }\n        int count = productMapper.deleteByPrimaryKey(id);\n        if (count == 0) {\n            throw new MallException(MallExceptionEnum.DELETE_FAILED);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 批量上下架\n\n * mybatis 遍历list\n * where 语句拼接\n\n\n# mapper\n\n跟mybatis相关需要加入注解的名字@Param\n\n    int batchUpdateSellStatus(@Param("ids") Integer[] ids, @Param("status") Integer status);\n\n\n1\n\n\nsql mapper\n\n    <update id="batchUpdateSellStatus">\n        update imooc_mall_product\n        set status = #{status}\n        where id in\n        <foreach collection="ids" open="(" close=")" item="id" separator=",">\n            #{id}\n        </foreach>\n    </update>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# SQL理解\n\n * 使用mysql 自带的语句构建批量更新\n   \n   UPDATE tableName\n       SET orderId = CASE id \n           WHEN 1 THEN 3 \n           WHEN 2 THEN 4 \n           WHEN 3 THEN 5 \n       END\n   WHERE id IN (1,2,3)\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n更新多个值的话\n\nUPDATE categories \n    SET orderId = CASE id \n        WHEN 1 THEN 3 \n        WHEN 2 THEN 4 \n        WHEN 3 THEN 5 \n    END, \n    title = CASE id \n        WHEN 1 THEN \'New Title 1\'\n        WHEN 2 THEN \'New Title 2\'\n        WHEN 3 THEN \'New Title 3\'\n    END\nWHERE id IN (1,2,3)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 商品列表\n\n * 排序功能\n * mybatis pagehelper\n * 枚举：order by\n\n\n# service\n\n * 新建req类\n * 新建query类',normalizedContent:'# 商品模块介绍\n\n后台\n\n * 新增商品\n   * 图片上传\n * 更新商品\n * 删除商品\n * 批量上下架操作\n * 商品列表\n\n前台\n\n----------------------------------------\n\n * 商品列表\n   \n   * 分类\n   \n   * 排序价格\n\n * 商品详情\n\n\n# 添加商品\n\n\n * # 添加后台商品管理controller\n   \n   @restcontroller 相当于在每个方法上都加了@responsebody\n   \n   package com.izhaong.mall.contraoller;\n   ...\n   @restcontroller\n   public class productadmincontroller {\n   \n       @autowired\n       productservice productservice;\n     \n   \t\t@postmapping("/admin/product/add")\n       public apirestresponse addproduct(@valid @requestbody addproductreq addproductreq) {\n           productservice.add(addproductreq);\n           return apirestresponse.success();\n       }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n\n\n * # 新增商品实体类 自定义在model request\n   \n   * 添加校验\n     \n     package com.izhaong.mall.model.request;\n     \n     import javax.validation.constraints.max;\n     import javax.validation.constraints.min;\n     import javax.validation.constraints.notnull;\n     \n     public class addproductreq {\n         @notnull(message = "商品名称不能为null")\n         private string name;\n     \n         @notnull(message = "商品图片不能为null")\n     \n         private string image;\n     \n         private string detail;\n     \n         @notnull(message = "商品分类不能为null")\n         private integer categoryid;\n     \n         @notnull(message = "商品价格不能为null")\n         @min(value = 1,message = "价格不能小于1")\n         private integer price;\n     \n         @notnull(message = "商品库存不能为null")\n         @max(value = 10000,message = "库存不能大于10000")\n         private integer stock;\n     \n         private integer status;\n     \t\t...\tgetter&setter\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     \n\n\n * # 建立商品service\n   \n   * 接口\n     \n     package com.izhaong.mall.service;\n     \n     import com.github.pagehelper.pageinfo;\n     import com.izhaong.mall.model.pojo.product;\n     import com.izhaong.mall.model.request.addproductreq;\n     import com.izhaong.mall.model.vo.categoryvo;\n     \n     import java.util.list;\n     \n     public interface productservice {\n         void add(addproductreq addproductreq);\n     \n         void update(product product);\n     \n         void delete(integer id);\n     \n         pageinfo listforadmin(integer pagenum, integer pagesize);\n     \n         list<categoryvo> listforcustomer();\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     \n   \n   * 实现类\n     \n     package com.izhaong.mall.service.impl;\n     ...\n     @service\n     public class productserviceimpl implements productservice {\n     \n         @autowired\n         productmapper productmapper;\n     \n         @override\n         public void add(addproductreq addproductreq) {\n             product product = new product();\n             beanutils.copyproperties(addproductreq, product);\n             // 重名情况处理\n     \n         }\n     \n         @override\n         public void update(product product) {\n     \n         }\n     \n         @override\n         public void delete(integer id) {\n     \n         }\n     \n         @override\n         public pageinfo listforadmin(integer pagenum, integer pagesize) {\n             return null;\n         }\n     \n         @override\n         public list<categoryvo> listforcustomer() {\n             return null;\n         }\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     \n     \n     * 重名情况处理：\n       \n       * 根据name查询, 新增mapper\n         \n         package com.izhaong.mall.model.dao;\n         ...\n         public interface productmapper {\n         \t...\n           product selectbyprimarykey(integer id);\n           product selectbyname(string name);\n           ...\n         }\n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         \n         \n           ...\n         \t<select id="selectbyname" parametertype="java.lang.string" resultmap="baseresultmap">\n             select\n             <include refid="base_column_list" />\n             from imooc_mall_product\n             where name = #{name,jdbctype=varchar}\n           </select>\n         \t...\n         \n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         9\n         \n       \n       * 如果有抛出异常，否则就插入\n         \n         @service\n         public class productserviceimpl implements productservice {\n         \n             @autowired\n             productmapper productmapper;\n         \n             @override\n             public void add(addproductreq addproductreq) {\n                 product product = new product();\n                 beanutils.copyproperties(addproductreq, product);\n                 // 重名情况处理\n                 product productold = productmapper.selectbyname(addproductreq.getname());\n                 if(productold != null) {\n                     throw new mallexception(mallexceptionenum.name_existed);\n                 }\n                 int count = productmapper.insertselective(product);\n                 if(count == 0) {\n                     throw new mallexception(mallexceptionenum.insert_failed);\n                 }\n             }\n           ...\n         }\n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         9\n         10\n         11\n         12\n         13\n         14\n         15\n         16\n         17\n         18\n         19\n         20\n         21\n         22\n         \n\n\n# uuid介绍\n\n * 文件名uuid\n * 通用唯一识别码(universally unique identifier )\n * 防止重名、防止爬图\n * 生成规则：日期和时间、mac地址、hashcode、随机数\n\n\n# 图片上传\n\n\n * # 重命名上传文件\n   \n       @postmapping("/admin/upload/file")\n       public apirestresponse upload (httpservletrequest httpservletrequest, @requestparam("file")multipartfile file) {\n           string filename = file.getoriginalfilename();\n           string suffixname = filename.substring(filename.lastindexof("."));\n   \n           uuid uuid = uuid.randomuuid();\n           string newfilename = uuid.tostring() + suffixname;\n   \n   \t\t\t\t...\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n\n * # 创建文件\n   \n   * 文件夹路径为配置变量\n     \n     package com.imooc.mall.common;\n     ...\n     public class constant {\n         ...\n       \tpublic static string file_upload_dir;\n     \n         @value("${file.upload.dir}")\n         public void setfileuploaddir(string fileuploaddir) {\n             file_upload_dir = fileuploaddir;\n         }\n         ...\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     \n     \n     * 文件夹吐过没有则创建， 对创建失败的情况做处理\n       \n              //如果文件夹不存在\n               if (!filedirectory.exists()) {\n                   if (!filedirectory.mkdir()) {\n                       throw new mallexception(mallexceptionenum.mkdir_failed);\n                   }\n               }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       \n   \n   * 写入空文件中\n     \n             try {\n                 file.transferto(destfile);\n             } catch (ioexception e) {\n                 e.printstacktrace();\n             }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     \n   \n   * 返回地址\n     \n     * 获取本地服务地址\n       \n           private uri gethost(uri uri) {\n               uri effectiveuri;\n               try {\n                   effectiveuri = new uri(uri.getscheme(), uri.getuserinfo(), uri.gethost(), uri.getport(),\n                           null, null, null);\n               } catch (urisyntaxexception e) {\n                   effectiveuri = null;\n               }\n               return effectiveuri;\n           }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       \n     \n     * 拼接地址，对失败做处理\n       \n               try {\n                   return apirestresponse\n                           .success(gethost(new uri(httpservletrequest.getrequesturl() + "")) + "/images/"\n                                   + newfilename);\n               } catch (urisyntaxexception e) {\n                   return apirestresponse.error(mallexceptionenum.upload_failed);\n               }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       \n\n\n# 自定义静态资源映射目录\n\n * 上传图片后回显\n * 配置springbootwebmvcconfig\n * 静态资源到本地目录映射\n * 演示打开图片\n\n\n# 更新商品\n\n\n# model updateproductreq\n\n一定要生成id和name的 getter和setter方法，在controller会用到id的get方法，在service实现类中用到了name的get方法\n\npublic class updateproductreq {\n    @notnull(message = "id不能为空")\n    private integer id;\n\n    private string name;\n\n    private string image;\n\n    private string detail;\n\n    private integer categoryid;\n\n    @min(value = 1, message = "价格不能小于1")\n    private integer price;\n\n    @max(value = 10000, message = "库存不能大于10000")\n    private integer stock;\n\n    private integer status;\n\n    public integer getid() {\n        return id;\n    }\n\n    public void setid(integer id) {\n        this.id = id;\n    }\n\n    public string getname() {\n        return name;\n    }\n\n    public void setname(string name) {\n        this.name = name;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# controller\n\n    @putmapping("/admin/product/update")\n    public apirestresponse update(updateproductreq upproduct) {\n        product product = new product();\n        beanutils.copyproperties(upproduct, product);\n        productservice.update(product);\n        return apirestresponse.success();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# service\n\n * 同名且不同id\n   \n       @override\n       public void update(product product) {\n   //        同名且不同id\n           product productold = productmapper.selectbyname(product.getname());\n           if (productold != null && !(productold.getid().equals(product.getid()))) {\n               throw new mallexception(mallexceptionenum.name_existed);\n           }\n           int count = productmapper.updatebyprimarykeyselective(product);\n           if (count == 0) {\n               throw new mallexception(mallexceptionenum.update_faild);\n           }\n       }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n\n# 删除商品\n\ncontroller\n\n    @deletemapping("/admin/product/delete")\n    public apirestresponse delete(int id) {\n        productservice.delete(id);\n        return apirestresponse.success();\n    }\n\n\n1\n2\n3\n4\n5\n\n\nservice\n\n    @override\n    public void delete(integer id) {\n        product product = productmapper.selectbyprimarykey(id);\n        if (product == null) {\n            throw new mallexception(mallexceptionenum.update_faild);\n        }\n        int count = productmapper.deletebyprimarykey(id);\n        if (count == 0) {\n            throw new mallexception(mallexceptionenum.delete_failed);\n        }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 批量上下架\n\n * mybatis 遍历list\n * where 语句拼接\n\n\n# mapper\n\n跟mybatis相关需要加入注解的名字@param\n\n    int batchupdatesellstatus(@param("ids") integer[] ids, @param("status") integer status);\n\n\n1\n\n\nsql mapper\n\n    <update id="batchupdatesellstatus">\n        update imooc_mall_product\n        set status = #{status}\n        where id in\n        <foreach collection="ids" open="(" close=")" item="id" separator=",">\n            #{id}\n        </foreach>\n    </update>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# sql理解\n\n * 使用mysql 自带的语句构建批量更新\n   \n   update tablename\n       set orderid = case id \n           when 1 then 3 \n           when 2 then 4 \n           when 3 then 5 \n       end\n   where id in (1,2,3)\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   \n\n更新多个值的话\n\nupdate categories \n    set orderid = case id \n        when 1 then 3 \n        when 2 then 4 \n        when 3 then 5 \n    end, \n    title = case id \n        when 1 then \'new title 1\'\n        when 2 then \'new title 2\'\n        when 3 then \'new title 3\'\n    end\nwhere id in (1,2,3)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 商品列表\n\n * 排序功能\n * mybatis pagehelper\n * 枚举：order by\n\n\n# service\n\n * 新建req类\n * 新建query类',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"springboot项目学习笔记6 订单模块",frontmatter:{title:"springboot项目学习笔记6 订单模块",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/4d1b47/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200146.springboot%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%20%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97.html",relativePath:"20.后端&运维/2001.Java/200146.springboot项目学习笔记6 订单模块.md",key:"v-c709a762",path:"/pages/4d1b47/",headersStr:null,content:" * 生成订单\n   * 拿到用户ID\n   * 从购物车zhao",normalizedContent:" * 生成订单\n   * 拿到用户id\n   * 从购物车zhao",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"开源的物联网平台thingsboard部署",frontmatter:{title:"开源的物联网平台thingsboard部署",date:"2021-12-30T13:36:37.000Z",permalink:"/pages/b4e72c/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/200150.%E5%BC%80%E6%BA%90%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0thingsboard%E9%83%A8%E7%BD%B2.html",relativePath:"20.后端&运维/2001.Java/200150.开源的物联网平台thingsboard部署.md",key:"v-67dd179f",path:"/pages/b4e72c/",headers:[{level:2,title:"服务器准备工作",slug:"服务器准备工作",normalizedTitle:"服务器准备工作",charIndex:2},{level:3,title:"安装postgresql",slug:"安装postgresql",normalizedTitle:"安装postgresql",charIndex:144},{level:3,title:"为 docker配置远程连接",slug:"为-docker配置远程连接",normalizedTitle:"为 docker配置远程连接",charIndex:622},{level:2,title:"本地准备工作",slug:"本地准备工作",normalizedTitle:"本地准备工作",charIndex:1426},{level:3,title:"导入项目文件夹",slug:"导入项目文件夹",normalizedTitle:"导入项目文件夹",charIndex:1639},{level:3,title:"修改数据库地址",slug:"修改数据库地址",normalizedTitle:"修改数据库地址",charIndex:1958},{level:3,title:"安装打个包看一下",slug:"安装打个包看一下",normalizedTitle:"安装打个包看一下",charIndex:2455},{level:3,title:"运行server",slug:"运行server",normalizedTitle:"运行server",charIndex:2597},{level:3,title:"连接远程docker",slug:"连接远程docker",normalizedTitle:"连接远程docker",charIndex:2911},{level:2,title:"遇到的错误处理",slug:"遇到的错误处理",normalizedTitle:"遇到的错误处理",charIndex:4693}],headersStr:"服务器准备工作 安装postgresql 为 docker配置远程连接 本地准备工作 导入项目文件夹 修改数据库地址 安装打个包看一下 运行server 连接远程docker 遇到的错误处理",content:'# 服务器准备工作\n\n * centos 7\n\n * docker\n\n * docker-compose\n\n * 暂时关闭防火墙\n\n部署过程中遇到的问题我也在最后的目录中记录下来了 感谢东哥解惑\n\n----------------------------------------\n\n\n# 安装postgresql\n\n * 创建/opt/docker/docker-compose.yml 文件\n\nversion: \'3.5\'\nservices:\n  timescaledb:\n    image: timescale/timescaledb:1.7.1-pg12\n    container_name: basic-timescaledb\n    restart: unless-stopped\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_PASSWORD: *****\n    volumes:\n      - ./data:/var/lib/postgresql/data\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n * 跑一下 docker-compose up\n\n * * 如果 容器运行起来了 就可以用 Navicat Premium 连接一下\n   * \n * * 连接成功后创建数据库 thingsboard(名字随便起)\n\n\n# 为 docker配置远程连接\n\n * (https://blog.csdn.net/po__oq/article/details/106229575)\n\n * * 通过daemon.json配置\n\n编辑/etc/docker/daemon.json\n\n{\n\t"hosts": ["unix:///var/run/docker.sock", "tcp://0.0.0.0:2375"]\n}\n\n\n1\n2\n3\n\n\n或者\n\n * * 通过systemd配置文件\n\n创建配置文件/etc/systemd/system/docker.service.d/docker.conf\n\n[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://127.0.0.1:2375\n\n\n1\n2\n3\n\n * * 保存文件sudo systemctl daemon-reload\n   * 重启dockersudo systemctl restart docker.service\n * * 查看是否开启端口sudo netstat -lntp | grep dockerd\n\ntcp        0      0 127.0.0.1:2375          0.0.0.0:*               LISTEN      3758/dockerd\n\n\n1\n\n * * docker cli 测试docker -H :2375 ps\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS\n\n\n1\n\n\n----------------------------------------\n\n\n# 本地准备工作\n\n * 仓库地址 https://github.com/thingsboard/thingsboard.git (3.1.1)\n\n * 编辑器IDE https://www.jetbrains.com/zh-cn/idea/ (2020.1)\n\n * Java环境 jdk1.8\n\n * Navicat Premium\n\n----------------------------------------\n\n\n# 导入项目文件夹\n\n * 若代码显示飘红有错误提示 建议安装插件 **Lombok (**https://juejin.im/post/6844903557016076302)\n\n * * *Lombok是一款好用顺手的工具，就像Google Guava一样，在此予以强烈推荐，每一个Java工程师都应该使用它。Lombok是一种Java™实用工具，可用来帮助开发人员消除Java的冗长代码，尤其是对于简单的Java对象（POJO）。它通过注释实现这一目的*。通过在开发环境中实现Lombok，开发人员可以节省构建诸如hashCode()和equals()这样的方法以及以往用来分类各种accessor和mutator的大量时间。\n\n\n# 修改数据库地址\n\n * * 打开文件application/src/main/resources\n\n# SQL DAO Configuration\nspring:\n...\n  datasource:\n    driverClassName: "${SPRING_DRIVER_CLASS_NAME:org.postgresql.Driver}"\n    url: "${SPRING_DATASOURCE_URL:jdbc:postgresql://192.168.9.30:5432/thingsboard}" // thingsboard名字与数据库名字一致\n    username: "${SPRING_DATASOURCE_USERNAME:postgres}"\n    password: "${SPRING_DATASOURCE_PASSWORD:******}"\n    hikari:\n      maximumPoolSize: "${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:16}"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 安装打个包看一下\n\n\n\n......(时间比较久, 我们就先处理下服务器)\n\n----------------------------------------\n\n----------------------------------------\n\n这时我们回来再看本地项目\n\n\n\n\n# 运行server\n\n*application/src/main/java/org.thingsboard.server/ThingsbaordServerApplication*\n\n\n1\n\n\n若出现错误\n\n\n\n修改项目下 .idea\\workspace.xml，找到标签 <component name="PropertiesComponent"> ， 在标签里加一行 <property name="dynamic.classpath" value="true" />重新再跑下\n\n在本地浏览器中打开: http://localhost:8080/ 显示登录页面表示你已经成功在本地跑起来了\n\n接下来就是放在服务器上\n\n\n# 连接远程docker\n\n前面做了服务端docker具备远程连接的工作, 现在在本地配置并连接\n\n * 配置\n\n编辑msa/tb/docker-postgre文件夹下logback.xml\n\n<!DOCTYPE configuration>\n<configuration scan="true" scanPeriod="10 seconds">\n\n    <appender name="fileLogAppender"\n              class="ch.qos.logback.core.rolling.RollingFileAppender">\n        <file>/var/log/thingsboard/thingsboard.log</file>\n        <rollingPolicy\n                class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">\n            <fileNamePattern>/var/log/thingsboard/thingsboard.%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <maxFileSize>100MB</maxFileSize>\n            <maxHistory>30</maxHistory>\n            <totalSizeCap>3GB</totalSizeCap>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder>\n            <pattern>%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name="org.thingsboard.server" level="INFO" />\n    <logger name="com.microsoft.azure.servicebus.primitives.CoreMessageReceiver" level="OFF" />\n\n    <root level="INFO">\n        <appender-ref ref="fileLogAppender"/>\n        <appender-ref ref="STDOUT"/>\n    </root>\n\n</configuration>\nENV SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect\nENV SPRING_DRIVER_CLASS_NAME=org.postgresql.Driver\nENV SPRING_DATASOURCE_URL=jdbc:postgresql://192.168.9.31:5432/thingsboard\nENV SPRING_DATASOURCE_USERNAME=${pkg.user}\nENV SPRING_DATASOURCE_PASSWORD=******\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n\n * 远程地址\n\n\n\n * 镜像\n\n\n\n * 最后shift+f10 run 下docker\n\n\n# 遇到的错误处理\n\n * chmod: changing permissions of ‘/var/lib/postgresql/data’: Permission denied\n\n * * 发现此内容可解决chmod问题：http :\n\n//stackoverflow.com/questions/24288616/permission-denied-on-accessing-host-directory-in-docker\n\n也可以在此处查看selinux安全问题：https :\n\n//docs.docker.com/engine/tutorials/dockervolumes/#/volume-labels\n\n我通过在volume命令末尾添加：z修复了docker-compose文件\n\nvolumes: - /media/dataDemo/db:/var/lib/postgresql/data:z\n\nvolumes: :Z的含义\n\ndocker-compose.yml举例：\n\nvolumes:\n\n- /mnt/db:/var/lib/db:Z\n\n如果宿主机开启了SELinux，如果不加“:Z”，会报错权限不足：Permission denied。\n\n这涉及到label权限的问题。\n\n默认情况下docker会打上label: svirt_sandbox_file_t。\n\n宿主机上需要mount的目录，此时需要打上同样的label：\n\n使用:z相当于执行语句：\n\nchcon -Rt svirt_sandbox_file_t /var/db\n\n使用:Z相当于宿主机打上了docker里的所有label。\n\n参考：\n\nhttp://www.projectatomic.io/blog/2015/06/using-volumes-with-docker-can-cause-problems-with-selinux/\n\n * Caused by: java.net.SocketTimeoutException: connect timed out\n\n配置远程连接\n\n * docker Failed to restart docker.service: Unit not found.\n\n新版本需要docker.socket\n\n * * 卸载docker，再重新安装，即可出现docker.socket\n   * 创建一个/usr/lib/systemd/system/docker.socket文件，然后systemctl daemon-reload，最后systemctl start docker.service，即可启动成功。\n\n * ERROR: for timescaledb Cannot start service timescaledb: Unknown runtime specified docker-runc\n\nERROR: Encountered errors while bringing up the project.\n\n * * 关闭前停止容器\n\n * driver failed programming external connectivity on endpoint\n\n * * docker服务启动时定义的自定义链DOCKER由于 centos7 firewall 被清掉, firewall的底层是使用iptables进行数据过滤，建立在iptables之上，这可能会与 Docker 产生冲突。当 firewalld 启动或者重启的时候，将会从 iptables 中移除 DOCKER 的规则，从而影响了 Docker 的正常工作。当你使用的是 Systemd 的时候， firewalld 会在 Docker 之前启动，但是如果你在 Docker 启动之后再启动 或者重启 firewalld ，你就需要重启 Docker 进程了。重启docker服务及可重新生成自定义链DOCKER',normalizedContent:'# 服务器准备工作\n\n * centos 7\n\n * docker\n\n * docker-compose\n\n * 暂时关闭防火墙\n\n部署过程中遇到的问题我也在最后的目录中记录下来了 感谢东哥解惑\n\n----------------------------------------\n\n\n# 安装postgresql\n\n * 创建/opt/docker/docker-compose.yml 文件\n\nversion: \'3.5\'\nservices:\n  timescaledb:\n    image: timescale/timescaledb:1.7.1-pg12\n    container_name: basic-timescaledb\n    restart: unless-stopped\n    ports:\n      - 5432:5432\n    environment:\n      postgres_password: *****\n    volumes:\n      - ./data:/var/lib/postgresql/data\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n * 跑一下 docker-compose up\n\n * * 如果 容器运行起来了 就可以用 navicat premium 连接一下\n   * \n * * 连接成功后创建数据库 thingsboard(名字随便起)\n\n\n# 为 docker配置远程连接\n\n * (https://blog.csdn.net/po__oq/article/details/106229575)\n\n * * 通过daemon.json配置\n\n编辑/etc/docker/daemon.json\n\n{\n\t"hosts": ["unix:///var/run/docker.sock", "tcp://0.0.0.0:2375"]\n}\n\n\n1\n2\n3\n\n\n或者\n\n * * 通过systemd配置文件\n\n创建配置文件/etc/systemd/system/docker.service.d/docker.conf\n\n[service]\nexecstart=\nexecstart=/usr/bin/dockerd -h fd:// -h tcp://127.0.0.1:2375\n\n\n1\n2\n3\n\n * * 保存文件sudo systemctl daemon-reload\n   * 重启dockersudo systemctl restart docker.service\n * * 查看是否开启端口sudo netstat -lntp | grep dockerd\n\ntcp        0      0 127.0.0.1:2375          0.0.0.0:*               listen      3758/dockerd\n\n\n1\n\n * * docker cli 测试docker -h :2375 ps\n\ncontainer id        image               command             created             status              ports\n\n\n1\n\n\n----------------------------------------\n\n\n# 本地准备工作\n\n * 仓库地址 https://github.com/thingsboard/thingsboard.git (3.1.1)\n\n * 编辑器ide https://www.jetbrains.com/zh-cn/idea/ (2020.1)\n\n * java环境 jdk1.8\n\n * navicat premium\n\n----------------------------------------\n\n\n# 导入项目文件夹\n\n * 若代码显示飘红有错误提示 建议安装插件 **lombok (**https://juejin.im/post/6844903557016076302)\n\n * * *lombok是一款好用顺手的工具，就像google guava一样，在此予以强烈推荐，每一个java工程师都应该使用它。lombok是一种java™实用工具，可用来帮助开发人员消除java的冗长代码，尤其是对于简单的java对象（pojo）。它通过注释实现这一目的*。通过在开发环境中实现lombok，开发人员可以节省构建诸如hashcode()和equals()这样的方法以及以往用来分类各种accessor和mutator的大量时间。\n\n\n# 修改数据库地址\n\n * * 打开文件application/src/main/resources\n\n# sql dao configuration\nspring:\n...\n  datasource:\n    driverclassname: "${spring_driver_class_name:org.postgresql.driver}"\n    url: "${spring_datasource_url:jdbc:postgresql://192.168.9.30:5432/thingsboard}" // thingsboard名字与数据库名字一致\n    username: "${spring_datasource_username:postgres}"\n    password: "${spring_datasource_password:******}"\n    hikari:\n      maximumpoolsize: "${spring_datasource_maximum_pool_size:16}"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 安装打个包看一下\n\n\n\n......(时间比较久, 我们就先处理下服务器)\n\n----------------------------------------\n\n----------------------------------------\n\n这时我们回来再看本地项目\n\n\n\n\n# 运行server\n\n*application/src/main/java/org.thingsboard.server/thingsbaordserverapplication*\n\n\n1\n\n\n若出现错误\n\n\n\n修改项目下 .idea\\workspace.xml，找到标签 <component name="propertiescomponent"> ， 在标签里加一行 <property name="dynamic.classpath" value="true" />重新再跑下\n\n在本地浏览器中打开: http://localhost:8080/ 显示登录页面表示你已经成功在本地跑起来了\n\n接下来就是放在服务器上\n\n\n# 连接远程docker\n\n前面做了服务端docker具备远程连接的工作, 现在在本地配置并连接\n\n * 配置\n\n编辑msa/tb/docker-postgre文件夹下logback.xml\n\n<!doctype configuration>\n<configuration scan="true" scanperiod="10 seconds">\n\n    <appender name="filelogappender"\n              class="ch.qos.logback.core.rolling.rollingfileappender">\n        <file>/var/log/thingsboard/thingsboard.log</file>\n        <rollingpolicy\n                class="ch.qos.logback.core.rolling.sizeandtimebasedrollingpolicy">\n            <filenamepattern>/var/log/thingsboard/thingsboard.%d{yyyy-mm-dd}.%i.log</filenamepattern>\n            <maxfilesize>100mb</maxfilesize>\n            <maxhistory>30</maxhistory>\n            <totalsizecap>3gb</totalsizecap>\n        </rollingpolicy>\n        <encoder>\n            <pattern>%d{iso8601} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <appender name="stdout" class="ch.qos.logback.core.consoleappender">\n        <encoder>\n            <pattern>%d{iso8601} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name="org.thingsboard.server" level="info" />\n    <logger name="com.microsoft.azure.servicebus.primitives.coremessagereceiver" level="off" />\n\n    <root level="info">\n        <appender-ref ref="filelogappender"/>\n        <appender-ref ref="stdout"/>\n    </root>\n\n</configuration>\nenv spring_jpa_database_platform=org.hibernate.dialect.postgresqldialect\nenv spring_driver_class_name=org.postgresql.driver\nenv spring_datasource_url=jdbc:postgresql://192.168.9.31:5432/thingsboard\nenv spring_datasource_username=${pkg.user}\nenv spring_datasource_password=******\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n\n * 远程地址\n\n\n\n * 镜像\n\n\n\n * 最后shift+f10 run 下docker\n\n\n# 遇到的错误处理\n\n * chmod: changing permissions of ‘/var/lib/postgresql/data’: permission denied\n\n * * 发现此内容可解决chmod问题：http :\n\n//stackoverflow.com/questions/24288616/permission-denied-on-accessing-host-directory-in-docker\n\n也可以在此处查看selinux安全问题：https :\n\n//docs.docker.com/engine/tutorials/dockervolumes/#/volume-labels\n\n我通过在volume命令末尾添加：z修复了docker-compose文件\n\nvolumes: - /media/datademo/db:/var/lib/postgresql/data:z\n\nvolumes: :z的含义\n\ndocker-compose.yml举例：\n\nvolumes:\n\n- /mnt/db:/var/lib/db:z\n\n如果宿主机开启了selinux，如果不加“:z”，会报错权限不足：permission denied。\n\n这涉及到label权限的问题。\n\n默认情况下docker会打上label: svirt_sandbox_file_t。\n\n宿主机上需要mount的目录，此时需要打上同样的label：\n\n使用:z相当于执行语句：\n\nchcon -rt svirt_sandbox_file_t /var/db\n\n使用:z相当于宿主机打上了docker里的所有label。\n\n参考：\n\nhttp://www.projectatomic.io/blog/2015/06/using-volumes-with-docker-can-cause-problems-with-selinux/\n\n * caused by: java.net.sockettimeoutexception: connect timed out\n\n配置远程连接\n\n * docker failed to restart docker.service: unit not found.\n\n新版本需要docker.socket\n\n * * 卸载docker，再重新安装，即可出现docker.socket\n   * 创建一个/usr/lib/systemd/system/docker.socket文件，然后systemctl daemon-reload，最后systemctl start docker.service，即可启动成功。\n\n * error: for timescaledb cannot start service timescaledb: unknown runtime specified docker-runc\n\nerror: encountered errors while bringing up the project.\n\n * * 关闭前停止容器\n\n * driver failed programming external connectivity on endpoint\n\n * * docker服务启动时定义的自定义链docker由于 centos7 firewall 被清掉, firewall的底层是使用iptables进行数据过滤，建立在iptables之上，这可能会与 docker 产生冲突。当 firewalld 启动或者重启的时候，将会从 iptables 中移除 docker 的规则，从而影响了 docker 的正常工作。当你使用的是 systemd 的时候， firewalld 会在 docker 之前启动，但是如果你在 docker 启动之后再启动 或者重启 firewalld ，你就需要重启 docker 进程了。重启docker服务及可重新生成自定义链docker',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Docker 学习",frontmatter:{title:"Docker 学习",date:"2021-11-30T01:46:30.000Z",permalink:"/pages/3eb92e/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/201001.Docker%20%E5%AD%A6%E4%B9%A0.html",relativePath:"20.后端&运维/2001.Java/201001.Docker 学习.md",key:"v-883ac370",path:"/pages/3eb92e/",headers:[{level:2,title:"Docker安装及使用教程",slug:"docker安装及使用教程",normalizedTitle:"docker安装及使用教程",charIndex:119},{level:3,title:"卸载docker",slug:"卸载docker",normalizedTitle:"卸载docker",charIndex:137},{level:3,title:"安装docker",slug:"安装docker",normalizedTitle:"安装docker",charIndex:1079},{level:3,title:"docker镜像加速",slug:"docker镜像加速",normalizedTitle:"docker镜像加速",charIndex:1779},{level:2,title:"Docker 入门教程",slug:"docker-入门教程",normalizedTitle:"docker 入门教程",charIndex:2014},{level:3,title:"image 文件",slug:"image-文件",normalizedTitle:"image 文件",charIndex:2030},{level:3,title:"容器文件",slug:"容器文件",normalizedTitle:"容器文件",charIndex:2140},{level:3,title:"实例",slug:"实例",normalizedTitle:"实例",charIndex:2341},{level:3,title:"dockerFile",slug:"dockerfile",normalizedTitle:"dockerfile",charIndex:3344},{level:2,title:"GUI 工具",slug:"gui-工具",normalizedTitle:"gui 工具",charIndex:3361},{level:2,title:"常用命令汇总",slug:"常用命令汇总",normalizedTitle:"常用命令汇总",charIndex:3696},{level:3,title:"命令行技巧",slug:"命令行技巧",normalizedTitle:"命令行技巧",charIndex:5404},{level:4,title:"删除所有镜像",slug:"删除所有镜像",normalizedTitle:"删除所有镜像",charIndex:5413},{level:4,title:"停用全部运行中的容器",slug:"停用全部运行中的容器",normalizedTitle:"停用全部运行中的容器",charIndex:5459},{level:4,title:"删除所有的容器",slug:"删除所有的容器",normalizedTitle:"删除所有的容器",charIndex:5502},{level:4,title:"停用并删除所有容器",slug:"停用并删除所有容器",normalizedTitle:"停用并删除所有容器",charIndex:5541},{level:2,title:"docker配置",slug:"docker配置",normalizedTitle:"docker配置",charIndex:5913},{level:3,title:"/etc/docker/daemon.json",slug:"etc-docker-daemon-json",normalizedTitle:"/etc/docker/daemon.json",charIndex:866},{level:3,title:"更换镜像源",slug:"更换镜像源",normalizedTitle:"更换镜像源",charIndex:9078},{level:2,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:9535},{level:3,title:"CNM",slug:"cnm",normalizedTitle:"cnm",charIndex:9542},{level:3,title:"容器内部网络空间是否与外面一致",slug:"容器内部网络空间是否与外面一致",normalizedTitle:"容器内部网络空间是否与外面一致",charIndex:9563},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:2,title:"",slug:"-2",normalizedTitle:"",charIndex:0},{level:2,title:"docker 微服务",slug:"docker-微服务",normalizedTitle:"docker 微服务",charIndex:9657},{level:2,title:"",slug:"-3",normalizedTitle:"",charIndex:0},{level:2,title:"Nginx 容器教程",slug:"nginx-容器教程",normalizedTitle:"nginx 容器教程",charIndex:9718},{level:3,title:"HTTP 服务",slug:"http-服务",normalizedTitle:"http 服务",charIndex:9733},{level:2,title:"映射网页目录",slug:"映射网页目录",normalizedTitle:"映射网页目录",charIndex:10136},{level:2,title:"使用的案例",slug:"使用的案例",normalizedTitle:"使用的案例",charIndex:10644},{level:2,title:"在使用docker中遇到的问题&需求",slug:"在使用docker中遇到的问题-需求",normalizedTitle:"在使用docker中遇到的问题&amp;需求",charIndex:null},{level:3,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:10776},{level:4,title:"Docker启动时的报错汇总",slug:"docker启动时的报错汇总",normalizedTitle:"docker启动时的报错汇总",charIndex:10792},{level:4,title:"当构建完镜像启动容器时失败",slug:"当构建完镜像启动容器时失败",normalizedTitle:"当构建完镜像启动容器时失败",charIndex:11611},{level:4,title:"permission denied",slug:"permission-denied",normalizedTitle:"permission denied",charIndex:11869},{level:4,title:"运行node项目 自动退出",slug:"运行node项目-自动退出",normalizedTitle:"运行node项目 自动退出",charIndex:12023},{level:3,title:"需求收集",slug:"需求收集",normalizedTitle:"需求收集",charIndex:12107},{level:4,title:"容器中调用宿主机docker命令",slug:"容器中调用宿主机docker命令",normalizedTitle:"容器中调用宿主机docker命令",charIndex:12115},{level:4,title:"在容器外执行某个容器内的某个命令操作",slug:"在容器外执行某个容器内的某个命令操作",normalizedTitle:"在容器外执行某个容器内的某个命令操作",charIndex:12298}],headersStr:"Docker安装及使用教程 卸载docker 安装docker docker镜像加速 Docker 入门教程 image 文件 容器文件 实例 dockerFile GUI 工具 常用命令汇总 命令行技巧 删除所有镜像 停用全部运行中的容器 删除所有的容器 停用并删除所有容器 docker配置 /etc/docker/daemon.json 更换镜像源 原理 CNM 容器内部网络空间是否与外面一致   docker 微服务  Nginx 容器教程 HTTP 服务 映射网页目录 使用的案例 在使用docker中遇到的问题&需求 问题 Docker启动时的报错汇总 当构建完镜像启动容器时失败 permission denied 运行node项目 自动退出 需求收集 容器中调用宿主机docker命令 在容器外执行某个容器内的某个命令操作",content:'前言: 因为写项目时需要用到mysql postgres``mongodb``redis一些数据库 不想再自己电脑上安装这些 使用率不是很多 就想到了docker, 无论在服务器还时自己的电脑上, 感觉docker更符合我的场景\n\n\n# Docker安装及使用教程\n\n\n# 卸载docker\n\n1.  先查询下docker： yum list installed|grep docker ，然后执行卸载命令：yum -y remove  docker.x86_64   docker-client.x86_64  docker-common.x86_64 2.  执行删除已存在的镜像和容器（以实际情况而定）： rm -rf  /var/lib/docker\n\n# 删除相关组件\n# 如果使用种方式的话，需要罗列全部使安装过的组件；\nyum remove docker \\\n  docker-client \\\n  docker-client-latest \\\n  docker-common \\\n  docker-latest \\\n  docker-latest-logrotate \\\n  docker-logrotate \\\n  docker-selinux \\\n  docker-engine-selinux \\\n  docker-engine\n                \n# 第二种方式，使用匹配符直接删除全部\n# 推荐使用第二种方式，无需罗列所有的安装组件\nyum remove docker docker-*\n# 删除注册的服务\nrm -rf /etc/systemd/system/docker.service.d\n# 删除docker工作目录\nrm -rf /var/lib/docker*\nrm -rf /var/run/docker*\n# 删除配置文件\n# 直接清空这个文件夹，下面所有配置都将被清空\nrm -rf /etc/docker\n#----------------------------#\n# /etc/docker/daemon.json    #\n# /ect/docker/key.json       #\n#----------------------------#\n# 查找残留的docker\nrpm -qa|grep docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 安装docker\n\n# 第一步，需要安装一些依赖组件\n# 安装所需的软件包。yum-utils 提供了 yum-config-manager，\n# 并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。\nyum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n# 使用以下命令来获得稳定的仓库\n# 阿里云源地址速度相对比较快，这里是设置源地址为阿里云的镜像仓库地址。\n# yum-config-manager \\\n#    --add-repo \\\n#    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    \n# 安装 Docker Engine-Community\nyum install -y docker-ce docker-ce-cli containerd.io\n# 将当前用户添加到docker用户组\nusermod -aG docker ${USER}\n# Docker默认未启动，需要手动重启docker服务\nsystemctl restart docker\nsystemctl start docker\nsystemctl stop docker\n# 切换当前会话到docker组\nnewgrp - docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# docker镜像加速\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  "registry-mirrors": [ "https://fpr97nhz.mirror.aliyuncs.com" ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Docker 入门教程\n\n\n# image 文件\n\n# 列出本机的所有 image 文件。\n$ docker image ls\n\n# 删除 image 文件\n$ docker image rm [imageName]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 容器文件\n\n# 列出本机正在运行的容器\n$ docker container ls\n\n# 列出本机所有容器，包括终止运行的容器\n$ docker container ls --all\n\n\n1\n2\n3\n4\n5\n\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。\n\n$ docker container rm [containerID]\n\n\n1\n\n\n\n# 实例\n\n首先，运行下面的命令，将 image 文件从仓库抓取到本地。\n\n$ docker image pull library/hello-world\n\n\n1\n\n\n上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。 由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。\n\n$ docker image pull hello-world\n\n\n1\n\n\n抓取成功以后，就可以在本机看到这个 image 文件了。\n\n$ docker image ls\n\n\n1\n\n\n现在，运行这个 image 文件。\n\n$ docker container run hello-world\n\n\n1\n\n\ndocker container run命令会从 image 文件，生成一个正在运行的容器实例。 注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。 如果运行成功，你会在屏幕上读到下面的输出。\n\n$ docker container run hello-world\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n... ...\n\n\n1\n2\n3\n4\n\n\n输出这段提示以后，hello world就会停止运行，容器自动终止。 有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。\n\n$ docker container run -it ubuntu bash\n\n\n1\n\n\n对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。\n\n$ docker container kill [containID]\n\n\n1\n\n\n\n# dockerFile\n\n\n\n\n# GUI 工具\n\n推荐使用 Portainer 作为容器的 GUI 管理方案。 推荐使用 Portainer 作为容器的 GUI 管理方案。\n\n> 官方地址：portainer.io/install.htm…\n\n安装命令\n\n> docker volume create portainer_data docker run -d -p ``8000``:8000 -p ``9000``:9000 --name``=``portainer --restart``=``always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce\n\n\n# 常用命令汇总\n\n# 查看docker基础信息\ndocker info\n\n# 拉取镜像\ndocker pull <image>:<tag>\n\n# 移除容器\ndocker rm <containerId>\n\n# 移除镜像\ndocker rmi <imageId>\n\n# 启动、停止、重启容器\ndocker stop <containerId>\ndocker start <containerId>\ndocker restart <containerId>\ndocker run -itd --name <imageName> -P/-p<port>:<port> <imageName> /bin/bash\n\n# 查看docker容器\ndocker ps <-a>\n\n# 打包镜像\ndocker tag <path>/<name> <remotePath>/<name>\ndocker push <remotePath>/<name>\n\n# 登录docker\ndocker login <remoteIp>\n\n# 进入容器内部\ndocker exec -it <containerId> /bin/bash\n\n# 从仓库搜索镜像\ndocker search <imageName>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n（1）docker container start 前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。\n\n$ docker container start [containerID]\n\n\n1\n\n\n（2）docker container stop 前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。\n\n$ bash container stop [containerID]\n\n\n1\n\n\n这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。 （3）docker container logs docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。\n\n$ docker container logs [containerID]\n\n\n1\n\n\n（4）docker container exec docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。\n\n$ docker container exec -it [containerID] /bin/bash\n\n\n1\n\n\nexit 容器停止退出 crtl+p+q 容器不停止退出 （5）docker container cp docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。\n\n$ docker container cp [containID]:[/path/to/file] .\n\n\n1\n\n\n\n# 命令行技巧\n\n# 删除所有镜像\n\ndocker rmi -f $(docker images -qa)\n\n# 停用全部运行中的容器\n\ndocker stop $(docker ps -q)\n\n# 删除所有的容器\n\ndocker rm $(docker ps -aq)\n\n# 停用并删除所有容器\n\ndocker stop $(docker ps -q) & docker rm $(docker ps -aq)\n\n * 删除所有为运行的容器 使用linux命令\n   \n   * docker container ls -f status-exited | awk \'${print$1}\' | awk \'NR>1\' | xargs docker container rm\n\n * 批量启动容器 使用docker命令\n   \n   * docker container ls -q -f status=created 查找所有状态为created的容器 并获取其ID\n   * docker container start $(docker container ls -q -f status=created)\n\n\n# docker配置\n\n\n# /etc/docker/daemon.json\n\n{\n    "authorization-plugins": [],//访问授权插件\n    "data-root": "",//docker数据持久化存储的根目录\n    "dns": [],//DNS服务器\n    "dns-opts": [],//DNS配置选项，如端口等\n    "dns-search": [],//DNS搜索域名\n    "exec-opts": [],//执行选项\n    "exec-root": "",//执行状态的文件的根目录\n    "experimental": false,//是否开启试验性特性\n    "storage-driver": "",//存储驱动器\n    "storage-opts": [],//存储选项\n    "labels": [],//键值对式标记docker元数据\n    "live-restore": true,//dockerd挂掉是否保活容器（避免了docker服务异常而造成容器退出）\n    "log-driver": "",//容器日志的驱动器\n    "log-opts": {},//容器日志的选项\n    "mtu": 0,//设置容器网络MTU（最大传输单元）\n    "pidfile": "",//daemon PID文件的位置\n    "cluster-store": "",//集群存储系统的URL\n    "cluster-store-opts": {},//配置集群存储\n    "cluster-advertise": "",//对外的地址名称\n    "max-concurrent-downloads": 3,//设置每个pull进程的最大并发\n    "max-concurrent-uploads": 5,//设置每个push进程的最大并发\n    "default-shm-size": "64M",//设置默认共享内存的大小\n    "shutdown-timeout": 15,//设置关闭的超时时限(who?)\n    "debug": true,//开启调试模式\n    "hosts": [],//监听地址(?)\n    "log-level": "",//日志级别\n    "tls": true,//开启传输层安全协议TLS\n    "tlsverify": true,//开启输层安全协议并验证远程地址\n    "tlscacert": "",//CA签名文件路径\n    "tlscert": "",//TLS证书文件路径\n    "tlskey": "",//TLS密钥文件路径\n    "swarm-default-advertise-addr": "",//swarm对外地址\n    "api-cors-header": "",//设置CORS（跨域资源共享-Cross-origin resource sharing）头\n    "selinux-enabled": false,//开启selinux(用户、进程、应用、文件的强制访问控制)\n    "userns-remap": "",//给用户命名空间设置 用户/组\n    "group": "",//docker所在组\n    "cgroup-parent": "",//设置所有容器的cgroup的父类(?)\n    "default-ulimits": {},//设置所有容器的ulimit\n    "init": false,//容器执行初始化，来转发信号或控制(reap)进程\n    "init-path": "/usr/libexec/docker-init",//docker-init文件的路径\n    "ipv6": false,//开启IPV6网络\n    "iptables": false,//开启防火墙规则\n    "ip-forward": false,//开启net.ipv4.ip_forward\n    "ip-masq": false,//开启ip掩蔽(IP封包通过路由器或防火墙时重写源IP地址或目的IP地址的技术)\n    "userland-proxy": false,//用户空间代理\n    "userland-proxy-path": "/usr/libexec/docker-proxy",//用户空间代理路径\n    "ip": "0.0.0.0",//默认IP\n    "bridge": "",//将容器依附(attach)到桥接网络上的桥标识\n    "bip": "",//指定桥接ip\n    "fixed-cidr": "",//(ipv4)子网划分，即限制ip地址分配范围，用以控制容器所属网段实现容器间(同一主机或不同主机间)的网络访问\n    "fixed-cidr-v6": "",//（ipv6）子网划分\n    "default-gateway": "",//默认网关\n    "default-gateway-v6": "",//默认ipv6网关\n    "icc": false,//容器间通信\n    "raw-logs": false,//原始日志(无颜色、全时间戳)\n    "allow-nondistributable-artifacts": [],//不对外分发的产品提交的registry仓库\n    "registry-mirrors": [],//registry仓库镜像\n    "seccomp-profile": "",//seccomp配置文件\n    "insecure-registries": [],//非https的registry地址\n    "no-new-privileges": false,//禁止新优先级(??)\n    "default-runtime": "runc",//OCI联盟(The Open Container Initiative)默认运行时环境\n    "oom-score-adjust": -500,//内存溢出被杀死的优先级(-1000~1000)\n    "node-generic-resources": ["NVIDIA-GPU=UUID1", "NVIDIA-GPU=UUID2"],//对外公布的资源节点\n    "runtimes": {//运行时\n        "cc-runtime": {\n            "path": "/usr/bin/cc-runtime"\n        },\n        "custom": {\n            "path": "/usr/local/bin/my-runc-replacement",\n            "runtimeArgs": [\n                "--debug"\n            ]\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# 更换镜像源\n\n 1. 首先，修改配置文件 vi /etc/docker/daemon.json\n\n"registry-mirrors": ["https//registry.docker-cn.com"]\n\n\n1\n\n\n 2. 然后，加载Docker配置 systemctl daemon-reload\n\n 3. 最后，重启Docker服务就好了 systemctl restart docker.service\n\n附： 国内的几个优秀的Docker源\n\n * Docker中国区官方镜像 https://registry.docker-cn.com\n * 网易蜂巢 http://hub-mirror.c.163.com\n * 中国科技大学 https://docker.mirrors.ustc.edu.cn\n * 阿里镜像 xxx.mirror.aliyuncs.com （需要注册，xxx代表你的账号）\n * DaoCloud xxxx.m.daocloud.ip （需要注册，xxx代表你的账号）\n\n\n# 原理\n\n\n# CNM\n\nCNM Drivers\n\n\n# 容器内部网络空间是否与外面一致\n\n在容器外ip a 查看容器内所有ip:``docker container exec ${containerName} ip a\n\n\n#\n\n\n#\n\n\n# docker 微服务\n\n\n#\n\n----------------------------------------\n\n\n# Nginx 容器教程\n\n\n# HTTP 服务\n\nNginx 的最大作用，就是搭建一个 Web Server。有了容器，只要一行命令，服务器就架设好了，完全不用配置。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面命令下载并运行官方的 Nginx image，默认是最新版本（latest），当前是 1.13.9。如果本机安装过以前的版本，请删掉重新安装，因为只有 1.13.9 才开始支持 server push。 上面命令的各个参数含义如下。\n\n>  * -d：在后台运行\n>  * -p ：容器的80端口映射到127.0.0.1:8080\n>  * --rm：容器停止运行后，自动删除容器文件\n>  * --name：容器的名字为mynginx\n\n\n# 映射网页目录\n\n网页文件都在容器里，没法直接修改，显然很不方便。下一步就是让网页文件所在的目录/usr/share/nginx/html映射到本地。 首先，新建一个目录，并进入该目录。\n\n$ mkdir nginx-docker-demo\n$ cd nginx-docker-demo\n\n\n1\n2\n\n\n然后，新建一个html子目录。\n\n$ mkdir html\n\n\n1\n\n\n在这个子目录里面，放置一个index.html文件，内容如下。\n\n<h1>Hello World</h1>\n\n\n1\n\n\n接着，就可以把这个子目录html，映射到容器的网页文件目录/usr/share/nginx/html。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  --volume "$PWD/html":/usr/share/nginx/html \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n打开浏览器，访问 127.0.0.1:8080，应该就能看到 Hello World 了。\n\n\n# 使用的案例\n\n * 创建mysql5.7\n   * docker run -p 33306:3306 -e MYSQL_ROOT_PASSWORD=qq164165005 --name eggmysql -d mysql:5.7\n\n\n# 在使用docker中遇到的问题&需求\n\n\n# 问题\n\n# Docker启动时的报错汇总\n\n----------------------------------------\n\n * Failed to start Docker Application Container Engine.\n\n修改/etc/docker/daemon.json这个文件\n\n"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]\n\n\n1\n\n\n----------------------------------------\n\n * docker.service failed.\n\n----------------------------------------\n\n * Failed to restart docker.service: Unit not found.\n\ndocker.service启动失败：Unit not found的原因及解决办法 删除/usr/lib/systemd/system/docker.service的[UNIT]里包含的docker.socket，然后systemctl daemon-reload，最后systemctl start docker.service，发现启动成功了。 类似情况 如果是类似的情况，缺少docker.socket，但是新版本需要docker.socket。有两种方法可以解决该问题:\n\n 1. 可以卸载docker，再重新安装，即可出现docker.socket。或者\n 2. 创建一个/usr/lib/systemd/system/docker.socket文件，然后systemctl daemon-reload，最后systemctl start docker.service，即可启动成功。\n\n----------------------------------------\n\n# 当构建完镜像启动容器时失败\n\n * 在最后加上 sh -c "while true; do sleep 3600; done"\n\n * DockerFile 最后加入 ENTRYPOINT ["sh", "-c", " exec tail -f /dev/null"]防止容器启动就退出, 用这个命令一直前台阻塞\n\n * 删除未启动的容器 重新构建镜像\n\n * 进入容器docker exec [contianerID] -it /bin/sh\n\n查看文件类型 .sh 设置文件类型set ff="unix"\n\n# permission denied\n\n * sudo docker image ls\n\n * sudo goupadd docker\n\n * sudo gpasswd -a ${USER} docker\n\n * sudo service docker restart\n\n * logout 重新登录下\n\n# 运行node项目 自动退出\n\n运行容器的时候     自动进入项目命令行交互界面敲击\n\ndocker run -it pptr-image bash\n\n\n1\n\n\n\n# 需求收集\n\n# 容器中调用宿主机docker命令\n\nhttps://blog.csdn.net/nanhavezhi/article/details/103079056 在构建容器时加上docker的目录映射\n\n-v /run/docker.sock:/var/run/docker.sock  \\\n-v /bin/docker:/bin/docker    \n\n\n1\n2\n\n\n# 在容器外执行某个容器内的某个命令操作\n\n命令如下 加上-c $cmd\n\nsudo docker exec -it $DOCKER_ID /bin/bash -c \'cd /packages/detectron && python tools/train.py\'\n\n\n1\n',normalizedContent:'前言: 因为写项目时需要用到mysql postgres``mongodb``redis一些数据库 不想再自己电脑上安装这些 使用率不是很多 就想到了docker, 无论在服务器还时自己的电脑上, 感觉docker更符合我的场景\n\n\n# docker安装及使用教程\n\n\n# 卸载docker\n\n1.  先查询下docker： yum list installed|grep docker ，然后执行卸载命令：yum -y remove  docker.x86_64   docker-client.x86_64  docker-common.x86_64 2.  执行删除已存在的镜像和容器（以实际情况而定）： rm -rf  /var/lib/docker\n\n# 删除相关组件\n# 如果使用种方式的话，需要罗列全部使安装过的组件；\nyum remove docker \\\n  docker-client \\\n  docker-client-latest \\\n  docker-common \\\n  docker-latest \\\n  docker-latest-logrotate \\\n  docker-logrotate \\\n  docker-selinux \\\n  docker-engine-selinux \\\n  docker-engine\n                \n# 第二种方式，使用匹配符直接删除全部\n# 推荐使用第二种方式，无需罗列所有的安装组件\nyum remove docker docker-*\n# 删除注册的服务\nrm -rf /etc/systemd/system/docker.service.d\n# 删除docker工作目录\nrm -rf /var/lib/docker*\nrm -rf /var/run/docker*\n# 删除配置文件\n# 直接清空这个文件夹，下面所有配置都将被清空\nrm -rf /etc/docker\n#----------------------------#\n# /etc/docker/daemon.json    #\n# /ect/docker/key.json       #\n#----------------------------#\n# 查找残留的docker\nrpm -qa|grep docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 安装docker\n\n# 第一步，需要安装一些依赖组件\n# 安装所需的软件包。yum-utils 提供了 yum-config-manager，\n# 并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。\nyum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n# 使用以下命令来获得稳定的仓库\n# 阿里云源地址速度相对比较快，这里是设置源地址为阿里云的镜像仓库地址。\n# yum-config-manager \\\n#    --add-repo \\\n#    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    \n# 安装 docker engine-community\nyum install -y docker-ce docker-ce-cli containerd.io\n# 将当前用户添加到docker用户组\nusermod -ag docker ${user}\n# docker默认未启动，需要手动重启docker服务\nsystemctl restart docker\nsystemctl start docker\nsystemctl stop docker\n# 切换当前会话到docker组\nnewgrp - docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# docker镜像加速\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'eof\'\n{\n  "registry-mirrors": [ "https://fpr97nhz.mirror.aliyuncs.com" ]\n}\neof\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# docker 入门教程\n\n\n# image 文件\n\n# 列出本机的所有 image 文件。\n$ docker image ls\n\n# 删除 image 文件\n$ docker image rm [imagename]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 容器文件\n\n# 列出本机正在运行的容器\n$ docker container ls\n\n# 列出本机所有容器，包括终止运行的容器\n$ docker container ls --all\n\n\n1\n2\n3\n4\n5\n\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。\n\n$ docker container rm [containerid]\n\n\n1\n\n\n\n# 实例\n\n首先，运行下面的命令，将 image 文件从仓库抓取到本地。\n\n$ docker image pull library/hello-world\n\n\n1\n\n\n上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。 由于 docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。\n\n$ docker image pull hello-world\n\n\n1\n\n\n抓取成功以后，就可以在本机看到这个 image 文件了。\n\n$ docker image ls\n\n\n1\n\n\n现在，运行这个 image 文件。\n\n$ docker container run hello-world\n\n\n1\n\n\ndocker container run命令会从 image 文件，生成一个正在运行的容器实例。 注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。 如果运行成功，你会在屏幕上读到下面的输出。\n\n$ docker container run hello-world\nhello from docker!\nthis message shows that your installation appears to be working correctly.\n... ...\n\n\n1\n2\n3\n4\n\n\n输出这段提示以后，hello world就会停止运行，容器自动终止。 有些容器不会自动终止，因为提供的是服务。比如，安装运行 ubuntu 的 image，就可以在命令行体验 ubuntu 系统。\n\n$ docker container run -it ubuntu bash\n\n\n1\n\n\n对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。\n\n$ docker container kill [containid]\n\n\n1\n\n\n\n# dockerfile\n\n\n\n\n# gui 工具\n\n推荐使用 portainer 作为容器的 gui 管理方案。 推荐使用 portainer 作为容器的 gui 管理方案。\n\n> 官方地址：portainer.io/install.htm…\n\n安装命令\n\n> docker volume create portainer_data docker run -d -p ``8000``:8000 -p ``9000``:9000 --name``=``portainer --restart``=``always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce\n\n\n# 常用命令汇总\n\n# 查看docker基础信息\ndocker info\n\n# 拉取镜像\ndocker pull <image>:<tag>\n\n# 移除容器\ndocker rm <containerid>\n\n# 移除镜像\ndocker rmi <imageid>\n\n# 启动、停止、重启容器\ndocker stop <containerid>\ndocker start <containerid>\ndocker restart <containerid>\ndocker run -itd --name <imagename> -p/-p<port>:<port> <imagename> /bin/bash\n\n# 查看docker容器\ndocker ps <-a>\n\n# 打包镜像\ndocker tag <path>/<name> <remotepath>/<name>\ndocker push <remotepath>/<name>\n\n# 登录docker\ndocker login <remoteip>\n\n# 进入容器内部\ndocker exec -it <containerid> /bin/bash\n\n# 从仓库搜索镜像\ndocker search <imagename>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n（1）docker container start 前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。\n\n$ docker container start [containerid]\n\n\n1\n\n\n（2）docker container stop 前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 sigkill 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 sigterm 信号，然后过一段时间再发出 sigkill 信号。\n\n$ bash container stop [containerid]\n\n\n1\n\n\n这两个信号的差别是，应用程序收到 sigterm 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 sigkill 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。 （3）docker container logs docker container logs命令用来查看 docker 容器的输出，即容器里面 shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。\n\n$ docker container logs [containerid]\n\n\n1\n\n\n（4）docker container exec docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 shell 执行命令了。\n\n$ docker container exec -it [containerid] /bin/bash\n\n\n1\n\n\nexit 容器停止退出 crtl+p+q 容器不停止退出 （5）docker container cp docker container cp命令用于从正在运行的 docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。\n\n$ docker container cp [containid]:[/path/to/file] .\n\n\n1\n\n\n\n# 命令行技巧\n\n# 删除所有镜像\n\ndocker rmi -f $(docker images -qa)\n\n# 停用全部运行中的容器\n\ndocker stop $(docker ps -q)\n\n# 删除所有的容器\n\ndocker rm $(docker ps -aq)\n\n# 停用并删除所有容器\n\ndocker stop $(docker ps -q) & docker rm $(docker ps -aq)\n\n * 删除所有为运行的容器 使用linux命令\n   \n   * docker container ls -f status-exited | awk \'${print$1}\' | awk \'nr>1\' | xargs docker container rm\n\n * 批量启动容器 使用docker命令\n   \n   * docker container ls -q -f status=created 查找所有状态为created的容器 并获取其id\n   * docker container start $(docker container ls -q -f status=created)\n\n\n# docker配置\n\n\n# /etc/docker/daemon.json\n\n{\n    "authorization-plugins": [],//访问授权插件\n    "data-root": "",//docker数据持久化存储的根目录\n    "dns": [],//dns服务器\n    "dns-opts": [],//dns配置选项，如端口等\n    "dns-search": [],//dns搜索域名\n    "exec-opts": [],//执行选项\n    "exec-root": "",//执行状态的文件的根目录\n    "experimental": false,//是否开启试验性特性\n    "storage-driver": "",//存储驱动器\n    "storage-opts": [],//存储选项\n    "labels": [],//键值对式标记docker元数据\n    "live-restore": true,//dockerd挂掉是否保活容器（避免了docker服务异常而造成容器退出）\n    "log-driver": "",//容器日志的驱动器\n    "log-opts": {},//容器日志的选项\n    "mtu": 0,//设置容器网络mtu（最大传输单元）\n    "pidfile": "",//daemon pid文件的位置\n    "cluster-store": "",//集群存储系统的url\n    "cluster-store-opts": {},//配置集群存储\n    "cluster-advertise": "",//对外的地址名称\n    "max-concurrent-downloads": 3,//设置每个pull进程的最大并发\n    "max-concurrent-uploads": 5,//设置每个push进程的最大并发\n    "default-shm-size": "64m",//设置默认共享内存的大小\n    "shutdown-timeout": 15,//设置关闭的超时时限(who?)\n    "debug": true,//开启调试模式\n    "hosts": [],//监听地址(?)\n    "log-level": "",//日志级别\n    "tls": true,//开启传输层安全协议tls\n    "tlsverify": true,//开启输层安全协议并验证远程地址\n    "tlscacert": "",//ca签名文件路径\n    "tlscert": "",//tls证书文件路径\n    "tlskey": "",//tls密钥文件路径\n    "swarm-default-advertise-addr": "",//swarm对外地址\n    "api-cors-header": "",//设置cors（跨域资源共享-cross-origin resource sharing）头\n    "selinux-enabled": false,//开启selinux(用户、进程、应用、文件的强制访问控制)\n    "userns-remap": "",//给用户命名空间设置 用户/组\n    "group": "",//docker所在组\n    "cgroup-parent": "",//设置所有容器的cgroup的父类(?)\n    "default-ulimits": {},//设置所有容器的ulimit\n    "init": false,//容器执行初始化，来转发信号或控制(reap)进程\n    "init-path": "/usr/libexec/docker-init",//docker-init文件的路径\n    "ipv6": false,//开启ipv6网络\n    "iptables": false,//开启防火墙规则\n    "ip-forward": false,//开启net.ipv4.ip_forward\n    "ip-masq": false,//开启ip掩蔽(ip封包通过路由器或防火墙时重写源ip地址或目的ip地址的技术)\n    "userland-proxy": false,//用户空间代理\n    "userland-proxy-path": "/usr/libexec/docker-proxy",//用户空间代理路径\n    "ip": "0.0.0.0",//默认ip\n    "bridge": "",//将容器依附(attach)到桥接网络上的桥标识\n    "bip": "",//指定桥接ip\n    "fixed-cidr": "",//(ipv4)子网划分，即限制ip地址分配范围，用以控制容器所属网段实现容器间(同一主机或不同主机间)的网络访问\n    "fixed-cidr-v6": "",//（ipv6）子网划分\n    "default-gateway": "",//默认网关\n    "default-gateway-v6": "",//默认ipv6网关\n    "icc": false,//容器间通信\n    "raw-logs": false,//原始日志(无颜色、全时间戳)\n    "allow-nondistributable-artifacts": [],//不对外分发的产品提交的registry仓库\n    "registry-mirrors": [],//registry仓库镜像\n    "seccomp-profile": "",//seccomp配置文件\n    "insecure-registries": [],//非https的registry地址\n    "no-new-privileges": false,//禁止新优先级(??)\n    "default-runtime": "runc",//oci联盟(the open container initiative)默认运行时环境\n    "oom-score-adjust": -500,//内存溢出被杀死的优先级(-1000~1000)\n    "node-generic-resources": ["nvidia-gpu=uuid1", "nvidia-gpu=uuid2"],//对外公布的资源节点\n    "runtimes": {//运行时\n        "cc-runtime": {\n            "path": "/usr/bin/cc-runtime"\n        },\n        "custom": {\n            "path": "/usr/local/bin/my-runc-replacement",\n            "runtimeargs": [\n                "--debug"\n            ]\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# 更换镜像源\n\n 1. 首先，修改配置文件 vi /etc/docker/daemon.json\n\n"registry-mirrors": ["https//registry.docker-cn.com"]\n\n\n1\n\n\n 2. 然后，加载docker配置 systemctl daemon-reload\n\n 3. 最后，重启docker服务就好了 systemctl restart docker.service\n\n附： 国内的几个优秀的docker源\n\n * docker中国区官方镜像 https://registry.docker-cn.com\n * 网易蜂巢 http://hub-mirror.c.163.com\n * 中国科技大学 https://docker.mirrors.ustc.edu.cn\n * 阿里镜像 xxx.mirror.aliyuncs.com （需要注册，xxx代表你的账号）\n * daocloud xxxx.m.daocloud.ip （需要注册，xxx代表你的账号）\n\n\n# 原理\n\n\n# cnm\n\ncnm drivers\n\n\n# 容器内部网络空间是否与外面一致\n\n在容器外ip a 查看容器内所有ip:``docker container exec ${containername} ip a\n\n\n#\n\n\n#\n\n\n# docker 微服务\n\n\n#\n\n----------------------------------------\n\n\n# nginx 容器教程\n\n\n# http 服务\n\nnginx 的最大作用，就是搭建一个 web server。有了容器，只要一行命令，服务器就架设好了，完全不用配置。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面命令下载并运行官方的 nginx image，默认是最新版本（latest），当前是 1.13.9。如果本机安装过以前的版本，请删掉重新安装，因为只有 1.13.9 才开始支持 server push。 上面命令的各个参数含义如下。\n\n>  * -d：在后台运行\n>  * -p ：容器的80端口映射到127.0.0.1:8080\n>  * --rm：容器停止运行后，自动删除容器文件\n>  * --name：容器的名字为mynginx\n\n\n# 映射网页目录\n\n网页文件都在容器里，没法直接修改，显然很不方便。下一步就是让网页文件所在的目录/usr/share/nginx/html映射到本地。 首先，新建一个目录，并进入该目录。\n\n$ mkdir nginx-docker-demo\n$ cd nginx-docker-demo\n\n\n1\n2\n\n\n然后，新建一个html子目录。\n\n$ mkdir html\n\n\n1\n\n\n在这个子目录里面，放置一个index.html文件，内容如下。\n\n<h1>hello world</h1>\n\n\n1\n\n\n接着，就可以把这个子目录html，映射到容器的网页文件目录/usr/share/nginx/html。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  --volume "$pwd/html":/usr/share/nginx/html \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n打开浏览器，访问 127.0.0.1:8080，应该就能看到 hello world 了。\n\n\n# 使用的案例\n\n * 创建mysql5.7\n   * docker run -p 33306:3306 -e mysql_root_password=qq164165005 --name eggmysql -d mysql:5.7\n\n\n# 在使用docker中遇到的问题&需求\n\n\n# 问题\n\n# docker启动时的报错汇总\n\n----------------------------------------\n\n * failed to start docker application container engine.\n\n修改/etc/docker/daemon.json这个文件\n\n"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]\n\n\n1\n\n\n----------------------------------------\n\n * docker.service failed.\n\n----------------------------------------\n\n * failed to restart docker.service: unit not found.\n\ndocker.service启动失败：unit not found的原因及解决办法 删除/usr/lib/systemd/system/docker.service的[unit]里包含的docker.socket，然后systemctl daemon-reload，最后systemctl start docker.service，发现启动成功了。 类似情况 如果是类似的情况，缺少docker.socket，但是新版本需要docker.socket。有两种方法可以解决该问题:\n\n 1. 可以卸载docker，再重新安装，即可出现docker.socket。或者\n 2. 创建一个/usr/lib/systemd/system/docker.socket文件，然后systemctl daemon-reload，最后systemctl start docker.service，即可启动成功。\n\n----------------------------------------\n\n# 当构建完镜像启动容器时失败\n\n * 在最后加上 sh -c "while true; do sleep 3600; done"\n\n * dockerfile 最后加入 entrypoint ["sh", "-c", " exec tail -f /dev/null"]防止容器启动就退出, 用这个命令一直前台阻塞\n\n * 删除未启动的容器 重新构建镜像\n\n * 进入容器docker exec [contianerid] -it /bin/sh\n\n查看文件类型 .sh 设置文件类型set ff="unix"\n\n# permission denied\n\n * sudo docker image ls\n\n * sudo goupadd docker\n\n * sudo gpasswd -a ${user} docker\n\n * sudo service docker restart\n\n * logout 重新登录下\n\n# 运行node项目 自动退出\n\n运行容器的时候     自动进入项目命令行交互界面敲击\n\ndocker run -it pptr-image bash\n\n\n1\n\n\n\n# 需求收集\n\n# 容器中调用宿主机docker命令\n\nhttps://blog.csdn.net/nanhavezhi/article/details/103079056 在构建容器时加上docker的目录映射\n\n-v /run/docker.sock:/var/run/docker.sock  \\\n-v /bin/docker:/bin/docker    \n\n\n1\n2\n\n\n# 在容器外执行某个容器内的某个命令操作\n\n命令如下 加上-c $cmd\n\nsudo docker exec -it $docker_id /bin/bash -c \'cd /packages/detectron && python tools/train.py\'\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"java版本管理 jenv使用",frontmatter:{title:"java版本管理 jenv使用",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/610cc4/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/2011002.java%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%20jenv%E4%BD%BF%E7%94%A8.html",relativePath:"20.后端&运维/2001.Java/2011002.java版本管理 jenv使用.md",key:"v-034a9719",path:"/pages/610cc4/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:2},{level:2,title:"修改 .bash_profile 文件（手动版）",slug:"修改-bash-profile-文件-手动版",normalizedTitle:"修改 .bash_profile 文件（手动版）",charIndex:3041}],headersStr:"安装 修改 .bash_profile 文件（手动版）",content:'# 安装\n\nbrew install jenv\n\n\n1\n\n\n\n\n➜  Homebrew git:(stable) brew install jenv\nRunning `brew update --preinstall`...\n==> Auto-updated Homebrew!\nUpdated 1 tap (homebrew/core).\n==> New Formulae\nkubekey\n\nError: The following directories are not writable by your user:\n/usr/local/lib/pkgconfig\n/usr/local/share/man/man8\n\nYou should change the ownership of these directories to your user.\n  sudo chown -R $(whoami) /usr/local/lib/pkgconfig /usr/local/share/man/man8\n\nAnd make sure that your user has write permission.\n  chmod u+w /usr/local/lib/pkgconfig /usr/local/share/man/man8\n➜  Homebrew git:(stable) sudo chown -R $(whoami) /usr/local/lib/pkgconfig /usr/local/share/man/man8\nPassword:\n➜  Homebrew git:(stable) chmod u+w /usr/local/lib/pkgconfig /usr/local/share/man/man8\n➜  Homebrew git:(stable) brew install jenv\nRunning `brew update --preinstall`...\n==> Downloading https://ghcr.io/v2/homebrew/core/jenv/manifests/0.5.4\n######################################################################## 100.0%\n==> Downloading https://ghcr.io/v2/homebrew/core/jenv/blobs/sha256:521a1ad6e28b90f1e37893d279950e35957a0580464d639ec74c398f8da6d466\n==> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:521a1ad6e28b90f1e37893d279950e35957a0580464d639ec74c398f8da6d466?se=2022-03-15T09%3A55%3A00Z&sig=i4RshcszFYJbg8upDLUjD%2FmuzZb1RrgB\n######################################################################## 100.0%\n==> Pouring jenv--0.5.4.all.bottle.tar.gz\n==> Caveats\nTo activate jenv, add the following to your ~/.zshrc:\n  export PATH="$HOME/.jenv/bin:$PATH"\n  eval "$(jenv init -)"\n==> Summary\n🍺  /usr/local/Cellar/jenv/0.5.4: 84 files, 73KB\n==> `brew cleanup` has not been run in the last 30 days, running now...\nDisable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.\nHide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).\nRemoving: /Users/izhaong/Library/Caches/Homebrew/Cask/stats--2.6.22.dmg... (9.6MB)\nPruned 14 symbolic links and 2 directories from /usr/local\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n输入jenv versions (如下就安装成功了)\n\n➜  Homebrew git:(stable) jenv versions\n* system (set by /Users/izhaong/.jenv/version)\n\n\n1\n2\n\n\n * 安装pkg包\n\n * 安装后查看当前的包路径\n   \n   * /usr/libexec/java_home -V 此命令行可以罗列出电脑安装的所有版本的java\n     \n     * ➜  JavaVirtualMachines /usr/libexec/java_home -V\n       Matching Java Virtual Machines (3):\n           11.0.14 (x86_64) "Oracle Corporation" - "Java SE 11.0.14" /Library/Java/JavaVirtualMachines/jdk-11.0.14.jdk/Contents/Home\n           1.8.311.11 (x86_64) "Oracle Corporation" - "Java" /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home\n           1.8.0_311 (x86_64) "Oracle Corporation" - "Java SE 8" /Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home\n       /Library/Java/JavaVirtualMachines/jdk-11.0.14.jdk/Contents/Home\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       \n   \n   * 把JAVA添加到 jEnv中jenv add /Library/Java/JavaVirtualMachines/JAVA_HOME\n\n\n# 修改 .bash_profile 文件（手动版）\n\n 1. 打开.bash_profile 文件\n\n# 创建.bash_profile文件，若已存在则忽略\ntouch ~/.bash_profile\n# 打开.bash_profile文件，以文本编辑的方式编辑\nopen ~/.bash_profile\n\n\n1\n2\n3\n4\n\n 1. 编辑 .bash_profile 文件\n\n# 设置 JDK 8\nexport JAVA_8_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home"\n\n# 设置 JDK 11\nexport JAVA_11_HOME="/Library/Java/JavaVirtualMachines/jdk-11.0.14.jdk/Contents/Home"\n\n# 默认JDK 8\nexport JAVA_HOME=$JAVA_8_HOME\n\n# alias命令动态切换JDK版本\nalias jdk8="export JAVA_HOME=$JAVA_8_HOME"\nalias jdk11="export JAVA_HOME=$JAVA_11_HOME"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n 1. 保存.bash_profile 文件，重启终端\n\nsource .bash_profile \n\n\n1\n',normalizedContent:'# 安装\n\nbrew install jenv\n\n\n1\n\n\n\n\n➜  homebrew git:(stable) brew install jenv\nrunning `brew update --preinstall`...\n==> auto-updated homebrew!\nupdated 1 tap (homebrew/core).\n==> new formulae\nkubekey\n\nerror: the following directories are not writable by your user:\n/usr/local/lib/pkgconfig\n/usr/local/share/man/man8\n\nyou should change the ownership of these directories to your user.\n  sudo chown -r $(whoami) /usr/local/lib/pkgconfig /usr/local/share/man/man8\n\nand make sure that your user has write permission.\n  chmod u+w /usr/local/lib/pkgconfig /usr/local/share/man/man8\n➜  homebrew git:(stable) sudo chown -r $(whoami) /usr/local/lib/pkgconfig /usr/local/share/man/man8\npassword:\n➜  homebrew git:(stable) chmod u+w /usr/local/lib/pkgconfig /usr/local/share/man/man8\n➜  homebrew git:(stable) brew install jenv\nrunning `brew update --preinstall`...\n==> downloading https://ghcr.io/v2/homebrew/core/jenv/manifests/0.5.4\n######################################################################## 100.0%\n==> downloading https://ghcr.io/v2/homebrew/core/jenv/blobs/sha256:521a1ad6e28b90f1e37893d279950e35957a0580464d639ec74c398f8da6d466\n==> downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:521a1ad6e28b90f1e37893d279950e35957a0580464d639ec74c398f8da6d466?se=2022-03-15t09%3a55%3a00z&sig=i4rshcszfyjbg8updlujd%2fmuzzb1rrgb\n######################################################################## 100.0%\n==> pouring jenv--0.5.4.all.bottle.tar.gz\n==> caveats\nto activate jenv, add the following to your ~/.zshrc:\n  export path="$home/.jenv/bin:$path"\n  eval "$(jenv init -)"\n==> summary\n🍺  /usr/local/cellar/jenv/0.5.4: 84 files, 73kb\n==> `brew cleanup` has not been run in the last 30 days, running now...\ndisable this behaviour by setting homebrew_no_install_cleanup.\nhide these hints with homebrew_no_env_hints (see `man brew`).\nremoving: /users/izhaong/library/caches/homebrew/cask/stats--2.6.22.dmg... (9.6mb)\npruned 14 symbolic links and 2 directories from /usr/local\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n输入jenv versions (如下就安装成功了)\n\n➜  homebrew git:(stable) jenv versions\n* system (set by /users/izhaong/.jenv/version)\n\n\n1\n2\n\n\n * 安装pkg包\n\n * 安装后查看当前的包路径\n   \n   * /usr/libexec/java_home -v 此命令行可以罗列出电脑安装的所有版本的java\n     \n     * ➜  javavirtualmachines /usr/libexec/java_home -v\n       matching java virtual machines (3):\n           11.0.14 (x86_64) "oracle corporation" - "java se 11.0.14" /library/java/javavirtualmachines/jdk-11.0.14.jdk/contents/home\n           1.8.311.11 (x86_64) "oracle corporation" - "java" /library/internet plug-ins/javaappletplugin.plugin/contents/home\n           1.8.0_311 (x86_64) "oracle corporation" - "java se 8" /library/java/javavirtualmachines/jdk1.8.0_311.jdk/contents/home\n       /library/java/javavirtualmachines/jdk-11.0.14.jdk/contents/home\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       \n   \n   * 把java添加到 jenv中jenv add /library/java/javavirtualmachines/java_home\n\n\n# 修改 .bash_profile 文件（手动版）\n\n 1. 打开.bash_profile 文件\n\n# 创建.bash_profile文件，若已存在则忽略\ntouch ~/.bash_profile\n# 打开.bash_profile文件，以文本编辑的方式编辑\nopen ~/.bash_profile\n\n\n1\n2\n3\n4\n\n 1. 编辑 .bash_profile 文件\n\n# 设置 jdk 8\nexport java_8_home="/library/java/javavirtualmachines/jdk1.8.0_311.jdk/contents/home"\n\n# 设置 jdk 11\nexport java_11_home="/library/java/javavirtualmachines/jdk-11.0.14.jdk/contents/home"\n\n# 默认jdk 8\nexport java_home=$java_8_home\n\n# alias命令动态切换jdk版本\nalias jdk8="export java_home=$java_8_home"\nalias jdk11="export java_home=$java_11_home"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n 1. 保存.bash_profile 文件，重启终端\n\nsource .bash_profile \n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"mac中安装卸载java",frontmatter:{title:"mac中安装卸载java",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/9309b2/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/2011003.mac%E4%B8%AD%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BDjava.html",relativePath:"20.后端&运维/2001.Java/2011003.mac中安装卸载java.md",key:"v-3e8e1b39",path:"/pages/9309b2/",headers:[{level:2,title:"卸载",slug:"卸载",normalizedTitle:"卸载",charIndex:2}],headersStr:"卸载",content:'# 卸载\n\n/usr/libexec/java_home -V 此命令行可以罗列出电脑安装的所有版本的java\n\n➜  Homebrew git:(stable) /usr/libexec/java_home -V\nMatching Java Virtual Machines (1):\n    11.0.13 (x86_64) "Amazon.com Inc." - "Amazon Corretto 11" /Users/izhaong/Library/Java/JavaVirtualMachines/corretto-11.0.13/Contents/Home\n/Users/izhaong/Library/Java/JavaVirtualMachines/corretto-11.0.13/Contents/Home\n➜  Homebrew git:(stable) sudo rm -rf /Users/izhaong/Library/Java/JavaVirtualMachines/*\n➜  Homebrew git:(stable) java -v\nThe operation couldn’t be completed. Unable to locate a Java Runtime.\nPlease visit http://www.java.com for information on installing Java.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n',normalizedContent:'# 卸载\n\n/usr/libexec/java_home -v 此命令行可以罗列出电脑安装的所有版本的java\n\n➜  homebrew git:(stable) /usr/libexec/java_home -v\nmatching java virtual machines (1):\n    11.0.13 (x86_64) "amazon.com inc." - "amazon corretto 11" /users/izhaong/library/java/javavirtualmachines/corretto-11.0.13/contents/home\n/users/izhaong/library/java/javavirtualmachines/corretto-11.0.13/contents/home\n➜  homebrew git:(stable) sudo rm -rf /users/izhaong/library/java/javavirtualmachines/*\n➜  homebrew git:(stable) java -v\nthe operation couldn’t be completed. unable to locate a java runtime.\nplease visit http://www.java.com for information on installing java.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"springboot学习上手",frontmatter:{title:"springboot学习上手",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/e1e503/",categories:["后端&运维","Java"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2001.Java/2011040.springboot%E5%AD%A6%E4%B9%A0%E4%B8%8A%E6%89%8B.html",relativePath:"20.后端&运维/2001.Java/2011040.springboot学习上手.md",key:"v-7c096f14",path:"/pages/e1e503/",headers:[{level:2,title:"初始化项目",slug:"初始化项目",normalizedTitle:"初始化项目",charIndex:2},{level:2,title:"数据库",slug:"数据库",normalizedTitle:"数据库",charIndex:893},{level:2,title:"业务",slug:"业务",normalizedTitle:"业务",charIndex:1406},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:3266}],headersStr:"初始化项目 数据库 业务 问题",content:"# 初始化项目\n\nhttps://start.spring.io/\n\nhttps://start.spring.io/#!type=maven-project&language=java&platformVersion=2.5.10&packaging=jar&jvmVersion=1.8&groupId=com.example&artifactId=spring-boot-learn&name=spring-boot-learn&description=Demo%20project%20for%20Spring%20Boot&packageName=com.example.spring-boot-learn&dependencies=web\n\n修改springboot版本\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.2.1.RELEASE</version>\n\t\t<relativePath/> \x3c!-- lookup parent from repository --\x3e\n\t</parent>\n\n\n1\n2\n3\n4\n5\n6\n\n\n新增mybatis依赖\n\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.1.1</version>\n\t\t</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n新增MySQL依赖\n\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\n\n1\n2\n3\n4\n\n\n配置数据库\n\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.username=root\nspring.datasource.password=mysql8password\nspring.datasource.url=jdbc:mysql://localhost:3306/springbootlearn?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\n\n\n1\n2\n3\n4\n\n\n\n# 数据库\n\nCREATE TABLE students (\n\t`id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '自增id',\n\t`name` VARCHAR(250) NOT NULL DEFAULT '' COMMENT 'name',\n\tPRIMARY KEY (`id`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 业务\n\n新建Student实体类, 即对应数据库中某个表\n\npackage com.example.springbootlearn;\n\n/**\n * 描述： 学生实体类\n */\npublic class Student {\n    Integer id;\n    String name;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n新建mapper\n\npackage com.example.springbootlearn;\n\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Select;\nimport org.springframework.stereotype.Repository;\n\n@Mapper\n@Repository\npublic interface StudentMapper {\n    @Select(\"select * from students where id = #{id}\")\n    Student findById(Integer id);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nservice\n\npackage com.example.springbootlearn;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StudentService {\n    @Autowired\n    StudentMapper studentMapper;\n\n    public Student findStudent(Integer id) {\n        return studentMapper.findById(id);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\ncontroller\n\npackage com.example.springbootlearn;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class StudentController {\n\n    @Autowired\n    StudentService studentService;\n\n    @GetMapping({\"/student\"})\n    public String student(@RequestParam Integer id) {\n        Student student = studentService.findStudent(id);\n        return student.toString();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 问题\n\n[ERROR] [ERROR] Some problems were encountered while processing the POMs:\n\n包名不对 再仓库中引入不了 解决方法：\n\n * 确认包名\n * 修改mirror\n * 手动引入",normalizedContent:"# 初始化项目\n\nhttps://start.spring.io/\n\nhttps://start.spring.io/#!type=maven-project&language=java&platformversion=2.5.10&packaging=jar&jvmversion=1.8&groupid=com.example&artifactid=spring-boot-learn&name=spring-boot-learn&description=demo%20project%20for%20spring%20boot&packagename=com.example.spring-boot-learn&dependencies=web\n\n修改springboot版本\n\n\t<parent>\n\t\t<groupid>org.springframework.boot</groupid>\n\t\t<artifactid>spring-boot-starter-parent</artifactid>\n\t\t<version>2.2.1.release</version>\n\t\t<relativepath/> \x3c!-- lookup parent from repository --\x3e\n\t</parent>\n\n\n1\n2\n3\n4\n5\n6\n\n\n新增mybatis依赖\n\n\t\t<dependency>\n\t\t\t<groupid>org.mybatis.spring.boot</groupid>\n\t\t\t<artifactid>mybatis-spring-boot-starter</artifactid>\n\t\t\t<version>2.1.1</version>\n\t\t</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n新增mysql依赖\n\n\t\t<dependency>\n\t\t\t<groupid>mysql</groupid>\n\t\t\t<artifactid>mysql-connector-java</artifactid>\n\t\t</dependency>\n\n\n1\n2\n3\n4\n\n\n配置数据库\n\nspring.datasource.driver-class-name=com.mysql.jdbc.driver\nspring.datasource.username=root\nspring.datasource.password=mysql8password\nspring.datasource.url=jdbc:mysql://localhost:3306/springbootlearn?servertimezone=utc&useunicode=true&characterencoding=utf-8&usessl=true\n\n\n1\n2\n3\n4\n\n\n\n# 数据库\n\ncreate table students (\n\t`id` int(11) unsigned not null auto_increment comment '自增id',\n\t`name` varchar(250) not null default '' comment 'name',\n\tprimary key (`id`)\n) engine=innodb default charset=utf8;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 业务\n\n新建student实体类, 即对应数据库中某个表\n\npackage com.example.springbootlearn;\n\n/**\n * 描述： 学生实体类\n */\npublic class student {\n    integer id;\n    string name;\n\n    public integer getid() {\n        return id;\n    }\n\n    public void setid(integer id) {\n        this.id = id;\n    }\n\n    public string getname() {\n        return name;\n    }\n\n    public void setname(string name) {\n        this.name = name;\n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n新建mapper\n\npackage com.example.springbootlearn;\n\nimport org.apache.ibatis.annotations.mapper;\nimport org.apache.ibatis.annotations.select;\nimport org.springframework.stereotype.repository;\n\n@mapper\n@repository\npublic interface studentmapper {\n    @select(\"select * from students where id = #{id}\")\n    student findbyid(integer id);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nservice\n\npackage com.example.springbootlearn;\n\n\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.service;\n\n@service\npublic class studentservice {\n    @autowired\n    studentmapper studentmapper;\n\n    public student findstudent(integer id) {\n        return studentmapper.findbyid(id);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\ncontroller\n\npackage com.example.springbootlearn;\n\n\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.web.bind.annotation.getmapping;\nimport org.springframework.web.bind.annotation.requestparam;\nimport org.springframework.web.bind.annotation.restcontroller;\n\n@restcontroller\npublic class studentcontroller {\n\n    @autowired\n    studentservice studentservice;\n\n    @getmapping({\"/student\"})\n    public string student(@requestparam integer id) {\n        student student = studentservice.findstudent(id);\n        return student.tostring();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 问题\n\n[error] [error] some problems were encountered while processing the poms:\n\n包名不对 再仓库中引入不了 解决方法：\n\n * 确认包名\n * 修改mirror\n * 手动引入",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"docker安装并初始化",frontmatter:{title:"docker安装并初始化",date:"2023-11-04T10:43:34.000Z",permalink:"/pages/0c1a07/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/2010005.docker%E5%AE%89%E8%A3%85%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96.html",relativePath:"20.后端&运维/2010.Docker/2010005.docker安装并初始化.md",key:"v-c9151fb2",path:"/pages/0c1a07/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:2},{level:2,title:"配置镜像加速器",slug:"配置镜像加速器",normalizedTitle:"配置镜像加速器",charIndex:130},{level:2,title:"docker 服务器开机自启动：",slug:"docker-服务器开机自启动",normalizedTitle:"docker 服务器开机自启动：",charIndex:436},{level:3,title:"容器开机启动：",slug:"容器开机启动",normalizedTitle:"容器开机启动：",charIndex:756}],headersStr:"安装 配置镜像加速器 docker 服务器开机自启动： 容器开机启动：",content:'# 安装\n\ncentos7上的安装\n\ncurl -fsSL "https://get.docker.com/"|sh\n\n\n1\n\n\n启动服务\n\nsystemctl enable docker && systemctl start docker\n\n\n1\n\n\n\n# 配置镜像加速器\n\n针对Docker客户端版本大于 1.10.0 的用户\n\n您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  "registry-mirrors": ["https://49hscvhw.mirror.aliyuncs.com"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# docker 服务器开机自启动：\n\n1.systemctl is-enabled docker.service 检查服务是否开机启动\n\n2.systemctl enable docker.service 将服务配置成开机启动\n\n3.systemctl start docker.service 启动服务\n\nsystemctl 相关其他命令：\n\nsystemctl disable docker.service 禁止开机启动\n\nsystemctl stop docker.service 停止\n\nsystemctl restart docker.service 重启\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 容器开机启动：\n\n创建容器时候指定restart参数：\n\ndocker run -it -p 6379:6379 --restart=always --name redis -d redis\n\n对已经创建的容器用docker update 更新:\n\ndocker update --restart=always xxx\n\n--restart具体参数值详细信息 :\n\nno - 容器退出时，不重启容器\n\non-failure - 只有在非0状态退出时才从新启动容器\n\nalways - 无论退出状态是如何，都重启容器\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',normalizedContent:'# 安装\n\ncentos7上的安装\n\ncurl -fssl "https://get.docker.com/"|sh\n\n\n1\n\n\n启动服务\n\nsystemctl enable docker && systemctl start docker\n\n\n1\n\n\n\n# 配置镜像加速器\n\n针对docker客户端版本大于 1.10.0 的用户\n\n您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'eof\'\n{\n  "registry-mirrors": ["https://49hscvhw.mirror.aliyuncs.com"]\n}\neof\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# docker 服务器开机自启动：\n\n1.systemctl is-enabled docker.service 检查服务是否开机启动\n\n2.systemctl enable docker.service 将服务配置成开机启动\n\n3.systemctl start docker.service 启动服务\n\nsystemctl 相关其他命令：\n\nsystemctl disable docker.service 禁止开机启动\n\nsystemctl stop docker.service 停止\n\nsystemctl restart docker.service 重启\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 容器开机启动：\n\n创建容器时候指定restart参数：\n\ndocker run -it -p 6379:6379 --restart=always --name redis -d redis\n\n对已经创建的容器用docker update 更新:\n\ndocker update --restart=always xxx\n\n--restart具体参数值详细信息 :\n\nno - 容器退出时，不重启容器\n\non-failure - 只有在非0状态退出时才从新启动容器\n\nalways - 无论退出状态是如何，都重启容器\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',charsets:{cjk:!0},lastUpdated:"2023/11/04, 10:56:47",lastUpdatedTimestamp:1699066607e3},{title:"Docker 学习",frontmatter:{title:"Docker 学习",date:"2021-11-30T01:46:30.000Z",permalink:"/pages/3eb92e11/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/201001.Docker%20%E5%AD%A6%E4%B9%A0.html",relativePath:"20.后端&运维/2010.Docker/201001.Docker 学习.md",key:"v-5d7ae588",path:"/pages/3eb92e11/",headers:[{level:2,title:"Docker 安装及使用教程",slug:"docker-安装及使用教程",normalizedTitle:"docker 安装及使用教程",charIndex:122},{level:3,title:"卸载 docker",slug:"卸载-docker",normalizedTitle:"卸载 docker",charIndex:141},{level:3,title:"安装 docker",slug:"安装-docker",normalizedTitle:"安装 docker",charIndex:1064},{level:3,title:"docker 镜像加速",slug:"docker-镜像加速",normalizedTitle:"docker 镜像加速",charIndex:1761},{level:2,title:"Docker 入门教程",slug:"docker-入门教程",normalizedTitle:"docker 入门教程",charIndex:1997},{level:3,title:"image 文件",slug:"image-文件",normalizedTitle:"image 文件",charIndex:2013},{level:3,title:"容器文件",slug:"容器文件",normalizedTitle:"容器文件",charIndex:2123},{level:3,title:"实例",slug:"实例",normalizedTitle:"实例",charIndex:2324},{level:3,title:"dockerFile",slug:"dockerfile",normalizedTitle:"dockerfile",charIndex:3327},{level:2,title:"GUI 工具",slug:"gui-工具",normalizedTitle:"gui 工具",charIndex:3344},{level:2,title:"常用命令汇总",slug:"常用命令汇总",normalizedTitle:"常用命令汇总",charIndex:3681},{level:3,title:"命令行技巧",slug:"命令行技巧",normalizedTitle:"命令行技巧",charIndex:5389},{level:4,title:"删除所有镜像",slug:"删除所有镜像",normalizedTitle:"删除所有镜像",charIndex:5398},{level:4,title:"停用全部运行中的容器",slug:"停用全部运行中的容器",normalizedTitle:"停用全部运行中的容器",charIndex:5444},{level:4,title:"删除所有的容器",slug:"删除所有的容器",normalizedTitle:"删除所有的容器",charIndex:5487},{level:4,title:"停用并删除所有容器",slug:"停用并删除所有容器",normalizedTitle:"停用并删除所有容器",charIndex:5526},{level:2,title:"容器地址",slug:"容器地址",normalizedTitle:"容器地址",charIndex:5905},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:3,title:"",slug:"-2",normalizedTitle:"",charIndex:0},{level:2,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:6031},{level:3,title:"CNM",slug:"cnm",normalizedTitle:"cnm",charIndex:6038},{level:3,title:"容器内部网络空间是否与外面一致",slug:"容器内部网络空间是否与外面一致",normalizedTitle:"容器内部网络空间是否与外面一致",charIndex:6059},{level:3,title:"",slug:"-3",normalizedTitle:"",charIndex:0},{level:2,title:"",slug:"-4",normalizedTitle:"",charIndex:0},{level:2,title:"docker 微服务",slug:"docker-微服务",normalizedTitle:"docker 微服务",charIndex:6153},{level:2,title:"",slug:"-5",normalizedTitle:"",charIndex:0},{level:2,title:"Nginx 容器教程",slug:"nginx-容器教程",normalizedTitle:"nginx 容器教程",charIndex:6214},{level:3,title:"HTTP 服务",slug:"http-服务",normalizedTitle:"http 服务",charIndex:6229},{level:2,title:"映射网页目录",slug:"映射网页目录",normalizedTitle:"映射网页目录",charIndex:6632},{level:2,title:"使用的案例",slug:"使用的案例",normalizedTitle:"使用的案例",charIndex:7140},{level:2,title:"在使用 docker 中遇到的问题&需求",slug:"在使用-docker-中遇到的问题-需求",normalizedTitle:"在使用 docker 中遇到的问题&amp;需求",charIndex:null},{level:3,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:7275},{level:4,title:"Docker 启动时的报错汇总",slug:"docker-启动时的报错汇总",normalizedTitle:"docker 启动时的报错汇总",charIndex:7291},{level:4,title:"当构建完镜像启动容器时失败",slug:"当构建完镜像启动容器时失败",normalizedTitle:"当构建完镜像启动容器时失败",charIndex:8125},{level:4,title:"permission denied",slug:"permission-denied",normalizedTitle:"permission denied",charIndex:8384},{level:4,title:"运行 node 项目 自动退出",slug:"运行-node-项目-自动退出",normalizedTitle:"运行 node 项目 自动退出",charIndex:8538},{level:3,title:"需求收集",slug:"需求收集",normalizedTitle:"需求收集",charIndex:8625},{level:4,title:"容器中调用宿主机 docker 命令",slug:"容器中调用宿主机-docker-命令",normalizedTitle:"容器中调用宿主机 docker 命令",charIndex:8633},{level:4,title:"在容器外执行某个容器内的某个命令操作",slug:"在容器外执行某个容器内的某个命令操作",normalizedTitle:"在容器外执行某个容器内的某个命令操作",charIndex:8816}],headersStr:"Docker 安装及使用教程 卸载 docker 安装 docker docker 镜像加速 Docker 入门教程 image 文件 容器文件 实例 dockerFile GUI 工具 常用命令汇总 命令行技巧 删除所有镜像 停用全部运行中的容器 删除所有的容器 停用并删除所有容器 容器地址   原理 CNM 容器内部网络空间是否与外面一致   docker 微服务  Nginx 容器教程 HTTP 服务 映射网页目录 使用的案例 在使用 docker 中遇到的问题&需求 问题 Docker 启动时的报错汇总 当构建完镜像启动容器时失败 permission denied 运行 node 项目 自动退出 需求收集 容器中调用宿主机 docker 命令 在容器外执行某个容器内的某个命令操作",content:'前言: 因为写项目时需要用到mysql postgres``mongodb``redis一些数据库 不想再自己电脑上安装这些 使用率不是很多 就想到了 docker, 无论在服务器还时自己的电脑上, 感觉 docker 更符合我的场景\n\n\n# Docker 安装及使用教程\n\n\n# 卸载 docker\n\n1.  先查询下 docker： yum list installed|grep docker ，然后执行卸载命令：yum -y remove docker.x86_64 docker-client.x86_64 docker-common.x86_64 2.  执行删除已存在的镜像和容器（以实际情况而定）： rm -rf /var/lib/docker\n\n# 删除相关组件\n# 如果使用种方式的话，需要罗列全部使安装过的组件；\nyum remove docker \\\n  docker-client \\\n  docker-client-latest \\\n  docker-common \\\n  docker-latest \\\n  docker-latest-logrotate \\\n  docker-logrotate \\\n  docker-selinux \\\n  docker-engine-selinux \\\n  docker-engine\n\n# 第二种方式，使用匹配符直接删除全部\n# 推荐使用第二种方式，无需罗列所有的安装组件\nyum remove docker docker-*\n# 删除注册的服务\nrm -rf /etc/systemd/system/docker.service.d\n# 删除docker工作目录\nrm -rf /var/lib/docker*\nrm -rf /var/run/docker*\n# 删除配置文件\n# 直接清空这个文件夹，下面所有配置都将被清空\nrm -rf /etc/docker\n#----------------------------#\n# /etc/docker/daemon.json    #\n# /ect/docker/key.json       #\n#----------------------------#\n# 查找残留的docker\nrpm -qa|grep docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 安装 docker\n\n# 第一步，需要安装一些依赖组件\n# 安装所需的软件包。yum-utils 提供了 yum-config-manager，\n# 并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。\nyum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n# 使用以下命令来获得稳定的仓库\n# 阿里云源地址速度相对比较快，这里是设置源地址为阿里云的镜像仓库地址。\n# yum-config-manager \\\n#    --add-repo \\\n#    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 安装 Docker Engine-Community\nyum install -y docker-ce docker-ce-cli containerd.io\n# 将当前用户添加到docker用户组\nusermod -aG docker ${USER}\n# Docker默认未启动，需要手动重启docker服务\nsystemctl restart docker\nsystemctl start docker\nsystemctl stop docker\n# 切换当前会话到docker组\nnewgrp - docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# docker 镜像加速\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  "registry-mirrors": [ "https://fpr97nhz.mirror.aliyuncs.com" ]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Docker 入门教程\n\n\n# image 文件\n\n# 列出本机的所有 image 文件。\n$ docker image ls\n\n# 删除 image 文件\n$ docker image rm [imageName]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 容器文件\n\n# 列出本机正在运行的容器\n$ docker container ls\n\n# 列出本机所有容器，包括终止运行的容器\n$ docker container ls --all\n\n\n1\n2\n3\n4\n5\n\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。\n\n$ docker container rm [containerID]\n\n\n1\n\n\n\n# 实例\n\n首先，运行下面的命令，将 image 文件从仓库抓取到本地。\n\n$ docker image pull library/hello-world\n\n\n1\n\n\n上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。 由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。\n\n$ docker image pull hello-world\n\n\n1\n\n\n抓取成功以后，就可以在本机看到这个 image 文件了。\n\n$ docker image ls\n\n\n1\n\n\n现在，运行这个 image 文件。\n\n$ docker container run hello-world\n\n\n1\n\n\ndocker container run命令会从 image 文件，生成一个正在运行的容器实例。 注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。 如果运行成功，你会在屏幕上读到下面的输出。\n\n$ docker container run hello-world\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n... ...\n\n\n1\n2\n3\n4\n\n\n输出这段提示以后，hello world就会停止运行，容器自动终止。 有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。\n\n$ docker container run -it ubuntu bash\n\n\n1\n\n\n对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。\n\n$ docker container kill [containID]\n\n\n1\n\n\n\n# dockerFile\n\n\n\n\n# GUI 工具\n\n推荐使用 Portainer 作为容器的 GUI 管理方案。 推荐使用 Portainer 作为容器的 GUI 管理方案。\n\n> 官方地址：portainer.io/install.htm…\n\n安装命令\n\n> docker volume create portainer_data > docker run -d -p ``8000``:8000 -p ``9000``:9000 --name``=``portainer --restart``=``always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce\n\n\n# 常用命令汇总\n\n# 查看docker基础信息\ndocker info\n\n# 拉取镜像\ndocker pull <image>:<tag>\n\n# 移除容器\ndocker rm <containerId>\n\n# 移除镜像\ndocker rmi <imageId>\n\n# 启动、停止、重启容器\ndocker stop <containerId>\ndocker start <containerId>\ndocker restart <containerId>\ndocker run -itd --name <imageName> -P/-p<port>:<port> <imageName> /bin/bash\n\n# 查看docker容器\ndocker ps <-a>\n\n# 打包镜像\ndocker tag <path>/<name> <remotePath>/<name>\ndocker push <remotePath>/<name>\n\n# 登录docker\ndocker login <remoteIp>\n\n# 进入容器内部\ndocker exec -it <containerId> /bin/bash\n\n# 从仓库搜索镜像\ndocker search <imageName>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n（1）docker container start 前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。\n\n$ docker container start [containerID]\n\n\n1\n\n\n（2）docker container stop 前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。\n\n$ bash container stop [containerID]\n\n\n1\n\n\n这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。 （3）docker container logs docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。\n\n$ docker container logs [containerID]\n\n\n1\n\n\n（4）docker container exec docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。\n\n$ docker container exec -it [containerID] /bin/bash\n\n\n1\n\n\nexit 容器停止退出 crtl+p+q 容器不停止退出 （5）docker container cp docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。\n\n$ docker container cp [containID]:[/path/to/file] .\n\n\n1\n\n\n\n# 命令行技巧\n\n# 删除所有镜像\n\ndocker rmi -f $(docker images -qa)\n\n# 停用全部运行中的容器\n\ndocker stop $(docker ps -q)\n\n# 删除所有的容器\n\ndocker rm $(docker ps -aq)\n\n# 停用并删除所有容器\n\ndocker stop $(docker ps -q) & docker rm $(docker ps -aq)\n\n * 删除所有为运行的容器 使用 linux 命令\n   \n   * docker container ls -f status-exited | awk \'${print$1}\' | awk \'NR>1\' | xargs docker container rm\n\n * 批量启动容器 使用 docker 命令\n   \n   * docker container ls -q -f status=created 查找所有状态为 created 的容器 并获取其 ID\n   * docker container start $(docker container ls -q -f status=created)\n\n\n# 容器地址\n\ninspect -f \'{ {.Name}} - { {range .NetworkSettings.Networks} }{ {.IPAddress} }{ {end} }\' $(docker ps -aq)\n\n\n\n\n#\n\n\n#\n\n\n# 原理\n\n\n# CNM\n\nCNM Drivers\n\n\n# 容器内部网络空间是否与外面一致\n\n在容器外ip a 查看容器内所有ip:``docker container exec ${containerName} ip a\n\n\n#\n\n\n#\n\n\n# docker 微服务\n\n\n#\n\n----------------------------------------\n\n\n# Nginx 容器教程\n\n\n# HTTP 服务\n\nNginx 的最大作用，就是搭建一个 Web Server。有了容器，只要一行命令，服务器就架设好了，完全不用配置。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面命令下载并运行官方的 Nginx image，默认是最新版本（latest），当前是 1.13.9。如果本机安装过以前的版本，请删掉重新安装，因为只有 1.13.9 才开始支持 server push。 上面命令的各个参数含义如下。\n\n>  * -d：在后台运行\n>  * -p ：容器的80端口映射到127.0.0.1:8080\n>  * --rm：容器停止运行后，自动删除容器文件\n>  * --name：容器的名字为mynginx\n\n\n# 映射网页目录\n\n网页文件都在容器里，没法直接修改，显然很不方便。下一步就是让网页文件所在的目录/usr/share/nginx/html映射到本地。 首先，新建一个目录，并进入该目录。\n\n$ mkdir nginx-docker-demo\n$ cd nginx-docker-demo\n\n\n1\n2\n\n\n然后，新建一个html子目录。\n\n$ mkdir html\n\n\n1\n\n\n在这个子目录里面，放置一个index.html文件，内容如下。\n\n<h1>Hello World</h1>\n\n\n1\n\n\n接着，就可以把这个子目录html，映射到容器的网页文件目录/usr/share/nginx/html。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  --volume "$PWD/html":/usr/share/nginx/html \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n打开浏览器，访问 127.0.0.1:8080，应该就能看到 Hello World 了。\n\n\n# 使用的案例\n\n * 创建 mysql5.7\n   * docker run -p 33306:3306 -e MYSQL_ROOT_PASSWORD=qq164165005 --name eggmysql -d mysql:5.7\n\n\n# 在使用 docker 中遇到的问题&需求\n\n\n# 问题\n\n# Docker 启动时的报错汇总\n\n----------------------------------------\n\n * Failed to start Docker Application Container Engine.\n\n修改/etc/docker/daemon.json 这个文件\n\n"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]\n\n\n1\n\n\n----------------------------------------\n\n * docker.service failed.\n\n----------------------------------------\n\n * Failed to restart docker.service: Unit not found.\n\ndocker.service 启动失败：Unit not found 的原因及解决办法 删除/usr/lib/systemd/system/docker.service 的[UNIT]里包含的 docker.socket，然后 systemctl daemon-reload，最后 systemctl start docker.service，发现启动成功了。 类似情况 如果是类似的情况，缺少 docker.socket，但是新版本需要 docker.socket。有两种方法可以解决该问题:\n\n 1. 可以卸载 docker，再重新安装，即可出现 docker.socket。或者\n 2. 创建一个/usr/lib/systemd/system/docker.socket 文件，然后 systemctl daemon-reload，最后 systemctl start docker.service，即可启动成功。\n\n----------------------------------------\n\n# 当构建完镜像启动容器时失败\n\n * 在最后加上 sh -c "while true; do sleep 3600; done"\n\n * DockerFile 最后加入 ENTRYPOINT ["sh", "-c", " exec tail -f /dev/null"]防止容器启动就退出,  用这个命令一直前台阻塞\n\n * 删除未启动的容器 重新构建镜像\n\n * 进入容器docker exec [contianerID] -it /bin/sh\n\n查看文件类型 .sh 设置文件类型set ff="unix"\n\n# permission denied\n\n * sudo docker image ls\n\n * sudo goupadd docker\n\n * sudo gpasswd -a ${USER} docker\n\n * sudo service docker restart\n\n * logout 重新登录下\n\n# 运行 node 项目 自动退出\n\n运行容器的时候      自动进入项目命令行交互界面敲击\n\ndocker run -it pptr-image bash\n\n\n1\n\n\n\n# 需求收集\n\n# 容器中调用宿主机 docker 命令\n\nhttps://blog.csdn.net/nanhavezhi/article/details/103079056 在构建容器时加上 docker 的目录映射\n\n-v /run/docker.sock:/var/run/docker.sock  \\\n-v /bin/docker:/bin/docker\n\n\n1\n2\n\n\n# 在容器外执行某个容器内的某个命令操作\n\n命令如下 加上-c $cmd\n\nsudo docker exec -it $DOCKER_ID /bin/bash -c \'cd /packages/detectron && python tools/train.py\'\n\n\n1\n',normalizedContent:'前言: 因为写项目时需要用到mysql postgres``mongodb``redis一些数据库 不想再自己电脑上安装这些 使用率不是很多 就想到了 docker, 无论在服务器还时自己的电脑上, 感觉 docker 更符合我的场景\n\n\n# docker 安装及使用教程\n\n\n# 卸载 docker\n\n1.  先查询下 docker： yum list installed|grep docker ，然后执行卸载命令：yum -y remove docker.x86_64 docker-client.x86_64 docker-common.x86_64 2.  执行删除已存在的镜像和容器（以实际情况而定）： rm -rf /var/lib/docker\n\n# 删除相关组件\n# 如果使用种方式的话，需要罗列全部使安装过的组件；\nyum remove docker \\\n  docker-client \\\n  docker-client-latest \\\n  docker-common \\\n  docker-latest \\\n  docker-latest-logrotate \\\n  docker-logrotate \\\n  docker-selinux \\\n  docker-engine-selinux \\\n  docker-engine\n\n# 第二种方式，使用匹配符直接删除全部\n# 推荐使用第二种方式，无需罗列所有的安装组件\nyum remove docker docker-*\n# 删除注册的服务\nrm -rf /etc/systemd/system/docker.service.d\n# 删除docker工作目录\nrm -rf /var/lib/docker*\nrm -rf /var/run/docker*\n# 删除配置文件\n# 直接清空这个文件夹，下面所有配置都将被清空\nrm -rf /etc/docker\n#----------------------------#\n# /etc/docker/daemon.json    #\n# /ect/docker/key.json       #\n#----------------------------#\n# 查找残留的docker\nrpm -qa|grep docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 安装 docker\n\n# 第一步，需要安装一些依赖组件\n# 安装所需的软件包。yum-utils 提供了 yum-config-manager，\n# 并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。\nyum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n# 使用以下命令来获得稳定的仓库\n# 阿里云源地址速度相对比较快，这里是设置源地址为阿里云的镜像仓库地址。\n# yum-config-manager \\\n#    --add-repo \\\n#    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 安装 docker engine-community\nyum install -y docker-ce docker-ce-cli containerd.io\n# 将当前用户添加到docker用户组\nusermod -ag docker ${user}\n# docker默认未启动，需要手动重启docker服务\nsystemctl restart docker\nsystemctl start docker\nsystemctl stop docker\n# 切换当前会话到docker组\nnewgrp - docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# docker 镜像加速\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'eof\'\n{\n  "registry-mirrors": [ "https://fpr97nhz.mirror.aliyuncs.com" ]\n}\neof\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# docker 入门教程\n\n\n# image 文件\n\n# 列出本机的所有 image 文件。\n$ docker image ls\n\n# 删除 image 文件\n$ docker image rm [imagename]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 容器文件\n\n# 列出本机正在运行的容器\n$ docker container ls\n\n# 列出本机所有容器，包括终止运行的容器\n$ docker container ls --all\n\n\n1\n2\n3\n4\n5\n\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。\n\n$ docker container rm [containerid]\n\n\n1\n\n\n\n# 实例\n\n首先，运行下面的命令，将 image 文件从仓库抓取到本地。\n\n$ docker image pull library/hello-world\n\n\n1\n\n\n上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。 由于 docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。\n\n$ docker image pull hello-world\n\n\n1\n\n\n抓取成功以后，就可以在本机看到这个 image 文件了。\n\n$ docker image ls\n\n\n1\n\n\n现在，运行这个 image 文件。\n\n$ docker container run hello-world\n\n\n1\n\n\ndocker container run命令会从 image 文件，生成一个正在运行的容器实例。 注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。 如果运行成功，你会在屏幕上读到下面的输出。\n\n$ docker container run hello-world\nhello from docker!\nthis message shows that your installation appears to be working correctly.\n... ...\n\n\n1\n2\n3\n4\n\n\n输出这段提示以后，hello world就会停止运行，容器自动终止。 有些容器不会自动终止，因为提供的是服务。比如，安装运行 ubuntu 的 image，就可以在命令行体验 ubuntu 系统。\n\n$ docker container run -it ubuntu bash\n\n\n1\n\n\n对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。\n\n$ docker container kill [containid]\n\n\n1\n\n\n\n# dockerfile\n\n\n\n\n# gui 工具\n\n推荐使用 portainer 作为容器的 gui 管理方案。 推荐使用 portainer 作为容器的 gui 管理方案。\n\n> 官方地址：portainer.io/install.htm…\n\n安装命令\n\n> docker volume create portainer_data > docker run -d -p ``8000``:8000 -p ``9000``:9000 --name``=``portainer --restart``=``always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce\n\n\n# 常用命令汇总\n\n# 查看docker基础信息\ndocker info\n\n# 拉取镜像\ndocker pull <image>:<tag>\n\n# 移除容器\ndocker rm <containerid>\n\n# 移除镜像\ndocker rmi <imageid>\n\n# 启动、停止、重启容器\ndocker stop <containerid>\ndocker start <containerid>\ndocker restart <containerid>\ndocker run -itd --name <imagename> -p/-p<port>:<port> <imagename> /bin/bash\n\n# 查看docker容器\ndocker ps <-a>\n\n# 打包镜像\ndocker tag <path>/<name> <remotepath>/<name>\ndocker push <remotepath>/<name>\n\n# 登录docker\ndocker login <remoteip>\n\n# 进入容器内部\ndocker exec -it <containerid> /bin/bash\n\n# 从仓库搜索镜像\ndocker search <imagename>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n（1）docker container start 前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。\n\n$ docker container start [containerid]\n\n\n1\n\n\n（2）docker container stop 前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 sigkill 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 sigterm 信号，然后过一段时间再发出 sigkill 信号。\n\n$ bash container stop [containerid]\n\n\n1\n\n\n这两个信号的差别是，应用程序收到 sigterm 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 sigkill 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。 （3）docker container logs docker container logs命令用来查看 docker 容器的输出，即容器里面 shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。\n\n$ docker container logs [containerid]\n\n\n1\n\n\n（4）docker container exec docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 shell 执行命令了。\n\n$ docker container exec -it [containerid] /bin/bash\n\n\n1\n\n\nexit 容器停止退出 crtl+p+q 容器不停止退出 （5）docker container cp docker container cp命令用于从正在运行的 docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。\n\n$ docker container cp [containid]:[/path/to/file] .\n\n\n1\n\n\n\n# 命令行技巧\n\n# 删除所有镜像\n\ndocker rmi -f $(docker images -qa)\n\n# 停用全部运行中的容器\n\ndocker stop $(docker ps -q)\n\n# 删除所有的容器\n\ndocker rm $(docker ps -aq)\n\n# 停用并删除所有容器\n\ndocker stop $(docker ps -q) & docker rm $(docker ps -aq)\n\n * 删除所有为运行的容器 使用 linux 命令\n   \n   * docker container ls -f status-exited | awk \'${print$1}\' | awk \'nr>1\' | xargs docker container rm\n\n * 批量启动容器 使用 docker 命令\n   \n   * docker container ls -q -f status=created 查找所有状态为 created 的容器 并获取其 id\n   * docker container start $(docker container ls -q -f status=created)\n\n\n# 容器地址\n\ninspect -f \'{ {.name}} - { {range .networksettings.networks} }{ {.ipaddress} }{ {end} }\' $(docker ps -aq)\n\n\n\n\n#\n\n\n#\n\n\n# 原理\n\n\n# cnm\n\ncnm drivers\n\n\n# 容器内部网络空间是否与外面一致\n\n在容器外ip a 查看容器内所有ip:``docker container exec ${containername} ip a\n\n\n#\n\n\n#\n\n\n# docker 微服务\n\n\n#\n\n----------------------------------------\n\n\n# nginx 容器教程\n\n\n# http 服务\n\nnginx 的最大作用，就是搭建一个 web server。有了容器，只要一行命令，服务器就架设好了，完全不用配置。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面命令下载并运行官方的 nginx image，默认是最新版本（latest），当前是 1.13.9。如果本机安装过以前的版本，请删掉重新安装，因为只有 1.13.9 才开始支持 server push。 上面命令的各个参数含义如下。\n\n>  * -d：在后台运行\n>  * -p ：容器的80端口映射到127.0.0.1:8080\n>  * --rm：容器停止运行后，自动删除容器文件\n>  * --name：容器的名字为mynginx\n\n\n# 映射网页目录\n\n网页文件都在容器里，没法直接修改，显然很不方便。下一步就是让网页文件所在的目录/usr/share/nginx/html映射到本地。 首先，新建一个目录，并进入该目录。\n\n$ mkdir nginx-docker-demo\n$ cd nginx-docker-demo\n\n\n1\n2\n\n\n然后，新建一个html子目录。\n\n$ mkdir html\n\n\n1\n\n\n在这个子目录里面，放置一个index.html文件，内容如下。\n\n<h1>hello world</h1>\n\n\n1\n\n\n接着，就可以把这个子目录html，映射到容器的网页文件目录/usr/share/nginx/html。\n\n$ docker container run \\\n  -d \\\n  -p 127.0.0.1:8080:80 \\\n  --rm \\\n  --name mynginx \\\n  --volume "$pwd/html":/usr/share/nginx/html \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n打开浏览器，访问 127.0.0.1:8080，应该就能看到 hello world 了。\n\n\n# 使用的案例\n\n * 创建 mysql5.7\n   * docker run -p 33306:3306 -e mysql_root_password=qq164165005 --name eggmysql -d mysql:5.7\n\n\n# 在使用 docker 中遇到的问题&需求\n\n\n# 问题\n\n# docker 启动时的报错汇总\n\n----------------------------------------\n\n * failed to start docker application container engine.\n\n修改/etc/docker/daemon.json 这个文件\n\n"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]\n\n\n1\n\n\n----------------------------------------\n\n * docker.service failed.\n\n----------------------------------------\n\n * failed to restart docker.service: unit not found.\n\ndocker.service 启动失败：unit not found 的原因及解决办法 删除/usr/lib/systemd/system/docker.service 的[unit]里包含的 docker.socket，然后 systemctl daemon-reload，最后 systemctl start docker.service，发现启动成功了。 类似情况 如果是类似的情况，缺少 docker.socket，但是新版本需要 docker.socket。有两种方法可以解决该问题:\n\n 1. 可以卸载 docker，再重新安装，即可出现 docker.socket。或者\n 2. 创建一个/usr/lib/systemd/system/docker.socket 文件，然后 systemctl daemon-reload，最后 systemctl start docker.service，即可启动成功。\n\n----------------------------------------\n\n# 当构建完镜像启动容器时失败\n\n * 在最后加上 sh -c "while true; do sleep 3600; done"\n\n * dockerfile 最后加入 entrypoint ["sh", "-c", " exec tail -f /dev/null"]防止容器启动就退出,  用这个命令一直前台阻塞\n\n * 删除未启动的容器 重新构建镜像\n\n * 进入容器docker exec [contianerid] -it /bin/sh\n\n查看文件类型 .sh 设置文件类型set ff="unix"\n\n# permission denied\n\n * sudo docker image ls\n\n * sudo goupadd docker\n\n * sudo gpasswd -a ${user} docker\n\n * sudo service docker restart\n\n * logout 重新登录下\n\n# 运行 node 项目 自动退出\n\n运行容器的时候      自动进入项目命令行交互界面敲击\n\ndocker run -it pptr-image bash\n\n\n1\n\n\n\n# 需求收集\n\n# 容器中调用宿主机 docker 命令\n\nhttps://blog.csdn.net/nanhavezhi/article/details/103079056 在构建容器时加上 docker 的目录映射\n\n-v /run/docker.sock:/var/run/docker.sock  \\\n-v /bin/docker:/bin/docker\n\n\n1\n2\n\n\n# 在容器外执行某个容器内的某个命令操作\n\n命令如下 加上-c $cmd\n\nsudo docker exec -it $docker_id /bin/bash -c \'cd /packages/detectron && python tools/train.py\'\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"docker 清理",frontmatter:{title:"docker 清理",date:"2022-08-30T00:01:06.000Z",permalink:"/pages/a668af/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/2010010.docker%20%E6%B8%85%E7%90%86.html",relativePath:"20.后端&运维/2010.Docker/2010010.docker 清理.md",key:"v-0d9e81f2",path:"/pages/a668af/",headers:[{level:3,title:"清理docker磁盘占用",slug:"清理docker磁盘占用",normalizedTitle:"清理docker磁盘占用",charIndex:2},{level:3,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:147},{level:4,title:"docker/overlay2 占用大量磁盘空间",slug:"docker-overlay2-占用大量磁盘空间",normalizedTitle:"docker/overlay2 占用大量磁盘空间",charIndex:153}],headersStr:"清理docker磁盘占用 问题 docker/overlay2 占用大量磁盘空间",content:"# 清理docker磁盘占用\n\ndocker system df # 可查看 Docker 所占用的空间：\n\n整体清理 可以通过 docker system prune 进行一次空间清理：\n\ndocker system prune -a 该操作还会删除没有和运行中的容器有关联的镜像。\n\n\n# 问题\n\n# docker/overlay2 占用大量磁盘空间\n\n\n\n手动删除目录会导致docker 出问题，需要重启docker systemctl restart docker\n\n遇到更多问题看查看https://blog.csdn.net/m0_51971452/article/details/115920311",normalizedContent:"# 清理docker磁盘占用\n\ndocker system df # 可查看 docker 所占用的空间：\n\n整体清理 可以通过 docker system prune 进行一次空间清理：\n\ndocker system prune -a 该操作还会删除没有和运行中的容器有关联的镜像。\n\n\n# 问题\n\n# docker/overlay2 占用大量磁盘空间\n\n\n\n手动删除目录会导致docker 出问题，需要重启docker systemctl restart docker\n\n遇到更多问题看查看https://blog.csdn.net/m0_51971452/article/details/115920311",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"Docker docker-compose笔记",frontmatter:{title:"Docker docker-compose笔记",date:"2021-12-09T17:46:02.000Z",permalink:"/pages/daf659111/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/201002.Docker%20docker-compose%E7%AC%94%E8%AE%B0.html",relativePath:"20.后端&运维/2010.Docker/201002.Docker docker-compose笔记.md",key:"v-5af49bfd",path:"/pages/daf659111/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:2},{level:2,title:"桥",slug:"桥",normalizedTitle:"桥",charIndex:199},{level:2,title:"技巧",slug:"技巧",normalizedTitle:"技巧",charIndex:293},{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:475},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0}],headersStr:"安装 桥 技巧 常用命令 ",content:"# 安装\n\ncurl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s `-`uname -m` > /usr/local/bin/docker-compose\n\n\nchmod +x /usr/local/bin/docker-compose\n\n\n1\n2\n3\n4\n\n\n\n# 桥\n\ndocker network create --driver=bridge --subnet=172.3.0.0/16 sjs-net\n\ndocker network ls\n\n\n# 技巧\n\n * 快速删除容器\n   * 启动：docker-compose -f standalone-mysql-8.yaml up 对应的删除则是 docker-compose -f standalone-mysql-8.yaml down\n   * 启动：docker-compose up 对应的删除则是 docker-compose down\n\n\n\n\n# 常用命令\n\n\n#\n\n属性                       描述\ndocker-compose build     (构建yml中某个服务的镜像)\ndocker-compose ps        (查看已经启动的服务状态）\ndocker-compose kill      (停止某个服务）\ndocker-compose logs      (可以查看某个服务的log）\ndocker-compose port      (打印绑定的public port）\ndocker-compose pull      (pull服务镜像)\ndocker-compose up        (启动yml定义的所有服务）\ndocker-compose stop      (停止yml中定义的所有服务）\ndocker-compose start     (启动被停止的yml中的所有服务）\ndocker-compose kill      (强行停止yml中定义的所有服务）\ndocker-compose rm        （删除yml中定义的所有服务）\ndocker-compose restart   (重启yml中定义的所有服务）\ndocker-compose scale     (扩展某个服务的个数，可以向上或向下）\ndocker-compose version   （查看compose的版本）",normalizedContent:"# 安装\n\ncurl -l https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s `-`uname -m` > /usr/local/bin/docker-compose\n\n\nchmod +x /usr/local/bin/docker-compose\n\n\n1\n2\n3\n4\n\n\n\n# 桥\n\ndocker network create --driver=bridge --subnet=172.3.0.0/16 sjs-net\n\ndocker network ls\n\n\n# 技巧\n\n * 快速删除容器\n   * 启动：docker-compose -f standalone-mysql-8.yaml up 对应的删除则是 docker-compose -f standalone-mysql-8.yaml down\n   * 启动：docker-compose up 对应的删除则是 docker-compose down\n\n\n\n\n# 常用命令\n\n\n#\n\n属性                       描述\ndocker-compose build     (构建yml中某个服务的镜像)\ndocker-compose ps        (查看已经启动的服务状态）\ndocker-compose kill      (停止某个服务）\ndocker-compose logs      (可以查看某个服务的log）\ndocker-compose port      (打印绑定的public port）\ndocker-compose pull      (pull服务镜像)\ndocker-compose up        (启动yml定义的所有服务）\ndocker-compose stop      (停止yml中定义的所有服务）\ndocker-compose start     (启动被停止的yml中的所有服务）\ndocker-compose kill      (强行停止yml中定义的所有服务）\ndocker-compose rm        （删除yml中定义的所有服务）\ndocker-compose restart   (重启yml中定义的所有服务）\ndocker-compose scale     (扩展某个服务的个数，可以向上或向下）\ndocker-compose version   （查看compose的版本）",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"Docker 配置详解",frontmatter:{title:"Docker 配置详解",date:"2021-12-09T18:26:48.000Z",permalink:"/pages/2e1376/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/201003.Docker%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html",relativePath:"20.后端&运维/2010.Docker/201003.Docker 配置详解.md",key:"v-bcf39418",path:"/pages/2e1376/",headers:[{level:3,title:"Mac Docker Destop 客户端配置",slug:"mac-docker-destop-客户端配置",normalizedTitle:"mac docker destop 客户端配置",charIndex:138},{level:3,title:"更换镜像源",slug:"更换镜像源",normalizedTitle:"更换镜像源",charIndex:3401}],headersStr:"Mac Docker Destop 客户端配置 更换镜像源",content:' * 配置阿里云镜像\n\n打开https://cr.console.aliyun.com/cn-城市拼音/instances/mirrors\n\neg：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\n\n\n# Mac Docker Destop 客户端配置\n\n在 Docker Engine 中添加配置属性："registry-mirrors": ["https://******.mirror.aliyuncs.com"]\n\n\n\n/etc/docker/daemon.json\n\n{\n    "authorization-plugins": [],//访问授权插件\n    "data-root": "",//docker数据持久化存储的根目录\n    "dns": [],//DNS服务器\n    "dns-opts": [],//DNS配置选项，如端口等\n    "dns-search": [],//DNS搜索域名\n    "exec-opts": [],//执行选项\n    "exec-root": "",//执行状态的文件的根目录\n    "experimental": false,//是否开启试验性特性\n    "storage-driver": "",//存储驱动器\n    "storage-opts": [],//存储选项\n    "labels": [],//键值对式标记docker元数据\n    "live-restore": true,//dockerd挂掉是否保活容器（避免了docker服务异常而造成容器退出）\n    "log-driver": "",//容器日志的驱动器\n    "log-opts": {},//容器日志的选项\n    "mtu": 0,//设置容器网络MTU（最大传输单元）\n    "pidfile": "",//daemon PID文件的位置\n    "cluster-store": "",//集群存储系统的URL\n    "cluster-store-opts": {},//配置集群存储\n    "cluster-advertise": "",//对外的地址名称\n    "max-concurrent-downloads": 3,//设置每个pull进程的最大并发\n    "max-concurrent-uploads": 5,//设置每个push进程的最大并发\n    "default-shm-size": "64M",//设置默认共享内存的大小\n    "shutdown-timeout": 15,//设置关闭的超时时限(who?)\n    "debug": true,//开启调试模式\n    "hosts": [],//监听地址(?)\n    "log-level": "",//日志级别\n    "tls": true,//开启传输层安全协议TLS\n    "tlsverify": true,//开启输层安全协议并验证远程地址\n    "tlscacert": "",//CA签名文件路径\n    "tlscert": "",//TLS证书文件路径\n    "tlskey": "",//TLS密钥文件路径\n    "swarm-default-advertise-addr": "",//swarm对外地址\n    "api-cors-header": "",//设置CORS（跨域资源共享-Cross-origin resource sharing）头\n    "selinux-enabled": false,//开启selinux(用户、进程、应用、文件的强制访问控制)\n    "userns-remap": "",//给用户命名空间设置 用户/组\n    "group": "",//docker所在组\n    "cgroup-parent": "",//设置所有容器的cgroup的父类(?)\n    "default-ulimits": {},//设置所有容器的ulimit\n    "init": false,//容器执行初始化，来转发信号或控制(reap)进程\n    "init-path": "/usr/libexec/docker-init",//docker-init文件的路径\n    "ipv6": false,//开启IPV6网络\n    "iptables": false,//开启防火墙规则\n    "ip-forward": false,//开启net.ipv4.ip_forward\n    "ip-masq": false,//开启ip掩蔽(IP封包通过路由器或防火墙时重写源IP地址或目的IP地址的技术)\n    "userland-proxy": false,//用户空间代理\n    "userland-proxy-path": "/usr/libexec/docker-proxy",//用户空间代理路径\n    "ip": "0.0.0.0",//默认IP\n    "bridge": "",//将容器依附(attach)到桥接网络上的桥标识\n    "bip": "",//指定桥接ip\n    "fixed-cidr": "",//(ipv4)子网划分，即限制ip地址分配范围，用以控制容器所属网段实现容器间(同一主机或不同主机间)的网络访问\n    "fixed-cidr-v6": "",//（ipv6）子网划分\n    "default-gateway": "",//默认网关\n    "default-gateway-v6": "",//默认ipv6网关\n    "icc": false,//容器间通信\n    "raw-logs": false,//原始日志(无颜色、全时间戳)\n    "allow-nondistributable-artifacts": [],//不对外分发的产品提交的registry仓库\n    "registry-mirrors": [],//registry仓库镜像\n    "seccomp-profile": "",//seccomp配置文件\n    "insecure-registries": [],//非https的registry地址\n    "no-new-privileges": false,//禁止新优先级(??)\n    "default-runtime": "runc",//OCI联盟(The Open Container Initiative)默认运行时环境\n    "oom-score-adjust": -500,//内存溢出被杀死的优先级(-1000~1000)\n    "node-generic-resources": ["NVIDIA-GPU=UUID1", "NVIDIA-GPU=UUID2"],//对外公布的资源节点\n    "runtimes": {//运行时\n        "cc-runtime": {\n            "path": "/usr/bin/cc-runtime"\n        },\n        "custom": {\n            "path": "/usr/local/bin/my-runc-replacement",\n            "runtimeArgs": [\n                "--debug"\n            ]\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# 更换镜像源\n\n 1. 首先，修改配置文件 vi /etc/docker/daemon.json\n\n"registry-mirrors": ["https//registry.docker-cn.com"]\n\n\n1\n\n\n 2. 然后，加载Docker配置 systemctl daemon-reload\n\n 3. 最后，重启Docker服务就好了 systemctl restart docker.service\n\n附： 国内的几个优秀的Docker源\n\n * Docker中国区官方镜像 https://registry.docker-cn.com\n * 网易蜂巢 http://hub-mirror.c.163.com\n * 中国科技大学 https://docker.mirrors.ustc.edu.cn\n * 阿里镜像 xxx.mirror.aliyuncs.com （需要注册，xxx代表你的账号）\n * DaoCloud xxxx.m.daocloud.ip （需要注册，xxx代表你的账号）',normalizedContent:' * 配置阿里云镜像\n\n打开https://cr.console.aliyun.com/cn-城市拼音/instances/mirrors\n\neg：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\n\n\n# mac docker destop 客户端配置\n\n在 docker engine 中添加配置属性："registry-mirrors": ["https://******.mirror.aliyuncs.com"]\n\n\n\n/etc/docker/daemon.json\n\n{\n    "authorization-plugins": [],//访问授权插件\n    "data-root": "",//docker数据持久化存储的根目录\n    "dns": [],//dns服务器\n    "dns-opts": [],//dns配置选项，如端口等\n    "dns-search": [],//dns搜索域名\n    "exec-opts": [],//执行选项\n    "exec-root": "",//执行状态的文件的根目录\n    "experimental": false,//是否开启试验性特性\n    "storage-driver": "",//存储驱动器\n    "storage-opts": [],//存储选项\n    "labels": [],//键值对式标记docker元数据\n    "live-restore": true,//dockerd挂掉是否保活容器（避免了docker服务异常而造成容器退出）\n    "log-driver": "",//容器日志的驱动器\n    "log-opts": {},//容器日志的选项\n    "mtu": 0,//设置容器网络mtu（最大传输单元）\n    "pidfile": "",//daemon pid文件的位置\n    "cluster-store": "",//集群存储系统的url\n    "cluster-store-opts": {},//配置集群存储\n    "cluster-advertise": "",//对外的地址名称\n    "max-concurrent-downloads": 3,//设置每个pull进程的最大并发\n    "max-concurrent-uploads": 5,//设置每个push进程的最大并发\n    "default-shm-size": "64m",//设置默认共享内存的大小\n    "shutdown-timeout": 15,//设置关闭的超时时限(who?)\n    "debug": true,//开启调试模式\n    "hosts": [],//监听地址(?)\n    "log-level": "",//日志级别\n    "tls": true,//开启传输层安全协议tls\n    "tlsverify": true,//开启输层安全协议并验证远程地址\n    "tlscacert": "",//ca签名文件路径\n    "tlscert": "",//tls证书文件路径\n    "tlskey": "",//tls密钥文件路径\n    "swarm-default-advertise-addr": "",//swarm对外地址\n    "api-cors-header": "",//设置cors（跨域资源共享-cross-origin resource sharing）头\n    "selinux-enabled": false,//开启selinux(用户、进程、应用、文件的强制访问控制)\n    "userns-remap": "",//给用户命名空间设置 用户/组\n    "group": "",//docker所在组\n    "cgroup-parent": "",//设置所有容器的cgroup的父类(?)\n    "default-ulimits": {},//设置所有容器的ulimit\n    "init": false,//容器执行初始化，来转发信号或控制(reap)进程\n    "init-path": "/usr/libexec/docker-init",//docker-init文件的路径\n    "ipv6": false,//开启ipv6网络\n    "iptables": false,//开启防火墙规则\n    "ip-forward": false,//开启net.ipv4.ip_forward\n    "ip-masq": false,//开启ip掩蔽(ip封包通过路由器或防火墙时重写源ip地址或目的ip地址的技术)\n    "userland-proxy": false,//用户空间代理\n    "userland-proxy-path": "/usr/libexec/docker-proxy",//用户空间代理路径\n    "ip": "0.0.0.0",//默认ip\n    "bridge": "",//将容器依附(attach)到桥接网络上的桥标识\n    "bip": "",//指定桥接ip\n    "fixed-cidr": "",//(ipv4)子网划分，即限制ip地址分配范围，用以控制容器所属网段实现容器间(同一主机或不同主机间)的网络访问\n    "fixed-cidr-v6": "",//（ipv6）子网划分\n    "default-gateway": "",//默认网关\n    "default-gateway-v6": "",//默认ipv6网关\n    "icc": false,//容器间通信\n    "raw-logs": false,//原始日志(无颜色、全时间戳)\n    "allow-nondistributable-artifacts": [],//不对外分发的产品提交的registry仓库\n    "registry-mirrors": [],//registry仓库镜像\n    "seccomp-profile": "",//seccomp配置文件\n    "insecure-registries": [],//非https的registry地址\n    "no-new-privileges": false,//禁止新优先级(??)\n    "default-runtime": "runc",//oci联盟(the open container initiative)默认运行时环境\n    "oom-score-adjust": -500,//内存溢出被杀死的优先级(-1000~1000)\n    "node-generic-resources": ["nvidia-gpu=uuid1", "nvidia-gpu=uuid2"],//对外公布的资源节点\n    "runtimes": {//运行时\n        "cc-runtime": {\n            "path": "/usr/bin/cc-runtime"\n        },\n        "custom": {\n            "path": "/usr/local/bin/my-runc-replacement",\n            "runtimeargs": [\n                "--debug"\n            ]\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# 更换镜像源\n\n 1. 首先，修改配置文件 vi /etc/docker/daemon.json\n\n"registry-mirrors": ["https//registry.docker-cn.com"]\n\n\n1\n\n\n 2. 然后，加载docker配置 systemctl daemon-reload\n\n 3. 最后，重启docker服务就好了 systemctl restart docker.service\n\n附： 国内的几个优秀的docker源\n\n * docker中国区官方镜像 https://registry.docker-cn.com\n * 网易蜂巢 http://hub-mirror.c.163.com\n * 中国科技大学 https://docker.mirrors.ustc.edu.cn\n * 阿里镜像 xxx.mirror.aliyuncs.com （需要注册，xxx代表你的账号）\n * daocloud xxxx.m.daocloud.ip （需要注册，xxx代表你的账号）',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"docker for mac 踩坑记录",frontmatter:{title:"docker for mac 踩坑记录",date:"2022-11-24T22:18:53.000Z",permalink:"/pages/fbc78f/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/2010030.docker%20for%20mac%20%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html",relativePath:"20.后端&运维/2010.Docker/2010030.docker for mac 踩坑记录.md",key:"v-586c4455",path:"/pages/fbc78f/",headers:[{level:3,title:"Docker is stopping",slug:"docker-is-stopping",normalizedTitle:"docker is stopping",charIndex:5},{level:3,title:"docker 配置文件 dame.json",slug:"docker-配置文件-dame-json",normalizedTitle:"docker 配置文件 dame.json",charIndex:274}],headersStr:"Docker is stopping docker 配置文件 dame.json",content:' * # Docker is stopping\n   \n   在电脑运行一段时间 或者休眠 会停止服务\n   \n   /Applications/Docker.app/Contents/MacOS/com.docker.diagnose check\n   \n   \n   \n   \n   1\n   2\n   3\n   \n   \n   ~/Library/Group Containers/group.com.docker/settings.json\n   \n   useVirtualizationFramework": false\n\n\n * # docker 配置文件 dame.json\n   \n   * /System/Volumes/Data/Users/izhaong/.docker/daemon.json',normalizedContent:' * # docker is stopping\n   \n   在电脑运行一段时间 或者休眠 会停止服务\n   \n   /applications/docker.app/contents/macos/com.docker.diagnose check\n   \n   \n   \n   \n   1\n   2\n   3\n   \n   \n   ~/library/group containers/group.com.docker/settings.json\n   \n   usevirtualizationframework": false\n\n\n * # docker 配置文件 dame.json\n   \n   * /system/volumes/data/users/izhaong/.docker/daemon.json',charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"docker 网桥bridge创建",frontmatter:{title:"docker 网桥bridge创建",date:"2022-06-19T14:08:30.000Z",permalink:"/pages/fa752e/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/2010050.docker%20%E7%BD%91%E6%A1%A5bridge%E5%88%9B%E5%BB%BA.html",relativePath:"20.后端&运维/2010.Docker/2010050.docker 网桥bridge创建.md",key:"v-b7e1a42e",path:"/pages/fa752e/",headers:[{level:3,title:"创建网桥",slug:"创建网桥",normalizedTitle:"创建网桥",charIndex:2},{level:4,title:"查看新建的bridge",slug:"查看新建的bridge",normalizedTitle:"查看新建的bridge",charIndex:151},{level:3,title:"连接网桥",slug:"连接网桥",normalizedTitle:"连接网桥",charIndex:325},{level:3,title:"错误",slug:"错误",normalizedTitle:"错误",charIndex:476},{level:3,title:"mac",slug:"mac",normalizedTitle:"mac",charIndex:844},{level:4,title:"mac下docker从容器内部访问宿主机ip",slug:"mac下docker从容器内部访问宿主机ip",normalizedTitle:"mac下docker从容器内部访问宿主机ip",charIndex:851},{level:4,title:"从Mac连接到容器",slug:"从mac连接到容器",normalizedTitle:"从mac连接到容器",charIndex:1101}],headersStr:"创建网桥 查看新建的bridge 连接网桥 错误 mac mac下docker从容器内部访问宿主机ip 从Mac连接到容器",content:'# 创建网桥\n\ndocker network create testnet\n\n➜  frp docker network create testnet\nc5d16df825066dbcc760f6df56a723be332302863f70dcb7a43994dd092c7917\n\n\n1\n2\n\n\n# 查看新建的bridge\n\ndocker network ls\n\n➜  frp docker network ls\nNETWORK ID     NAME              DRIVER    SCOPE\n...\nc5d16df82506   testnet           bridge    local\n\n\n1\n2\n3\n4\n\n\n\n# 连接网桥\n\ndocker run -it --name <容器名> ---network <bridge> --network-alias <网络别名> <镜像名>\n\neg: docker run -it -name frpc --network frpnet --network-alias\n\n\n# 错误\n\n[root@test3 web-server]# docker-compose up Creating network "web-server_default" with the default driver ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule: (iptables failed: iptables --wait -t nat -I DOCKER -i br-11110b8ea34e -j RETURN: iptables: No chain/target/match by that name.\n\n原因是因为防火墙关闭之后需要重启docker服务。\n\n执行：\n\nservice docker restart\n\n\n1\n\n\n\n# mac\n\n# mac下docker从容器内部访问宿主机ip\n\n1、有网络的情况下： 通过 ifconfig 中找到自己的电脑 ip 然后直接访问即可\n\n2、没有网络的情况下： 通过 ifconfig 是找不到 ip 的，然后 需要找到一个宿主机的ip\n\n可以通过 域名 来访问：\n\ndocker.for.mac.host.internal 可以 ping 或者 用 telnet ip port 来测试一下\n\nhttps://dockerdocs.cn/docker-for-mac/networking/\n\n# 从Mac连接到容器\n\n港口转运工程localhost; --publish，-p或-P所有的工作。从Linux公开的端口将转发到主机。',normalizedContent:'# 创建网桥\n\ndocker network create testnet\n\n➜  frp docker network create testnet\nc5d16df825066dbcc760f6df56a723be332302863f70dcb7a43994dd092c7917\n\n\n1\n2\n\n\n# 查看新建的bridge\n\ndocker network ls\n\n➜  frp docker network ls\nnetwork id     name              driver    scope\n...\nc5d16df82506   testnet           bridge    local\n\n\n1\n2\n3\n4\n\n\n\n# 连接网桥\n\ndocker run -it --name <容器名> ---network <bridge> --network-alias <网络别名> <镜像名>\n\neg: docker run -it -name frpc --network frpnet --network-alias\n\n\n# 错误\n\n[root@test3 web-server]# docker-compose up creating network "web-server_default" with the default driver error: failed to setup ip tables: unable to enable skip dnat rule: (iptables failed: iptables --wait -t nat -i docker -i br-11110b8ea34e -j return: iptables: no chain/target/match by that name.\n\n原因是因为防火墙关闭之后需要重启docker服务。\n\n执行：\n\nservice docker restart\n\n\n1\n\n\n\n# mac\n\n# mac下docker从容器内部访问宿主机ip\n\n1、有网络的情况下： 通过 ifconfig 中找到自己的电脑 ip 然后直接访问即可\n\n2、没有网络的情况下： 通过 ifconfig 是找不到 ip 的，然后 需要找到一个宿主机的ip\n\n可以通过 域名 来访问：\n\ndocker.for.mac.host.internal 可以 ping 或者 用 telnet ip port 来测试一下\n\nhttps://dockerdocs.cn/docker-for-mac/networking/\n\n# 从mac连接到容器\n\n港口转运工程localhost; --publish，-p或-p所有的工作。从linux公开的端口将转发到主机。',charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"小镜像制作",frontmatter:{title:"小镜像制作",date:"2022-10-15T22:19:57.000Z",permalink:"/pages/5fa923/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/2010082.%E5%B0%8F%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C.html",relativePath:"20.后端&运维/2010.Docker/2010082.小镜像制作.md",key:"v-6a1d7036",path:"/pages/5fa923/",headersStr:null,content:"如果你使用到了centos，java，node，python等环境，可以试着使用小镜像\n\n\n\n可以看到node 和 node:slim 或者是 node:alpine 大小差距还是很大的\n\n小镜像推荐：\n\nAlpine;busybox;scratch,Debian\n\nGlibc: node.slim python.slim",normalizedContent:"如果你使用到了centos，java，node，python等环境，可以试着使用小镜像\n\n\n\n可以看到node 和 node:slim 或者是 node:alpine 大小差距还是很大的\n\n小镜像推荐：\n\nalpine;busybox;scratch,debian\n\nglibc: node.slim python.slim",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"mac本地挂载阿里云盘",frontmatter:{title:"mac本地挂载阿里云盘",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/b5165e/",categories:["后端&运维","Docker"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2010.Docker/201020.mac%E6%9C%AC%E5%9C%B0%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98.html",relativePath:"20.后端&运维/2010.Docker/201020.mac本地挂载阿里云盘.md",key:"v-ff0fc978",path:"/pages/b5165e/",headers:[{level:3,title:"容器运行",slug:"容器运行",normalizedTitle:"容器运行",charIndex:65},{level:2,title:"本地连接",slug:"本地连接",normalizedTitle:"本地连接",charIndex:1174}],headersStr:"容器运行 本地连接",content:'https://hub.docker.com/r/zx5253/webdav-aliyundriver\n\n\n# 如何使用\n\n\n# 容器运行\n\ndocker run -d --name=webdav-aliyundriver --restart=always -p 8080:8080  -v /etc/localtime:/etc/localtime -v /etc/aliyun-driver/:/etc/aliyun-driver/ -e TZ="Asia/Shanghai" -e ALIYUNDRIVE_REFRESH_TOKEN="your refreshToken" -e ALIYUNDRIVE_AUTH_PASSWORD="admin" -e JAVA_OPTS="-Xmx1g" zx5253/webdav-aliyundriver\n\n# /etc/aliyun-driver/ 挂载卷自动维护了最新的refreshToken，建议挂载\n# ALIYUNDRIVE_AUTH_PASSWORD 是admin账户的密码，建议修改\n# JAVA_OPTS 可修改最大内存占用，比如 -e JAVA_OPTS="-Xmx512m" 表示最大内存限制为512m\n\n\n1\n2\n3\n4\n5\n\n\n\n# 参数说明\n\n--aliyundrive.refresh-token\n    阿里云盘的refreshToken，获取方式见下文\n--server.port\n    非必填，服务器端口号，默认为8080\n--aliyundrive.auth.enable=true\n    是否开启WebDav账户验证，默认开启\n--aliyundrive.auth.user-name=admin\n    WebDav账户，默认admin\n--aliyundrive.auth.password=admin\n    WebDav密码，默认admin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 浏览器获取refreshToken方式\n\n 1. 先通过浏览器（建议chrome）打开阿里云盘官网并登录：https://www.aliyundrive.com/drive/\n 2. 登录成功后，按F12打开开发者工具，点击Application，点击Local Storage，点击 Local Storage下的 https://www.aliyundrive.com/，点击右边的token，此时可以看到里面的数据，其中就有refresh_token，把其值复制出来即可。（格式为小写字母和数字，不要复制双引号。例子：ca6bf2175d73as2188efg81f87e55f11）\n 3. 第二步有点繁琐，大家结合下面的截图就看懂了\n\n\n# 本地连接\n\n\n\nhttp://localhost:8080/\n\n按之前配置的账号密码：admin admin',normalizedContent:'https://hub.docker.com/r/zx5253/webdav-aliyundriver\n\n\n# 如何使用\n\n\n# 容器运行\n\ndocker run -d --name=webdav-aliyundriver --restart=always -p 8080:8080  -v /etc/localtime:/etc/localtime -v /etc/aliyun-driver/:/etc/aliyun-driver/ -e tz="asia/shanghai" -e aliyundrive_refresh_token="your refreshtoken" -e aliyundrive_auth_password="admin" -e java_opts="-xmx1g" zx5253/webdav-aliyundriver\n\n# /etc/aliyun-driver/ 挂载卷自动维护了最新的refreshtoken，建议挂载\n# aliyundrive_auth_password 是admin账户的密码，建议修改\n# java_opts 可修改最大内存占用，比如 -e java_opts="-xmx512m" 表示最大内存限制为512m\n\n\n1\n2\n3\n4\n5\n\n\n\n# 参数说明\n\n--aliyundrive.refresh-token\n    阿里云盘的refreshtoken，获取方式见下文\n--server.port\n    非必填，服务器端口号，默认为8080\n--aliyundrive.auth.enable=true\n    是否开启webdav账户验证，默认开启\n--aliyundrive.auth.user-name=admin\n    webdav账户，默认admin\n--aliyundrive.auth.password=admin\n    webdav密码，默认admin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 浏览器获取refreshtoken方式\n\n 1. 先通过浏览器（建议chrome）打开阿里云盘官网并登录：https://www.aliyundrive.com/drive/\n 2. 登录成功后，按f12打开开发者工具，点击application，点击local storage，点击 local storage下的 https://www.aliyundrive.com/，点击右边的token，此时可以看到里面的数据，其中就有refresh_token，把其值复制出来即可。（格式为小写字母和数字，不要复制双引号。例子：ca6bf2175d73as2188efg81f87e55f11）\n 3. 第二步有点繁琐，大家结合下面的截图就看懂了\n\n\n# 本地连接\n\n\n\nhttp://localhost:8080/\n\n按之前配置的账号密码：admin admin',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Jenkins之gitlab hook自动构建",frontmatter:{title:"Jenkins之gitlab hook自动构建",date:"2022-09-23T09:01:38.000Z",permalink:"/pages/99ab30/",categories:["后端&运维","Jenkins"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2015.Jenkins/2015050.Jenkins%E4%B9%8Bgitlab%20hook%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA.html",relativePath:"20.后端&运维/2015.Jenkins/2015050.Jenkins之gitlab hook自动构建.md",key:"v-7da55d0b",path:"/pages/99ab30/",headers:[{level:3,title:"免auth请求构建",slug:"免auth请求构建",normalizedTitle:"免auth请求构建",charIndex:2},{level:3,title:"钉钉通知",slug:"钉钉通知",normalizedTitle:"钉钉通知",charIndex:126}],headersStr:"免auth请求构建 钉钉通知",content:"# 免auth请求构建\n\n需要使用到插件Build Authorization Token Root\n\n地址：https://plugins.jenkins.io/build-token-root\n\n\n\ngitlab webhook 配置\n\n\n\n\n# 钉钉通知\n\n下载插件dingtalk\n\n地址：https://plugins.jenkins.io/dingding-notifications/",normalizedContent:"# 免auth请求构建\n\n需要使用到插件build authorization token root\n\n地址：https://plugins.jenkins.io/build-token-root\n\n\n\ngitlab webhook 配置\n\n\n\n\n# 钉钉通知\n\n下载插件dingtalk\n\n地址：https://plugins.jenkins.io/dingding-notifications/",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"认识nacos",frontmatter:{title:"认识nacos",date:"2021-12-09T16:31:17.000Z",permalink:"/pages/495502/",categories:["后端&运维","Nacos"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2020.Nacos/202001.%E8%AE%A4%E8%AF%86nacos.html",relativePath:"20.后端&运维/2020.Nacos/202001.认识nacos.md",key:"v-5e589024",path:"/pages/495502/",headers:[{level:2,title:"运行",slug:"运行",normalizedTitle:"运行",charIndex:2},{level:3,title:"使用docker快速运行一个nacos",slug:"使用docker快速运行一个nacos",normalizedTitle:"使用docker快速运行一个nacos",charIndex:9}],headersStr:"运行 使用docker快速运行一个nacos",content:"# 运行\n\n\n# 使用docker快速运行一个nacos\n\n> Nacos Server的docker镜像的build源码,以及Nacos server 在docker的单机和集群的运行例子",normalizedContent:"# 运行\n\n\n# 使用docker快速运行一个nacos\n\n> nacos server的docker镜像的build源码,以及nacos server 在docker的单机和集群的运行例子",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"初步学习Nacos",frontmatter:{title:"初步学习Nacos",date:"2023-09-17T15:36:09.000Z",permalink:"/pages/24d9e5/",categories:["后端&运维","Nacos"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2020.Nacos/2020010.%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0Nacos.html",relativePath:"20.后端&运维/2020.Nacos/2020010.初步学习Nacos.md",key:"v-c72003c0",path:"/pages/24d9e5/",headers:[{level:4,title:"Nacos简介",slug:"nacos简介",normalizedTitle:"nacos简介",charIndex:2},{level:4,title:"3.2.2 Nacos安装",slug:"_3-2-2-nacos安装",normalizedTitle:"3.2.2 nacos安装",charIndex:297},{level:4,title:"3.2.3 Nacos注册中心使用",slug:"_3-2-3-nacos注册中心使用",normalizedTitle:"3.2.3 nacos注册中心使用",charIndex:531},{level:4,title:"3.2.5 Nacos配置中心使用",slug:"_3-2-5-nacos配置中心使用",normalizedTitle:"3.2.5 nacos配置中心使用",charIndex:2026},{level:5,title:"3.2.5.1 基础使用",slug:"_3-2-5-1-基础使用",normalizedTitle:"3.2.5.1 基础使用",charIndex:2047},{level:5,title:"3.2.5.2 动态刷新",slug:"_3-2-5-2-动态刷新",normalizedTitle:"3.2.5.2 动态刷新",charIndex:3061},{level:5,title:"3.2.5.4 多环境支持",slug:"_3-2-5-4-多环境支持",normalizedTitle:"3.2.5.4 多环境支持",charIndex:3299},{level:5,title:"3.2.5.5 配置共享",slug:"_3-2-5-5-配置共享",normalizedTitle:"3.2.5.5 配置共享",charIndex:4393},{level:6,title:"3.2.5.5.1 不同环境下配置信息共享",slug:"_3-2-5-5-1-不同环境下配置信息共享",normalizedTitle:"3.2.5.5.1 不同环境下配置信息共享",charIndex:4409},{level:6,title:"3.2.5.5.2 不同应用间配置信息共享",slug:"_3-2-5-5-2-不同应用间配置信息共享",normalizedTitle:"3.2.5.5.2 不同应用间配置信息共享",charIndex:4683}],headersStr:"Nacos简介 3.2.2 Nacos安装 3.2.3 Nacos注册中心使用 3.2.5 Nacos配置中心使用 3.2.5.1 基础使用 3.2.5.2 动态刷新 3.2.5.4 多环境支持 3.2.5.5 配置共享 3.2.5.5.1 不同环境下配置信息共享 3.2.5.5.2 不同应用间配置信息共享",content:'# Nacos简介\n\n在 Spring Cloud Netflix 阶段我们采用 Eureka 做作为我们的服务注册与发现服务器，现利用 Spring Cloud Alibaba 提供的 Nacos 组件替代该方案。\n\nNacos 官网\n\nNacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\n\nNacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\nnacos注册中心工作流程\n\n\n\n# 3.2.2 Nacos安装\n\ndocker run --restart=always --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server\n\n\n1\n\n\n查看nacos日志信息：docker logs nacos\n\n访问地址\n\nhttp://ip:8848/nacos\n\nnacos的默认端口号是8848，珠穆朗玛峰的高度也是8848米呦！默认账号密码是nacos/nacos\n\n# 3.2.3 Nacos注册中心使用\n\n1）在资源中导入nacos演示工程\n\n2）顶级父工程添加依赖包\n\n\x3c!-- nacos注册中心依赖包 --\x3e\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n\x3c!-- 监控检查--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n2）nacos-web工程添加配置文件bootstrap.yml\n\nspring:\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.128:8848\nserver:\n  port: 9100\n#健康检查\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n3）nacos-web工程添加启动类\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class NacosWebApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(NacosWebApplication.class,args);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n4）nacos-web工程新建InfoController\n\n@RestController\npublic class InfoController {\n    @Value("${server.port}")\n    private String port;\n    @Value("${key:\'\'}")\n    private String key;\n    @GetMapping(value = "/echo/{message}")\n    public String echo(@PathVariable(value = "message") String message) {\n        return "Hello Nacos Discovery " + message + ", i am from port " + port;\n    }\n    @GetMapping(value = "/config")\n    public String config() {\n        return "Hello Nacos Config get "+key ;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n5）启动服务并查看效果\n\n6）修改端口，查看nacos集群支持\n\n# 3.2.5 Nacos配置中心使用\n\n# 3.2.5.1 基础使用\n\n1）顶级父工程添加依赖\n\n\x3c!-- nacos配置中心依赖包 --\x3e\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>c \n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n2）核心配置信息\n\n注意：\n    配置文件必须是bootstrap.properties或者bootstrap.yml，如果配置application.properties或者application.yml会导致加载不到配置.\n\n\n1\n2\n\n\nspring:\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.140:8848\n      config:\n        server-addr: 192.168.200.140:8848\n        file-extension: yml #指定文件扩展名，默认为properties\nserver:\n  port: 9100\n#全局健康检查\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n#日志\nlogging:\n  level:\n    org.springframework.web: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n新建配置\n\n配置文件名称 ： 默认和 spring.application.name一致\n\n文件后缀 ：默认是 properties\n\nnacos支持6种文件格式\n\n测试config接口\n\nhttp://127.0.0.1:9100/config\n\n@GetMapping(value = "/config")\npublic String config() {\n    return "Hello Nacos Config get "+key ;\n}\n\n\n1\n2\n3\n4\n\n\n# 3.2.5.2 动态刷新\n\nNacos Config Starter 默认为所有获取数据成功的 Nacos 的配置项添加了监听功能，在监听到服务端配置发生变化时会实时触发 org.springframework.cloud.context.refresh.ContextRefresher 的 refresh 方法 。\n\n如果需要对 Bean 进行动态刷新，参照 Spring 和 Spring Cloud 规范。推荐给类添加 @RefreshScope 进行自动刷新\n\n# 3.2.5.4 多环境支持\n\n我们在做项目开发的时候，可能会存在多种环境，并且每一种环境所设置的配置都是不同的，所以我们可能会在线上手工修改这些配置信息。同时 Spring 中为我们提供了 Profile 这个功能。我们只需要在启动的时候添加一个虚拟机参数，激活自己环境所要用的 Profile 就可以了。\n\n操作起来很简单，只需要为不同的环境编写专门的配置文件，如：application-dev.yml、application-prod.yml， 启动项目时只需要增加一个命令参数 --spring.profiles.active=环境名称 即可。\n\n测试环境 test\n\n开发环境 dev\n\n生产环境 prod\n\n支持不同环境配置\n\nnacos可以同时支持多环境配置。只需要在nacos配置中心中根据dataId进行区分即可。dataId 完整的拼接格式如下\n\n在 Nacos Config Starter 中，dataId 完整的拼接格式如下\n\n${prefix}-${spring.profiles.active}.${file-extension}\n\n\n1\n\n * prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。\n * spring.profiles.active 即为当前环境对应的 profile\n * file-extension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension来配置。 目前只支持 properties 类型。\n\n1）修改bootstrap.yml\n\nspring:\n  profiles:\n    active: dev #开发环境\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.140:8848\n      config:\n        server-addr: 192.168.200.140:8848\n        file-extension: yml #后缀\n        prefix: nacos-web  #前缀\nserver:\n  port: 9100\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n2）nacos中新增配置信息\n\n# 3.2.5.5 配置共享\n\n# 3.2.5.5.1 不同环境下配置信息共享\n\n在开发中，虽然可以在不同环境下使用不同的配置文件，但是有一些配置是通用的，需要在不同的环境下，都进行生效。\n\n 1. 当开发环境为：dev时。\n 2. 当开发环境为：test时。\n\n根据上述测试，可以发现，不同的开发环境下都会去加载nacos-web.yml，也就是没有指定特定环境的文件。那么对于通用配置就可以设置在这个文件中。\n\n更新nacos配置中心的nacos-web.yml。\n\nInfoController中获取该值\n\n环境为test：访问并获取结果\n\n环境为dev：访问并获取结果\n\n# 3.2.5.5.2 不同应用间配置信息共享\n\n在实际项目中，常常需要不同应用间配置共享。比如redis连接信息，很多服务都需要，那么就可以把这部分信息交给Nacos进行管理并且实现配置共享，从而实现配置的重用。\n\n1）Nacos中新建common.yml\n\n2）修改nacos-web工程配置文件，添加\n\nspring:\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.128:8848\n      config:\n        server-addr: 192.168.200.128:8848\n        file-extension: yml #指定文件扩展名，默认为properties\n        prefix: nacos-web\n        \n        \n        #添加共享配置的dataId,如多个使用逗号分隔，并且越靠后，优先级越高\n        #文件后缀名不能少，只支持yaml，yml，properies\n        shared-dataids: common.yml\n        #哪些共享配置支持动态刷新，如多个使用逗号分隔\n        refreshable-dataids: common.yml\n        \n        \n  profiles:\n    active: dev #开发环境\nserver:\n  port: 9100\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n#日志\nlogging:\n  level:\n    org.springframework.web: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n3）InfoController中获取该值\n\n4）导入demo工程\n\n5）Nacos中创建example工程对应配置文件\n\nweb工程访问结果如下：\n\nexample访问结果如下：\n\n * ',normalizedContent:'# nacos简介\n\n在 spring cloud netflix 阶段我们采用 eureka 做作为我们的服务注册与发现服务器，现利用 spring cloud alibaba 提供的 nacos 组件替代该方案。\n\nnacos 官网\n\nnacos 致力于帮助您发现、配置和管理微服务。nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\n\nnacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\nnacos注册中心工作流程\n\n\n\n# 3.2.2 nacos安装\n\ndocker run --restart=always --env mode=standalone --name nacos -d -p 8848:8848 nacos/nacos-server\n\n\n1\n\n\n查看nacos日志信息：docker logs nacos\n\n访问地址\n\nhttp://ip:8848/nacos\n\nnacos的默认端口号是8848，珠穆朗玛峰的高度也是8848米呦！默认账号密码是nacos/nacos\n\n# 3.2.3 nacos注册中心使用\n\n1）在资源中导入nacos演示工程\n\n2）顶级父工程添加依赖包\n\n\x3c!-- nacos注册中心依赖包 --\x3e\n<dependency>\n    <groupid>com.alibaba.cloud</groupid>\n    <artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n</dependency>\n\x3c!-- 监控检查--\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-actuator</artifactid>\n</dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n2）nacos-web工程添加配置文件bootstrap.yml\n\nspring:\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.128:8848\nserver:\n  port: 9100\n#健康检查\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n3）nacos-web工程添加启动类\n\n@springbootapplication\n@enablediscoveryclient\npublic class nacoswebapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(nacoswebapplication.class,args);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n4）nacos-web工程新建infocontroller\n\n@restcontroller\npublic class infocontroller {\n    @value("${server.port}")\n    private string port;\n    @value("${key:\'\'}")\n    private string key;\n    @getmapping(value = "/echo/{message}")\n    public string echo(@pathvariable(value = "message") string message) {\n        return "hello nacos discovery " + message + ", i am from port " + port;\n    }\n    @getmapping(value = "/config")\n    public string config() {\n        return "hello nacos config get "+key ;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n5）启动服务并查看效果\n\n6）修改端口，查看nacos集群支持\n\n# 3.2.5 nacos配置中心使用\n\n# 3.2.5.1 基础使用\n\n1）顶级父工程添加依赖\n\n\x3c!-- nacos配置中心依赖包 --\x3e\n<dependency>\n    <groupid>com.alibaba.cloud</groupid>\n    <artifactid>spring-cloud-starter-alibaba-nacos-config</artifactid>c \n</dependency>\n\n\n1\n2\n3\n4\n5\n\n\n2）核心配置信息\n\n注意：\n    配置文件必须是bootstrap.properties或者bootstrap.yml，如果配置application.properties或者application.yml会导致加载不到配置.\n\n\n1\n2\n\n\nspring:\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.140:8848\n      config:\n        server-addr: 192.168.200.140:8848\n        file-extension: yml #指定文件扩展名，默认为properties\nserver:\n  port: 9100\n#全局健康检查\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n#日志\nlogging:\n  level:\n    org.springframework.web: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n新建配置\n\n配置文件名称 ： 默认和 spring.application.name一致\n\n文件后缀 ：默认是 properties\n\nnacos支持6种文件格式\n\n测试config接口\n\nhttp://127.0.0.1:9100/config\n\n@getmapping(value = "/config")\npublic string config() {\n    return "hello nacos config get "+key ;\n}\n\n\n1\n2\n3\n4\n\n\n# 3.2.5.2 动态刷新\n\nnacos config starter 默认为所有获取数据成功的 nacos 的配置项添加了监听功能，在监听到服务端配置发生变化时会实时触发 org.springframework.cloud.context.refresh.contextrefresher 的 refresh 方法 。\n\n如果需要对 bean 进行动态刷新，参照 spring 和 spring cloud 规范。推荐给类添加 @refreshscope 进行自动刷新\n\n# 3.2.5.4 多环境支持\n\n我们在做项目开发的时候，可能会存在多种环境，并且每一种环境所设置的配置都是不同的，所以我们可能会在线上手工修改这些配置信息。同时 spring 中为我们提供了 profile 这个功能。我们只需要在启动的时候添加一个虚拟机参数，激活自己环境所要用的 profile 就可以了。\n\n操作起来很简单，只需要为不同的环境编写专门的配置文件，如：application-dev.yml、application-prod.yml， 启动项目时只需要增加一个命令参数 --spring.profiles.active=环境名称 即可。\n\n测试环境 test\n\n开发环境 dev\n\n生产环境 prod\n\n支持不同环境配置\n\nnacos可以同时支持多环境配置。只需要在nacos配置中心中根据dataid进行区分即可。dataid 完整的拼接格式如下\n\n在 nacos config starter 中，dataid 完整的拼接格式如下\n\n${prefix}-${spring.profiles.active}.${file-extension}\n\n\n1\n\n * prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。\n * spring.profiles.active 即为当前环境对应的 profile\n * file-extension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension来配置。 目前只支持 properties 类型。\n\n1）修改bootstrap.yml\n\nspring:\n  profiles:\n    active: dev #开发环境\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.140:8848\n      config:\n        server-addr: 192.168.200.140:8848\n        file-extension: yml #后缀\n        prefix: nacos-web  #前缀\nserver:\n  port: 9100\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n2）nacos中新增配置信息\n\n# 3.2.5.5 配置共享\n\n# 3.2.5.5.1 不同环境下配置信息共享\n\n在开发中，虽然可以在不同环境下使用不同的配置文件，但是有一些配置是通用的，需要在不同的环境下，都进行生效。\n\n 1. 当开发环境为：dev时。\n 2. 当开发环境为：test时。\n\n根据上述测试，可以发现，不同的开发环境下都会去加载nacos-web.yml，也就是没有指定特定环境的文件。那么对于通用配置就可以设置在这个文件中。\n\n更新nacos配置中心的nacos-web.yml。\n\ninfocontroller中获取该值\n\n环境为test：访问并获取结果\n\n环境为dev：访问并获取结果\n\n# 3.2.5.5.2 不同应用间配置信息共享\n\n在实际项目中，常常需要不同应用间配置共享。比如redis连接信息，很多服务都需要，那么就可以把这部分信息交给nacos进行管理并且实现配置共享，从而实现配置的重用。\n\n1）nacos中新建common.yml\n\n2）修改nacos-web工程配置文件，添加\n\nspring:\n  application:\n    name: nacos-web\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 192.168.200.128:8848\n      config:\n        server-addr: 192.168.200.128:8848\n        file-extension: yml #指定文件扩展名，默认为properties\n        prefix: nacos-web\n        \n        \n        #添加共享配置的dataid,如多个使用逗号分隔，并且越靠后，优先级越高\n        #文件后缀名不能少，只支持yaml，yml，properies\n        shared-dataids: common.yml\n        #哪些共享配置支持动态刷新，如多个使用逗号分隔\n        refreshable-dataids: common.yml\n        \n        \n  profiles:\n    active: dev #开发环境\nserver:\n  port: 9100\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n#日志\nlogging:\n  level:\n    org.springframework.web: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n3）infocontroller中获取该值\n\n4）导入demo工程\n\n5）nacos中创建example工程对应配置文件\n\nweb工程访问结果如下：\n\nexample访问结果如下：\n\n * ',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"redis 笔记",frontmatter:{title:"redis 笔记",date:"2021-12-09T17:55:27.000Z",permalink:"/pages/71ced0/",categories:["后端&运维","数据库"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2030.SQL/203001.redis%20%E7%AC%94%E8%AE%B0.html",relativePath:"20.后端&运维/2030.SQL/203001.redis 笔记.md",key:"v-91cef146",path:"/pages/71ced0/",headers:[{level:2,title:"基础",slug:"基础",normalizedTitle:"基础",charIndex:2},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:2,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:13},{level:3,title:"通用配置",slug:"通用配置",normalizedTitle:"通用配置",charIndex:22},{level:2,title:"安装使用",slug:"安装使用",normalizedTitle:"安装使用",charIndex:1647},{level:3,title:"使用docker docker-compose快速启动一个redis服务",slug:"使用docker-docker-compose快速启动一个redis服务",normalizedTitle:"使用docker docker-compose快速启动一个redis服务",charIndex:1656},{level:3,title:"测试连接",slug:"测试连接",normalizedTitle:"测试连接",charIndex:2108},{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:2371}],headersStr:"基础  配置文件 通用配置 安装使用 使用docker docker-compose快速启动一个redis服务 测试连接 常用命令",content:'# 基础\n\n\n#\n\n\n# 配置文件\n\n\n# 通用配置\n\n#引用其他配置文件\n# include /path/to/local.conf\n# include /path/to/other.conf\n#是否daemon运行no,yes\ndaemonize no\n#pid文件的位置\npidfile /tmp/redis.pid\n#开放的端口号\nport 6379\n#listen队列的长度\ntcp-backlog 511\n#绑定ip地址，多个ip用空格分隔\nbind 127.0.0.1\n#我没有用到\n# unixsocket /tmp/redis.sock\n# unixsocketperm 755\n#客户端空闲多少s后踢掉，0禁止\ntimeout 0\n#检测挂掉的连接，单位s，0禁止\ntcp-keepalive 0\n#日志的等级，debug,verbose,notice,warning\nloglevel notice\n#log文件的路径，为空的话直接显示在终端\nlogfile ""\n#是否使用系统logger，一直没有用过。\n# syslog-enabled no/\n# syslog-ident redis\n# syslog-facility local0\n#redis中有多少个数据库，默认即可\ndatabases 16\n \n#将redis内存数据序列化到磁盘的时间和频率\n#900s有1个key改变就会序列化，其他的读者可以自己看下\nsave 900 1\nsave 300 10\nsave 60 10000\n#序列化的时候是否停止写操作\nstop-writes-on-bgsave-error yes\n#序列化的数据是否压缩\nrdbcompression yes\n#序列化的数据是否校验其完整性\nrdbchecksum yes\n#序列化的文件名，只是文件不能带目录\ndbfilename redis.rdb\n#序列化文件的目录\ndir /tmp\n \n#以下是主从备份，我还没有使用到\n# slaveof <masterip> <masterport>\n# masterauth <master-password>\nslave-serve-stale-data yes\nslave-read-only yes\n# repl-ping-slave-period 10\n# repl-timeout 60\nrepl-disable-tcp-nodelay no\n# repl-backlog-size 1mb\n# repl-backlog-ttl 3600\nslave-priority 100\n# min-slaves-to-write 3\n# min-slaves-max-lag 10\n \n#客户端连接的密码\nrequirepass hello\n \n# rename-command CONFIG ""\n \n#限制客户端的数量\n# maxclients 10000\n#设置最大可用内存\n# maxmemory <bytes>\n#内存替换算法\n# maxmemory-policy volatile-lru\n# maxmemory-samples 3\n-----------------------------------\nredis配置文件解析\nhttps://blog.51cto.com/u_15064644/4099381\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# 安装使用\n\n\n# 使用docker docker-compose快速启动一个redis服务\n\nversion: \'3\'\nservices:\n  redis:\n    image: redis:latest\n    restart: always\n    container_name: redis\n    ports:\n      - "6379:6379"\n    volumes:\n      - ./conf/redis.conf:/etc/redis/redis.conf\n      - ./data:/data\n    environment:\n      - TZ=Asia/Shanghai\n      - LANG=en_US.UTF-8\n    command: redis-server --requirepass redispassword\n    privileged: true    #环境变量\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n\n\n# 测试连接\n\n进入容器\n\n# redis-cli\n127.0.0.1:6379> set mzc 1\n(error) NOAUTH Authentication required.\n\n127.0.0.1:6379> auth *******\nOK\n\n127.0.0.1:6379> set mzc 1\nOK\n127.0.0.1:6379> get mzc\n"1"\n127.0.0.1:6379>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n通过RDM连接可以看到内容，127.0.0.0:6379\n\n\n\n\n# 常用命令\n\nkeys * 列出所有缓存内容',normalizedContent:'# 基础\n\n\n#\n\n\n# 配置文件\n\n\n# 通用配置\n\n#引用其他配置文件\n# include /path/to/local.conf\n# include /path/to/other.conf\n#是否daemon运行no,yes\ndaemonize no\n#pid文件的位置\npidfile /tmp/redis.pid\n#开放的端口号\nport 6379\n#listen队列的长度\ntcp-backlog 511\n#绑定ip地址，多个ip用空格分隔\nbind 127.0.0.1\n#我没有用到\n# unixsocket /tmp/redis.sock\n# unixsocketperm 755\n#客户端空闲多少s后踢掉，0禁止\ntimeout 0\n#检测挂掉的连接，单位s，0禁止\ntcp-keepalive 0\n#日志的等级，debug,verbose,notice,warning\nloglevel notice\n#log文件的路径，为空的话直接显示在终端\nlogfile ""\n#是否使用系统logger，一直没有用过。\n# syslog-enabled no/\n# syslog-ident redis\n# syslog-facility local0\n#redis中有多少个数据库，默认即可\ndatabases 16\n \n#将redis内存数据序列化到磁盘的时间和频率\n#900s有1个key改变就会序列化，其他的读者可以自己看下\nsave 900 1\nsave 300 10\nsave 60 10000\n#序列化的时候是否停止写操作\nstop-writes-on-bgsave-error yes\n#序列化的数据是否压缩\nrdbcompression yes\n#序列化的数据是否校验其完整性\nrdbchecksum yes\n#序列化的文件名，只是文件不能带目录\ndbfilename redis.rdb\n#序列化文件的目录\ndir /tmp\n \n#以下是主从备份，我还没有使用到\n# slaveof <masterip> <masterport>\n# masterauth <master-password>\nslave-serve-stale-data yes\nslave-read-only yes\n# repl-ping-slave-period 10\n# repl-timeout 60\nrepl-disable-tcp-nodelay no\n# repl-backlog-size 1mb\n# repl-backlog-ttl 3600\nslave-priority 100\n# min-slaves-to-write 3\n# min-slaves-max-lag 10\n \n#客户端连接的密码\nrequirepass hello\n \n# rename-command config ""\n \n#限制客户端的数量\n# maxclients 10000\n#设置最大可用内存\n# maxmemory <bytes>\n#内存替换算法\n# maxmemory-policy volatile-lru\n# maxmemory-samples 3\n-----------------------------------\nredis配置文件解析\nhttps://blog.51cto.com/u_15064644/4099381\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# 安装使用\n\n\n# 使用docker docker-compose快速启动一个redis服务\n\nversion: \'3\'\nservices:\n  redis:\n    image: redis:latest\n    restart: always\n    container_name: redis\n    ports:\n      - "6379:6379"\n    volumes:\n      - ./conf/redis.conf:/etc/redis/redis.conf\n      - ./data:/data\n    environment:\n      - tz=asia/shanghai\n      - lang=en_us.utf-8\n    command: redis-server --requirepass redispassword\n    privileged: true    #环境变量\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n\n\n# 测试连接\n\n进入容器\n\n# redis-cli\n127.0.0.1:6379> set mzc 1\n(error) noauth authentication required.\n\n127.0.0.1:6379> auth *******\nok\n\n127.0.0.1:6379> set mzc 1\nok\n127.0.0.1:6379> get mzc\n"1"\n127.0.0.1:6379>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n通过rdm连接可以看到内容，127.0.0.0:6379\n\n\n\n\n# 常用命令\n\nkeys * 列出所有缓存内容',charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"MySQL 一套猛如虎操作",frontmatter:{title:"MySQL 一套猛如虎操作",date:"2021-12-24T18:21:42.000Z",permalink:"/pages/a43052/",categories:["后端&运维","数据库"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2030.SQL/203002.MySQL%20%E4%B8%80%E5%A5%97%E7%8C%9B%E5%A6%82%E8%99%8E%E6%93%8D%E4%BD%9C.html",relativePath:"20.后端&运维/2030.SQL/203002.MySQL 一套猛如虎操作.md",key:"v-707b90f2",path:"/pages/a43052/",headers:[{level:2,title:"使用docker-compose安装MySQL",slug:"使用docker-compose安装mysql",normalizedTitle:"使用docker-compose安装mysql",charIndex:2},{level:2,title:"使用docker安装MySQL",slug:"使用docker安装mysql",normalizedTitle:"使用docker安装mysql",charIndex:134},{level:2,title:"连接MySQL",slug:"连接mysql",normalizedTitle:"连接mysql",charIndex:676},{level:2,title:"DDL:操作数据库、表",slug:"ddl-操作数据库、表",normalizedTitle:"ddl:操作数据库、表",charIndex:790},{level:2,title:"DML：增删改表中数据",slug:"dml-增删改表中数据",normalizedTitle:"dml：增删改表中数据",charIndex:1401},{level:2,title:"多表查询练习",slug:"多表查询练习",normalizedTitle:"多表查询练习",charIndex:2056},{level:2,title:"删除操作",slug:"删除操作",normalizedTitle:"删除操作",charIndex:1911},{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:7177},{level:2,title:"汇总",slug:"汇总",normalizedTitle:"汇总",charIndex:7258},{level:3,title:"ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)",slug:"error-1045-28000-access-denied-for-user-root-localhost-using-password-no",normalizedTitle:"error 1045 (28000): access denied for user 'root'@'localhost' (using password: no)",charIndex:7265}],headersStr:"使用docker-compose安装MySQL 使用docker安装MySQL 连接MySQL DDL:操作数据库、表 DML：增删改表中数据 多表查询练习 删除操作 常用命令 汇总 ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)",content:"# 使用docker-compose安装MySQL\n\n📎docker-compose-mysql.rar\n\n * 上传至服务器\n\n * 解压\n\n * 当前目录运行docker-compose up -d\n\n * 就能得到root密码:root的mysql了\n\n\n# 使用docker安装MySQL\n\n使用Docker搭建MySQL服务\n\n镜像地址: https://hub.docker.com/_/mysql/\n\ndocker run -p 3306:3306 --name mysql_study \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\n-d mysql:5.7\n\n\n1\n2\n3\n4\n5\n6\n\n\n * -d：容器启动后，在后台运行。\n\n * --rm：容器终止运行后，自动删除容器文件。\n\n * -v：主机和容器的目录映射关系，\":\"前为主机目录，之后为容器目录\n\n * --name mysql_study：容器的名字叫做mysql_study\n\n * --e MYSQL_ROOT_PASSWORD=123456：向容器进程传入一个环境变量MYSQL_ROOT_PASSWORD，该变量会被用作 MySQL 的根密码。\n\n\n# 连接MySQL\n\n * 进入容器中\n\n * * docker container exec -it mysql_study /bin/bash\n\n * 登录连接\n\n * * mysql -u root -p123456\n\n\n# DDL:操作数据库、表\n\n * 创建数据库\n\n * * create database if not exists demo1 character set utf8;\n\n * 修改数据库的字符集\n\n * * alter database demo1 ``character set utf8mb4;\n\n * 查询所有数据库的名称:\n\n * * show databases;\n\n * 使用数据库\n\n * * 查询当前正在使用的数据库名称\n * * * select database();\n * * 使用数据库\n   * use demo1;\n\n----------------------------------------\n\n * 创建表\n\n# 创建部门表\nCREATE TABLE dept (\n  id INT PRIMARY KEY PRIMARY KEY, -- 部门id\n  dname VARCHAR(50), -- 部门名称\n  loc VARCHAR(50) -- 部门所在地\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\n * 查看表\n\n * * 查询某个数据库中所有的表名称\n * * * show tables;\n * * 查询表结构\n * * * desc dept;\n\n * 删除\n\n * * drop table dept;\n   * drop table if exists dept;\n\n\n# DML：增删改表中数据\n\n * 添加数据：\n\n * * 语法：\n * * * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);\n * * 注意：\n\n 1. 1. 1. 列名和值要一一对应。\n       2. 如果表名后，不定义列名，则默认给所有列添加值\n 2. 1. 1. 1. into 表名 values(值1,值2,...值n);\n 3. 1. 1. 除了数字类型，其他类型需要使用引号(单双都可以)引起来\n\nINSERT INTO dept(id,dname,loc) VALUES  \n(10,'教研部','北京'),\n(20,'学工部','上海'),\n(30,'销售部','广州'),\n(40,'财务部','深圳');\n\n\n1\n2\n3\n4\n5\n\n\n * 删除数据：\n\n * * 语法：\n * * * delete from 表名 [where 条件]\n * * 注意：\n\n 1. 1. 如果不加条件，则删除表中所有记录。\n    2. 如果要删除所有记录\n 2. 1. 1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作\n       2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。\n\n * 修改数据：\n\n * * 语法：\n * * * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];\n\n\n# 多表查询练习\n\n-- 部门表\nCREATE TABLE dept (\n  id INT PRIMARY KEY PRIMARY KEY COMMENT '部门id', -- 部门id\n  dname VARCHAR(50), -- 部门名称\n  loc VARCHAR(50) -- 部门所在地\n);\n\n-- 添加4个部门\nINSERT INTO dept(id,dname,loc) VALUES \n(10,'教研部','北京'),\n(20,'学工部','上海'),\n(30,'销售部','广州'),\n(40,'财务部','深圳');\n\n\n\n-- 职务表，职务名称，职务描述\nCREATE TABLE job (\n  id INT PRIMARY KEY,\n  jname VARCHAR(20),\n  description VARCHAR(50)\n);\n\n-- 添加4个职务\nINSERT INTO job (id, jname, description) VALUES\n(1, '董事长', '管理整个公司，接单'),\n(2, '经理', '管理部门员工'),\n(3, '销售员', '向客人推销产品'),\n(4, '文员', '使用办公软件');\n\n\n\n-- 员工表\nCREATE TABLE emp (\n  id INT PRIMARY KEY, -- 员工id\n  ename VARCHAR(50), -- 员工姓名\n  job_id INT, -- 职务id\n  mgr INT , -- 上级领导\n  joindate DATE, -- 入职日期\n  salary DECIMAL(7,2), -- 工资\n  bonus DECIMAL(7,2), -- 奖金\n  dept_id INT, -- 所在部门编号\n  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),\n  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)\n);\n\n-- 添加员工\nINSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES \n(1001,'孙悟空',4,1004,'2000-12-17','8000.00',NULL,20),\n(1002,'卢俊义',3,1006,'2001-02-20','16000.00','3000.00',30),\n(1003,'林冲',3,1006,'2001-02-22','12500.00','5000.00',30),\n(1004,'唐僧',2,1009,'2001-04-02','29750.00',NULL,20),\n(1005,'李逵',4,1006,'2001-09-28','12500.00','14000.00',30),\n(1006,'宋江',2,1009,'2001-05-01','28500.00',NULL,30),\n(1007,'刘备',2,1009,'2001-09-01','24500.00',NULL,10),\n(1008,'猪八戒',4,1004,'2007-04-19','30000.00',NULL,20),\n(1009,'罗贯中',1,NULL,'2001-11-17','50000.00',NULL,10),\n(1010,'吴用',3,1006,'2001-09-08','15000.00','0.00',30),\n(1011,'沙僧',4,1004,'2007-05-23','11000.00',NULL,20),\n(1012,'李逵',4,1006,'2001-12-03','9500.00',NULL,30),\n(1013,'小白龙',4,1004,'2001-12-03','30000.00',NULL,20),\n(1014,'关羽',4,1007,'2002-01-23','13000.00',NULL,10);\n\n\n\n-- 工资等级表\nCREATE TABLE salarygrade (\n  grade INT PRIMARY KEY,   -- 级别\n  losalary INT,  -- 最低工资\n  hisalary INT -- 最高工资\n);\n\n-- 添加5个工资等级\nINSERT INTO salarygrade(grade,losalary,hisalary) VALUES \n(1,7000,12000),\n(2,12010,14000),\n(3,14010,20000),\n(4,20010,30000),\n(5,30010,99990);\n\n-- 需求：\n\n-- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述\n/*\n  分析：\n    1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表\n    2.查询条件 emp.job_id = job.id\n\n*/\nSELECT \n  t1.`id`, -- 员工编号\n  t1.`ename`, -- 员工姓名\n  t1.`salary`,-- 工资\n  t2.`jname`, -- 职务名称\n  t2.`description` -- 职务描述\nFROM \n  emp t1, job t2\nWHERE \n  t1.`job_id` = t2.`id`;\n\n\n\n-- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置\n/*\n  分析：\n    1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept\n    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id\n*/\n\nSELECT \n  t1.`id`, -- 员工编号\n  t1.`ename`, -- 员工姓名\n  t1.`salary`,-- 工资\n  t2.`jname`, -- 职务名称\n  t2.`description`, -- 职务描述\n  t3.`dname`, -- 部门名称\n  t3.`loc` -- 部门位置\nFROM \n  emp t1, job t2,dept t3\nWHERE \n  t1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;\n\n-- 3.查询员工姓名，工资，工资等级\n/*\n  分析：\n    1.员工姓名，工资 emp  工资等级 salarygrade\n    2.条件 emp.salary >= salarygrade.losalary and emp.salary <= salarygrade.hisalary\n      emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary\n*/\nSELECT \n  t1.ename ,\n  t1.`salary`,\n  t2.*\nFROM emp t1, salarygrade t2\nWHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;\n\n\n\n-- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级\n/*\n  分析：\n    1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade\n    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary\n\n*/\nSELECT \n  t1.`ename`,\n  t1.`salary`,\n  t2.`jname`,\n  t2.`description`,\n  t3.`dname`,\n  t3.`loc`,\n  t4.`grade`\nFROM \n  emp t1,job t2,dept t3,salarygrade t4\nWHERE \n  t1.`job_id` = t2.`id` \n  AND t1.`dept_id` = t3.`id`\n  AND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;\n\n\n\n-- 5.查询出部门编号、部门名称、部门位置、部门人数\n\n/*\n  分析：\n    1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表\n    2.使用分组查询。按照emp.dept_id完成分组，查询count(id)\n    3.使用子查询将第2步的查询结果和dept表进行关联查询\n\n*/\nSELECT \n  t1.`id`,t1.`dname`,t1.`loc` , t2.total\nFROM \n  dept t1,\n  (SELECT\n    dept_id,COUNT(id) total\n  FROM \n    emp\n  GROUP BY dept_id) t2\nWHERE t1.`id` = t2.dept_id;\n\n\n-- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询\n\n/*\n  分析：\n    1.姓名 emp， 直接上级的姓名 emp\n      * emp表的id 和 mgr 是自关联\n    2.条件 emp.id = emp.mgr\n    3.查询左表的所有数据，和 交集数据\n      * 使用左外连接查询\n\n*/\n/*\nselect\n  t1.ename,\n  t1.mgr,\n  t2.`id`,\n  t2.ename\nfrom emp t1, emp t2\nwhere t1.mgr = t2.`id`;\n\n*/\n\nSELECT \n  t1.ename,\n  t1.mgr,\n  t2.`id`,\n  t2.`ename`\nFROM emp t1\nLEFT JOIN emp t2\nON t1.`mgr` = t2.`id`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n\n\n\n# 删除操作\n\n\n# 常用命令\n\n * 停止并删除mysql容器\n\ndocker stop mysql_study && docker rm mysql_study\n\n\n1\n\n\n\n# 汇总\n\n\n# ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n\n重新安装",normalizedContent:"# 使用docker-compose安装mysql\n\n📎docker-compose-mysql.rar\n\n * 上传至服务器\n\n * 解压\n\n * 当前目录运行docker-compose up -d\n\n * 就能得到root密码:root的mysql了\n\n\n# 使用docker安装mysql\n\n使用docker搭建mysql服务\n\n镜像地址: https://hub.docker.com/_/mysql/\n\ndocker run -p 3306:3306 --name mysql_study \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e mysql_root_password=123456 \\\n-d mysql:5.7\n\n\n1\n2\n3\n4\n5\n6\n\n\n * -d：容器启动后，在后台运行。\n\n * --rm：容器终止运行后，自动删除容器文件。\n\n * -v：主机和容器的目录映射关系，\":\"前为主机目录，之后为容器目录\n\n * --name mysql_study：容器的名字叫做mysql_study\n\n * --e mysql_root_password=123456：向容器进程传入一个环境变量mysql_root_password，该变量会被用作 mysql 的根密码。\n\n\n# 连接mysql\n\n * 进入容器中\n\n * * docker container exec -it mysql_study /bin/bash\n\n * 登录连接\n\n * * mysql -u root -p123456\n\n\n# ddl:操作数据库、表\n\n * 创建数据库\n\n * * create database if not exists demo1 character set utf8;\n\n * 修改数据库的字符集\n\n * * alter database demo1 ``character set utf8mb4;\n\n * 查询所有数据库的名称:\n\n * * show databases;\n\n * 使用数据库\n\n * * 查询当前正在使用的数据库名称\n * * * select database();\n * * 使用数据库\n   * use demo1;\n\n----------------------------------------\n\n * 创建表\n\n# 创建部门表\ncreate table dept (\n  id int primary key primary key, -- 部门id\n  dname varchar(50), -- 部门名称\n  loc varchar(50) -- 部门所在地\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\n * 查看表\n\n * * 查询某个数据库中所有的表名称\n * * * show tables;\n * * 查询表结构\n * * * desc dept;\n\n * 删除\n\n * * drop table dept;\n   * drop table if exists dept;\n\n\n# dml：增删改表中数据\n\n * 添加数据：\n\n * * 语法：\n * * * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);\n * * 注意：\n\n 1. 1. 1. 列名和值要一一对应。\n       2. 如果表名后，不定义列名，则默认给所有列添加值\n 2. 1. 1. 1. into 表名 values(值1,值2,...值n);\n 3. 1. 1. 除了数字类型，其他类型需要使用引号(单双都可以)引起来\n\ninsert into dept(id,dname,loc) values  \n(10,'教研部','北京'),\n(20,'学工部','上海'),\n(30,'销售部','广州'),\n(40,'财务部','深圳');\n\n\n1\n2\n3\n4\n5\n\n\n * 删除数据：\n\n * * 语法：\n * * * delete from 表名 [where 条件]\n * * 注意：\n\n 1. 1. 如果不加条件，则删除表中所有记录。\n    2. 如果要删除所有记录\n 2. 1. 1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作\n       2. truncate table 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。\n\n * 修改数据：\n\n * * 语法：\n * * * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];\n\n\n# 多表查询练习\n\n-- 部门表\ncreate table dept (\n  id int primary key primary key comment '部门id', -- 部门id\n  dname varchar(50), -- 部门名称\n  loc varchar(50) -- 部门所在地\n);\n\n-- 添加4个部门\ninsert into dept(id,dname,loc) values \n(10,'教研部','北京'),\n(20,'学工部','上海'),\n(30,'销售部','广州'),\n(40,'财务部','深圳');\n\n\n\n-- 职务表，职务名称，职务描述\ncreate table job (\n  id int primary key,\n  jname varchar(20),\n  description varchar(50)\n);\n\n-- 添加4个职务\ninsert into job (id, jname, description) values\n(1, '董事长', '管理整个公司，接单'),\n(2, '经理', '管理部门员工'),\n(3, '销售员', '向客人推销产品'),\n(4, '文员', '使用办公软件');\n\n\n\n-- 员工表\ncreate table emp (\n  id int primary key, -- 员工id\n  ename varchar(50), -- 员工姓名\n  job_id int, -- 职务id\n  mgr int , -- 上级领导\n  joindate date, -- 入职日期\n  salary decimal(7,2), -- 工资\n  bonus decimal(7,2), -- 奖金\n  dept_id int, -- 所在部门编号\n  constraint emp_jobid_ref_job_id_fk foreign key (job_id) references job (id),\n  constraint emp_deptid_ref_dept_id_fk foreign key (dept_id) references dept (id)\n);\n\n-- 添加员工\ninsert into emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) values \n(1001,'孙悟空',4,1004,'2000-12-17','8000.00',null,20),\n(1002,'卢俊义',3,1006,'2001-02-20','16000.00','3000.00',30),\n(1003,'林冲',3,1006,'2001-02-22','12500.00','5000.00',30),\n(1004,'唐僧',2,1009,'2001-04-02','29750.00',null,20),\n(1005,'李逵',4,1006,'2001-09-28','12500.00','14000.00',30),\n(1006,'宋江',2,1009,'2001-05-01','28500.00',null,30),\n(1007,'刘备',2,1009,'2001-09-01','24500.00',null,10),\n(1008,'猪八戒',4,1004,'2007-04-19','30000.00',null,20),\n(1009,'罗贯中',1,null,'2001-11-17','50000.00',null,10),\n(1010,'吴用',3,1006,'2001-09-08','15000.00','0.00',30),\n(1011,'沙僧',4,1004,'2007-05-23','11000.00',null,20),\n(1012,'李逵',4,1006,'2001-12-03','9500.00',null,30),\n(1013,'小白龙',4,1004,'2001-12-03','30000.00',null,20),\n(1014,'关羽',4,1007,'2002-01-23','13000.00',null,10);\n\n\n\n-- 工资等级表\ncreate table salarygrade (\n  grade int primary key,   -- 级别\n  losalary int,  -- 最低工资\n  hisalary int -- 最高工资\n);\n\n-- 添加5个工资等级\ninsert into salarygrade(grade,losalary,hisalary) values \n(1,7000,12000),\n(2,12010,14000),\n(3,14010,20000),\n(4,20010,30000),\n(5,30010,99990);\n\n-- 需求：\n\n-- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述\n/*\n  分析：\n    1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表\n    2.查询条件 emp.job_id = job.id\n\n*/\nselect \n  t1.`id`, -- 员工编号\n  t1.`ename`, -- 员工姓名\n  t1.`salary`,-- 工资\n  t2.`jname`, -- 职务名称\n  t2.`description` -- 职务描述\nfrom \n  emp t1, job t2\nwhere \n  t1.`job_id` = t2.`id`;\n\n\n\n-- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置\n/*\n  分析：\n    1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept\n    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id\n*/\n\nselect \n  t1.`id`, -- 员工编号\n  t1.`ename`, -- 员工姓名\n  t1.`salary`,-- 工资\n  t2.`jname`, -- 职务名称\n  t2.`description`, -- 职务描述\n  t3.`dname`, -- 部门名称\n  t3.`loc` -- 部门位置\nfrom \n  emp t1, job t2,dept t3\nwhere \n  t1.`job_id` = t2.`id` and t1.`dept_id` = t3.`id`;\n\n-- 3.查询员工姓名，工资，工资等级\n/*\n  分析：\n    1.员工姓名，工资 emp  工资等级 salarygrade\n    2.条件 emp.salary >= salarygrade.losalary and emp.salary <= salarygrade.hisalary\n      emp.salary between salarygrade.losalary and salarygrade.hisalary\n*/\nselect \n  t1.ename ,\n  t1.`salary`,\n  t2.*\nfrom emp t1, salarygrade t2\nwhere t1.`salary` between t2.`losalary` and t2.`hisalary`;\n\n\n\n-- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级\n/*\n  分析：\n    1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade\n    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary between salarygrade.losalary and salarygrade.hisalary\n\n*/\nselect \n  t1.`ename`,\n  t1.`salary`,\n  t2.`jname`,\n  t2.`description`,\n  t3.`dname`,\n  t3.`loc`,\n  t4.`grade`\nfrom \n  emp t1,job t2,dept t3,salarygrade t4\nwhere \n  t1.`job_id` = t2.`id` \n  and t1.`dept_id` = t3.`id`\n  and t1.`salary` between t4.`losalary` and t4.`hisalary`;\n\n\n\n-- 5.查询出部门编号、部门名称、部门位置、部门人数\n\n/*\n  分析：\n    1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表\n    2.使用分组查询。按照emp.dept_id完成分组，查询count(id)\n    3.使用子查询将第2步的查询结果和dept表进行关联查询\n\n*/\nselect \n  t1.`id`,t1.`dname`,t1.`loc` , t2.total\nfrom \n  dept t1,\n  (select\n    dept_id,count(id) total\n  from \n    emp\n  group by dept_id) t2\nwhere t1.`id` = t2.dept_id;\n\n\n-- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询\n\n/*\n  分析：\n    1.姓名 emp， 直接上级的姓名 emp\n      * emp表的id 和 mgr 是自关联\n    2.条件 emp.id = emp.mgr\n    3.查询左表的所有数据，和 交集数据\n      * 使用左外连接查询\n\n*/\n/*\nselect\n  t1.ename,\n  t1.mgr,\n  t2.`id`,\n  t2.ename\nfrom emp t1, emp t2\nwhere t1.mgr = t2.`id`;\n\n*/\n\nselect \n  t1.ename,\n  t1.mgr,\n  t2.`id`,\n  t2.`ename`\nfrom emp t1\nleft join emp t2\non t1.`mgr` = t2.`id`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n\n\n\n# 删除操作\n\n\n# 常用命令\n\n * 停止并删除mysql容器\n\ndocker stop mysql_study && docker rm mysql_study\n\n\n1\n\n\n\n# 汇总\n\n\n# error 1045 (28000): access denied for user 'root'@'localhost' (using password: no)\n\n重新安装",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"mysql 查询",frontmatter:{title:"mysql 查询",date:"2020-10-25T18:01:32.000Z",permalink:"/pages/b2f8a9/",categories:["后端&运维","数据库"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2030.SQL/2030020.mysql%20%E6%9F%A5%E8%AF%A2.html",relativePath:"20.后端&运维/2030.SQL/2030020.mysql 查询.md",key:"v-43e94077",path:"/pages/b2f8a9/",headers:[{level:3,title:"表单符号注意⚠️",slug:"表单符号注意⚠️",normalizedTitle:"表单符号注意⚠️",charIndex:2},{level:4,title:"查询结果去重",slug:"查询结果去重",normalizedTitle:"查询结果去重",charIndex:37},{level:4,title:"查询结果限制返回行数",slug:"查询结果限制返回行数",normalizedTitle:"查询结果限制返回行数",charIndex:812},{level:4,title:"用where过滤空值练习",slug:"用where过滤空值练习",normalizedTitle:"用where过滤空值练习",charIndex:1468},{level:4,title:"Where in 和Not in",slug:"where-in-和not-in",normalizedTitle:"where in 和not in",charIndex:1711},{level:4,title:"字符匹配",slug:"字符匹配",normalizedTitle:"字符匹配",charIndex:1878},{level:4,title:"计算男生人数以及平均GPA",slug:"计算男生人数以及平均gpa",normalizedTitle:"计算男生人数以及平均gpa",charIndex:2763},{level:4,title:"分组过滤练习题",slug:"分组过滤练习题",normalizedTitle:"分组过滤练习题",charIndex:3258},{level:5,title:"完整代码：",slug:"完整代码",normalizedTitle:"完整代码：",charIndex:3603}],headersStr:"表单符号注意⚠️ 查询结果去重 查询结果限制返回行数 用where过滤空值练习 Where in 和Not in 字符匹配 计算男生人数以及平均GPA 分组过滤练习题 完整代码：",content:"# 表单符号注意⚠️\n\n中文使用双引号 \"\" ；英语使用单引号''\n\n# 查询结果去重\n\n输入：\ndrop table if exists user_profile;\nCREATE TABLE `user_profile` (\n`id` int NOT NULL,\n`device_id` int NOT NULL,\n`gender` varchar(14) NOT NULL,\n`age` int ,\n`university` varchar(32) NOT NULL,\n`province` varchar(32)  NOT NULL);\nINSERT INTO user_profile VALUES(1,2138,'male',21,'北京大学','BeiJing');\nINSERT INTO user_profile VALUES(2,3214,'male',null,'复旦大学','Shanghai');\nINSERT INTO user_profile VALUES(3,6543,'female',20,'北京大学','BeiJing');\nINSERT INTO user_profile VALUES(4,2315,'female',23,'浙江大学','ZheJiang');\nINSERT INTO user_profile VALUES(5,5432,'male',25,'山东大学','Shandong');\n\n输出：\n北京大学\n复旦大学\n浙江大学\n山东大学\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * select distinct university from user_profile;\n * select university from user_profile group by university;\n\n# 查询结果限制返回行数\n\nselect device_id from user_profile limit 0,2---运行效率更高\n\nselect device_id from user_profile limit 2 ---运行效率低\n\n也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量\n\nselect device_id from user_profile limit 2 offset 0 // 跳过0条，从第一条数据开始取，取两条数据 ---运行效率中\n\n使用LIMIT限制结果集\n\nLIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。 LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。 如果只给定一个参数，它表示返回最大的记录行数目。 如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。 为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1。 初始记录行的偏移量是 0(而不是 1)。\n\n例5.检索记录行 6-10\n\nSELECT` `* ``FROM` `table` `LIMIT 5,5\n\n\n1\n\n\n例6.检索记录行 11-last\n\nSELECT` `* ``FROM` `table` `LIMIT 10,-1\n\n\n1\n\n\n例7.检索前 5 个记录行\n\nSELECT` `* ``FROM` `table` `LIMIT 5\n\n\n1\n\n\n# 用where过滤空值练习\n\nSELECT device_id,gender,age,university FROM user_profile where age IS NOT NULL;\n\n\n1\n\n\n查询NULL时，不能使用比较运算符(=或者< >)，需要使用IS NULL运算符或者IS NOT NULL运算符。\n\nNULL要大写\n\nselect device_id,gender,age,university from user_profile where age !=''\n\n# Where in 和Not in\n\n题目：现在运营想要找到学校为北大、复旦和山大的同学进行调研，请你取出相关数据。\n\nselect device_id,gender,age,university,gpa from user_profile where university in (\"北京大学\", \"复旦大学\",\"山东大学\")\n\n# 字符匹配\n\n一般形式为：\n\n列名 [NOT ] LIKE\n\n匹配串中可包含如下四种通配符： _：匹配任意一个字符； %：匹配0个或多个字符； [ ]：匹配[ ]中的任意一个字符(若要比较的字符是连续的，则可以用连字符“-”表 达 )；\n\n[^ ]：不匹配[ ]中的任意一个字符。\n\n例23．查询学生表中姓‘张’的学生的详细信息。\n\nSELECT` `* ``FROM` `学生表 ``WHERE` `姓名 ``LIKE` `‘张%’\n\n\n1\n\n\n例24．查询姓“张”且名字是3个字的学生姓名。\n\nSELECT` `* ``FROM` `学生表 ``WHERE` `姓名 ``LIKE` `'张__’\n\n\n1\n\n\n如果把姓名列的类型改为nchar(20)，在SQL Server 2012中执行没有结果。原因是姓名列的类型是char(20)，当姓名少于20个汉字时，系统在存储这些数据时自动在后边补空格，空格作为一个字符，也参加LIKE的比较。可以用rtrim()去掉右空格。\n\nSELECT` `* ``FROM` `学生表 ``WHERE` `rtrim(姓名) ``LIKE` `'张__'\n\n\n1\n\n\n例25.查询学生表中姓‘张’、姓‘李’和姓‘刘’的学生的情况。\n\nSELECT` `* ``FROM` `学生表 ``WHERE` `姓名 ``LIKE` `'[张李刘]%’\n\n\n1\n\n\n例26.查询学生表表中名字的第2个字为“小”或“大”的学生的姓名和学号。\n\nSELECT` `姓名,学号 ``FROM` `学生表 ``WHERE` `姓名 ``LIKE` `'_[小大]%'\n\n\n1\n\n\n例27.查询学生表中所有不姓“刘”的学生。\n\nSELECT` `姓名 ``FROM` `学生 ``WHERE` `姓名 ``NOT` `LIKE` `'刘%’\n\n\n1\n\n\n例28.从学生表表中查询学号的最后一位不是2、3、5的学生信息。\n\nSELECT` `* ``FROM` `学生表 ``WHERE` `学号 ``LIKE` `'%[^235]'\n\n\n1\n\n\n# 计算男生人数以及平均GPA\n\n精华题解\n\n发表于 2021-08-31 18:03\n\n题意明确：题目要求得到『男性用户有多少人』以及『他们的平均gpa是多少』。\n\n----------------------------------------\n\n问题分解：\n\n 1. 限定条件为 男性用户；\n 2. 有多少人，明显是计数，count函数；\n 3. 平均gpa，求平均值用avg函数；\n\n----------------------------------------\n\n细节问题：根据输出示例，有两个问题需要注意：\n\n 1. 表头重命名，用as语法\n 2. 浮点数的平均值可能小数点位数很多，按照示例保存一位小数，用round函数\n\n----------------------------------------\n\n因此完整代码呼之欲出：\n\nselect \n  count(gender) as male_num,\n  round(avg(gpa), 1) as avg_gpa\nfrom user_profile where gender=\"male\";\n\n\n1\n2\n3\n4\n\n\n# 分组过滤练习题\n\n题意明确：\n\n取出平均发贴数低于5的学校或平均回帖数小于20的学校\n\n----------------------------------------\n\n问题分解：\n\n * 限定条件：平均发贴数低于5或平均回帖数小于20的学校，avg(question_cnt)<5 or avg(answer_cnt)<20，聚合函数结果作为筛选条件时，不能用where，而是用having语法，配合重命名即可；\n * 按学校输出：需要对每个学校统计其平均发贴数和平均回帖数，因此group by university\n\n----------------------------------------\n\n细节问题：\n\n * 表头重命名：as\n * 用having不用where\n\n# 完整代码：\n\nselect\n    university,\n    avg(question_cnt) as avg_question_cnt,\n    avg(answer_cnt) as avg_answer_cnt\nfrom user_profile\ngroup by university\nhaving avg_question_cnt<5 or avg_answer_cnt<20\n\n\n1\n2\n3\n4\n5\n6\n7\n",normalizedContent:"# 表单符号注意⚠️\n\n中文使用双引号 \"\" ；英语使用单引号''\n\n# 查询结果去重\n\n输入：\ndrop table if exists user_profile;\ncreate table `user_profile` (\n`id` int not null,\n`device_id` int not null,\n`gender` varchar(14) not null,\n`age` int ,\n`university` varchar(32) not null,\n`province` varchar(32)  not null);\ninsert into user_profile values(1,2138,'male',21,'北京大学','beijing');\ninsert into user_profile values(2,3214,'male',null,'复旦大学','shanghai');\ninsert into user_profile values(3,6543,'female',20,'北京大学','beijing');\ninsert into user_profile values(4,2315,'female',23,'浙江大学','zhejiang');\ninsert into user_profile values(5,5432,'male',25,'山东大学','shandong');\n\n输出：\n北京大学\n复旦大学\n浙江大学\n山东大学\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * select distinct university from user_profile;\n * select university from user_profile group by university;\n\n# 查询结果限制返回行数\n\nselect device_id from user_profile limit 0,2---运行效率更高\n\nselect device_id from user_profile limit 2 ---运行效率低\n\n也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量\n\nselect device_id from user_profile limit 2 offset 0 // 跳过0条，从第一条数据开始取，取两条数据 ---运行效率中\n\n使用limit限制结果集\n\nlimit 子句可以被用于强制 select 语句返回指定的记录数。 limit 接受一个或两个数字参数。参数必须是一个整数常量。 如果只给定一个参数，它表示返回最大的记录行数目。 如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。 为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1。 初始记录行的偏移量是 0(而不是 1)。\n\n例5.检索记录行 6-10\n\nselect` `* ``from` `table` `limit 5,5\n\n\n1\n\n\n例6.检索记录行 11-last\n\nselect` `* ``from` `table` `limit 10,-1\n\n\n1\n\n\n例7.检索前 5 个记录行\n\nselect` `* ``from` `table` `limit 5\n\n\n1\n\n\n# 用where过滤空值练习\n\nselect device_id,gender,age,university from user_profile where age is not null;\n\n\n1\n\n\n查询null时，不能使用比较运算符(=或者< >)，需要使用is null运算符或者is not null运算符。\n\nnull要大写\n\nselect device_id,gender,age,university from user_profile where age !=''\n\n# where in 和not in\n\n题目：现在运营想要找到学校为北大、复旦和山大的同学进行调研，请你取出相关数据。\n\nselect device_id,gender,age,university,gpa from user_profile where university in (\"北京大学\", \"复旦大学\",\"山东大学\")\n\n# 字符匹配\n\n一般形式为：\n\n列名 [not ] like\n\n匹配串中可包含如下四种通配符： _：匹配任意一个字符； %：匹配0个或多个字符； [ ]：匹配[ ]中的任意一个字符(若要比较的字符是连续的，则可以用连字符“-”表 达 )；\n\n[^ ]：不匹配[ ]中的任意一个字符。\n\n例23．查询学生表中姓‘张’的学生的详细信息。\n\nselect` `* ``from` `学生表 ``where` `姓名 ``like` `‘张%’\n\n\n1\n\n\n例24．查询姓“张”且名字是3个字的学生姓名。\n\nselect` `* ``from` `学生表 ``where` `姓名 ``like` `'张__’\n\n\n1\n\n\n如果把姓名列的类型改为nchar(20)，在sql server 2012中执行没有结果。原因是姓名列的类型是char(20)，当姓名少于20个汉字时，系统在存储这些数据时自动在后边补空格，空格作为一个字符，也参加like的比较。可以用rtrim()去掉右空格。\n\nselect` `* ``from` `学生表 ``where` `rtrim(姓名) ``like` `'张__'\n\n\n1\n\n\n例25.查询学生表中姓‘张’、姓‘李’和姓‘刘’的学生的情况。\n\nselect` `* ``from` `学生表 ``where` `姓名 ``like` `'[张李刘]%’\n\n\n1\n\n\n例26.查询学生表表中名字的第2个字为“小”或“大”的学生的姓名和学号。\n\nselect` `姓名,学号 ``from` `学生表 ``where` `姓名 ``like` `'_[小大]%'\n\n\n1\n\n\n例27.查询学生表中所有不姓“刘”的学生。\n\nselect` `姓名 ``from` `学生 ``where` `姓名 ``not` `like` `'刘%’\n\n\n1\n\n\n例28.从学生表表中查询学号的最后一位不是2、3、5的学生信息。\n\nselect` `* ``from` `学生表 ``where` `学号 ``like` `'%[^235]'\n\n\n1\n\n\n# 计算男生人数以及平均gpa\n\n精华题解\n\n发表于 2021-08-31 18:03\n\n题意明确：题目要求得到『男性用户有多少人』以及『他们的平均gpa是多少』。\n\n----------------------------------------\n\n问题分解：\n\n 1. 限定条件为 男性用户；\n 2. 有多少人，明显是计数，count函数；\n 3. 平均gpa，求平均值用avg函数；\n\n----------------------------------------\n\n细节问题：根据输出示例，有两个问题需要注意：\n\n 1. 表头重命名，用as语法\n 2. 浮点数的平均值可能小数点位数很多，按照示例保存一位小数，用round函数\n\n----------------------------------------\n\n因此完整代码呼之欲出：\n\nselect \n  count(gender) as male_num,\n  round(avg(gpa), 1) as avg_gpa\nfrom user_profile where gender=\"male\";\n\n\n1\n2\n3\n4\n\n\n# 分组过滤练习题\n\n题意明确：\n\n取出平均发贴数低于5的学校或平均回帖数小于20的学校\n\n----------------------------------------\n\n问题分解：\n\n * 限定条件：平均发贴数低于5或平均回帖数小于20的学校，avg(question_cnt)<5 or avg(answer_cnt)<20，聚合函数结果作为筛选条件时，不能用where，而是用having语法，配合重命名即可；\n * 按学校输出：需要对每个学校统计其平均发贴数和平均回帖数，因此group by university\n\n----------------------------------------\n\n细节问题：\n\n * 表头重命名：as\n * 用having不用where\n\n# 完整代码：\n\nselect\n    university,\n    avg(question_cnt) as avg_question_cnt,\n    avg(answer_cnt) as avg_answer_cnt\nfrom user_profile\ngroup by university\nhaving avg_question_cnt<5 or avg_answer_cnt<20\n\n\n1\n2\n3\n4\n5\n6\n7\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"mysql三值运算",frontmatter:{title:"mysql三值运算",date:"2022-11-15T16:35:39.000Z",permalink:"/pages/16554f/",categories:["后端&运维","SQL"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2030.SQL/2030021.mysql%E4%B8%89%E5%80%BC%E8%BF%90%E7%AE%97.html",relativePath:"20.后端&运维/2030.SQL/2030021.mysql三值运算.md",key:"v-0559b8eb",path:"/pages/16554f/",headers:[{level:2,title:"基础知识",slug:"基础知识",normalizedTitle:"基础知识",charIndex:2},{level:3,title:"三值逻辑",slug:"三值逻辑",normalizedTitle:"三值逻辑",charIndex:11},{level:3,title:'为什么是IS NULL, 而不是"= NULL"?',slug:"为什么是is-null-而不是-null",normalizedTitle:"为什么是is null, 而不是&quot;= null&quot;?",charIndex:null},{level:3,title:"如何理解IS NULL?是两个单词？IS空格NULL?",slug:"如何理解is-null-是两个单词-is空格null",normalizedTitle:"如何理解is null?是两个单词？is空格null?",charIndex:642},{level:3,title:"三值逻辑运算。",slug:"三值逻辑运算。",normalizedTitle:"三值逻辑运算。",charIndex:909},{level:2,title:"实战",slug:"实战",normalizedTitle:"实战",charIndex:1421},{level:3,title:"题解",slug:"题解",normalizedTitle:"题解",charIndex:1428}],headersStr:'基础知识 三值逻辑 为什么是IS NULL, 而不是"= NULL"? 如何理解IS NULL?是两个单词？IS空格NULL? 三值逻辑运算。 实战 题解',content:'# 基础知识\n\n\n# 三值逻辑\n\n题目虽简单，但是背后包含的知识点真的也不少，你都掌握了吗？\n\nNULL有两种，“未知”unknown和“inapplicable”不适用。不知道戴眼镜的人眼睛是什么颜色，就是未知。只要不摘掉眼睛，就不知道，但是这个人眼睛肯定有颜色的。不知道冰箱的眼睛是什么颜色。这就是不适用，这个属性不适用于冰箱。冰箱是没有眼睛的。现在DBMS都将这两种类型NULL归为了一类，并采用三值逻辑。\n\n\n# 为什么是IS NULL, 而不是"= NULL"?\n\n很奇怪，是不是？小学的时候学的=就是表示相等关系。但是，对NULL使用谓词得到的结果是unknown。\n\n> Tip: SQL的保留字中，很多都被归类为谓词一类，例如>,<>,= 等比较谓词，以及BETWEEN, LIKE, IN, IS NULL等。总结，谓词是一种特殊的函数，返回值是真值。(前面提到的诶个谓词，返回值都是true, false, unknown,SQL是三值逻辑，所以有三种真值）\n\n因为查询结果只会包含WHERE子句里的判断结果为true的行！不包含判断结果为false和unknown的行。且不仅是等号，对NULL使用其他比较谓词（比如> NULL），结果也都是unknown。\n\n重点理解： NULL不是值，所以不能对其使用谓词，如果使用谓词，结果是unknown。 可以认为它只是一个没有值的标记,而比较谓词只适用于比较值。因此对非值的NULL使用比较谓词是没有意义的\n\n\n# 如何理解IS NULL?是两个单词？IS空格NULL?\n\n"NULL值" 和 "列的值为NULL"这个说法是错误的。NULL不属于关系型数据库中的某种类型。 我们为什么会误认为NULL是一个值？ 可能因为混淆了别的语言，在一些语言中NULL是一个常量。还有个重要原因是IS NULL是两个单词，所以我以前也把IS当作谓词，比如IS-A,所以误认为NULL是一个值。特别是SQL里有IS TRUE, IS FALSE。在讲解SQL标准的书里提醒人那么样，我们应该把IS NULL看作一个谓词，如果可以IS_NULL或许更合适。\n\n\n# 三值逻辑运算。\n\nunknown小写，是第三个真值。与作为NULL的一种UNKNOWN(未知)是不同的东西。小写是明确的布尔类型的真值，后者大写的既不是值也不是变量。为了对比不同：看x=x的情况。\n\nunknown = unknown -> true\nUNKNOWN = UNKNOWN ->unknown\n\n\n1\n2\n\n\n重点：【三值逻辑运算】\n\nNOT unknown => unknown\n\ntrue          OR unknown => true\nunknown OR unknown => unknown\nfalse         OR unknown => unknown\n\ntrue          AND unknown => unknown\nunknown AND unknown => unknown\nfalse         AND unknown => false\n\n记忆：优先级：\nAND:    false > unknown > true\nOR:       true > unknown > false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 实战\n\n\n# 题解\n\n法一： 使用NOT IN, 注意不能先查出name，否则可能name有重名，id不同，导致数据查询不全。我一开始就犯了这个错误。应该查询出id，去避免这个问题。同样，用UNION也会自动去重，要用的话用UNION ALL. 注意code格式规范： 所有关键字大写，关键字右边对齐，子句缩进。即使很短的代码，也要严格要求自己，好的代码不仅自己能懂，也要让一个新人能很容易读懂。切不可随意潦草，我自己要慢慢修炼！\n\nSELECT  name\n FROM  customer C\nWHERE C.id NOT IN (  SELECT C1.id \n                                        FROM customer C1\n                                      WHERE C1.referee_id = 2  );\n\n\n1\n2\n3\n4\n5\n\n\n法二： 使用exists，先查出referee_id的数据，再用exists,注意语法，exists需要关联表。\n\nSELECT C.name FROM customer C \nWHERE NOT EXISTS (SELECT C1.name FROM  customer C1 \n                    WHERE  C1.id  = C.id AND  C1. referee_id = 2);\n\n\n1\n2\n3\n\n\n法三： 直接增加第二个判断，用OR。\n\nSELECT C.name \n  FROM customer C\nWHERE C. referee_id <> 2\n       OR C. referee_id IS NULL;\n法四: 用UNION ALL\n\n\nSELECT name \n FROM customer \nWHERE referee_id <> 2\nUNION ALL\nSELECT name \n FROM customer \nWHERE referee_id IS NULL.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n为什么有时NOT IN 会查不到值，以及推导公式。 如果用WHERE id NOT IN (1, 2, NULL), 是不能查出数据的。 推导【经典】：\n\n=> WHERE NOT id IN (1, 2, NULL) //NOT和IN等价改写NOT IN \n=> WHERE NOT（（id = 1）OR（id = 2）OR（id= NULL））//用OR等价改写谓词IN\n=> WHERE NOT (id = 1) AND NOT (id = 2) AND NOT( id = NULL) //德摩根定律等价改写\n=> WHERE (id <> 1) AND (id <> 2) AND (id <> NULL)//用<>改写NOT 和 =\n=> WHERE (id <> 1) AND (id <> 2) AND unknown //对NULL使用<>,结果为unknown\n=> WHERE false 或者 unknown //AND运算包含unknown,结果不可能为true\n\n\n1\n2\n3\n4\n5\n6\n\n\n结论：如果NOT IN的子查询用到的表里被选择的列中存在NULL，则SQL整体的查询结果永远是空！\n\n为了解决烦人的NULL，最好在表里添加NOT NULL约束来尽力排除NULL',normalizedContent:'# 基础知识\n\n\n# 三值逻辑\n\n题目虽简单，但是背后包含的知识点真的也不少，你都掌握了吗？\n\nnull有两种，“未知”unknown和“inapplicable”不适用。不知道戴眼镜的人眼睛是什么颜色，就是未知。只要不摘掉眼睛，就不知道，但是这个人眼睛肯定有颜色的。不知道冰箱的眼睛是什么颜色。这就是不适用，这个属性不适用于冰箱。冰箱是没有眼睛的。现在dbms都将这两种类型null归为了一类，并采用三值逻辑。\n\n\n# 为什么是is null, 而不是"= null"?\n\n很奇怪，是不是？小学的时候学的=就是表示相等关系。但是，对null使用谓词得到的结果是unknown。\n\n> tip: sql的保留字中，很多都被归类为谓词一类，例如>,<>,= 等比较谓词，以及between, like, in, is null等。总结，谓词是一种特殊的函数，返回值是真值。(前面提到的诶个谓词，返回值都是true, false, unknown,sql是三值逻辑，所以有三种真值）\n\n因为查询结果只会包含where子句里的判断结果为true的行！不包含判断结果为false和unknown的行。且不仅是等号，对null使用其他比较谓词（比如> null），结果也都是unknown。\n\n重点理解： null不是值，所以不能对其使用谓词，如果使用谓词，结果是unknown。 可以认为它只是一个没有值的标记,而比较谓词只适用于比较值。因此对非值的null使用比较谓词是没有意义的\n\n\n# 如何理解is null?是两个单词？is空格null?\n\n"null值" 和 "列的值为null"这个说法是错误的。null不属于关系型数据库中的某种类型。 我们为什么会误认为null是一个值？ 可能因为混淆了别的语言，在一些语言中null是一个常量。还有个重要原因是is null是两个单词，所以我以前也把is当作谓词，比如is-a,所以误认为null是一个值。特别是sql里有is true, is false。在讲解sql标准的书里提醒人那么样，我们应该把is null看作一个谓词，如果可以is_null或许更合适。\n\n\n# 三值逻辑运算。\n\nunknown小写，是第三个真值。与作为null的一种unknown(未知)是不同的东西。小写是明确的布尔类型的真值，后者大写的既不是值也不是变量。为了对比不同：看x=x的情况。\n\nunknown = unknown -> true\nunknown = unknown ->unknown\n\n\n1\n2\n\n\n重点：【三值逻辑运算】\n\nnot unknown => unknown\n\ntrue          or unknown => true\nunknown or unknown => unknown\nfalse         or unknown => unknown\n\ntrue          and unknown => unknown\nunknown and unknown => unknown\nfalse         and unknown => false\n\n记忆：优先级：\nand:    false > unknown > true\nor:       true > unknown > false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 实战\n\n\n# 题解\n\n法一： 使用not in, 注意不能先查出name，否则可能name有重名，id不同，导致数据查询不全。我一开始就犯了这个错误。应该查询出id，去避免这个问题。同样，用union也会自动去重，要用的话用union all. 注意code格式规范： 所有关键字大写，关键字右边对齐，子句缩进。即使很短的代码，也要严格要求自己，好的代码不仅自己能懂，也要让一个新人能很容易读懂。切不可随意潦草，我自己要慢慢修炼！\n\nselect  name\n from  customer c\nwhere c.id not in (  select c1.id \n                                        from customer c1\n                                      where c1.referee_id = 2  );\n\n\n1\n2\n3\n4\n5\n\n\n法二： 使用exists，先查出referee_id的数据，再用exists,注意语法，exists需要关联表。\n\nselect c.name from customer c \nwhere not exists (select c1.name from  customer c1 \n                    where  c1.id  = c.id and  c1. referee_id = 2);\n\n\n1\n2\n3\n\n\n法三： 直接增加第二个判断，用or。\n\nselect c.name \n  from customer c\nwhere c. referee_id <> 2\n       or c. referee_id is null;\n法四: 用union all\n\n\nselect name \n from customer \nwhere referee_id <> 2\nunion all\nselect name \n from customer \nwhere referee_id is null.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n为什么有时not in 会查不到值，以及推导公式。 如果用where id not in (1, 2, null), 是不能查出数据的。 推导【经典】：\n\n=> where not id in (1, 2, null) //not和in等价改写not in \n=> where not（（id = 1）or（id = 2）or（id= null））//用or等价改写谓词in\n=> where not (id = 1) and not (id = 2) and not( id = null) //德摩根定律等价改写\n=> where (id <> 1) and (id <> 2) and (id <> null)//用<>改写not 和 =\n=> where (id <> 1) and (id <> 2) and unknown //对null使用<>,结果为unknown\n=> where false 或者 unknown //and运算包含unknown,结果不可能为true\n\n\n1\n2\n3\n4\n5\n6\n\n\n结论：如果not in的子查询用到的表里被选择的列中存在null，则sql整体的查询结果永远是空！\n\n为了解决烦人的null，最好在表里添加not null约束来尽力排除null',charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"mysql 查",frontmatter:{title:"mysql 查",date:"2022-11-16T10:56:24.000Z",permalink:"/pages/115d7f/",categories:["后端&运维","SQL"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2030.SQL/2030025.mysql%20%E6%9F%A5.html",relativePath:"20.后端&运维/2030.SQL/2030025.mysql 查.md",key:"v-5cd2ddfe",path:"/pages/115d7f/",headers:[{level:2,title:"联合查询",slug:"联合查询",normalizedTitle:"联合查询",charIndex:2},{level:3,title:"内联 inner join",slug:"内联-inner-join",normalizedTitle:"内联 inner join",charIndex:11}],headersStr:"联合查询 内联 inner join",content:"# 联合查询\n\n\n# 内联 inner join\n\nselect * from T1, T2 where T1.userid = T2.userid\n\nselect * from T1 inner join T2 on T1.userid = T2.userid",normalizedContent:"# 联合查询\n\n\n# 内联 inner join\n\nselect * from t1, t2 where t1.userid = t2.userid\n\nselect * from t1 inner join t2 on t1.userid = t2.userid",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"https 配置",frontmatter:{title:"https 配置",date:"2021-12-10T18:41:11.000Z",permalink:"/pages/026210/",categories:["后端&运维","Nginx"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2040.Nginx/204000.https%20%E9%85%8D%E7%BD%AE.html",relativePath:"20.后端&运维/2040.Nginx/204000.https 配置.md",key:"v-32e7e7a3",path:"/pages/026210/",headersStr:null,content:"server\n{\n    listen 80;\n\t\tlisten 443 ssl http2;\n    server_name www.izhaong.com izhaong.com;\n    index index.php index.html index.htm default.php default.htm default.html;\n    root /www/wwwroot/www.izhaong.com;\n    \n    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则\n    #error_page 404/404.html;\n    #HTTP_TO_HTTPS_START\n    if ($server_port !~ 443){\n        rewrite ^(/.*)$ https://$host$1 permanent;\n    }\n    #HTTP_TO_HTTPS_END\n    ssl_certificate    /www/server/panel/vhost/cert/www.izhaong.com/fullchain.pem;\n    ssl_certificate_key    /www/server/panel/vhost/cert/www.izhaong.com/privkey.pem;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;Ï\n    error_page 497  https://$host$request_uri;\n\n    #SSL-END\n    \n    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改\n    #error_page 404 /404.html;\n    #error_page 502 /502.html;\n    #ERROR-PAGE-END\n    \n    #PHP-INFO-START  PHP引用配置，可以注释或修改\n    include enable-php-00.conf;\n    #PHP-INFO-END\n    \n    #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效\n    include /www/server/panel/vhost/rewrite/www.izhaong.com.conf;\n    #REWRITE-END\n    \n    #禁止访问的文件或目录\n    location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md)\n    {\n        return 404;\n    }\n    \n    #一键申请SSL证书验证目录相关设置\n    location ~ \\.well-known{\n        allow all;\n    }\n    \n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires      30d;\n        error_log off;\n        access_log /dev/null;\n    }\n    \n    location ~ .*\\.(js|css)?$\n    {\n        expires      12h;\n        error_log off;\n        access_log /dev/null; \n    }\n    access_log  /www/wwwlogs/www.izhaong.com.log;\n    error_log  /www/wwwlogs/www.izhaong.com.error.log;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n",normalizedContent:"server\n{\n    listen 80;\n\t\tlisten 443 ssl http2;\n    server_name www.izhaong.com izhaong.com;\n    index index.php index.html index.htm default.php default.htm default.html;\n    root /www/wwwroot/www.izhaong.com;\n    \n    #ssl-start ssl相关配置，请勿删除或修改下一行带注释的404规则\n    #error_page 404/404.html;\n    #http_to_https_start\n    if ($server_port !~ 443){\n        rewrite ^(/.*)$ https://$host$1 permanent;\n    }\n    #http_to_https_end\n    ssl_certificate    /www/server/panel/vhost/cert/www.izhaong.com/fullchain.pem;\n    ssl_certificate_key    /www/server/panel/vhost/cert/www.izhaong.com/privkey.pem;\n    ssl_protocols tlsv1 tlsv1.1 tlsv1.2;\n    ssl_ciphers ecdhe-rsa-aes128-gcm-sha256:high:!anull:!md5:!rc4:!dhe;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:ssl:10m;\n    ssl_session_timeout 10m;i\n    error_page 497  https://$host$request_uri;\n\n    #ssl-end\n    \n    #error-page-start  错误页配置，可以注释、删除或修改\n    #error_page 404 /404.html;\n    #error_page 502 /502.html;\n    #error-page-end\n    \n    #php-info-start  php引用配置，可以注释或修改\n    include enable-php-00.conf;\n    #php-info-end\n    \n    #rewrite-start url重写规则引用,修改后将导致面板设置的伪静态规则失效\n    include /www/server/panel/vhost/rewrite/www.izhaong.com.conf;\n    #rewrite-end\n    \n    #禁止访问的文件或目录\n    location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|license|readme.md)\n    {\n        return 404;\n    }\n    \n    #一键申请ssl证书验证目录相关设置\n    location ~ \\.well-known{\n        allow all;\n    }\n    \n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires      30d;\n        error_log off;\n        access_log /dev/null;\n    }\n    \n    location ~ .*\\.(js|css)?$\n    {\n        expires      12h;\n        error_log off;\n        access_log /dev/null; \n    }\n    access_log  /www/wwwlogs/www.izhaong.com.log;\n    error_log  /www/wwwlogs/www.izhaong.com.error.log;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Nginx 学习",frontmatter:{title:"Nginx 学习",date:"2021-12-24T18:20:02.000Z",permalink:"/pages/e7493e/",categories:["后端&运维","Nginx"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2040.Nginx/2040001.Nginx%20%E5%AD%A6%E4%B9%A0.html",relativePath:"20.后端&运维/2040.Nginx/2040001.Nginx 学习.md",key:"v-059fa4ea",path:"/pages/e7493e/",headers:[{level:2,title:"安装docker",slug:"安装docker",normalizedTitle:"安装docker",charIndex:2},{level:2,title:"负载均衡",slug:"负载均衡",normalizedTitle:"负载均衡",charIndex:782}],headersStr:"安装docker 负载均衡",content:"# 安装docker\n\n * 拉取镜像 docker pull nginx\n\n * 创建配置文件目录 mkdir -p /www/docker/nginx-study/nginx/conf\n\n * 拷贝配置文件\n\n * * docker run --name nginx01 -d nginx:latest\n   * 把容器中的nginx.conf文件复制到conf目录下docker cp nginx01:/etc/nginx/nginx.conf /www/docker/nginx-study/nginx/conf\n * * 把容器中的default.conf文件复制到conf目录下 docker cp nginx01:/etc/nginx/conf.d/``default.conf /www/docker/nginx-study/nginx/conf\n\n * 删除镜像 docker rm -f nginx01\n\n * 重新运行容器\n\ndocker run -it -d --name nginx-study -p 9999:80 \\\n\t-v /www/docker/nginx-study/nginx/html:/usr/share/nginx/html \\\n  -v /www/docker/nginx-study/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n  -v /www/docker/nginx-study/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf \\\n  -v /www/docker/nginx-study/nginx/logs:/var/log/nginx \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 负载均衡\n\nhttp {\n    upstream upstream_name{\n        server 192.168.0.28:8001 weight=2;  # 50%的访问机会\n        server 192.168.0.28:8002;\n        server 192.168.0.28:8002;\n    }\n\n    server {\n        listen       8080;\n        server_name  localhost;\n\n        location / {\n            proxy_pass http://upstream_name;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",normalizedContent:"# 安装docker\n\n * 拉取镜像 docker pull nginx\n\n * 创建配置文件目录 mkdir -p /www/docker/nginx-study/nginx/conf\n\n * 拷贝配置文件\n\n * * docker run --name nginx01 -d nginx:latest\n   * 把容器中的nginx.conf文件复制到conf目录下docker cp nginx01:/etc/nginx/nginx.conf /www/docker/nginx-study/nginx/conf\n * * 把容器中的default.conf文件复制到conf目录下 docker cp nginx01:/etc/nginx/conf.d/``default.conf /www/docker/nginx-study/nginx/conf\n\n * 删除镜像 docker rm -f nginx01\n\n * 重新运行容器\n\ndocker run -it -d --name nginx-study -p 9999:80 \\\n\t-v /www/docker/nginx-study/nginx/html:/usr/share/nginx/html \\\n  -v /www/docker/nginx-study/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n  -v /www/docker/nginx-study/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf \\\n  -v /www/docker/nginx-study/nginx/logs:/var/log/nginx \\\n  nginx\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 负载均衡\n\nhttp {\n    upstream upstream_name{\n        server 192.168.0.28:8001 weight=2;  # 50%的访问机会\n        server 192.168.0.28:8002;\n        server 192.168.0.28:8002;\n    }\n\n    server {\n        listen       8080;\n        server_name  localhost;\n\n        location / {\n            proxy_pass http://upstream_name;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"windows ubuntu子系统WSL使用",frontmatter:{title:"windows ubuntu子系统WSL使用",date:"2023-09-17T15:42:43.000Z",permalink:"/pages/44c88a/",categories:["后端&运维","Windows"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2048.Windows/2048010.windows%20ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9FWSL%E4%BD%BF%E7%94%A8.html",relativePath:"20.后端&运维/2048.Windows/2048010.windows ubuntu子系统WSL使用.md",key:"v-2c66c560",path:"/pages/44c88a/",headersStr:null,content:"文件位置：\n\nwindows10 的linux子系统（windows subsystem for linux)WSL 文件位置\n\n以我的系统为例，WSL的root目录对应windows的：\n\nCopyC:\\Users\\xiaoPeng\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\\LocalState\\rootfs\n\n\n1\n\n\n其中AppData文件夹默认是隐藏的，但你可以在路径里输入AppData进去。但实际上微软为我们提供了一个默认的变量可以直接指向WSL的目录，wsl$ 你可以在运行(win+R)或资源管理器的路径里直接输入\\wsl$进入Ubuntu的目录\n\n``\n\n知道WSL的网络路径后你可以直接将它添加到资源管理器的网络位置里",normalizedContent:"文件位置：\n\nwindows10 的linux子系统（windows subsystem for linux)wsl 文件位置\n\n以我的系统为例，wsl的root目录对应windows的：\n\ncopyc:\\users\\xiaopeng\\appdata\\local\\packages\\canonicalgrouplimited.ubuntu18.04onwindows_79rhkp1fndgsc\\localstate\\rootfs\n\n\n1\n\n\n其中appdata文件夹默认是隐藏的，但你可以在路径里输入appdata进去。但实际上微软为我们提供了一个默认的变量可以直接指向wsl的目录，wsl$ 你可以在运行(win+r)或资源管理器的路径里直接输入\\wsl$进入ubuntu的目录\n\n``\n\n知道wsl的网络路径后你可以直接将它添加到资源管理器的网络位置里",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"常用命令",frontmatter:{title:"常用命令",date:"2022-09-02T19:43:49.000Z",permalink:"/pages/dcc15e/",categories:["后端&运维","Linux"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2050.Linux/2050005.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"20.后端&运维/2050.Linux/2050005.常用命令.md",key:"v-b5656fd2",path:"/pages/dcc15e/",headers:[{level:3,title:"查看操作系统",slug:"查看操作系统",normalizedTitle:"查看操作系统",charIndex:2}],headersStr:"查看操作系统",content:"# 查看操作系统\n\ncat /etc/redhat-release\n\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n\n1\n",normalizedContent:"# 查看操作系统\n\ncat /etc/redhat-release\n\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"centos7初始化",frontmatter:{title:"centos7初始化",date:"2023-11-04T10:46:31.000Z",permalink:"/pages/b25f61/",categories:["后端&运维","Linux"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2050.Linux/2050009.centos7%E5%88%9D%E5%A7%8B%E5%8C%96.html",relativePath:"20.后端&运维/2050.Linux/2050009.centos7初始化.md",key:"v-04c86028",path:"/pages/b25f61/",headers:[{level:3,title:"网络",slug:"网络",normalizedTitle:"网络",charIndex:2},{level:3,title:"更换wget镜像源",slug:"更换wget镜像源",normalizedTitle:"更换wget镜像源",charIndex:182},{level:2,title:"域名映射",slug:"域名映射",normalizedTitle:"域名映射",charIndex:504},{level:4,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:512},{level:4,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:70}],headersStr:"网络 更换wget镜像源 域名映射 安装 配置",content:"# 网络\n\n * cd /etc/sysconfig/network-scripts\n\n * ll\n\n * \n\n * 基本第一个就是你的网络配置文件, 每个人都不一样(我的是ifcfg-ens192)\n\n * vi ifcfg_ens192\n\n * \n\n * 诶 我的是DHCP动态的.... 我去上层路由去设置此mac地址为静态路由就行了\n\n * 完!\n\n\n# 更换wget镜像源\n\n1.备份原来的Base源，提前install好wget yum install wget\n\n!base会提示没有yum命令 不用bash\n\ncd /etc/yum.repos.d/\nmv CentOS-Base.repo CentOS-Base.repo.bak\n\n\n1\n2\n\n\n2.默认是国外源，所有有些东西下载会很慢，甚至无法下载，更换国内源\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo\n\n\n1\n\n\n3.更新软件包缓存，等他OK就好了\n\nyum makecache\n\n\n1\n\n\n\n# 域名映射\n\n# 安装\n\ndocker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/izhaong/docker/ddns-go jeessy/ddns-go\n\n\n1\n\n\n# 配置\n\nddns-go网页端口为9876，需要防火墙放行\n\nfirewall-cmd --zone=public --add-port=9876/tcp --permanent \nfirewall-cmd --reload\n\n\n1\n2\n",normalizedContent:"# 网络\n\n * cd /etc/sysconfig/network-scripts\n\n * ll\n\n * \n\n * 基本第一个就是你的网络配置文件, 每个人都不一样(我的是ifcfg-ens192)\n\n * vi ifcfg_ens192\n\n * \n\n * 诶 我的是dhcp动态的.... 我去上层路由去设置此mac地址为静态路由就行了\n\n * 完!\n\n\n# 更换wget镜像源\n\n1.备份原来的base源，提前install好wget yum install wget\n\n!base会提示没有yum命令 不用bash\n\ncd /etc/yum.repos.d/\nmv centos-base.repo centos-base.repo.bak\n\n\n1\n2\n\n\n2.默认是国外源，所有有些东西下载会很慢，甚至无法下载，更换国内源\n\nwget -o /etc/yum.repos.d/centos-base.repo https://mirrors.aliyun.com/repo/centos-7.repo\n\n\n1\n\n\n3.更新软件包缓存，等他ok就好了\n\nyum makecache\n\n\n1\n\n\n\n# 域名映射\n\n# 安装\n\ndocker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/izhaong/docker/ddns-go jeessy/ddns-go\n\n\n1\n\n\n# 配置\n\nddns-go网页端口为9876，需要防火墙放行\n\nfirewall-cmd --zone=public --add-port=9876/tcp --permanent \nfirewall-cmd --reload\n\n\n1\n2\n",charsets:{cjk:!0},lastUpdated:"2023/11/04, 10:56:47",lastUpdatedTimestamp:1699066607e3},{title:"基础使用",frontmatter:{title:"基础使用",date:"2021-12-08T18:57:22.000Z",permalink:"/pages/5f4150/",categories:["生活","Linux"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2050.Linux/205001.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8.html",relativePath:"20.后端&运维/2050.Linux/205001.基础使用.md",key:"v-295cb760",path:"/pages/5f4150/",headers:[{level:2,title:"快捷键",slug:"快捷键",normalizedTitle:"快捷键",charIndex:2},{level:5,title:"操作快捷键",slug:"操作快捷键",normalizedTitle:"操作快捷键",charIndex:9},{level:5,title:"VIM文件编辑快捷键",slug:"vim文件编辑快捷键",normalizedTitle:"vim文件编辑快捷键",charIndex:119},{level:5,title:"进程操作快捷键",slug:"进程操作快捷键",normalizedTitle:"进程操作快捷键",charIndex:151},{level:5,title:"linux命令中快捷键（top)",slug:"linux命令中快捷键-top",normalizedTitle:"linux命令中快捷键（top)",charIndex:223},{level:2,title:"网络",slug:"网络",normalizedTitle:"网络",charIndex:288}],headersStr:"快捷键 操作快捷键 VIM文件编辑快捷键 进程操作快捷键 linux命令中快捷键（top) 网络",content:"# 快捷键\n\n# 操作快捷键\n\n * Ctrl+r:可以快速查找历史命令\n * Ctrl+l:可以清理控制台屏幕\n * Ctrl+a\\Ctrl+e:移动光标到命令行首＼行\n * Ctrl+w\\Ctrl+k:删除光标之前＼之后的内容\n\n# VIM文件编辑快捷键\n\n * 快捷键ZZ:文件保存并退出\n\n# 进程操作快捷键\n\n * Ctrl+c:强制终止程序的执行\n * Ctrl+z:挂起一个进程\n * Ctrl+d:终端中输入exit后回车\n\n# linux命令中快捷键（top)\n\n * Shift+p:根据CPU使用率排序\n\n * Shift+m:根据内存占用排序\n\n\n# 网络\n\n * 查看IP ip addr ifconfig\n   \n   ifconfig -a #查看当前电脑全部接口信息\n   ifconfig eth0 up #启动eth0网卡，eth0指的是网卡名\n   ifconfig eth0 down #启动eth0网卡，eth0指的是网卡名\n   \n   \n   1\n   2\n   3\n   ",normalizedContent:"# 快捷键\n\n# 操作快捷键\n\n * ctrl+r:可以快速查找历史命令\n * ctrl+l:可以清理控制台屏幕\n * ctrl+a\\ctrl+e:移动光标到命令行首＼行\n * ctrl+w\\ctrl+k:删除光标之前＼之后的内容\n\n# vim文件编辑快捷键\n\n * 快捷键zz:文件保存并退出\n\n# 进程操作快捷键\n\n * ctrl+c:强制终止程序的执行\n * ctrl+z:挂起一个进程\n * ctrl+d:终端中输入exit后回车\n\n# linux命令中快捷键（top)\n\n * shift+p:根据cpu使用率排序\n\n * shift+m:根据内存占用排序\n\n\n# 网络\n\n * 查看ip ip addr ifconfig\n   \n   ifconfig -a #查看当前电脑全部接口信息\n   ifconfig eth0 up #启动eth0网卡，eth0指的是网卡名\n   ifconfig eth0 down #启动eth0网卡，eth0指的是网卡名\n   \n   \n   1\n   2\n   3\n   ",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"拿到公司的服务器后",frontmatter:{title:"拿到公司的服务器后",date:"2022-09-20T09:45:46.000Z",permalink:"/pages/55c8f7/",categories:["后端&运维","Linux"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2050.Linux/2050010.%E6%8B%BF%E5%88%B0%E5%85%AC%E5%8F%B8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E.html",relativePath:"20.后端&运维/2050.Linux/2050010.拿到公司的服务器后.md",key:"v-72bebe02",path:"/pages/55c8f7/",headers:[{level:3,title:"查看当前操作系统",slug:"查看当前操作系统",normalizedTitle:"查看当前操作系统",charIndex:2},{level:2,title:"配置公私钥加密登录  ssh",slug:"配置公私钥加密登录-ssh",normalizedTitle:"配置公私钥加密登录  ssh",charIndex:null},{level:3,title:"安装docker",slug:"安装docker",normalizedTitle:"安装docker",charIndex:320},{level:4,title:"安装docker-compose",slug:"安装docker-compose",normalizedTitle:"安装docker-compose",charIndex:2022}],headersStr:"查看当前操作系统 配置公私钥加密登录  ssh 安装docker 安装docker-compose",content:"# 查看当前操作系统\n\n * lsb_release -a\n * cat /etc/redhat-release\n\n\n# 配置公私钥加密登录 ssh\n\n * 生成公钥和私钥（实际上如果之前有的话就不用重新生成了）\n\nssh-keygen -t rsa\n\n配置：http://niexiaotao.cn/2018/04/11/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%92%8Cssh%E5%85%AC%E7%A7%81%E9%92%A5%E7%99%BB%E9%99%86/\n\n\n# 安装docker\n\n# step 1: 安装必要的一些系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# Step 2: 添加软件源信息\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# Step 3: 更新并安装 Docker-CE\nsudo yum makecache fast\nsudo yum -y install docker-ce\n# Step 4: 开启Docker服务\nsudo service docker start\n\n注意：其他注意事项在下面的注释中\n# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。\n# vim /etc/yum.repos.d/docker-ce.repo\n#   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1\n#\n# 安装指定版本的Docker-CE:\n# Step 1: 查找Docker-CE的版本:\n# yum list docker-ce.x86_64 --showduplicates | sort -r\n#   Loading mirror speeds from cached hostfile\n#   Loaded plugins: branch, fastestmirror, langpacks\n#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable\n#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable\n#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable\n#   Available Packages\n# Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)\n# sudo yum -y install docker-ce-[VERSION]\n# 注意：在某些版本之后，docker-ce安装出现了其他依赖包，如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后，需要先安装 docker-ce-selinux。\n# yum list docker-ce-selinux- --showduplicates | sort -r\n# sudo yum -y install docker-ce-selinux-[VERSION]\n\n# 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2中的命令\n# 经典网络：\n# sudo yum-config-manager --add-repo http://mirrors.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\n# VPC网络：\n# sudo yum-config-manager --add-repo http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n# 安装docker-compose\n\ncurl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n\nchmod +x /usr/local/bin/docker-compose\n\ndocker-compose -v\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 查看当前操作系统\n\n * lsb_release -a\n * cat /etc/redhat-release\n\n\n# 配置公私钥加密登录 ssh\n\n * 生成公钥和私钥（实际上如果之前有的话就不用重新生成了）\n\nssh-keygen -t rsa\n\n配置：http://niexiaotao.cn/2018/04/11/linux%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%88%9d%e5%a7%8b%e5%8c%96%e8%ae%be%e7%bd%ae%e7%94%a8%e6%88%b7%e5%92%8cssh%e5%85%ac%e7%a7%81%e9%92%a5%e7%99%bb%e9%99%86/\n\n\n# 安装docker\n\n# step 1: 安装必要的一些系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# step 2: 添加软件源信息\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# step 3: 更新并安装 docker-ce\nsudo yum makecache fast\nsudo yum -y install docker-ce\n# step 4: 开启docker服务\nsudo service docker start\n\n注意：其他注意事项在下面的注释中\n# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。\n# vim /etc/yum.repos.d/docker-ce.repo\n#   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1\n#\n# 安装指定版本的docker-ce:\n# step 1: 查找docker-ce的版本:\n# yum list docker-ce.x86_64 --showduplicates | sort -r\n#   loading mirror speeds from cached hostfile\n#   loaded plugins: branch, fastestmirror, langpacks\n#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable\n#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable\n#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable\n#   available packages\n# step2 : 安装指定版本的docker-ce: (version 例如上面的 17.03.0.ce.1-1.el7.centos)\n# sudo yum -y install docker-ce-[version]\n# 注意：在某些版本之后，docker-ce安装出现了其他依赖包，如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后，需要先安装 docker-ce-selinux。\n# yum list docker-ce-selinux- --showduplicates | sort -r\n# sudo yum -y install docker-ce-selinux-[version]\n\n# 通过经典网络、vpc网络内网安装时，用以下命令替换step 2中的命令\n# 经典网络：\n# sudo yum-config-manager --add-repo http://mirrors.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\n# vpc网络：\n# sudo yum-config-manager --add-repo http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n# 安装docker-compose\n\ncurl -l https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n\nchmod +x /usr/local/bin/docker-compose\n\ndocker-compose -v\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"文件及文件夹",frontmatter:{title:"文件及文件夹",date:"2021-12-08T18:57:43.000Z",permalink:"/pages/e5da38/",categories:["生活","Linux"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2050.Linux/205002.%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9.html",relativePath:"20.后端&运维/2050.Linux/205002.文件及文件夹.md",key:"v-354037c8",path:"/pages/e5da38/",headers:[{level:2,title:"!img",slug:"img-https-cdn-jsdelivr-net-gh-izhaong-izhaong-com-oss-blogimg-041111-e6-96-87-e4-bb-b6-e5-8f-8a-e6-96-87-e4-bb-b6-e5-a4-b9-2021-12-08-22-37-57-acc327dfe0d5328c1ad102179c70b641-1601436474394-e60c423f-36d3-4d0e-97b7-3558ea349b20-67b46b-gif",normalizedTitle:"!img",charIndex:null},{level:3,title:"用到的 Linux 命令",slug:"用到的-linux-命令",normalizedTitle:"用到的 linux 命令",charIndex:612},{level:4,title:"处理目录的常用命令",slug:"处理目录的常用命令",normalizedTitle:"处理目录的常用命令",charIndex:628},{level:2,title:"systemctl daemon-reload 子命令",slug:"systemctl-daemon-reload-子命令",normalizedTitle:"systemctl daemon-reload 子命令",charIndex:969},{level:2,title:"cenos7",slug:"cenos7",normalizedTitle:"cenos7",charIndex:1740},{level:3,title:"文件",slug:"文件",normalizedTitle:"文件",charIndex:12},{level:4,title:"下载",slug:"下载",normalizedTitle:"下载",charIndex:1757},{level:4,title:"解压",slug:"解压",normalizedTitle:"解压",charIndex:2029},{level:2,title:"权限 chmod命令",slug:"权限-chmod命令",normalizedTitle:"权限 chmod命令",charIndex:2082}],headersStr:"!img 用到的 Linux 命令 处理目录的常用命令 systemctl daemon-reload 子命令 cenos7 文件 下载 解压 权限 chmod命令",content:"#\n\n\n# Linux 文件基本属性\n\n在 Linux 中我们可以使用 ll 或者 ls –l 命令来显示一个文件的属性以及文件所属的用户和组，如：\n\n[root@www /]# ls -l\n\ntotal 64\n\ndr-xr-xr-x 2 root root 4096 Dec 14 2012 bin\n\ndr-xr-xr-x 4 root root 4096 Apr 19 2012 boot\n\n……\n\n实例中，bin 文件的第一个属性用 d 表示。d 在 Linux 中代表该文件是一个目录文件。\n\n在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。\n\n * 当为 d 则是目录\n\n * 当为 - 则是文件；\n\n * 若是 l 则表示为链接文档(link file)；\n\n * 若是 b 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；\n\n * 若是 c 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。\n\n接下来的字符中，以三个为一组，且均为 rwx 的三个参数的组合。其中， r 代表可读(read)、 w 代表可写(write)、 x 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 - 而已。\n\n\n\n每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。\n\n\n\n\n# Linux 文件与目录管理\n\n\n# 用到的 Linux 命令\n\n# 处理目录的常用命令\n\n * pwd (显示目前所在的目录)\n\n * rmdir (删除空的目录)\n\n * rm [-fir] 文件或目录\n\n * * -f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；\n   * -i ：互动模式，在删除前会询问使用者是否动作\n * * -r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！\n\n * mv (移动文件与目录，或修改名称)\n\n * * -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n   * -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n * * -u ：若目标文件已经存在，且 source 比较新，才会升级 (update)\n\n\n# systemctl daemon-reload 子命令\n\ndaemon-reload 是一个很容易被误用的子命令，主要是因为它名字中包含的 daemon 一词很容易让它和 reload 子命令混淆。\n\n我们在前文简略的介绍了 reload 子命令，它的作用是重新加载某个服务程序的配置文件。这里的程序指的是服务类型 unit 的配置中指定的程序，也就是我们常说的 daemon(提供某种服务的应用程序)。比如服务类型的 unit prometheus.service，提供服务的 daemon 程序在我的机器上是 /usr/local/share/prometheus/prometheus，所以 reload 子命令重新加载的是 prometheus 的配置文件。\n\n如果把 daemon-reload 子命令中的 daemon 理解为 systemd 程序，就可以把这个命令解释为重新加载 systemd 程序的配置文件。而所有的 unit 配置文件都是作为 systemd 程序的配置文件存在的。这样得出的结论就是：\n\n * 新添加 unit 配置文件时需要执行 daemon-reload 子命令\n * 有 unit 的配置文件发生变化时也需要执行 daemon-reload 子命令\n\ndaemon-reload 命令会做很多的事情，其中之一是重新生成依赖树(也就是 unit 之间的依赖关系)，所以当你修改了 unit 配置文件中的依赖关系后如果不执行 daemon-reload 命令是不会生效的。\n\n\n# Network Namespace\n\n查看ip netns list\n\n添加ip netns add ***\n\n删除ip netns delete ***\n\n查看信息ip netns exec *** ip a\n\n\n# cenos7\n\n\n# 文件\n\n# 下载\n\n首先查看CentOS7 系统有没有安装wget： [root@test redis]# rpm -qa|grep wget 如果安装了会提示当前安装的版本： wget-1.14-15.el7_4.1.x86_64 没安装的话可以通过以下命令安装：yum install -y wget\n\n下载文件的语法格式为：wget http://wwww.xxxxx ，该命令会下载到默认的download目录。\n\n如果我们要下载到指定目录，可以通过 -P 参数来实现：\n\n * 重命名\n\n * * 重命名文件：mv 文件名 修改后的文件名\n\n# 解压\n\n tar xf apache-maven-3.5.4-bin.tar.gz  \n\n\n1\n\n\n\n# 权限 chmod命令\n\nchmod [可选项] <file...>\n\nhttps://www.cnblogs.com/huchong/p/9075201.html\n\n权限 权限数值 二进制 具体作用 r 4 00000100 read，读取。当前用户可以读取文件内容，当前用户可以浏览目录。 w 2 00000010 write，写入。当前用户可以新增或修改文件内容，当前用户可以删除、移动目录或目录内文件。 x 1 00000001 execute，执行。当前用户可以执行文件，当前用户可以进入目录。\n\nchmod 777 file (等价于 chmod u=rwx,g=rwx,o=rwx file 或 chmod a=rwx file)\n\n🌰例子：\n\n-rw------- (600)    只有拥有者有读写权限。\n-rw-r--r-- (644)    只有拥有者有读写权限；而属组用户和其他用户只有读权限。\n-rwx------ (700)    只有拥有者有读、写、执行权限。\n-rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。\n-rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。\n-rw-rw-rw- (666)   \t所有用户都有文件读、写权限。\n-rwxrwxrwx (777)  \t所有用户都有读、写、执行权限。\n\n\n1\n2\n3\n4\n5\n6\n7\n",normalizedContent:"#\n\n\n# linux 文件基本属性\n\n在 linux 中我们可以使用 ll 或者 ls –l 命令来显示一个文件的属性以及文件所属的用户和组，如：\n\n[root@www /]# ls -l\n\ntotal 64\n\ndr-xr-xr-x 2 root root 4096 dec 14 2012 bin\n\ndr-xr-xr-x 4 root root 4096 apr 19 2012 boot\n\n……\n\n实例中，bin 文件的第一个属性用 d 表示。d 在 linux 中代表该文件是一个目录文件。\n\n在 linux 中第一个字符代表这个文件是目录、文件或链接文件等等。\n\n * 当为 d 则是目录\n\n * 当为 - 则是文件；\n\n * 若是 l 则表示为链接文档(link file)；\n\n * 若是 b 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；\n\n * 若是 c 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。\n\n接下来的字符中，以三个为一组，且均为 rwx 的三个参数的组合。其中， r 代表可读(read)、 w 代表可写(write)、 x 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 - 而已。\n\n\n\n每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。\n\n\n\n\n# linux 文件与目录管理\n\n\n# 用到的 linux 命令\n\n# 处理目录的常用命令\n\n * pwd (显示目前所在的目录)\n\n * rmdir (删除空的目录)\n\n * rm [-fir] 文件或目录\n\n * * -f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；\n   * -i ：互动模式，在删除前会询问使用者是否动作\n * * -r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！\n\n * mv (移动文件与目录，或修改名称)\n\n * * -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n   * -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n * * -u ：若目标文件已经存在，且 source 比较新，才会升级 (update)\n\n\n# systemctl daemon-reload 子命令\n\ndaemon-reload 是一个很容易被误用的子命令，主要是因为它名字中包含的 daemon 一词很容易让它和 reload 子命令混淆。\n\n我们在前文简略的介绍了 reload 子命令，它的作用是重新加载某个服务程序的配置文件。这里的程序指的是服务类型 unit 的配置中指定的程序，也就是我们常说的 daemon(提供某种服务的应用程序)。比如服务类型的 unit prometheus.service，提供服务的 daemon 程序在我的机器上是 /usr/local/share/prometheus/prometheus，所以 reload 子命令重新加载的是 prometheus 的配置文件。\n\n如果把 daemon-reload 子命令中的 daemon 理解为 systemd 程序，就可以把这个命令解释为重新加载 systemd 程序的配置文件。而所有的 unit 配置文件都是作为 systemd 程序的配置文件存在的。这样得出的结论就是：\n\n * 新添加 unit 配置文件时需要执行 daemon-reload 子命令\n * 有 unit 的配置文件发生变化时也需要执行 daemon-reload 子命令\n\ndaemon-reload 命令会做很多的事情，其中之一是重新生成依赖树(也就是 unit 之间的依赖关系)，所以当你修改了 unit 配置文件中的依赖关系后如果不执行 daemon-reload 命令是不会生效的。\n\n\n# network namespace\n\n查看ip netns list\n\n添加ip netns add ***\n\n删除ip netns delete ***\n\n查看信息ip netns exec *** ip a\n\n\n# cenos7\n\n\n# 文件\n\n# 下载\n\n首先查看centos7 系统有没有安装wget： [root@test redis]# rpm -qa|grep wget 如果安装了会提示当前安装的版本： wget-1.14-15.el7_4.1.x86_64 没安装的话可以通过以下命令安装：yum install -y wget\n\n下载文件的语法格式为：wget http://wwww.xxxxx ，该命令会下载到默认的download目录。\n\n如果我们要下载到指定目录，可以通过 -p 参数来实现：\n\n * 重命名\n\n * * 重命名文件：mv 文件名 修改后的文件名\n\n# 解压\n\n tar xf apache-maven-3.5.4-bin.tar.gz  \n\n\n1\n\n\n\n# 权限 chmod命令\n\nchmod [可选项] <file...>\n\nhttps://www.cnblogs.com/huchong/p/9075201.html\n\n权限 权限数值 二进制 具体作用 r 4 00000100 read，读取。当前用户可以读取文件内容，当前用户可以浏览目录。 w 2 00000010 write，写入。当前用户可以新增或修改文件内容，当前用户可以删除、移动目录或目录内文件。 x 1 00000001 execute，执行。当前用户可以执行文件，当前用户可以进入目录。\n\nchmod 777 file (等价于 chmod u=rwx,g=rwx,o=rwx file 或 chmod a=rwx file)\n\n🌰例子：\n\n-rw------- (600)    只有拥有者有读写权限。\n-rw-r--r-- (644)    只有拥有者有读写权限；而属组用户和其他用户只有读权限。\n-rwx------ (700)    只有拥有者有读、写、执行权限。\n-rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。\n-rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。\n-rw-rw-rw- (666)   \t所有用户都有文件读、写权限。\n-rwxrwxrwx (777)  \t所有用户都有读、写、执行权限。\n\n\n1\n2\n3\n4\n5\n6\n7\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"批量操作文件及文件夹",frontmatter:{title:"批量操作文件及文件夹",date:"2022-05-04T15:16:29.000Z",permalink:"/pages/5c819e/",categories:["后端&运维","Linux"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2050.Linux/205003.%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9.html",relativePath:"20.后端&运维/2050.Linux/205003.批量操作文件及文件夹.md",key:"v-cb406ede",path:"/pages/5c819e/",headers:[{level:2,title:"批量重命名",slug:"批量重命名",normalizedTitle:"批量重命名",charIndex:2},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:69},{level:3,title:"加上前缀",slug:"加上前缀",normalizedTitle:"加上前缀",charIndex:902},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:739}],headersStr:"批量重命名 使用 加上前缀 其他",content:"# 批量重命名\n\n * 查看是否支持rename命令rename\n\n * 若不支持则安装：brew install rename\n\n\n# 使用\n\n * 我现需要把01开头的文件换成10开头\n\n➜  01.大前端 git:(develop) ✗ ll\ntotal 0\ndrwxr-xr-x  14 izhaong  staff   448B  4  9 18:26 0110.HTML&CSS\ndrwxr-xr-x  13 izhaong  staff   416B  4  9 18:26 0120.JavaScript&TypeScript\ndrwxr-xr-x  13 izhaong  staff   416B  4  9 18:26 0130.Node\ndrwxr-xr-x  16 izhaong  staff   512B  4 14 14:49 0140.Vue\ndrwxr-xr-x   3 izhaong  staff    96B  4  9 18:26 0150.React\ndrwxr-xr-x   4 izhaong  staff   128B  4  9 18:26 0160.小程序\ndrwxr-xr-x   5 izhaong  staff   160B  4  9 18:26 0170.跨端\ndrwxr-xr-x   4 izhaong  staff   128B  4  9 18:26 0180.Electron\ndrwxr-xr-x   7 izhaong  staff   224B  4  9 18:26 0190.浏览器\ndrwxr-xr-x   5 izhaong  staff   160B  4  9 18:26 0199.其他\ndrwxr-xr-x   2 izhaong  staff    64B  5  4 15:08 1035.webpack&vite\n➜  01.大前端 git:(develop) ✗\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nrename 's/01/10/' *\n\n\n\n\n# 加上前缀\n\nrename 's/^/poster_/' *.jpg\n\n\n\n\n# 其他\n\nrename 's/Sam3/Stm32/' *.nc\t# 1.将所有*.nc文件中Sam3替换成Stm32\nrename 's/\\.bak$//' *.bak\t# 2.去掉文件后缀名(比如去掉.bak)\nrename 's/[ ]+//g' *\t\t# 3.去掉文件名的空格\nrename 's/^/yes/' *\t\t\t# 4.文件开头加入字符串(比如yes)\nrename 's/$/yes/' *\t\t\t# 5.文件末尾加入字符串(比如yes)\nrename 'y/A-Z/a-z/' *\t\t# 6.将文件名改为小写\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"# 批量重命名\n\n * 查看是否支持rename命令rename\n\n * 若不支持则安装：brew install rename\n\n\n# 使用\n\n * 我现需要把01开头的文件换成10开头\n\n➜  01.大前端 git:(develop) ✗ ll\ntotal 0\ndrwxr-xr-x  14 izhaong  staff   448b  4  9 18:26 0110.html&css\ndrwxr-xr-x  13 izhaong  staff   416b  4  9 18:26 0120.javascript&typescript\ndrwxr-xr-x  13 izhaong  staff   416b  4  9 18:26 0130.node\ndrwxr-xr-x  16 izhaong  staff   512b  4 14 14:49 0140.vue\ndrwxr-xr-x   3 izhaong  staff    96b  4  9 18:26 0150.react\ndrwxr-xr-x   4 izhaong  staff   128b  4  9 18:26 0160.小程序\ndrwxr-xr-x   5 izhaong  staff   160b  4  9 18:26 0170.跨端\ndrwxr-xr-x   4 izhaong  staff   128b  4  9 18:26 0180.electron\ndrwxr-xr-x   7 izhaong  staff   224b  4  9 18:26 0190.浏览器\ndrwxr-xr-x   5 izhaong  staff   160b  4  9 18:26 0199.其他\ndrwxr-xr-x   2 izhaong  staff    64b  5  4 15:08 1035.webpack&vite\n➜  01.大前端 git:(develop) ✗\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nrename 's/01/10/' *\n\n\n\n\n# 加上前缀\n\nrename 's/^/poster_/' *.jpg\n\n\n\n\n# 其他\n\nrename 's/sam3/stm32/' *.nc\t# 1.将所有*.nc文件中sam3替换成stm32\nrename 's/\\.bak$//' *.bak\t# 2.去掉文件后缀名(比如去掉.bak)\nrename 's/[ ]+//g' *\t\t# 3.去掉文件名的空格\nrename 's/^/yes/' *\t\t\t# 4.文件开头加入字符串(比如yes)\nrename 's/$/yes/' *\t\t\t# 5.文件末尾加入字符串(比如yes)\nrename 'y/a-z/a-z/' *\t\t# 6.将文件名改为小写\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"linux 网络学习",frontmatter:{title:"linux 网络学习",date:"2023-09-17T15:33:58.000Z",permalink:"/pages/ad7501/",categories:["后端&运维","Linux"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2050.Linux/2050055.linux%20%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0.html",relativePath:"20.后端&运维/2050.Linux/2050055.linux 网络学习.md",key:"v-27ea0e5e",path:"/pages/ad7501/",headers:[{level:3,title:"查看当前 ip 地址",slug:"查看当前-ip-地址",normalizedTitle:"查看当前 ip 地址",charIndex:2},{level:3,title:"修改网卡配置文件：",slug:"修改网卡配置文件",normalizedTitle:"修改网卡配置文件：",charIndex:50},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:3,title:"验证网络是否联通.",slug:"验证网络是否联通",normalizedTitle:"验证网络是否联通.",charIndex:283},{level:3,title:"使用 nmcli 命令查看一下网络设置:",slug:"使用-nmcli-命令查看一下网络设置",normalizedTitle:"使用 nmcli 命令查看一下网络设置:",charIndex:317},{level:3,title:"查看指定网卡的信息:",slug:"查看指定网卡的信息",normalizedTitle:"查看指定网卡的信息:",charIndex:710},{level:3,title:"查看IPv6地址",slug:"查看ipv6地址",normalizedTitle:"查看ipv6地址",charIndex:758},{level:2,title:"案例：",slug:"案例",normalizedTitle:"案例：",charIndex:1e3}],headersStr:"查看当前 ip 地址 修改网卡配置文件：  验证网络是否联通. 使用 nmcli 命令查看一下网络设置: 查看指定网卡的信息: 查看IPv6地址 案例：",content:'# 查看当前 ip 地址\n\nip addr show\n\nifconfig\n\n\n1\n2\n3\n\n\n\n# 修改网卡配置文件：\n\n设置为固定 ip.\n\n# vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 # 不同的网卡名臣可能不同\n\n\n1\n\n\n使网卡配置生效\n\n重启网络服务。后查看 ip 是否与分配的相同。\n\n# service network restart\n# ip addr show\n\n\n1\n2\n\n\nping 以下网络，检查网络连接状态。\n\n# ping -c4 www.baidu.com\n\n\n1\n\n\n\n#\n\n\n# 验证网络是否联通.\n\nping 10.1.1.1\n\n\n1\n\n\n\n# 使用 nmcli 命令查看一下网络设置:\n\n[root@localhost etc]# nmcli connection show\nNAME             UUID                                  TYPE      DEVICE          \nens192           1b62cf76-140c-452e-9424-9300026bd22a  ethernet  ens192          \nbr-7e23d6219963  6cb9e11b-f4aa-43d4-b590-339d22ff6fb7  bridge    br-7e23d6219963 \n\n\n1\n2\n3\n4\n\n\n该命令会返回 4 列数据. 分别是 NAME(联网代号), UUID(识别码), TYPE网卡类型, DEVICE(网卡名称).\n\n\n# 查看指定网卡的信息:\n\nnmcli connection show 联网代号\n\n\n1\n\n\n\n# 查看IPv6地址\n\n`ip addr show ens192 | grep "inet6.*global" | awk \'{print $2}\' | awk -F"/" \'{print $1}\'` || die "$ipv6"\n\nip addr | grep "inet6.*global" | grep -v "deprecated" | awk \'{print $2}\' | awk -F"/" \'{print $1}\' | sed -n \'1,1p\'\n\n\n1\n2\n3\n\n\n\n# 案例：\n\n自动映射域名：\n\nddns：https://github.com/jeessy2/ddns-go',normalizedContent:'# 查看当前 ip 地址\n\nip addr show\n\nifconfig\n\n\n1\n2\n3\n\n\n\n# 修改网卡配置文件：\n\n设置为固定 ip.\n\n# vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 # 不同的网卡名臣可能不同\n\n\n1\n\n\n使网卡配置生效\n\n重启网络服务。后查看 ip 是否与分配的相同。\n\n# service network restart\n# ip addr show\n\n\n1\n2\n\n\nping 以下网络，检查网络连接状态。\n\n# ping -c4 www.baidu.com\n\n\n1\n\n\n\n#\n\n\n# 验证网络是否联通.\n\nping 10.1.1.1\n\n\n1\n\n\n\n# 使用 nmcli 命令查看一下网络设置:\n\n[root@localhost etc]# nmcli connection show\nname             uuid                                  type      device          \nens192           1b62cf76-140c-452e-9424-9300026bd22a  ethernet  ens192          \nbr-7e23d6219963  6cb9e11b-f4aa-43d4-b590-339d22ff6fb7  bridge    br-7e23d6219963 \n\n\n1\n2\n3\n4\n\n\n该命令会返回 4 列数据. 分别是 name(联网代号), uuid(识别码), type网卡类型, device(网卡名称).\n\n\n# 查看指定网卡的信息:\n\nnmcli connection show 联网代号\n\n\n1\n\n\n\n# 查看ipv6地址\n\n`ip addr show ens192 | grep "inet6.*global" | awk \'{print $2}\' | awk -f"/" \'{print $1}\'` || die "$ipv6"\n\nip addr | grep "inet6.*global" | grep -v "deprecated" | awk \'{print $2}\' | awk -f"/" \'{print $1}\' | sed -n \'1,1p\'\n\n\n1\n2\n3\n\n\n\n# 案例：\n\n自动映射域名：\n\nddns：https://github.com/jeessy2/ddns-go',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"玩转虚拟机VMware",frontmatter:{title:"玩转虚拟机VMware",date:"2023-09-17T16:46:39.000Z",permalink:"/pages/9cd4ff/",categories:["后端&运维","虚拟机"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2055.%E8%99%9A%E6%8B%9F%E6%9C%BA/2055055.%E7%8E%A9%E8%BD%AC%E8%99%9A%E6%8B%9F%E6%9C%BAVMware.html",relativePath:"20.后端&运维/2055.虚拟机/2055055.玩转虚拟机VMware.md",key:"v-2b5304ef",path:"/pages/9cd4ff/",headers:[{level:2,title:"网络适配器",slug:"网络适配器",normalizedTitle:"网络适配器",charIndex:2},{level:3,title:"桥街模式, 复制物理网络连接状态",slug:"桥街模式-复制物理网络连接状态",normalizedTitle:"桥街模式, 复制物理网络连接状态",charIndex:12}],headersStr:"网络适配器 桥街模式, 复制物理网络连接状态",content:"# 网络适配器\n\n\n# 桥街模式, 复制物理网络连接状态\n\nvi /etc/sysconfig/network-scripts/ifcfg-e**\n\n\n1\n\n\n说明： ifcfg-e**文件每个人可能不同\n\nTYPE=Ethernet\nBOOTPROTO=static #修改成static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nNAME=eno16777736\nUUID=bf5337ab-c044-4af7-9143-12da0d493b89\nDEVICE=eno16777736\nONBOOT=yes #修改成yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPADDR=192.168.0.200 # 自定义虚拟机的ip地址（主机是192.168.0.107），必须与主机在同一网段\nNETMASK=255.255.255.0 #设置子网掩码，跟宿主一样\nGETWAY=192.168.0.1  #默认网关，跟宿主一样\nDNS1=192.168.0.1 #DNS，跟宿主一样\nip地址：设置和宿主机同网段ip\nNETMASK：子网掩码和宿主机相同\nGETWAY: 默认网关和宿主机相同\nDNS1: 跟宿主一样\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n添加网关地址\n\nvi /etc/sysconfig/network \n\n\n1\n\n\n内容如下：\n\nNETWORKING=yes\nHOSTNAME=xxxx #名字随便了\nGETWAY=192.168.1.1 #默认网关和宿主机相同\n\n\n1\n2\n3\n\n\n添加DNS\n\nvi /etc/resolv.conf \n\n\n1\n\n\n内容如下：\n\n# Generated by NetworkManager\nnameserver 192.168.0.1 #DNS，跟宿主一样\n\n\n1\n2\n\n\n重启network\n\nservice network restart\n\n\n1\n\n\n----------------------------------------\n\nTYPE=Ethernet\nPROXY_METHOD=static\nBROWSER_ONLY=no\nBOOTPROTO=dhcp\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=e6b6435d-1f19-4fb9-96ec-cef2ee6416a6\nDEVICE=ens33\nONBOOT=yes\nIPADDR=192.168.3.222\nNETMASK=255.255.255.0\nGATEWAY=192.168.3.1\nDNS1=192.168.3.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n配置到这一步也可以试试ping www.baidu.com通了就可以了",normalizedContent:"# 网络适配器\n\n\n# 桥街模式, 复制物理网络连接状态\n\nvi /etc/sysconfig/network-scripts/ifcfg-e**\n\n\n1\n\n\n说明： ifcfg-e**文件每个人可能不同\n\ntype=ethernet\nbootproto=static #修改成static\ndefroute=yes\nipv4_failure_fatal=no\nipv6init=yes\nipv6_autoconf=yes\nipv6_defroute=yes\nipv6_failure_fatal=no\nname=eno16777736\nuuid=bf5337ab-c044-4af7-9143-12da0d493b89\ndevice=eno16777736\nonboot=yes #修改成yes\npeerdns=yes\npeerroutes=yes\nipv6_peerdns=yes\nipv6_peerroutes=yes\nipaddr=192.168.0.200 # 自定义虚拟机的ip地址（主机是192.168.0.107），必须与主机在同一网段\nnetmask=255.255.255.0 #设置子网掩码，跟宿主一样\ngetway=192.168.0.1  #默认网关，跟宿主一样\ndns1=192.168.0.1 #dns，跟宿主一样\nip地址：设置和宿主机同网段ip\nnetmask：子网掩码和宿主机相同\ngetway: 默认网关和宿主机相同\ndns1: 跟宿主一样\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n添加网关地址\n\nvi /etc/sysconfig/network \n\n\n1\n\n\n内容如下：\n\nnetworking=yes\nhostname=xxxx #名字随便了\ngetway=192.168.1.1 #默认网关和宿主机相同\n\n\n1\n2\n3\n\n\n添加dns\n\nvi /etc/resolv.conf \n\n\n1\n\n\n内容如下：\n\n# generated by networkmanager\nnameserver 192.168.0.1 #dns，跟宿主一样\n\n\n1\n2\n\n\n重启network\n\nservice network restart\n\n\n1\n\n\n----------------------------------------\n\ntype=ethernet\nproxy_method=static\nbrowser_only=no\nbootproto=dhcp\ndefroute=yes\nipv4_failure_fatal=no\nipv6init=yes\nipv6_autoconf=yes\nipv6_defroute=yes\nipv6_failure_fatal=no\nipv6_addr_gen_mode=stable-privacy\nname=ens33\nuuid=e6b6435d-1f19-4fb9-96ec-cef2ee6416a6\ndevice=ens33\nonboot=yes\nipaddr=192.168.3.222\nnetmask=255.255.255.0\ngateway=192.168.3.1\ndns1=192.168.3.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n配置到这一步也可以试试ping www.baidu.com通了就可以了",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"exei usb 硬盘挂载",frontmatter:{title:"exei usb 硬盘挂载",date:"2023-09-17T16:29:55.000Z",permalink:"/pages/a13721/",categories:["后端&运维","虚拟机"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2055.%E8%99%9A%E6%8B%9F%E6%9C%BA/2055105.exei%20usb%20%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD.html",relativePath:"20.后端&运维/2055.虚拟机/2055105.exei usb 硬盘挂载.md",key:"v-54b89c43",path:"/pages/a13721/",headersStr:null,content:'/etc/init.d/usbarbitrator stop\n\nchkconfig usbarbitrator off\n\n接入硬盘：esxcli storage core device list |grep -i usb\n\nls /dev/disks/\n\n\n\nvmhba32\\:C0\\:T0\\:L0有可能会不一样 如果不一样下面所有命令都需要做替换\n\npartedUtil mklabel /dev/disks/mpx.vmhba32\\:C0\\:T0\\:L0 gpt \npartedUtil getptbl /dev/disks/mpx.vmhba32\\:C0\\:T0\\:L0\n\n\n1\n2\n\n * 换算大小 每个人基本都不一样 下面命令需要替换\n\neval expr $(partedUtil getptbl /dev/disks/mpx.vmhba32\\:C0\\:T0\\:L0 | tail -1 | awk \'{print $1 " \\\\* " $2 " \\\\* " $3}\') - 1\n\n\n1\n\n\n得出结果 250067789\n\n * 让系统识别我们的硬盘 250067789需要替换成你的\n\n * partedUtil setptbl /dev/disks/mpx.vmhba32\\:C0\\:T0\\:L0 gpt "1 2048 250067789 AA31E02A400F11DB9590000C2911D1B8 0"\n\n * 挂载USB硬盘\n\n * vmkfstools -C vmfs5 -S USB_Datastore /dev/disks/mpx.vmhba32\\:C0\\:T0\\:L0:1',normalizedContent:'/etc/init.d/usbarbitrator stop\n\nchkconfig usbarbitrator off\n\n接入硬盘：esxcli storage core device list |grep -i usb\n\nls /dev/disks/\n\n\n\nvmhba32\\:c0\\:t0\\:l0有可能会不一样 如果不一样下面所有命令都需要做替换\n\npartedutil mklabel /dev/disks/mpx.vmhba32\\:c0\\:t0\\:l0 gpt \npartedutil getptbl /dev/disks/mpx.vmhba32\\:c0\\:t0\\:l0\n\n\n1\n2\n\n * 换算大小 每个人基本都不一样 下面命令需要替换\n\neval expr $(partedutil getptbl /dev/disks/mpx.vmhba32\\:c0\\:t0\\:l0 | tail -1 | awk \'{print $1 " \\\\* " $2 " \\\\* " $3}\') - 1\n\n\n1\n\n\n得出结果 250067789\n\n * 让系统识别我们的硬盘 250067789需要替换成你的\n\n * partedutil setptbl /dev/disks/mpx.vmhba32\\:c0\\:t0\\:l0 gpt "1 2048 250067789 aa31e02a400f11db9590000c2911d1b8 0"\n\n * 挂载usb硬盘\n\n * vmkfstools -c vmfs5 -s usb_datastore /dev/disks/mpx.vmhba32\\:c0\\:t0\\:l0:1',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"esxi all in one",frontmatter:{title:"esxi all in one",date:"2023-09-17T16:33:14.000Z",permalink:"/pages/8c2077/",categories:["后端&运维","虚拟机"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2055.%E8%99%9A%E6%8B%9F%E6%9C%BA/2055110.esxi%20all%20in%20one.html",relativePath:"20.后端&运维/2055.虚拟机/2055110.esxi all in one.md",key:"v-6d4fda76",path:"/pages/8c2077/",headers:[{level:3,title:"手动设置IP",slug:"手动设置ip",normalizedTitle:"手动设置ip",charIndex:278},{level:3,title:"安装驱动",slug:"安装驱动",normalizedTitle:"安装驱动",charIndex:470},{level:3,title:"存储：",slug:"存储",normalizedTitle:"存储：",charIndex:833},{level:3,title:"硬件直通",slug:"硬件直通",normalizedTitle:"硬件直通",charIndex:1050},{level:3,title:"iKuai",slug:"ikuai",normalizedTitle:"ikuai",charIndex:1164}],headersStr:"手动设置IP 安装驱动 存储： 硬件直通 iKuai",content:"先把网卡插上再安装系统\n\n遇坑：7.0 u1版本 后续安装离线驱动 提示host问题 之后重新安装6.7版本发现网卡是好了的\n\n确认你的网卡是否支持esxi：https://www.vmware.com/resources/compatibility/search.php\n\n\n\n在安装esxi loading 的时候，迅速按下 shift + O，空格 autoPartitionOSDataSize=9999\n\n有固态硬盘就安装在固态硬盘上\n\nautoPartitionOSDataSize=999\n\n密码：Izhaong164165005+\n\n\n# 手动设置IP\n\n启动后F2登录 进入网络管理\n\nNetwork Adapters 物理网口管理 IPv4 Configuration 网络配置\n\nIPv4 Address: 192.168.2.9\n\nSubnet Mask: 255.255.255.0\n\nDefault Gateway: 192.168.2.1\n\n远程登录：\n\n\n\nssh root@192.168.2.9\n\n\n# 安装驱动\n\n比如安装rtl8111网卡\n\n在官网包中找到 https://vibsdepot.v-front.de/wiki/index.php/List_of_currently_available_ESXi_packages\n\n\n\n如果你已经安装好了esxi 就安装下面的离线包，也可以使用上面一个一起打包成iso镜像包\n\n我使用的下面的离线包\n\n需要使用到window10 的 powershell\n\nesxcli software component apply -d /vmfs/volumes/USB_Datastore/driver/net55-r8168-8.045a-napi-offline_bundle.zip\n\n\n1\n\n\n\n\nesxcli software vib list查看安装的所有驱动\n\n\n# 存储：\n\nusb存储\n\nesxi 默认禁用 usb存储了\n\n要从控制台访问 USB 存储和其他设备，请禁用 USB 直通。要检查 USB 的状态，请运行以下命令：chkconfig --list | grep -i usb\n\n\n\nchkconfig usbarbitrator off\n\n\n1\n\n\n接入usb硬盘\n\n运行：esxcli storage core device list |grep -i usb就可以看到\n\n\n\n\n# 硬件直通\n\nesxi把硬件管理权限移交给虚拟系统\n\n直通网卡重启后依然提示“已启用/需要重新引导”的解决方法: 需要把VMkernel.Boot.disableACSCheck 改为 true\n\n\n\n * 开启混杂模式\n\n\n# iKuai\n\n2核\n\n4G 预留4G 运存\n\n8G 存储\n\npci添加 有几个口就添加几次\n\n如图：\n\n\n\nlan: 192.168.2.1\n\nwan: PPOE\n\n",normalizedContent:"先把网卡插上再安装系统\n\n遇坑：7.0 u1版本 后续安装离线驱动 提示host问题 之后重新安装6.7版本发现网卡是好了的\n\n确认你的网卡是否支持esxi：https://www.vmware.com/resources/compatibility/search.php\n\n\n\n在安装esxi loading 的时候，迅速按下 shift + o，空格 autopartitionosdatasize=9999\n\n有固态硬盘就安装在固态硬盘上\n\nautopartitionosdatasize=999\n\n密码：izhaong164165005+\n\n\n# 手动设置ip\n\n启动后f2登录 进入网络管理\n\nnetwork adapters 物理网口管理 ipv4 configuration 网络配置\n\nipv4 address: 192.168.2.9\n\nsubnet mask: 255.255.255.0\n\ndefault gateway: 192.168.2.1\n\n远程登录：\n\n\n\nssh root@192.168.2.9\n\n\n# 安装驱动\n\n比如安装rtl8111网卡\n\n在官网包中找到 https://vibsdepot.v-front.de/wiki/index.php/list_of_currently_available_esxi_packages\n\n\n\n如果你已经安装好了esxi 就安装下面的离线包，也可以使用上面一个一起打包成iso镜像包\n\n我使用的下面的离线包\n\n需要使用到window10 的 powershell\n\nesxcli software component apply -d /vmfs/volumes/usb_datastore/driver/net55-r8168-8.045a-napi-offline_bundle.zip\n\n\n1\n\n\n\n\nesxcli software vib list查看安装的所有驱动\n\n\n# 存储：\n\nusb存储\n\nesxi 默认禁用 usb存储了\n\n要从控制台访问 usb 存储和其他设备，请禁用 usb 直通。要检查 usb 的状态，请运行以下命令：chkconfig --list | grep -i usb\n\n\n\nchkconfig usbarbitrator off\n\n\n1\n\n\n接入usb硬盘\n\n运行：esxcli storage core device list |grep -i usb就可以看到\n\n\n\n\n# 硬件直通\n\nesxi把硬件管理权限移交给虚拟系统\n\n直通网卡重启后依然提示“已启用/需要重新引导”的解决方法: 需要把vmkernel.boot.disableacscheck 改为 true\n\n\n\n * 开启混杂模式\n\n\n# ikuai\n\n2核\n\n4g 预留4g 运存\n\n8g 存储\n\npci添加 有几个口就添加几次\n\n如图：\n\n\n\nlan: 192.168.2.1\n\nwan: ppoe\n\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"pve使用",frontmatter:{title:"pve使用",date:"2023-09-17T16:41:32.000Z",permalink:"/pages/e649f7/",categories:["后端&运维","虚拟机"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2055.%E8%99%9A%E6%8B%9F%E6%9C%BA/2055301.pve%E4%BD%BF%E7%94%A8.html",relativePath:"20.后端&运维/2055.虚拟机/2055301.pve使用.md",key:"v-2a9e80c5",path:"/pages/e649f7/",headers:[{level:2,title:"系统初始化",slug:"系统初始化",normalizedTitle:"系统初始化",charIndex:2},{level:3,title:"登录",slug:"登录",normalizedTitle:"登录",charIndex:19},{level:3,title:"更新系统&工具安装",slug:"更新系统-工具安装",normalizedTitle:"更新系统&amp;工具安装",charIndex:null},{level:4,title:"PVE换源",slug:"pve换源",normalizedTitle:"pve换源",charIndex:75},{level:4,title:"Debian换源",slug:"debian换源",normalizedTitle:"debian换源",charIndex:510},{level:4,title:"更新&安装ethtool",slug:"更新-安装ethtool",normalizedTitle:"更新&amp;安装ethtool",charIndex:null}],headersStr:"系统初始化 登录 更新系统&工具安装 PVE换源 Debian换源 更新&安装ethtool",content:'# 系统初始化\n\n\n\n完成后会有web登录页面\n\n\n\n\n# 登录\n\n账号: root\n\n密码: 刚刚启动设置的\n\n\n\n\n# 更新系统&工具安装\n\n# PVE换源\n\n在pve shell中输入\n\nwget https://mirrors.ustc.edu.cn/proxmox/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg\necho "#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise" > /etc/apt/sources.list.d/pve-enterprise.list\necho "deb https://mirrors.ustc.edu.cn/proxmox/debian/pve bullseye pve-no-subscription" > /etc/apt/sources.list.d/pve-no-subscription.list\n\n\n1\n2\n3\n\n\n如图:\n\n\n\n# Debian换源\n\npve 基于 debian ,所以也需要更换\n\nmv /etc/apt/sources.list /etc/apt/sources.list.bk\nnano /etc/apt/sources.list\n\n\n1\n2\n\n\n回车后 输入 source.list 内容\n\ndeb http://mirrors.ustc.edu.cn/debian stable main contrib non-free\n# deb-src http://mirrors.ustc.edu.cn/debian stable main contrib non-free\ndeb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free\n# deb-src http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free\n\n# deb http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free\n# deb-src http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n然后 ctrl X Y 最后再 回车 就保存好了\n\n# 更新&安装ethtool\n\napt update\napt upgrade -y\n\n\n1\n2\n',normalizedContent:'# 系统初始化\n\n\n\n完成后会有web登录页面\n\n\n\n\n# 登录\n\n账号: root\n\n密码: 刚刚启动设置的\n\n\n\n\n# 更新系统&工具安装\n\n# pve换源\n\n在pve shell中输入\n\nwget https://mirrors.ustc.edu.cn/proxmox/debian/proxmox-release-bullseye.gpg -o /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg\necho "#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise" > /etc/apt/sources.list.d/pve-enterprise.list\necho "deb https://mirrors.ustc.edu.cn/proxmox/debian/pve bullseye pve-no-subscription" > /etc/apt/sources.list.d/pve-no-subscription.list\n\n\n1\n2\n3\n\n\n如图:\n\n\n\n# debian换源\n\npve 基于 debian ,所以也需要更换\n\nmv /etc/apt/sources.list /etc/apt/sources.list.bk\nnano /etc/apt/sources.list\n\n\n1\n2\n\n\n回车后 输入 source.list 内容\n\ndeb http://mirrors.ustc.edu.cn/debian stable main contrib non-free\n# deb-src http://mirrors.ustc.edu.cn/debian stable main contrib non-free\ndeb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free\n# deb-src http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free\n\n# deb http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free\n# deb-src http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n然后 ctrl x y 最后再 回车 就保存好了\n\n# 更新&安装ethtool\n\napt update\napt upgrade -y\n\n\n1\n2\n',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"PVE 软路由及网络",frontmatter:{title:"PVE 软路由及网络",date:"2023-09-17T16:38:08.000Z",permalink:"/pages/75e39d/",categories:["后端&运维","虚拟机"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2055.%E8%99%9A%E6%8B%9F%E6%9C%BA/2055304.PVE%20%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%8F%8A%E7%BD%91%E7%BB%9C.html",relativePath:"20.后端&运维/2055.虚拟机/2055304.PVE 软路由及网络.md",key:"v-1580d648",path:"/pages/75e39d/",headers:[{level:2,title:"识别网口",slug:"识别网口",normalizedTitle:"识别网口",charIndex:2},{level:3,title:"安装ethtool",slug:"安装ethtool",normalizedTitle:"安装ethtool",charIndex:11},{level:3,title:"打开端口自动启动 & 重启系统",slug:"打开端口自动启动-重启系统",normalizedTitle:"打开端口自动启动 &amp; 重启系统",charIndex:null},{level:3,title:"确认所有网卡设备位置",slug:"确认所有网卡设备位置",normalizedTitle:"确认所有网卡设备位置",charIndex:76},{level:3,title:"通过ethtool识别网口对应设备位置以及系统设备名",slug:"通过ethtool识别网口对应设备位置以及系统设备名",normalizedTitle:"通过ethtool识别网口对应设备位置以及系统设备名",charIndex:119},{level:3,title:"关闭端口自动启动 & 重启系统",slug:"关闭端口自动启动-重启系统",normalizedTitle:"关闭端口自动启动 &amp; 重启系统",charIndex:null},{level:2,title:"开启硬件直通",slug:"开启硬件直通",normalizedTitle:"开启硬件直通",charIndex:290},{level:4,title:"BIOS中打开硬件直通相关选项（VT-d & VMX）",slug:"bios中打开硬件直通相关选项-vt-d-vmx",normalizedTitle:"bios中打开硬件直通相关选项（vt-d &amp; vmx）",charIndex:null},{level:4,title:"编辑Grub",slug:"编辑grub",normalizedTitle:"编辑grub",charIndex:331},{level:4,title:"注释原条目，并增加开启参数",slug:"注释原条目-并增加开启参数",normalizedTitle:"注释原条目，并增加开启参数",charIndex:370},{level:4,title:"如果你的pcie设备分组有问题也可以换成这一行对分组拆分（直通遇到问题都可以尝试这个）",slug:"如果你的pcie设备分组有问题也可以换成这一行对分组拆分-直通遇到问题都可以尝试这个",normalizedTitle:"如果你的pcie设备分组有问题也可以换成这一行对分组拆分（直通遇到问题都可以尝试这个）",charIndex:443},{level:4,title:"更新grub",slug:"更新grub",normalizedTitle:"更新grub",charIndex:575},{level:2,title:"上传启动镜像",slug:"上传启动镜像",normalizedTitle:"上传启动镜像",charIndex:604},{level:2,title:"创建虚拟机并设置直通",slug:"创建虚拟机并设置直通",normalizedTitle:"创建虚拟机并设置直通",charIndex:729}],headersStr:"识别网口 安装ethtool 打开端口自动启动 & 重启系统 确认所有网卡设备位置 通过ethtool识别网口对应设备位置以及系统设备名 关闭端口自动启动 & 重启系统 开启硬件直通 BIOS中打开硬件直通相关选项（VT-d & VMX） 编辑Grub 注释原条目，并增加开启参数 如果你的pcie设备分组有问题也可以换成这一行对分组拆分（直通遇到问题都可以尝试这个） 更新grub 上传启动镜像 创建虚拟机并设置直通",content:'# 识别网口\n\n\n# 安装ethtool\n\napt install ethtool -y\n\n\n1\n\n\n\n\n\n# 打开端口自动启动 & 重启系统\n\n\n# 确认所有网卡设备位置\n\nlspci | grep -i \'eth\'\n\n\n1\n\n\n\n# 通过ethtool识别网口对应设备位置以及系统设备名\n\nethtool -i [设备名称]  #查看设备名对应设备位置\nethtool [设备名称]  #通过查看是否连接确认设备名对应实际网口，如果硬件支持可以使用ethtool --identify [设备名] 命令确认）\n\n\n1\n2\n\n\n\n\n\n# 关闭端口自动启动 & 重启系统\n\n\n# 开启硬件直通\n\n# BIOS中打开硬件直通相关选项（VT-d & VMX）\n\n# 编辑Grub\n\nnano /etc/default/grub\n\n\n1\n\n\n# 注释原条目，并增加开启参数\n\nGRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on"\n\n\n1\n\n\n# 如果你的pcie设备分组有问题也可以换成这一行对分组拆分（直通遇到问题都可以尝试这个）\n\nGRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on pcie_acs_override=downstream"\n\n\n1\n\n\n# 更新grub\n\nupdate-grub\n\n\n1\n\n\n\n# 上传启动镜像\n\n视频教学中镜像源自 klever1988/nanopi-openwrt 地址：https://github.com/klever1988/nanopi-openwrt\n\n将镜像img扩展名修改为iso，直接通过PVE后台上传\n\n\n# 创建虚拟机并设置直通\n\n修改配置文件命令\n\nnano /etc/pve/qemu-server/[虚拟机编号].conf\n\n\n1\n',normalizedContent:'# 识别网口\n\n\n# 安装ethtool\n\napt install ethtool -y\n\n\n1\n\n\n\n\n\n# 打开端口自动启动 & 重启系统\n\n\n# 确认所有网卡设备位置\n\nlspci | grep -i \'eth\'\n\n\n1\n\n\n\n# 通过ethtool识别网口对应设备位置以及系统设备名\n\nethtool -i [设备名称]  #查看设备名对应设备位置\nethtool [设备名称]  #通过查看是否连接确认设备名对应实际网口，如果硬件支持可以使用ethtool --identify [设备名] 命令确认）\n\n\n1\n2\n\n\n\n\n\n# 关闭端口自动启动 & 重启系统\n\n\n# 开启硬件直通\n\n# bios中打开硬件直通相关选项（vt-d & vmx）\n\n# 编辑grub\n\nnano /etc/default/grub\n\n\n1\n\n\n# 注释原条目，并增加开启参数\n\ngrub_cmdline_linux_default="quiet intel_iommu=on"\n\n\n1\n\n\n# 如果你的pcie设备分组有问题也可以换成这一行对分组拆分（直通遇到问题都可以尝试这个）\n\ngrub_cmdline_linux_default="quiet intel_iommu=on pcie_acs_override=downstream"\n\n\n1\n\n\n# 更新grub\n\nupdate-grub\n\n\n1\n\n\n\n# 上传启动镜像\n\n视频教学中镜像源自 klever1988/nanopi-openwrt 地址：https://github.com/klever1988/nanopi-openwrt\n\n将镜像img扩展名修改为iso，直接通过pve后台上传\n\n\n# 创建虚拟机并设置直通\n\n修改配置文件命令\n\nnano /etc/pve/qemu-server/[虚拟机编号].conf\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"闲置笔记本  单网口pve软路由",frontmatter:{title:"闲置笔记本  单网口pve软路由",date:"2023-09-17T16:30:57.000Z",permalink:"/pages/2236ae/",categories:["后端&运维","虚拟机"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2055.%E8%99%9A%E6%8B%9F%E6%9C%BA/2055311.%E9%97%B2%E7%BD%AE%E7%AC%94%E8%AE%B0%E6%9C%AC%20%20%E5%8D%95%E7%BD%91%E5%8F%A3pve%E8%BD%AF%E8%B7%AF%E7%94%B1.html",relativePath:"20.后端&运维/2055.虚拟机/2055311.闲置笔记本  单网口pve软路由.md",key:"v-3ac2d970",path:"/pages/2236ae/",headers:[{level:3,title:"img 转 qcow2",slug:"img-转-qcow2",normalizedTitle:"img 转 qcow2",charIndex:2},{level:4,title:"检查是否转换有错误",slug:"检查是否转换有错误",normalizedTitle:"检查是否转换有错误",charIndex:106},{level:4,title:"导入磁盘命令格式为（注意空格与大小写）",slug:"导入磁盘命令格式为-注意空格与大小写",normalizedTitle:"导入磁盘命令格式为（注意空格与大小写）",charIndex:153}],headersStr:"img 转 qcow2 检查是否转换有错误 导入磁盘命令格式为（注意空格与大小写）",content:'# img 转 qcow2\n\n为了性能 需要把img 纯镜像转换为pve专门使用的格式\n\nqemu-img convert -f raw -O qcow2 LEDE.img LEDE.qcow2\n\n\n1\n\n\n# 检查是否转换有错误\n\nqemu-img check LEDE.qcow2\n\n\n1\n\n\n\n\n# 导入磁盘命令格式为（注意空格与大小写）\n\nqm importdisk 100(虚拟机编号) LEDE.qcow2(映像名字) local-lvm(pve存储空间名字)\n\nqm importdisk 100 LEDE.qcow2 local-lvm\n\n\n1\n2\n3\n\n\n\n\n * 在100虚拟机硬件中就能看到新的磁盘\n\n\n\n * 双击导入LEDE的系统盘\n\n * \n\n * 再添加一个网络设备 为后面设置lan 和van口\n\n * \n\n * 硬件就暂时设置完毕，为系统设置启动盘\n\n * \n\n * 点击启动就好了\n\n * \n\n * 现在的网络应该是这样的\n\n * \n\n * 不注意情况下直接使用192.168.1.1可能和光猫管理界面冲突，需要到“/etc/config/network"文件下的"config interface \'lan\'"栏下的有192.168.1.1这个IP位置修改默认管理IP地址，且需要更改为与电脑相同网段。。。更改完毕后”service network restart "重启网络\n\n * \n\n * 然后就可以访问软路由web管理页面了 https://192.168.1.100/\n\n * \n\n * koolshare 为管理密码',normalizedContent:'# img 转 qcow2\n\n为了性能 需要把img 纯镜像转换为pve专门使用的格式\n\nqemu-img convert -f raw -o qcow2 lede.img lede.qcow2\n\n\n1\n\n\n# 检查是否转换有错误\n\nqemu-img check lede.qcow2\n\n\n1\n\n\n\n\n# 导入磁盘命令格式为（注意空格与大小写）\n\nqm importdisk 100(虚拟机编号) lede.qcow2(映像名字) local-lvm(pve存储空间名字)\n\nqm importdisk 100 lede.qcow2 local-lvm\n\n\n1\n2\n3\n\n\n\n\n * 在100虚拟机硬件中就能看到新的磁盘\n\n\n\n * 双击导入lede的系统盘\n\n * \n\n * 再添加一个网络设备 为后面设置lan 和van口\n\n * \n\n * 硬件就暂时设置完毕，为系统设置启动盘\n\n * \n\n * 点击启动就好了\n\n * \n\n * 现在的网络应该是这样的\n\n * \n\n * 不注意情况下直接使用192.168.1.1可能和光猫管理界面冲突，需要到“/etc/config/network"文件下的"config interface \'lan\'"栏下的有192.168.1.1这个ip位置修改默认管理ip地址，且需要更改为与电脑相同网段。。。更改完毕后”service network restart "重启网络\n\n * \n\n * 然后就可以访问软路由web管理页面了 https://192.168.1.100/\n\n * \n\n * koolshare 为管理密码',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"Git 实战使用",frontmatter:{title:"Git 实战使用",date:"2021-12-24T18:26:47.000Z",permalink:"/pages/769dad/",categories:["后端&运维","Git"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2060.Git/206000.Git%20%E5%AE%9E%E6%88%98%E4%BD%BF%E7%94%A8.html",relativePath:"20.后端&运维/2060.Git/206000.Git 实战使用.md",key:"v-7cc5bcbe",path:"/pages/769dad/",headers:[{level:2,title:"可视化训练",slug:"可视化训练",normalizedTitle:"可视化训练",charIndex:2},{level:2,title:"安装git",slug:"安装git",normalizedTitle:"安装git",charIndex:81},{level:2,title:"配置账号密码",slug:"配置账号密码",normalizedTitle:"配置账号密码",charIndex:91},{level:2,title:"添加公钥",slug:"添加公钥",normalizedTitle:"添加公钥",charIndex:233},{level:2,title:"克隆项目",slug:"克隆项目",normalizedTitle:"克隆项目",charIndex:850},{level:2,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:859},{level:2,title:"git flow",slug:"git-flow",normalizedTitle:"git flow",charIndex:925},{level:2,title:"commit message",slug:"commit-message",normalizedTitle:"commit message",charIndex:1109},{level:3,title:"工具",slug:"工具",normalizedTitle:"工具",charIndex:2156},{level:2,title:"changelog",slug:"changelog",normalizedTitle:"changelog",charIndex:1808},{level:2,title:"问题记录",slug:"问题记录",normalizedTitle:"问题记录",charIndex:2847},{level:4,title:"问题现象",slug:"问题现象",normalizedTitle:"问题现象",charIndex:2855},{level:4,title:"原因分析",slug:"原因分析",normalizedTitle:"原因分析",charIndex:2921},{level:4,title:"处理方法",slug:"处理方法",normalizedTitle:"处理方法",charIndex:2959},{level:4,title:"问题现象",slug:"问题现象-2",normalizedTitle:"问题现象",charIndex:2855},{level:4,title:"原因分析",slug:"原因分析-2",normalizedTitle:"原因分析",charIndex:2921},{level:4,title:"处理方法",slug:"处理方法-2",normalizedTitle:"处理方法",charIndex:2959}],headersStr:"可视化训练 安装git 配置账号密码 添加公钥 克隆项目 命令 git flow commit message 工具 changelog 问题记录 问题现象 原因分析 处理方法 问题现象 原因分析 处理方法",content:'# 可视化训练\n\nhttps://learngitbranching.js.org/?NODEMO=&locale=zh_CN\n\n切换某个分支到某个版本\n\n\n# 安装git\n\n\n# 配置账号密码\n\ngit config --global --replace-all user.name "your user name"\ngit config --global --replace-all user.email"your user email"\n\n\n1\n2\n\n\n\n# 添加公钥\n\nhttps://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\n\n$ ssh-keygen -o\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/schacon/.ssh/id_rsa):\nCreated directory \'/home/schacon/.ssh\'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/schacon/.ssh/id_rsa.\nYour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 克隆项目\n\n\n# 命令\n\n创建分支 git branch **\n\n切换分支 git cheout **\n\n合并分支 git merge **\n\n\n# git flow\n\nhttps://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow/\n\ngit flow init\n\n\n\ngit flow feature help\n\n\n1\n\n\n\n\ngit flow feature start express\n\n\n1\n\n\n\n\n\n# commit message\n\nhttps://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\n\nhttps://github.com/angular/angular/blob/master/CONTRIBUTING.md\n\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。\n\n<type>(<scope>): <short summary>\n  │       │             │\n  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.\n  │       │\n  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|\n  │                          elements|forms|http|language-service|localize|platform-browser|\n  │                          platform-browser-dynamic|platform-server|router|service-worker|\n  │                          upgrade|zone.js|packaging|changelog|dev-infra|docs-infra|migrations|\n  │                          ngcc|ve\n  │\n  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n * type\n\n * * feat：新功能（feature）\n   * fix：修补bug\n * * docs：文档（documentation）\n   * style： 格式（不影响代码运行的变动）\n * * refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n   * test：增加测试\n * * chore：构建过程或辅助工具的变动\n\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。\n\n * scope\n\n * * 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n * subject\n\n * * 是 commit 目的的简短描述，不超过50个字符。\n   * \n\n\n# 工具\n\nCommitizen是一个撰写合格 Commit message 的工具。\n\nnpm install -g commitizen\n\n\n1\n\n\n在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。\n\ncommitizen init cz-conventional-changelog --save --save-exact\n\n\n1\n\n\n\n# changelog\n\n自动生成工具\n\nhttps://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli\n\n$ npm install -g conventional-changelog-cli\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -s\n\n\n1\n2\n3\n\n\n\n# 问题记录\n\n# 问题现象\n\n使用git pull命令时，提示“refusing to merge unrelated histories”。\n\n# 原因分析\n\n云端与本地的仓库不同，例如：不同的分支、或不同的仓库等。\n\n# 处理方法\n\n使用命令**$ git pull origin master --allow-unrelated-histories**进行强制合并。\n\n# 问题现象\n\n.gitignore文件无效\n\n# 原因分析\n\n文件已经被提交过，处于被跟踪状态，所有即使加入.gitignore文件也无效\n\n# 处理方法\n\n删除该目录的缓存git rm -r --cached unpackage',normalizedContent:'# 可视化训练\n\nhttps://learngitbranching.js.org/?nodemo=&locale=zh_cn\n\n切换某个分支到某个版本\n\n\n# 安装git\n\n\n# 配置账号密码\n\ngit config --global --replace-all user.name "your user name"\ngit config --global --replace-all user.email"your user email"\n\n\n1\n2\n\n\n\n# 添加公钥\n\nhttps://git-scm.com/book/zh/v2/%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%8a%e7%9a%84-git-%e7%94%9f%e6%88%90-ssh-%e5%85%ac%e9%92%a5\n\n$ ssh-keygen -o\ngenerating public/private rsa key pair.\nenter file in which to save the key (/home/schacon/.ssh/id_rsa):\ncreated directory \'/home/schacon/.ssh\'.\nenter passphrase (empty for no passphrase):\nenter same passphrase again:\nyour identification has been saved in /home/schacon/.ssh/id_rsa.\nyour public key has been saved in /home/schacon/.ssh/id_rsa.pub.\nthe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 克隆项目\n\n\n# 命令\n\n创建分支 git branch **\n\n切换分支 git cheout **\n\n合并分支 git merge **\n\n\n# git flow\n\nhttps://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow/\n\ngit flow init\n\n\n\ngit flow feature help\n\n\n1\n\n\n\n\ngit flow feature start express\n\n\n1\n\n\n\n\n\n# commit message\n\nhttps://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\n\nhttps://github.com/angular/angular/blob/master/contributing.md\n\n每次提交，commit message 都包括三个部分：header，body 和 footer。\n\n<type>(<scope>): <short summary>\n  │       │             │\n  │       │             └─⫸ summary in present tense. not capitalized. no period at the end.\n  │       │\n  │       └─⫸ commit scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|\n  │                          elements|forms|http|language-service|localize|platform-browser|\n  │                          platform-browser-dynamic|platform-server|router|service-worker|\n  │                          upgrade|zone.js|packaging|changelog|dev-infra|docs-infra|migrations|\n  │                          ngcc|ve\n  │\n  └─⫸ commit type: build|ci|docs|feat|fix|perf|refactor|test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n * type\n\n * * feat：新功能（feature）\n   * fix：修补bug\n * * docs：文档（documentation）\n   * style： 格式（不影响代码运行的变动）\n * * refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n   * test：增加测试\n * * chore：构建过程或辅助工具的变动\n\n如果type为feat和fix，则该 commit 将肯定出现在 change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 change log，建议是不要。\n\n * scope\n\n * * 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n * subject\n\n * * 是 commit 目的的简短描述，不超过50个字符。\n   * \n\n\n# 工具\n\ncommitizen是一个撰写合格 commit message 的工具。\n\nnpm install -g commitizen\n\n\n1\n\n\n在项目目录里，运行下面的命令，使其支持 angular 的 commit message 格式。\n\ncommitizen init cz-conventional-changelog --save --save-exact\n\n\n1\n\n\n\n# changelog\n\n自动生成工具\n\nhttps://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli\n\n$ npm install -g conventional-changelog-cli\n$ cd my-project\n$ conventional-changelog -p angular -i changelog.md -s\n\n\n1\n2\n3\n\n\n\n# 问题记录\n\n# 问题现象\n\n使用git pull命令时，提示“refusing to merge unrelated histories”。\n\n# 原因分析\n\n云端与本地的仓库不同，例如：不同的分支、或不同的仓库等。\n\n# 处理方法\n\n使用命令**$ git pull origin master --allow-unrelated-histories**进行强制合并。\n\n# 问题现象\n\n.gitignore文件无效\n\n# 原因分析\n\n文件已经被提交过，处于被跟踪状态，所有即使加入.gitignore文件也无效\n\n# 处理方法\n\n删除该目录的缓存git rm -r --cached unpackage',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"git flow 步骤解析",frontmatter:{title:"git flow 步骤解析",date:"2021-12-30T16:04:36.000Z",permalink:"/pages/8a2edc/",categories:["后端&运维","Git"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2060.Git/206010.git%20flow%20%E6%AD%A5%E9%AA%A4%E8%A7%A3%E6%9E%90.html",relativePath:"20.后端&运维/2060.Git/206010.git flow 步骤解析.md",key:"v-1a6a6e0c",path:"/pages/8a2edc/",headers:[{level:2,title:"步骤分解",slug:"步骤分解",normalizedTitle:"步骤分解",charIndex:37},{level:3,title:"feature 功能分支",slug:"feature-功能分支",normalizedTitle:"feature 功能分支",charIndex:46},{level:3,title:"release 预发布功能分支",slug:"release-预发布功能分支",normalizedTitle:"release 预发布功能分支",charIndex:386},{level:2,title:"hotfix",slug:"hotfix",normalizedTitle:"hotfix",charIndex:808}],headersStr:"步骤分解 feature 功能分支 release 预发布功能分支 hotfix",content:"首先你有两个长期分支\n\n * master\n * develop\n\n\n# 步骤分解\n\n\n# feature 功能分支\n\n * git flow feature start toogle-theme\n   \n   * git checkout develop\n   \n   * git pull\n   \n   * git checkout -b feature/toogle-theme develop\n\n * git flow feature finish toogle-theme\n   \n   * git checkout develop\n   * git merge --no-ff feature/toogle-theme\n   * git branch -d feature/toogle-theme\n   * git checkout develop\n\n\n# release 预发布功能分支\n\n具有新功能和必要的修复且通过测试\n\n * git flow release start 1.1.5\n   \n   * git checkout -b release/1.1.5 develop\n\n * git flow release finish 1.1.5\n   \n   * git checkout master\n   \n   * git pull\n   \n   * git merge --no-ff release/1.1.5\n   \n   * git tag -a 1.1.5\n   \n   * git checkout develop\n   \n   * git pull\n   \n   * git merge --no-ff release-1.1.5\n   \n   * git branch -d release-1.1.5\n   \n   * git checkout develop\n\n\n# hotfix\n\n * git flow hotfix start missing-link\n   * ...\n * git flow hotfix finish missing-link\n   * ...",normalizedContent:"首先你有两个长期分支\n\n * master\n * develop\n\n\n# 步骤分解\n\n\n# feature 功能分支\n\n * git flow feature start toogle-theme\n   \n   * git checkout develop\n   \n   * git pull\n   \n   * git checkout -b feature/toogle-theme develop\n\n * git flow feature finish toogle-theme\n   \n   * git checkout develop\n   * git merge --no-ff feature/toogle-theme\n   * git branch -d feature/toogle-theme\n   * git checkout develop\n\n\n# release 预发布功能分支\n\n具有新功能和必要的修复且通过测试\n\n * git flow release start 1.1.5\n   \n   * git checkout -b release/1.1.5 develop\n\n * git flow release finish 1.1.5\n   \n   * git checkout master\n   \n   * git pull\n   \n   * git merge --no-ff release/1.1.5\n   \n   * git tag -a 1.1.5\n   \n   * git checkout develop\n   \n   * git pull\n   \n   * git merge --no-ff release-1.1.5\n   \n   * git branch -d release-1.1.5\n   \n   * git checkout develop\n\n\n# hotfix\n\n * git flow hotfix start missing-link\n   * ...\n * git flow hotfix finish missing-link\n   * ...",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"GitHub使用Action自动同步Gitee",frontmatter:{title:"GitHub使用Action自动同步Gitee",date:"2022-05-21T10:51:57.000Z",permalink:"/pages/5459d5/",categories:["后端&运维","Git"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2060.Git/2060100.GitHub%E4%BD%BF%E7%94%A8Action%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5Gitee.html",relativePath:"20.后端&运维/2060.Git/2060100.GitHub使用Action自动同步Gitee.md",key:"v-7abe89ca",path:"/pages/5459d5/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"git 同步",frontmatter:{title:"git 同步",date:"2022-01-24T10:21:04.000Z",permalink:"/pages/d33fbc/",categories:["后端&运维","Git"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2060.Git/206011.git%20%E5%90%8C%E6%AD%A5.html",relativePath:"20.后端&运维/2060.Git/206011.git 同步.md",key:"v-db69ce64",path:"/pages/d33fbc/",headersStr:null,content:' * 查看本地和远程仓库的所有分支 git branch -a\n\n * 查看远程仓库的分支git branch -r\n\n * git fetch 将本地分支与远程保持同步\n\n * 本地所有分支与远程保持同步 git fetch --all\n\n * 拉取所有分支代码 git pull --all\n\n * git checkout -b 本地分支名x origin/远程分支名x 拉取远程分支并同时创建对应的本地分支\n\n * 同步所有远程分支git branch -r | grep -v \'\\->\' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done\n\n * 将本地所有分支与远程保持同步 git fetch --all',normalizedContent:' * 查看本地和远程仓库的所有分支 git branch -a\n\n * 查看远程仓库的分支git branch -r\n\n * git fetch 将本地分支与远程保持同步\n\n * 本地所有分支与远程保持同步 git fetch --all\n\n * 拉取所有分支代码 git pull --all\n\n * git checkout -b 本地分支名x origin/远程分支名x 拉取远程分支并同时创建对应的本地分支\n\n * 同步所有远程分支git branch -r | grep -v \'\\->\' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done\n\n * 将本地所有分支与远程保持同步 git fetch --all',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"git 提交信息规范",frontmatter:{title:"git 提交信息规范",date:"2022-02-24T19:10:18.000Z",permalink:"/pages/2b68bd/",categories:["后端&运维","Git"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2060.Git/206012.git%20%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.html",relativePath:"20.后端&运维/2060.Git/206012.git 提交信息规范.md",key:"v-18e34bdf",path:"/pages/2b68bd/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:2},{level:2,title:"规范内容",slug:"规范内容",normalizedTitle:"规范内容",charIndex:61},{level:3,title:"举例：",slug:"举例",normalizedTitle:"举例：",charIndex:1232},{level:2,title:"辅助规范插件",slug:"辅助规范插件",normalizedTitle:"辅助规范插件",charIndex:1339},{level:3,title:"Commitizen",slug:"commitizen",normalizedTitle:"commitizen",charIndex:1350},{level:4,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:1362},{level:3,title:"cz-customizable",slug:"cz-customizable",normalizedTitle:"cz-customizable",charIndex:1529},{level:4,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:1460},{level:4,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:1586},{level:4,title:"使用",slug:"使用-2",normalizedTitle:"使用",charIndex:1362},{level:4,title:"限制只能通过git cz指令提交",slug:"限制只能通过git-cz指令提交",normalizedTitle:"限制只能通过git cz指令提交",charIndex:3424}],headersStr:"前言 规范内容 举例： 辅助规范插件 Commitizen 使用 cz-customizable 安装 配置 使用 限制只能通过git cz指令提交",content:"# 前言\n\ngit commit -m \"\" 一千个人，就有一千条信息，可谓是五花八门，天马行空，博大精深。。。\n\n\n# 规范内容\n\n下面介绍的是用的比较多的一种提交规范，Google下 Angular团队规范延伸出的约定式提交（Conventional Commits specification）\n\n> https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\n> \n> https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#\n\nCommit message的格式约定的规则总结如下：\n\n位置                 是否必须   实例\nHeader             必需     \n         type      必需     feat: 新功能\n                          fix: 错误修复\n                          docs: 仅文档更改\n                          style: 不影响代码含义的更改\n                          (空格、格式、缺少分号等)\n                          refactor: 既不修复 Bug 也不添加功能的代码更改\n                          perf: 提高性能的代码更改\n                          test: 添加缺少的测试\n                          chore: 对生成过程或辅助工具的更改\n                          和库如文档生成\n                          revert: 还原到提交\n                          WIP: 进行中工作'\n         scope     可选     $location, $browser, $compile, $rootScope, ngHref, ngClick,\n                          ngView, etc...\n         subject   必需     \nBody               可选     \nFooter             可选     \n                          \n\n翻译如下\n\n<类型>[可选 范围]: <描述>\n\n[可选 正文]\n\n[可选 脚注]\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n可以得出简洁版：<类型>: <描述>\n\n\n# 举例：\n\n * 简洁版\n\ndocs: 修改了登录授权的文档\n\n * 详细版\n\ndocs[登录授权]: 修改了登录授权的文档\n\n将文档中的企业授权改为公司授权\n\n第18个ISSUE\n\n\n1\n2\n3\n4\n5\n\n\n\n# 辅助规范插件\n\n\n# Commitizen\n\n使用 Commitizen 提交时，系统将提示您在提交时填写任何必需的提交字段。\n\n> GitHub：https://github.com/commitizen/cz-cli\n\n# 使用\n\n * 安装 ( 我的是commitizen@4.2.4 )\n\nnpm install -g commitizen@4.2.4\n\n\n1\n\n\n\n# cz-customizable\n\n# 安装\n\nnpm i cz-customizable@6.3.0 -D\n\n# 配置\n\n...\n\"config\": {\n  \"commitizen\": { // not needed for standlone usage\n    \"path\": \"node_modules/cz-customizable\"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n * 在您的主目录中创建一个名为 .cz-config.js 的文件(以下内容为我逐行翻译)\n   \n   * module.exports = {\n       types: [\n         { value: 'feat', name: 'feat:     新功能' },\n         { value: 'fix', name: 'fix:      错误修复' },\n         { value: 'docs', name: 'docs:     仅文档更改' },\n         {\n           value: 'style',\n           name: 'style:    不影响代码含义的更改\\n            (空格、格式、缺少分号等)'\n         },\n         {\n           value: 'refactor',\n           name: 'refactor: 既不修复 Bug 也不添加功能的代码更改'\n         },\n         {\n           value: 'perf',\n           name: 'perf:     提高性能的代码更改'\n         },\n         { value: 'test', name: 'test:     添加缺少的测试' },\n         {\n           value: 'chore',\n           name: 'chore:    对生成过程或辅助工具的更改\\n            和库，如文档生成'\n         },\n         { value: 'revert', name: 'revert:   还原到提交' },\n         { value: 'WIP', name: 'WIP:      进行中工作' }\n       ],\n       messages: {\n         type: \"选择要提交的更改类型:\",\n         scope: '\\n表示此更改的范围(可选):',\n         // used if allowCustomScopes is true\n         customScope: '表示此更改的范围:',\n         subject: '写一个简短的, 命令式的更改时态描述:\\n',\n         body: '提供更改的较长描述(可选)。使用\"|\"换行:\\n',\n         breaking: '列出所有重大更改(可选):\\n',\n         footer: '列出此更改解决的任何问题(可选)。例如:31、#34:\\n',\n         confirmCommit: '是否确实要继续执行上述提交?'\n       }\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     \n\n# 使用\n\n * 保存git add .\n\n * 提交代码: git cz 即可看到下方规范的commit message 各个部位的选择及其提示，如图：\n   \n   * \n\n * 做类似例子处理，如：\n   \n   * \n\n * 在git提交记录中也以看到：\n   \n   * \n\n# 限制只能通过git cz指令提交\n\n请看另一篇文章 git hooks",normalizedContent:"# 前言\n\ngit commit -m \"\" 一千个人，就有一千条信息，可谓是五花八门，天马行空，博大精深。。。\n\n\n# 规范内容\n\n下面介绍的是用的比较多的一种提交规范，google下 angular团队规范延伸出的约定式提交（conventional commits specification）\n\n> https://github.com/angular/angular/blob/22b96b9/contributing.md#-commit-message-guidelines\n> \n> https://docs.google.com/document/d/1qrdfciipjsldn3el15ijygnpihorgu1_ooaqwjidu5y/edit#\n\ncommit message的格式约定的规则总结如下：\n\n位置                 是否必须   实例\nheader             必需     \n         type      必需     feat: 新功能\n                          fix: 错误修复\n                          docs: 仅文档更改\n                          style: 不影响代码含义的更改\n                          (空格、格式、缺少分号等)\n                          refactor: 既不修复 bug 也不添加功能的代码更改\n                          perf: 提高性能的代码更改\n                          test: 添加缺少的测试\n                          chore: 对生成过程或辅助工具的更改\n                          和库如文档生成\n                          revert: 还原到提交\n                          wip: 进行中工作'\n         scope     可选     $location, $browser, $compile, $rootscope, nghref, ngclick,\n                          ngview, etc...\n         subject   必需     \nbody               可选     \nfooter             可选     \n                          \n\n翻译如下\n\n<类型>[可选 范围]: <描述>\n\n[可选 正文]\n\n[可选 脚注]\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n可以得出简洁版：<类型>: <描述>\n\n\n# 举例：\n\n * 简洁版\n\ndocs: 修改了登录授权的文档\n\n * 详细版\n\ndocs[登录授权]: 修改了登录授权的文档\n\n将文档中的企业授权改为公司授权\n\n第18个issue\n\n\n1\n2\n3\n4\n5\n\n\n\n# 辅助规范插件\n\n\n# commitizen\n\n使用 commitizen 提交时，系统将提示您在提交时填写任何必需的提交字段。\n\n> github：https://github.com/commitizen/cz-cli\n\n# 使用\n\n * 安装 ( 我的是commitizen@4.2.4 )\n\nnpm install -g commitizen@4.2.4\n\n\n1\n\n\n\n# cz-customizable\n\n# 安装\n\nnpm i cz-customizable@6.3.0 -d\n\n# 配置\n\n...\n\"config\": {\n  \"commitizen\": { // not needed for standlone usage\n    \"path\": \"node_modules/cz-customizable\"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n * 在您的主目录中创建一个名为 .cz-config.js 的文件(以下内容为我逐行翻译)\n   \n   * module.exports = {\n       types: [\n         { value: 'feat', name: 'feat:     新功能' },\n         { value: 'fix', name: 'fix:      错误修复' },\n         { value: 'docs', name: 'docs:     仅文档更改' },\n         {\n           value: 'style',\n           name: 'style:    不影响代码含义的更改\\n            (空格、格式、缺少分号等)'\n         },\n         {\n           value: 'refactor',\n           name: 'refactor: 既不修复 bug 也不添加功能的代码更改'\n         },\n         {\n           value: 'perf',\n           name: 'perf:     提高性能的代码更改'\n         },\n         { value: 'test', name: 'test:     添加缺少的测试' },\n         {\n           value: 'chore',\n           name: 'chore:    对生成过程或辅助工具的更改\\n            和库，如文档生成'\n         },\n         { value: 'revert', name: 'revert:   还原到提交' },\n         { value: 'wip', name: 'wip:      进行中工作' }\n       ],\n       messages: {\n         type: \"选择要提交的更改类型:\",\n         scope: '\\n表示此更改的范围(可选):',\n         // used if allowcustomscopes is true\n         customscope: '表示此更改的范围:',\n         subject: '写一个简短的, 命令式的更改时态描述:\\n',\n         body: '提供更改的较长描述(可选)。使用\"|\"换行:\\n',\n         breaking: '列出所有重大更改(可选):\\n',\n         footer: '列出此更改解决的任何问题(可选)。例如:31、#34:\\n',\n         confirmcommit: '是否确实要继续执行上述提交?'\n       }\n     }\n     \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     \n\n# 使用\n\n * 保存git add .\n\n * 提交代码: git cz 即可看到下方规范的commit message 各个部位的选择及其提示，如图：\n   \n   * \n\n * 做类似例子处理，如：\n   \n   * \n\n * 在git提交记录中也以看到：\n   \n   * \n\n# 限制只能通过git cz指令提交\n\n请看另一篇文章 git hooks",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Git Hooks",frontmatter:{title:"Git Hooks",date:"2022-02-24T19:45:33.000Z",permalink:"/pages/486e07/",categories:["后端&运维","Git"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2060.Git/206013.Git%20Hooks.html",relativePath:"20.后端&运维/2060.Git/206013.Git Hooks.md",key:"v-f92ac00e",path:"/pages/486e07/",headers:[{level:2,title:"前言",slug:"前言",normalizedTitle:"前言",charIndex:2},{level:2,title:"目的",slug:"目的",normalizedTitle:"目的",charIndex:549},{level:2,title:"提交前出发检查",slug:"提交前出发检查",normalizedTitle:"提交前出发检查",charIndex:601},{level:3,title:"git hooks 的hooks",slug:"git-hooks-的hooks",normalizedTitle:"git hooks 的hooks",charIndex:613},{level:2,title:"检查提交描述是否符合规范要求",slug:"检查提交描述是否符合规范要求",normalizedTitle:"检查提交描述是否符合规范要求",charIndex:1243},{level:3,title:"commitlint",slug:"commitlint",normalizedTitle:"commitlint",charIndex:1273},{level:4,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:1515},{level:4,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:1612},{level:3,title:"husky （哈撒给）",slug:"husky-哈撒给",normalizedTitle:"husky （哈撒给）",charIndex:2275},{level:4,title:"安装",slug:"安装-2",normalizedTitle:"安装",charIndex:1515},{level:4,title:"启用",slug:"启用",normalizedTitle:"启用",charIndex:2337},{level:4,title:"配置",slug:"配置-2",normalizedTitle:"配置",charIndex:1612},{level:4,title:"添加指令",slug:"添加指令",normalizedTitle:"添加指令",charIndex:2532},{level:4,title:"检验",slug:"检验",normalizedTitle:"检验",charIndex:2662}],headersStr:"前言 目的 提交前出发检查 git hooks 的hooks 检查提交描述是否符合规范要求 commitlint 安装 配置 husky （哈撒给） 安装 启用 配置 添加指令 检验",content:"# 前言\n\n具备基本工程素养的同学都会注重编码规范，而代码风格检查（Code Linting，简称 Lint）是保障代码规范一致性的重要手段。\n\n使用 Lint 会有什么好处呢？在我看来至少具有如下 3 点：\n\n * 更少的 Bug\n * 更高的开发效率，Lint 很容易发现低级的、显而易见的错误\n * 更高的可读性\n\n很多时候我们lint的校验是放在持续集成阶段，大概流程如下：\n\n> 代码提交 --\x3e 跑 CI 发现问题(远程) --\x3e 本地修复问题 --\x3e 重新提交 --\x3e 通过检查(远程)\n\n但这样有一个问题，我们的 CI(持续集成) 往往不是仅仅只做 Lint工作，它还有会有很多其它的任务（如打包文件，静态资源上传 CDN 等），这样就导致特别的浪费时间，往往可能需要几分钟之后你才会发现问题，或者有的时候你根本就没有发现你的 CI 没有跑通过。\n\n常见的流程：本地写好了代码，提交，开始跑 lint，发现不通过，本地修改代码，再提交，再等待 CI 的结果，若还有问题再重复之前的操作。\n\n> https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#husky\n\n\n# 目的\n\n当《提交描述信息》不符合 约定式提交规范 的时候，阻止当前的提交，并抛出对应的错误提示\n\n\n# 提交前出发检查\n\n\n# git hooks 的hooks\n\nHOOKS        调用时机                                   作用                              说明\npre-commit   git dommit 执行前                         会在提交前被调用，并且可以按需指定是否要拒绝本次提交      可以用 git commit\n                                                                                    --no-verify 绕过\n             它不接受任何参数，并且在获取提交日志消息并进行提交之前被调用。\n             脚本 git commit 以非零状态退出会导致命令在创建提交之前中止。\ncommit-msg   git commit 执行前<br /：                   可以用来规范化标准格式，并且可以按需指定是否要拒绝本次提交   可以用git commit\n             可用于将消息规范化为某种项目标准格式。 <br                                                --no-verify 绕过\n             还可用于在检查消息文件后拒绝提交。\n\n\n# 检查提交描述是否符合规范要求\n\n需要使用到两个工具\n\n * commitlint： 检查提交信息。\n * husky：是git hook 工具\n\n\n# commitlint\n\n> github https://github.com/conventional-changelog/commitlint\n\n * 检查您的提交消息是否符合传统的提交格式。\n   * 提交格式： type(scope?): subject 在我的另一片文章git 提交规范中提到\n   * 正确示例：fix(server): send cors headers\n\n# 安装\n\nnpm install --save-dev @commitlint/config-conventional@16.2.1 @commitlint/cli@16.2.1\n\n\n1\n\n\n# 配置\n\n * 创建 commitlint.config.js，并键入以下内容：\n\n * module.exports = {\n     extends: ['@commitlint/config-conventional'], // 集成规则\n     // 定义规则 会覆盖集成规则\n     roles: {\n       // type 的类型定义：表示 git 提交的 type 必须在以下类型范围之内\n       'type-enum': [\n         //当前验证的错误级别\n         2,\n         //在什么情况下进行验证\n         'always',\n         // 泛型内容\n         ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'chore', 'revert', 'WIP']\n       ],\n       // 大小写不做校验\n       'subject-case': [0]\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   >  * 更多配置项查看官方文档 https://commitlint.js.org/#/reference-configuration\n\n\n# husky （哈撒给）\n\n# 安装\n\nnpm install husky@7.0.4 --save-dev\n\n\n1\n\n\n# 启用\n\nnpx husky install\n\n\n1\n\n\n# 配置\n\n// package.json\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nnpm7+ 可以使用npm set-script prepare \"husky install\" 直接在package.json中生成脚本命令\n\n# 添加指令\n\n添加上面的commitlint指令在husky中\n\nnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n\n\n1\n\n\n.husky 的文件结构\n\n\n\n# 检验\n\ngit add .\n\ngit commit -m 'test hooks'\n\n会得到提示\n\n> git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file -\n⧗   input: test git hooks\n✖   subject may not be empty [subject-empty]\n✖   type may not be empty [type-empty]\n\n✖   found 2 problems, 0 warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n\nhusky - commit-msg hook exited with code 1 (error)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"# 前言\n\n具备基本工程素养的同学都会注重编码规范，而代码风格检查（code linting，简称 lint）是保障代码规范一致性的重要手段。\n\n使用 lint 会有什么好处呢？在我看来至少具有如下 3 点：\n\n * 更少的 bug\n * 更高的开发效率，lint 很容易发现低级的、显而易见的错误\n * 更高的可读性\n\n很多时候我们lint的校验是放在持续集成阶段，大概流程如下：\n\n> 代码提交 --\x3e 跑 ci 发现问题(远程) --\x3e 本地修复问题 --\x3e 重新提交 --\x3e 通过检查(远程)\n\n但这样有一个问题，我们的 ci(持续集成) 往往不是仅仅只做 lint工作，它还有会有很多其它的任务（如打包文件，静态资源上传 cdn 等），这样就导致特别的浪费时间，往往可能需要几分钟之后你才会发现问题，或者有的时候你根本就没有发现你的 ci 没有跑通过。\n\n常见的流程：本地写好了代码，提交，开始跑 lint，发现不通过，本地修改代码，再提交，再等待 ci 的结果，若还有问题再重复之前的操作。\n\n> https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#husky\n\n\n# 目的\n\n当《提交描述信息》不符合 约定式提交规范 的时候，阻止当前的提交，并抛出对应的错误提示\n\n\n# 提交前出发检查\n\n\n# git hooks 的hooks\n\nhooks        调用时机                                   作用                              说明\npre-commit   git dommit 执行前                         会在提交前被调用，并且可以按需指定是否要拒绝本次提交      可以用 git commit\n                                                                                    --no-verify 绕过\n             它不接受任何参数，并且在获取提交日志消息并进行提交之前被调用。\n             脚本 git commit 以非零状态退出会导致命令在创建提交之前中止。\ncommit-msg   git commit 执行前<br /：                   可以用来规范化标准格式，并且可以按需指定是否要拒绝本次提交   可以用git commit\n             可用于将消息规范化为某种项目标准格式。 <br                                                --no-verify 绕过\n             还可用于在检查消息文件后拒绝提交。\n\n\n# 检查提交描述是否符合规范要求\n\n需要使用到两个工具\n\n * commitlint： 检查提交信息。\n * husky：是git hook 工具\n\n\n# commitlint\n\n> github https://github.com/conventional-changelog/commitlint\n\n * 检查您的提交消息是否符合传统的提交格式。\n   * 提交格式： type(scope?): subject 在我的另一片文章git 提交规范中提到\n   * 正确示例：fix(server): send cors headers\n\n# 安装\n\nnpm install --save-dev @commitlint/config-conventional@16.2.1 @commitlint/cli@16.2.1\n\n\n1\n\n\n# 配置\n\n * 创建 commitlint.config.js，并键入以下内容：\n\n * module.exports = {\n     extends: ['@commitlint/config-conventional'], // 集成规则\n     // 定义规则 会覆盖集成规则\n     roles: {\n       // type 的类型定义：表示 git 提交的 type 必须在以下类型范围之内\n       'type-enum': [\n         //当前验证的错误级别\n         2,\n         //在什么情况下进行验证\n         'always',\n         // 泛型内容\n         ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'chore', 'revert', 'wip']\n       ],\n       // 大小写不做校验\n       'subject-case': [0]\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   >  * 更多配置项查看官方文档 https://commitlint.js.org/#/reference-configuration\n\n\n# husky （哈撒给）\n\n# 安装\n\nnpm install husky@7.0.4 --save-dev\n\n\n1\n\n\n# 启用\n\nnpx husky install\n\n\n1\n\n\n# 配置\n\n// package.json\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\nnpm7+ 可以使用npm set-script prepare \"husky install\" 直接在package.json中生成脚本命令\n\n# 添加指令\n\n添加上面的commitlint指令在husky中\n\nnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n\n\n1\n\n\n.husky 的文件结构\n\n\n\n# 检验\n\ngit add .\n\ngit commit -m 'test hooks'\n\n会得到提示\n\n> git -c user.useconfigonly=true commit --quiet --allow-empty-message --file -\n⧗   input: test git hooks\n✖   subject may not be empty [subject-empty]\n✖   type may not be empty [type-empty]\n\n✖   found 2 problems, 0 warnings\nⓘ   get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n\nhusky - commit-msg hook exited with code 1 (error)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"gitignore",frontmatter:{title:"gitignore",date:"2022-05-06T18:56:22.000Z",permalink:"/pages/e40051/",categories:["后端&运维","Git"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2060.Git/206020.gitignore.html",relativePath:"20.后端&运维/2060.Git/206020.gitignore.md",key:"v-255e2aba",path:"/pages/e40051/",headersStr:null,content:" * https://www.gitignore.io\n * https://github.com/github/gitignore\n * https://github.com/karan/joe",normalizedContent:" * https://www.gitignore.io\n * https://github.com/github/gitignore\n * https://github.com/karan/joe",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"深夜 当公司无人的时候",frontmatter:{title:"深夜 当公司无人的时候",date:"2022-10-20T09:57:08.000Z",permalink:"/pages/1bbe48/",categories:["后端&运维","网络"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2070.%E7%BD%91%E7%BB%9C/2070010.%E6%B7%B1%E5%A4%9C%20%E5%BD%93%E5%85%AC%E5%8F%B8%E6%97%A0%E4%BA%BA%E7%9A%84%E6%97%B6%E5%80%99.html",relativePath:"20.后端&运维/2070.网络/2070010.深夜 当公司无人的时候.md",key:"v-121673ac",path:"/pages/1bbe48/",headers:[{level:2,title:"光猫工作",slug:"光猫工作",normalizedTitle:"光猫工作",charIndex:2},{level:3,title:"疑问点：",slug:"疑问点",normalizedTitle:"疑问点：",charIndex:199}],headersStr:"光猫工作 疑问点：",content:"# 光猫工作\n\n * 打电话问运营商\n   * 提供公司地址\n   * 公司开户的电话号码\n * 光猫超级管理员账号密码\n * pppoe拨号的账号密码\n * 更换桥接模式\n   * \n\n本地桥接后：\n\n * 需要到营业厅再办理，否则80小时左右 数据再次下发连接模式会失效被覆盖掉\n   * 营业执照复印件，盖公章\n   * 委托书盖公章\n   * 经办人带身份证原件\n   * 。。。\n\n\n# 疑问点：\n\n * 公司本地光猫改为桥接后，直接能映射外网服务吗？ 还是需要营业厅方再更改才能生效？\n * 公司本地光猫更换桥接模式网速变慢原因跟运营商有关系吗？",normalizedContent:"# 光猫工作\n\n * 打电话问运营商\n   * 提供公司地址\n   * 公司开户的电话号码\n * 光猫超级管理员账号密码\n * pppoe拨号的账号密码\n * 更换桥接模式\n   * \n\n本地桥接后：\n\n * 需要到营业厅再办理，否则80小时左右 数据再次下发连接模式会失效被覆盖掉\n   * 营业执照复印件，盖公章\n   * 委托书盖公章\n   * 经办人带身份证原件\n   * 。。。\n\n\n# 疑问点：\n\n * 公司本地光猫改为桥接后，直接能映射外网服务吗？ 还是需要营业厅方再更改才能生效？\n * 公司本地光猫更换桥接模式网速变慢原因跟运营商有关系吗？",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"ipv6 端口转发",frontmatter:{title:"ipv6 端口转发",date:"2023-01-11T19:46:55.000Z",permalink:"/pages/00b5be/",categories:["后端&运维","网络"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2070.%E7%BD%91%E7%BB%9C/2070015.ipv6%20%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.html",relativePath:"20.后端&运维/2070.网络/2070015.ipv6 端口转发.md",key:"v-609104d0",path:"/pages/00b5be/",headers:[{level:2,title:"光猫工作",slug:"光猫工作",normalizedTitle:"光猫工作",charIndex:267},{level:2,title:"openwrt配置",slug:"openwrt配置",normalizedTitle:"openwrt配置",charIndex:736}],headersStr:"光猫工作 openwrt配置",content:"今年种种不顺, 提前回了老家农村过年了. 身为一个程序员, 是不能容忍没有网络的环境的.\n\n回来办理了宽带, 39元 16G流量 300M宽带 300M下行速率 100M上行速率, 只能说比我在成都租房的69 500M宽带香.\n\n老家农村帮着安装师傅拿线缆, 梯子, 搭线还是很累的, 最后成功混到很长的光纤😂\n\n看到这么大的上行速率, 不能浪费, 必须得搞内网穿透这一套, 后面接监控, 接服务都很nice.\n\n调研了下, 发现移动ipv4公网比较少. 运营商十有八九不会给ipv4的ip的. 没法,只能看看ipv6了.\n\n\n# 光猫工作\n\n就是改桥接模式了\n\n问了师傅要了超级管理账号密码(默认是这个: CMCCAdmin aDm8H%MdA ) 我的光猫日期是2022年4月份的, 密码据说在配置光猫完10分钟后就会自动更改了. 如果师傅不给的话可以user 账号密码(光猫后面都有的) 记录下一些id, 然后重置,密码就是默认密码了, 然后尽快在十分钟内配制好之前的信息就行了. 还要有拨号的账号密码\n\nother 业务模式 才是 IPTV和移动收费节目(就是管机顶盒的)\n\ntr069 我在网上查了下是管 设备的 信息下发 维护升级啥的\n\n重要的一步, 我的改好了, 网关太多不好重新进了, 以别人的图为🌰\n\nvlan id 就是之前正常路由模式的vlan id, 其他都是一样的, 然后把之前的停掉或者删掉(删除之前记得拍照留存)\n\n\n\n到此就好了, 后面再对iptv做下处理(感觉在没在一块,就出现单线多拨的情况了, 总有一方会卡掉)\n\n在路由器以及中间的网关中开启ipv6, 确保你的设备终端有ipv6地址分配, 🌰\n\n以我的黑群晖为🌰:\n\n\n# openwrt配置\n\nhttps://www.youtube.com/watch?v=khoTi8jyetA\n\n> 贴上一位Ï博主的视频: https://www.youtube.com/watch?v=Hm7kOsmbuyI\n> \n> https://www.youtube.com/watch?v=NkeIq7En6u0",normalizedContent:"今年种种不顺, 提前回了老家农村过年了. 身为一个程序员, 是不能容忍没有网络的环境的.\n\n回来办理了宽带, 39元 16g流量 300m宽带 300m下行速率 100m上行速率, 只能说比我在成都租房的69 500m宽带香.\n\n老家农村帮着安装师傅拿线缆, 梯子, 搭线还是很累的, 最后成功混到很长的光纤😂\n\n看到这么大的上行速率, 不能浪费, 必须得搞内网穿透这一套, 后面接监控, 接服务都很nice.\n\n调研了下, 发现移动ipv4公网比较少. 运营商十有八九不会给ipv4的ip的. 没法,只能看看ipv6了.\n\n\n# 光猫工作\n\n就是改桥接模式了\n\n问了师傅要了超级管理账号密码(默认是这个: cmccadmin adm8h%mda ) 我的光猫日期是2022年4月份的, 密码据说在配置光猫完10分钟后就会自动更改了. 如果师傅不给的话可以user 账号密码(光猫后面都有的) 记录下一些id, 然后重置,密码就是默认密码了, 然后尽快在十分钟内配制好之前的信息就行了. 还要有拨号的账号密码\n\nother 业务模式 才是 iptv和移动收费节目(就是管机顶盒的)\n\ntr069 我在网上查了下是管 设备的 信息下发 维护升级啥的\n\n重要的一步, 我的改好了, 网关太多不好重新进了, 以别人的图为🌰\n\nvlan id 就是之前正常路由模式的vlan id, 其他都是一样的, 然后把之前的停掉或者删掉(删除之前记得拍照留存)\n\n\n\n到此就好了, 后面再对iptv做下处理(感觉在没在一块,就出现单线多拨的情况了, 总有一方会卡掉)\n\n在路由器以及中间的网关中开启ipv6, 确保你的设备终端有ipv6地址分配, 🌰\n\n以我的黑群晖为🌰:\n\n\n# openwrt配置\n\nhttps://www.youtube.com/watch?v=khoti8jyeta\n\n> 贴上一位i博主的视频: https://www.youtube.com/watch?v=hm7kosmbuyi\n> \n> https://www.youtube.com/watch?v=nkeiq7en6u0",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"iKuai 使用",frontmatter:{title:"iKuai 使用",date:"2022-10-21T13:14:37.000Z",permalink:"/pages/77d482/",categories:["后端&运维","网络"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2070.%E7%BD%91%E7%BB%9C/2070020.iKuai%20%E4%BD%BF%E7%94%A8.html",relativePath:"20.后端&运维/2070.网络/2070020.iKuai 使用.md",key:"v-0d2b1e30",path:"/pages/77d482/",headers:[{level:2,title:"多线多播",slug:"多线多播",normalizedTitle:"多线多播",charIndex:2},{level:2,title:"流控分流",slug:"流控分流",normalizedTitle:"流控分流",charIndex:42},{level:3,title:"多线负载",slug:"多线负载",normalizedTitle:"多线负载",charIndex:51},{level:2,title:"内网穿透",slug:"内网穿透",normalizedTitle:"内网穿透",charIndex:72}],headersStr:"多线多播 流控分流 多线负载 内网穿透",content:"# 多线多播\n\n在wan1口上面设置接入方式为 基于物联网卡的混合模式\n\n\n\n\n# 流控分流\n\n\n# 多线负载\n\n多个拨号多条线路使用\n\n\n# 内网穿透",normalizedContent:"# 多线多播\n\n在wan1口上面设置接入方式为 基于物联网卡的混合模式\n\n\n\n\n# 流控分流\n\n\n# 多线负载\n\n多个拨号多条线路使用\n\n\n# 内网穿透",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"openWrt 使用",frontmatter:{title:"openWrt 使用",date:"2022-10-21T13:46:17.000Z",permalink:"/pages/225742/",categories:["后端&运维","网络"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2070.%E7%BD%91%E7%BB%9C/2070030.openWrt%20%E4%BD%BF%E7%94%A8.html",relativePath:"20.后端&运维/2070.网络/2070030.openWrt 使用.md",key:"v-80eb33f0",path:"/pages/225742/",headers:[{level:2,title:"科学上网",slug:"科学上网",normalizedTitle:"科学上网",charIndex:2},{level:3,title:"设备控制",slug:"设备控制",normalizedTitle:"设备控制",charIndex:29},{level:3,title:"默认网络配置备份",slug:"默认网络配置备份",normalizedTitle:"默认网络配置备份",charIndex:49}],headersStr:"科学上网 设备控制 默认网络配置备份",content:"# 科学上网\n\n * 全局配置\n\n * 规则配置\n\n * 设备控制\n\n\n# 设备控制\n\n\n\n\n# 默认网络配置备份\n\nconfig interface 'loopback'\n        option ifname 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig interface 'lan'\n        option type 'bridge'\n        option ifname 'eth0'\n        option proto 'static'\n        option ipaddr '192.168.10.3'\n        option netmask '255.255.255.0'\n        option delegate '0'\n        option gateway '192.168.10.1'\n        option dns '114.114.114.114 8.8.8.8'\n\nconfig interface 'wan'\n        option ifname 'eth1'\n        option proto 'dhcp'\n        option metric '64'\n        option delegate '0'\n\nconfig interface 'wan6'\n        option proto 'dhcpv6'\n        option ifname 'eth1'\n        option delegate '0'\n        option reqaddress 'none'\n        option reqprefix 'no'\n\nconfig interface 'vpn0'\n        option ifname 'tun0'\n        option proto 'none'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n",normalizedContent:"# 科学上网\n\n * 全局配置\n\n * 规则配置\n\n * 设备控制\n\n\n# 设备控制\n\n\n\n\n# 默认网络配置备份\n\nconfig interface 'loopback'\n        option ifname 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig interface 'lan'\n        option type 'bridge'\n        option ifname 'eth0'\n        option proto 'static'\n        option ipaddr '192.168.10.3'\n        option netmask '255.255.255.0'\n        option delegate '0'\n        option gateway '192.168.10.1'\n        option dns '114.114.114.114 8.8.8.8'\n\nconfig interface 'wan'\n        option ifname 'eth1'\n        option proto 'dhcp'\n        option metric '64'\n        option delegate '0'\n\nconfig interface 'wan6'\n        option proto 'dhcpv6'\n        option ifname 'eth1'\n        option delegate '0'\n        option reqaddress 'none'\n        option reqprefix 'no'\n\nconfig interface 'vpn0'\n        option ifname 'tun0'\n        option proto 'none'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"宝塔hook自动部署应用",frontmatter:{title:"宝塔hook自动部署应用",date:"2021-12-15T23:21:08.000Z",permalink:"/pages/ca250b/",categories:["后端&运维","其他"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2090.%E5%85%B6%E4%BB%96/209000.%E5%AE%9D%E5%A1%94hook%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8.html",relativePath:"20.后端&运维/2090.其他/209000.宝塔hook自动部署应用.md",key:"v-66a8f2f4",path:"/pages/ca250b/",headers:[{level:2,title:"webhook",slug:"webhook",normalizedTitle:"webhook",charIndex:2},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:14},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:44}],headersStr:"webhook 安装 使用",content:'# webhook\n\n\n# 安装\n\n在软件商店中找到webhook，并安装\n\n\n\n\n# 使用\n\n\n\n * 点击应用添加脚本，如图，我这里是结合 宝塔hook 与 github hook做的一个同步文件的功能，达到一个非常轻量的部署应用效果\n\n * 脚本命令内容，这是比较简单的还能优化的\n   \n   #!/bin/bash\n   \n   echo ""\n   #输出当前时间\n   date --date=\'0 days ago\' "+%Y-%m-%d %H:%M:%S"\n   \n   #git项目路径\n   gitPath="/www/wwwroot"\n   \n   #git仓库名称\n   #projectName="izhaong.github.io"\n   \n   #部署应用的文件夹名称\n   projectDirName="www.izhaong.com"\n   \n   #git仓库地址\n   gitHttp="https://github.com/izhaong/izhaong.github.io.git"\n   \n   #判断项目路径是否存在\n   if [ -d "$gitPath" ]; then\n           cd $gitPath\n           echo "拉取文件"\n           git clone $gitHttp\n   \t\techo "删除旧部署文件夹"\n   \t\trm -rf $projectDirName\n           echo "重命名仓库文件夹名为部署文件夹名"\n   \t\tmv izhaong.github.io www.izhaong.com\n           echo "部署完成（成功）"\n           exit\n   else   \n           echo "部署完成（错误：该项目路径不存在）"\n           exit\n   fi\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   \n\n * 保存点击测试看看最终日志结果和文件位置\n   \n   * \n   * \n\n * 到这里工作就完成了大半了，最后一步就是去github仓库设置的hook中配置上 宝塔hook密钥连接就好了\n   \n   * \n\n到这里基本就完成了～',normalizedContent:'# webhook\n\n\n# 安装\n\n在软件商店中找到webhook，并安装\n\n\n\n\n# 使用\n\n\n\n * 点击应用添加脚本，如图，我这里是结合 宝塔hook 与 github hook做的一个同步文件的功能，达到一个非常轻量的部署应用效果\n\n * 脚本命令内容，这是比较简单的还能优化的\n   \n   #!/bin/bash\n   \n   echo ""\n   #输出当前时间\n   date --date=\'0 days ago\' "+%y-%m-%d %h:%m:%s"\n   \n   #git项目路径\n   gitpath="/www/wwwroot"\n   \n   #git仓库名称\n   #projectname="izhaong.github.io"\n   \n   #部署应用的文件夹名称\n   projectdirname="www.izhaong.com"\n   \n   #git仓库地址\n   githttp="https://github.com/izhaong/izhaong.github.io.git"\n   \n   #判断项目路径是否存在\n   if [ -d "$gitpath" ]; then\n           cd $gitpath\n           echo "拉取文件"\n           git clone $githttp\n   \t\techo "删除旧部署文件夹"\n   \t\trm -rf $projectdirname\n           echo "重命名仓库文件夹名为部署文件夹名"\n   \t\tmv izhaong.github.io www.izhaong.com\n           echo "部署完成（成功）"\n           exit\n   else   \n           echo "部署完成（错误：该项目路径不存在）"\n           exit\n   fi\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   \n\n * 保存点击测试看看最终日志结果和文件位置\n   \n   * \n   * \n\n * 到这里工作就完成了大半了，最后一步就是去github仓库设置的hook中配置上 宝塔hook密钥连接就好了\n   \n   * \n\n到这里基本就完成了～',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"开发环境(java&node&other)轻量，急速，全能配置",frontmatter:{title:"开发环境(java&node&other)轻量，急速，全能配置",date:"2021-12-30T13:40:28.000Z",permalink:"/pages/3bab56/",categories:["后端&运维","其他"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2090.%E5%85%B6%E4%BB%96/209001.%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(java&node&other)%E8%BD%BB%E9%87%8F%EF%BC%8C%E6%80%A5%E9%80%9F%EF%BC%8C%E5%85%A8%E8%83%BD%E9%85%8D%E7%BD%AE.html",relativePath:"20.后端&运维/2090.其他/209001.开发环境(java&node&other)轻量，急速，全能配置.md",key:"v-52b2ca12",path:"/pages/3bab56/",headers:[{level:2,title:"java(jdk)",slug:"java-jdk",normalizedTitle:"java(jdk)",charIndex:115},{level:3,title:"版本管理器",slug:"版本管理器",normalizedTitle:"版本管理器",charIndex:91},{level:2,title:"前端(node)",slug:"前端-node",normalizedTitle:"前端(node)",charIndex:1133}],headersStr:"java(jdk) 版本管理器 前端(node)",content:"电脑经常死机 重置 导致经常我们配置开发环境, 到了开发后期有时候会需要到不同版本的jdk或者node也或者其他的开发环境,\n\n所有这篇心得就是不按照官方步骤配置开发环境, 而是通过版本管理器配置\n\n话不多说, 教程开始\n\n\n# java(jdk)\n\n\n# 版本管理器\n\nJDK Version Manager (JVMS) for Windows https://github.com/ystyle/jvms/releases\n\n * 下载解压 当前目录管理员运行\n\nPS D:\\Env\\jvm> .\\jvms.exe init\nset `JAVA_HOME` Environment variable to  C:\\Program Files\\jdk\nadd jvms.exe to `path` Environment variable\n\n\n1\n2\n3\n\n\n可以把 该 exe文件放到环境配置中, 这样就可以全局访问了\n\nNAME:\n   jvms - JDK Version Manager (JVMS) for Windows\n\nUSAGE:\n   jvms.exe [global options] command [command options] [arguments...]\n\nVERSION:\n   2.0.3\n\nCOMMANDS:\n     init        Initialize config file\n     list, ls    List the JDK installations.\n     install, i  Install remote available jdk\n     switch, s   Switch to use the specified version.\n     remove, rm  Remove a specific version.\n     rls         Show a list of versions available for download.\n     proxy       Set a proxy to use for downloads.\n     help, h     Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --help, -h     show help\n   --version, -v  print the version\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 前端(node)\n\nPS D:\\Code> nrm\nnrm : 无法加载文件 C:\\Program Files\\nodejs\\nrm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsof\nt.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\n所在位置 行:1 字符: 1\n+ nrm\n+ ~~~\n    + CategoryInfo          : SecurityError: (:) []，PSSecurityException\n    + FullyQualifiedErrorId : UnauthorizedAccess\nPS C:\\Windows\\system32> set-ExecutionPolicy RemoteSigned\n\n执行策略更改\n执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170\n中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",normalizedContent:"电脑经常死机 重置 导致经常我们配置开发环境, 到了开发后期有时候会需要到不同版本的jdk或者node也或者其他的开发环境,\n\n所有这篇心得就是不按照官方步骤配置开发环境, 而是通过版本管理器配置\n\n话不多说, 教程开始\n\n\n# java(jdk)\n\n\n# 版本管理器\n\njdk version manager (jvms) for windows https://github.com/ystyle/jvms/releases\n\n * 下载解压 当前目录管理员运行\n\nps d:\\env\\jvm> .\\jvms.exe init\nset `java_home` environment variable to  c:\\program files\\jdk\nadd jvms.exe to `path` environment variable\n\n\n1\n2\n3\n\n\n可以把 该 exe文件放到环境配置中, 这样就可以全局访问了\n\nname:\n   jvms - jdk version manager (jvms) for windows\n\nusage:\n   jvms.exe [global options] command [command options] [arguments...]\n\nversion:\n   2.0.3\n\ncommands:\n     init        initialize config file\n     list, ls    list the jdk installations.\n     install, i  install remote available jdk\n     switch, s   switch to use the specified version.\n     remove, rm  remove a specific version.\n     rls         show a list of versions available for download.\n     proxy       set a proxy to use for downloads.\n     help, h     shows a list of commands or help for one command\n\nglobal options:\n   --help, -h     show help\n   --version, -v  print the version\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 前端(node)\n\nps d:\\code> nrm\nnrm : 无法加载文件 c:\\program files\\nodejs\\nrm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsof\nt.com/fwlink/?linkid=135170 中的 about_execution_policies。\n所在位置 行:1 字符: 1\n+ nrm\n+ ~~~\n    + categoryinfo          : securityerror: (:) []，pssecurityexception\n    + fullyqualifiederrorid : unauthorizedaccess\nps c:\\windows\\system32> set-executionpolicy remotesigned\n\n执行策略更改\n执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?linkid=135170\n中的 about_execution_policies 帮助主题所述。是否要更改执行策略?\n[y] 是(y)  [a] 全是(a)  [n] 否(n)  [l] 全否(l)  [s] 暂停(s)  [?] 帮助 (默认值为“n”): y\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"session Vs JWT",frontmatter:{title:"session Vs JWT",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/7087a0/",categories:["后端&运维","其他"],tags:[null]},regularPath:"/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4/2090.%E5%85%B6%E4%BB%96/209010.session%20Vs%20JWT.html",relativePath:"20.后端&运维/2090.其他/209010.session Vs JWT.md",key:"v-2536db2f",path:"/pages/7087a0/",headers:[{level:2,title:"工作原理",slug:"工作原理",normalizedTitle:"工作原理",charIndex:24},{level:2,title:"Session 的优势",slug:"session-的优势",normalizedTitle:"session 的优势",charIndex:328},{level:2,title:"Session 的劣势",slug:"session-的劣势",normalizedTitle:"session 的劣势",charIndex:437},{level:2,title:"Session 相关的概念介绍",slug:"session-相关的概念介绍",normalizedTitle:"session 相关的概念介绍",charIndex:572},{level:2,title:"Session 相关的概念介绍",slug:"session-相关的概念介绍-2",normalizedTitle:"session 相关的概念介绍",charIndex:572},{level:2,title:"什么是JWT？",slug:"什么是jwt",normalizedTitle:"什么是jwt？",charIndex:755},{level:2,title:"header",slug:"header",normalizedTitle:"header",charIndex:834},{level:2,title:"Payload",slug:"payload",normalizedTitle:"payload",charIndex:918},{level:2,title:"Signature",slug:"signature",normalizedTitle:"signature",charIndex:1004},{level:2,title:"可拓展性",slug:"可拓展性",normalizedTitle:"可拓展性",charIndex:1096},{level:2,title:"安全性",slug:"安全性",normalizedTitle:"安全性",charIndex:1394},{level:2,title:"性能",slug:"性能",normalizedTitle:"性能",charIndex:1173},{level:2,title:"时效性",slug:"时效性",normalizedTitle:"时效性",charIndex:1912}],headersStr:"工作原理 Session 的优势 Session 的劣势 Session 相关的概念介绍 Session 相关的概念介绍 什么是JWT？ header Payload Signature 可拓展性 安全性 性能 时效性",content:'@[toc]\n\n\n# Sesstion\n\n\n# 工作原理\n\nsequenceDiagram\nBrowser->> Server: POST/authenticate username=...&password=...\nServer->> Browser: HTTP 200 OK Set-Cookie: session=......\nBrowser->> Server:\tGET/api/user Cookie: session=...\nServer->>Server: find and deserialize session\nServer->>Browser: HTTP 200 OK {name: "foo"}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Session 的优势\n\n * 相比 JWT ， 最大的优势就在于可以主动清楚 session 了\n * session 保存在服务器端，相对较为安全\n * 结合 cookie 使用， 较为灵活， 兼容性较好\n\n\n# Session 的劣势\n\n * cookie + session 在跨域场景表现并不好\n * 如果是分布式部署，余姚做多级共享 session 机制\n * 基于 cookie 的机制很容易被 CSRF\n * 查询 ·session· 信息可能会有数据库查询操作\n\n\n# Session 相关的概念介绍\n\n * session： 主要存放在服务器端， 相对安全\n * cookie： 主要存放在客户端， 并且不是很安全\n\n\n# Session 相关的概念介绍\n\n * sessionStorage ： 仅在当前会话下有效， 关闭页面或者浏览器后被清楚\n * localstorage: 除非别清楚， 否则永久保存\n\n\n# JWT\n\n\n# 什么是JWT？\n\n * 定义了一种紧凑且独立的方式吗可以将各方之间的信息作为JSON对象进行传输\n * 该信息可以验证和信任， 因为是经过数字签名的\n\n\n# header\n\n * typ: token的类型， 这里固定为JWT\n * alg: 使用过的 hash 算法， 例如： HMAC SHA256 或者 RSA\n\n\n# Payload\n\n * 存储需要传递的信息，如用户ID、 用户名等\n * 还包含原数据、如果其时间、发布人等\n * 与Header不同， Payload 可以加密\n\n\n# Signature\n\n * 对 Header 和 Payload 部分进行签名\n * 保证 Token 在传输的过程中没有被篡改或者损坏\n\n\n# JWT vs Session\n\n\n# 可拓展性\n\n随着应用程序的扩大，应用程序人员的增加， 必然要拓展我的程序， 有水平拓展， 垂直拓展， 水平拓展就是加服务器， 垂直拓展就是增加服务器的硬件性能， 比如： 磁盘、内存、cpu等。json数据是存在数据库中的，在水平拓展方案中， 就需要独立的、专门的、中心式的一个session存储系统， 否则session是没办法共享的，存储系统便于所有服务器都可以访问session，共享session， 否则session的缺陷：存储的缺陷无法得到水平拓展。在这种情况下JWT是比session好一些的。因为session是无缝接入水平拓展的，基于token令牌这种校验方式是无状态的\n\n\n# 安全性\n\n * XSS攻击： 跨站脚本攻击，JavaScript是可以修改JWT的， 因为JWT是放在cookie sessionstorage中的。 防范: 签名，加密\n\n * CSRF攻击： 跟cookie相关，只要session或者JWT存在cookie中，就有可能出现跨站请求伪造\n\n * 重放攻击： 要尽量是过期时间短一些\n\n * 中间人攻击： 加了https就好了，在传输过程中是数据是加密的\n\n * RESTful API: rest架构应该是无状态的， 所以session这种有状态的认证方式， 显然是不能用于RESTful API的\n\n\n# 性能\n\n * JWT的性能不太好，在客户端发送服务端时， 可能会有大量的用户信息在JWT中，那么每个http请求都会产生大量的开销， 如果是session值会有到少量的开销， 因为session的id非常的小，JWT应为是个JSON，估计会是session的好几倍，\n * 但是session存在服务当中的，每次也要通过sessionID在数据库中查看完整的信息，这肯定也是要消耗性能的 总的来说JWT就是用空间来换时间而session是用时间换空间性能方面各有利弊\n\n\n# 时效性\n\nJWT要比session差一些\n\n * 原因： JWT只能等到过期时间进行销毁， 而session存在服务端， 可以手动的去销毁\n * 场景1： 若JWT中存储权限相关的信息，当前角色为小管理员，应为滥用管理员权限，就把当前角色权限降级了，但是JWT无法实时更新，必须等到过期才行，不能立即生效。所有当前角色可以乘着还是管理员的时间胡作非为\n * 场景2： 用户发现自己的账号在异地被登录了，可能被盗号了。想修改密码来防止盗号，但是JWT没有过期，异地的账号依然可以操作，包括修改密码',normalizedContent:'@[toc]\n\n\n# sesstion\n\n\n# 工作原理\n\nsequencediagram\nbrowser->> server: post/authenticate username=...&password=...\nserver->> browser: http 200 ok set-cookie: session=......\nbrowser->> server:\tget/api/user cookie: session=...\nserver->>server: find and deserialize session\nserver->>browser: http 200 ok {name: "foo"}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# session 的优势\n\n * 相比 jwt ， 最大的优势就在于可以主动清楚 session 了\n * session 保存在服务器端，相对较为安全\n * 结合 cookie 使用， 较为灵活， 兼容性较好\n\n\n# session 的劣势\n\n * cookie + session 在跨域场景表现并不好\n * 如果是分布式部署，余姚做多级共享 session 机制\n * 基于 cookie 的机制很容易被 csrf\n * 查询 ·session· 信息可能会有数据库查询操作\n\n\n# session 相关的概念介绍\n\n * session： 主要存放在服务器端， 相对安全\n * cookie： 主要存放在客户端， 并且不是很安全\n\n\n# session 相关的概念介绍\n\n * sessionstorage ： 仅在当前会话下有效， 关闭页面或者浏览器后被清楚\n * localstorage: 除非别清楚， 否则永久保存\n\n\n# jwt\n\n\n# 什么是jwt？\n\n * 定义了一种紧凑且独立的方式吗可以将各方之间的信息作为json对象进行传输\n * 该信息可以验证和信任， 因为是经过数字签名的\n\n\n# header\n\n * typ: token的类型， 这里固定为jwt\n * alg: 使用过的 hash 算法， 例如： hmac sha256 或者 rsa\n\n\n# payload\n\n * 存储需要传递的信息，如用户id、 用户名等\n * 还包含原数据、如果其时间、发布人等\n * 与header不同， payload 可以加密\n\n\n# signature\n\n * 对 header 和 payload 部分进行签名\n * 保证 token 在传输的过程中没有被篡改或者损坏\n\n\n# jwt vs session\n\n\n# 可拓展性\n\n随着应用程序的扩大，应用程序人员的增加， 必然要拓展我的程序， 有水平拓展， 垂直拓展， 水平拓展就是加服务器， 垂直拓展就是增加服务器的硬件性能， 比如： 磁盘、内存、cpu等。json数据是存在数据库中的，在水平拓展方案中， 就需要独立的、专门的、中心式的一个session存储系统， 否则session是没办法共享的，存储系统便于所有服务器都可以访问session，共享session， 否则session的缺陷：存储的缺陷无法得到水平拓展。在这种情况下jwt是比session好一些的。因为session是无缝接入水平拓展的，基于token令牌这种校验方式是无状态的\n\n\n# 安全性\n\n * xss攻击： 跨站脚本攻击，javascript是可以修改jwt的， 因为jwt是放在cookie sessionstorage中的。 防范: 签名，加密\n\n * csrf攻击： 跟cookie相关，只要session或者jwt存在cookie中，就有可能出现跨站请求伪造\n\n * 重放攻击： 要尽量是过期时间短一些\n\n * 中间人攻击： 加了https就好了，在传输过程中是数据是加密的\n\n * restful api: rest架构应该是无状态的， 所以session这种有状态的认证方式， 显然是不能用于restful api的\n\n\n# 性能\n\n * jwt的性能不太好，在客户端发送服务端时， 可能会有大量的用户信息在jwt中，那么每个http请求都会产生大量的开销， 如果是session值会有到少量的开销， 因为session的id非常的小，jwt应为是个json，估计会是session的好几倍，\n * 但是session存在服务当中的，每次也要通过sessionid在数据库中查看完整的信息，这肯定也是要消耗性能的 总的来说jwt就是用空间来换时间而session是用时间换空间性能方面各有利弊\n\n\n# 时效性\n\njwt要比session差一些\n\n * 原因： jwt只能等到过期时间进行销毁， 而session存在服务端， 可以手动的去销毁\n * 场景1： 若jwt中存储权限相关的信息，当前角色为小管理员，应为滥用管理员权限，就把当前角色权限降级了，但是jwt无法实时更新，必须等到过期才行，不能立即生效。所有当前角色可以乘着还是管理员的时间胡作非为\n * 场景2： 用户发现自己的账号在异地被登录了，可能被盗号了。想修改密码来防止盗号，但是jwt没有过期，异地的账号依然可以操作，包括修改密码',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"Arduino开发 及常见知识储备",frontmatter:{title:"Arduino开发 及常见知识储备",date:"2021-12-06T21:02:58.000Z",permalink:"/pages/f15b8a/",categories:["其他","嵌入式"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3001.%E5%B5%8C%E5%85%A5%E5%BC%8F/300101.Arduino%E5%BC%80%E5%8F%91%20%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87.html",relativePath:"30.其他技术/3001.嵌入式/300101.Arduino开发 及常见知识储备.md",key:"v-7f096632",path:"/pages/f15b8a/",headers:[{level:2,title:"常见知识储备",slug:"常见知识储备",normalizedTitle:"常见知识储备",charIndex:2},{level:3,title:"LED灯",slug:"led灯",normalizedTitle:"led灯",charIndex:13},{level:4,title:"注意:",slug:"注意",normalizedTitle:"注意:",charIndex:157},{level:3,title:"电阻",slug:"电阻",normalizedTitle:"电阻",charIndex:68},{level:4,title:"四色环。",slug:"四色环。",normalizedTitle:"四色环。",charIndex:185},{level:4,title:"五色环",slug:"五色环",normalizedTitle:"五色环",charIndex:389},{level:4,title:"注意事项",slug:"注意事项",normalizedTitle:"注意事项",charIndex:629},{level:3,title:"模拟信号转数字信号",slug:"模拟信号转数字信号",normalizedTitle:"模拟信号转数字信号",charIndex:753},{level:3,title:"脉冲宽度调制",slug:"脉冲宽度调制",normalizedTitle:"脉冲宽度调制",charIndex:922},{level:2,title:"单通道 继电器模块",slug:"单通道-继电器模块",normalizedTitle:"单通道 继电器模块",charIndex:1006},{level:2,title:"继电器基础",slug:"继电器基础",normalizedTitle:"继电器基础",charIndex:1060}],headersStr:"常见知识储备 LED灯 注意: 电阻 四色环。 五色环 注意事项 模拟信号转数字信号 脉冲宽度调制 单通道 继电器模块 继电器基础",content:"# 常见知识储备\n\n\n# LED灯\n\n * 功率: 小功率LED灯，单颗LED功率只有0.03-0.1瓦\n\n * * 根据欧姆定律电压与电阻 U^2/R [3v | 220Ω] [5v | 1000Ω]\n\n * **极性:**要了解LED的极性，请仔细查看。两个腿中较短的，朝向灯泡的平坦边缘表示负极端子。\n\n# 注意:\n\n * 极性反了小灯不会亮\n\n\n# 电阻\n\n# 四色环。\n\n黑0 棕1 红2 橙3 黄4 绿5 蓝6 紫7 灰8 白9 金、银表示误差\n\n各色环表示意义如下：\n\n第一条色环：阻值的第一位数字；\n\n第二条色环：阻值的第二位数字；\n\n第三条色环：10的幂数；\n\n第四条色环：误差表示。\n\n例如：\n\n电阻色环：棕绿红金\n\n第一位：1；\n\n第二位：5；\n\n10的幂为2（即100）；\n\n误差为5%\n\n即阻值为：15X100=1500欧=1.5千欧=1.5K\n\n# 五色环\n\n精确度更高的“五色环”电阻，用五条色环表示电阻的阻值大小，具体如下：\n\n第一条色环：阻值的第一位数字；\n\n第二条色环：阻值的第二位数字；\n\n第三条色环：阻值的第三未数字；\n\n第四条色环：阻值乘数的10的幂数；\n\n第五条色环：误差（常见是棕色，误差为1%）\n\n四色环电阻误差为5-10%，五色环常为1%，精度提高了\n\n例如：\n\n有电阻：黄紫红澄棕\n\n前三位数字是：472\n\n第四位表示10的3次方，即1000\n\n阻值为：472X1000欧=472千欧（即472K）\n\n# 注意事项\n\n由此就能推测出 辨别首位方向 的问题\n\n * 误差率不可能很大也不可能很小 通过尾部辨认\n\n * 四色环电阻误差为5-10%四色环电阻误差为5-10%，金、银表示误差\n\n * 五色环常为1%，精度提高了 常见是棕色，误差为1%\n\n\n# 模拟信号转数字信号\n\n模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。\n\n * Arduino 模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1023的整数形式表示。\n\n\n# 脉冲宽度调制\n\n模拟输出功能, 以一种特殊的方式来达到输出近似模拟值的效果，这种方式叫做脉冲宽度调制（PWM，Pulse Width Modulation）。\n\n\n# 单通道 继电器模块\n\nhttps://zhuanlan.zhihu.com/p/340105580\n\n\n# 继电器基础\n\n通常，继电器有5个引脚，其中三个是高压端子（NC，COM和NO），它们连接到要控制的设备。\n\n\n\n市电在公共（COM）端子处进入继电器。使用NC＆NO端子的时间取决于您要打开还是关闭设备。\n\n在其余两个引脚（线圈1和线圈2）之间，有一个线圈就像电磁铁一样。\n\n\n\n当电流流过线圈时，电磁体带电并移动开关的内部触点。那时，常开（NO）端子连接到公共（COM），常闭（NC）端子断开。\n\n当电流停止流过线圈时，内部触点将返回其初始状态，即常闭（NC）端子连接到公共（COM），常开（NO）端子重新断开。\n\n这被称为单刀双掷开关（SPDT）。",normalizedContent:"# 常见知识储备\n\n\n# led灯\n\n * 功率: 小功率led灯，单颗led功率只有0.03-0.1瓦\n\n * * 根据欧姆定律电压与电阻 u^2/r [3v | 220ω] [5v | 1000ω]\n\n * **极性:**要了解led的极性，请仔细查看。两个腿中较短的，朝向灯泡的平坦边缘表示负极端子。\n\n# 注意:\n\n * 极性反了小灯不会亮\n\n\n# 电阻\n\n# 四色环。\n\n黑0 棕1 红2 橙3 黄4 绿5 蓝6 紫7 灰8 白9 金、银表示误差\n\n各色环表示意义如下：\n\n第一条色环：阻值的第一位数字；\n\n第二条色环：阻值的第二位数字；\n\n第三条色环：10的幂数；\n\n第四条色环：误差表示。\n\n例如：\n\n电阻色环：棕绿红金\n\n第一位：1；\n\n第二位：5；\n\n10的幂为2（即100）；\n\n误差为5%\n\n即阻值为：15x100=1500欧=1.5千欧=1.5k\n\n# 五色环\n\n精确度更高的“五色环”电阻，用五条色环表示电阻的阻值大小，具体如下：\n\n第一条色环：阻值的第一位数字；\n\n第二条色环：阻值的第二位数字；\n\n第三条色环：阻值的第三未数字；\n\n第四条色环：阻值乘数的10的幂数；\n\n第五条色环：误差（常见是棕色，误差为1%）\n\n四色环电阻误差为5-10%，五色环常为1%，精度提高了\n\n例如：\n\n有电阻：黄紫红澄棕\n\n前三位数字是：472\n\n第四位表示10的3次方，即1000\n\n阻值为：472x1000欧=472千欧（即472k）\n\n# 注意事项\n\n由此就能推测出 辨别首位方向 的问题\n\n * 误差率不可能很大也不可能很小 通过尾部辨认\n\n * 四色环电阻误差为5-10%四色环电阻误差为5-10%，金、银表示误差\n\n * 五色环常为1%，精度提高了 常见是棕色，误差为1%\n\n\n# 模拟信号转数字信号\n\n模拟输入引脚是带有adc（analog-to-digital converter，模数转换器）功能的引脚。它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。\n\n * arduino 模拟输入功能有10位精度，即可以将0～5v的电压信号转换为0～1023的整数形式表示。\n\n\n# 脉冲宽度调制\n\n模拟输出功能, 以一种特殊的方式来达到输出近似模拟值的效果，这种方式叫做脉冲宽度调制（pwm，pulse width modulation）。\n\n\n# 单通道 继电器模块\n\nhttps://zhuanlan.zhihu.com/p/340105580\n\n\n# 继电器基础\n\n通常，继电器有5个引脚，其中三个是高压端子（nc，com和no），它们连接到要控制的设备。\n\n\n\n市电在公共（com）端子处进入继电器。使用nc＆no端子的时间取决于您要打开还是关闭设备。\n\n在其余两个引脚（线圈1和线圈2）之间，有一个线圈就像电磁铁一样。\n\n\n\n当电流流过线圈时，电磁体带电并移动开关的内部触点。那时，常开（no）端子连接到公共（com），常闭（nc）端子断开。\n\n当电流停止流过线圈时，内部触点将返回其初始状态，即常闭（nc）端子连接到公共（com），常开（no）端子重新断开。\n\n这被称为单刀双掷开关（spdt）。",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"指纹模块",frontmatter:{title:"指纹模块",date:"2021-12-30T13:27:26.000Z",permalink:"/pages/801f8d/",categories:["其他","嵌入式"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3001.%E5%B5%8C%E5%85%A5%E5%BC%8F/300110.%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97.html",relativePath:"30.其他技术/3001.嵌入式/300110.指纹模块.md",key:"v-7b4d5398",path:"/pages/801f8d/",headers:[{level:2,title:"实例",slug:"实例",normalizedTitle:"实例",charIndex:2},{level:2,title:"git代码仓库",slug:"git代码仓库",normalizedTitle:"git代码仓库",charIndex:71},{level:2,title:"AS608指纹模块",slug:"as608指纹模块",normalizedTitle:"as608指纹模块",charIndex:148},{level:2,title:"模块电原理图",slug:"模块电原理图",normalizedTitle:"模块电原理图",charIndex:329},{level:2,title:"指纹识别过程",slug:"指纹识别过程",normalizedTitle:"指纹识别过程",charIndex:342},{level:2,title:"模块接口",slug:"模块接口",normalizedTitle:"模块接口",charIndex:1379},{level:2,title:"实验之一：Adafruit指纹传感器，更改密码示例",slug:"实验之一-adafruit指纹传感器-更改密码示例",normalizedTitle:"实验之一：adafruit指纹传感器，更改密码示例",charIndex:1714},{level:2,title:"安装库：IDE—工具—管理库—搜索Adafruit-Fingerprint-Sensor-Library—安装",slug:"安装库-ide-工具-管理库-搜索adafruit-fingerprint-sensor-library-安装",normalizedTitle:"安装库：ide—工具—管理库—搜索adafruit-fingerprint-sensor-library—安装",charIndex:1744},{level:2,title:"实验接线:",slug:"实验接线",normalizedTitle:"实验接线:",charIndex:1806}],headersStr:"实例 git代码仓库 AS608指纹模块 模块电原理图 指纹识别过程 模块接口 实验之一：Adafruit指纹传感器，更改密码示例 安装库：IDE—工具—管理库—搜索Adafruit-Fingerprint-Sensor-Library—安装 实验接线:",content:"# 实例\n\n * arduino uno\n\n\n\n----------------------------------------\n\n\n\n\n# git代码仓库\n\nhttps://github.com/adafruit/Adafruit-Fingerprint-Sensor-Library\n\n\n# AS608指纹模块\n\n集成了光路和指纹处理部分的一体化指纹处理模块，具有体积小、功耗低、接口简单的特点，可靠性高、识别速度快、干湿手指适应性好，指纹搜索速度快。模块配备了串口、USB 通讯接口，用户无需研究复杂的图像处理及指纹识别算法，只需通过简单的串口、USB 按照通讯协议便可控制模块。模块可应用于各种考勤机、保险箱柜、指纹门禁系统、指纹锁等场合。\n\n\n# 模块电原理图\n\n\n\n\n# 指纹识别过程\n\n分为两个次要过程，分为四个部分。两个次要的过程是指纹记录和交叉核对过程。指纹记录过程由四个部分组成：指纹采集、指纹预处理、指纹检查和指纹模板采集。指纹比对过程还包括四个部分：指纹采集、指纹预处理、指纹特征比对和匹配。在这两个过程中，指纹图像的前处理都存在，但指纹图像的取值和指纹 特征的值似乎有相同的名称，但它们的内在算法和性质是完全不同的。在引入指纹的过程中，更频繁地获得指纹图像，而单值提取部分的算法更多地关注一些特征值的辨析和获取过程。\n\n指纹识别的第一步是指纹图像的获取，目前已经有多种指纹图像的获取方式，主要有光学指纹采集技术、电容式传感器指纹采集、温度传感指纹获取技术、超声波指纹采集技术、电磁波指纹采集技术，获得图像后进行预处理加工，要实现图像的灰度变换、分割、均衡化、增强、 细化等预处理步骤。首先要把指纹从整个图案上分割出来， 背景图和指纹分布图的灰度是不同的，这就确定了两者强度的区别， 利用梯度这个概念就能将指纹从背景图中很好的分离开；均衡化是预 处理中的重要一步，在提取时根据环境的不同得到的指纹图像不同区域的像素分布点是不同的，均衡化就是将不同区域分布的像素进行均值划分得到亮度分布均衡的图像；为了便于特征的提取，在几步加工后的图像还要智能化增强，Daugmann实现了利用Gabor小波逼近的方法使指纹图像的纹路线条更加清晰，即白的部分更白，黑的部分更黑，线条的边缘分布更加平滑。\n\n\n\n对于处理好的指纹图像，指纹的纹路已经十分清晰，要进行指纹识别必须要进行特征提取，分离出那些具体的特征点来代替不同的纹路，首先提取指纹的特征端点和叉点，将端点叉点图像进行九宫格分割，利用指纹特征分布的灰度值是不同的这个特性，将指纹图像的端点和叉点分离出来，对于奇异点的提取利用Poincare公式，利用这个公式提取方向场周围剧烈变化的点，我们在计算机中使用不同的算法分别实现各个特征点的提取过程。\n\n最后将识别的指纹分类操作，指纹的分类是用采集的指纹特征与数据库中保存的指纹特征相比较，判断是否属于同一指纹，首先根据指纹的纹形进行粗匹配，进而利用指纹形态和细节特征进行精确匹配给出相比较指纹的相似性程度。根据应用的不同，对指纹的相似性得分进行排序或给出是否为同一指纹的判决结果，指纹对比有两种方式： 一对一比对是根据用户从数据库中检索出待对比的用户指纹，再与新采集的指纹比对；一对多比对是新采集的指纹和数据库中的所有指纹逐一比对。\n\n\n\n\n# 模块接口\n\n采用 8 芯 1.25 mm 间距单排插座，模块内部内置了手指探测电路，用户可读取状态引脚TCH（WAK）判断有无手指按下。\n\n引脚号 名称 类型 功能描述\n\n1 Vi In 模块电源正输入端+3.3V（请勿接3.3V以上电源，否则烧毁模块！）\n\n2 TX Out 串行数据输出，接MCU或TTL串口的RX。\n\n3 RX In 串行数据输入，接MCU或TTL串口的TX。\n\n4 GND － 信号地。内部与电源地连接。\n\n5 TCH Out 感应信号输出，默认高电平有效\n\n6 UA In 触摸感应电源输入端，3.3v供电\n\n7 D+ － USB D+\n\n8 D- － USB D-\n\n（7脚，8脚为USB信号线，使用串口控制模块时可以悬空不用）\n\n\n\n\n# 实验之一：Adafruit指纹传感器，更改密码示例\n\n\n# 安装库：IDE—工具—管理库—搜索Adafruit-Fingerprint-Sensor-Library—安装\n\n\n\n\n# 实验接线:\n\nVi +3.3V（请勿接3.3V以上电源，否则烧毁模块！）\n\nTX 2\n\nRX 3\n\nGND GND",normalizedContent:"# 实例\n\n * arduino uno\n\n\n\n----------------------------------------\n\n\n\n\n# git代码仓库\n\nhttps://github.com/adafruit/adafruit-fingerprint-sensor-library\n\n\n# as608指纹模块\n\n集成了光路和指纹处理部分的一体化指纹处理模块，具有体积小、功耗低、接口简单的特点，可靠性高、识别速度快、干湿手指适应性好，指纹搜索速度快。模块配备了串口、usb 通讯接口，用户无需研究复杂的图像处理及指纹识别算法，只需通过简单的串口、usb 按照通讯协议便可控制模块。模块可应用于各种考勤机、保险箱柜、指纹门禁系统、指纹锁等场合。\n\n\n# 模块电原理图\n\n\n\n\n# 指纹识别过程\n\n分为两个次要过程，分为四个部分。两个次要的过程是指纹记录和交叉核对过程。指纹记录过程由四个部分组成：指纹采集、指纹预处理、指纹检查和指纹模板采集。指纹比对过程还包括四个部分：指纹采集、指纹预处理、指纹特征比对和匹配。在这两个过程中，指纹图像的前处理都存在，但指纹图像的取值和指纹 特征的值似乎有相同的名称，但它们的内在算法和性质是完全不同的。在引入指纹的过程中，更频繁地获得指纹图像，而单值提取部分的算法更多地关注一些特征值的辨析和获取过程。\n\n指纹识别的第一步是指纹图像的获取，目前已经有多种指纹图像的获取方式，主要有光学指纹采集技术、电容式传感器指纹采集、温度传感指纹获取技术、超声波指纹采集技术、电磁波指纹采集技术，获得图像后进行预处理加工，要实现图像的灰度变换、分割、均衡化、增强、 细化等预处理步骤。首先要把指纹从整个图案上分割出来， 背景图和指纹分布图的灰度是不同的，这就确定了两者强度的区别， 利用梯度这个概念就能将指纹从背景图中很好的分离开；均衡化是预 处理中的重要一步，在提取时根据环境的不同得到的指纹图像不同区域的像素分布点是不同的，均衡化就是将不同区域分布的像素进行均值划分得到亮度分布均衡的图像；为了便于特征的提取，在几步加工后的图像还要智能化增强，daugmann实现了利用gabor小波逼近的方法使指纹图像的纹路线条更加清晰，即白的部分更白，黑的部分更黑，线条的边缘分布更加平滑。\n\n\n\n对于处理好的指纹图像，指纹的纹路已经十分清晰，要进行指纹识别必须要进行特征提取，分离出那些具体的特征点来代替不同的纹路，首先提取指纹的特征端点和叉点，将端点叉点图像进行九宫格分割，利用指纹特征分布的灰度值是不同的这个特性，将指纹图像的端点和叉点分离出来，对于奇异点的提取利用poincare公式，利用这个公式提取方向场周围剧烈变化的点，我们在计算机中使用不同的算法分别实现各个特征点的提取过程。\n\n最后将识别的指纹分类操作，指纹的分类是用采集的指纹特征与数据库中保存的指纹特征相比较，判断是否属于同一指纹，首先根据指纹的纹形进行粗匹配，进而利用指纹形态和细节特征进行精确匹配给出相比较指纹的相似性程度。根据应用的不同，对指纹的相似性得分进行排序或给出是否为同一指纹的判决结果，指纹对比有两种方式： 一对一比对是根据用户从数据库中检索出待对比的用户指纹，再与新采集的指纹比对；一对多比对是新采集的指纹和数据库中的所有指纹逐一比对。\n\n\n\n\n# 模块接口\n\n采用 8 芯 1.25 mm 间距单排插座，模块内部内置了手指探测电路，用户可读取状态引脚tch（wak）判断有无手指按下。\n\n引脚号 名称 类型 功能描述\n\n1 vi in 模块电源正输入端+3.3v（请勿接3.3v以上电源，否则烧毁模块！）\n\n2 tx out 串行数据输出，接mcu或ttl串口的rx。\n\n3 rx in 串行数据输入，接mcu或ttl串口的tx。\n\n4 gnd － 信号地。内部与电源地连接。\n\n5 tch out 感应信号输出，默认高电平有效\n\n6 ua in 触摸感应电源输入端，3.3v供电\n\n7 d+ － usb d+\n\n8 d- － usb d-\n\n（7脚，8脚为usb信号线，使用串口控制模块时可以悬空不用）\n\n\n\n\n# 实验之一：adafruit指纹传感器，更改密码示例\n\n\n# 安装库：ide—工具—管理库—搜索adafruit-fingerprint-sensor-library—安装\n\n\n\n\n# 实验接线:\n\nvi +3.3v（请勿接3.3v以上电源，否则烧毁模块！）\n\ntx 2\n\nrx 3\n\ngnd gnd",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"初次使用Android Studio",frontmatter:{title:"初次使用Android Studio",date:"2023-03-07T22:43:17.000Z",permalink:"/pages/3dc564/",categories:["其他技术","Android"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3005.Android/3005001.%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8Android%20Studio.html",relativePath:"30.其他技术/3005.Android/3005001.初次使用Android Studio.md",key:"v-d905965c",path:"/pages/3dc564/",headers:[{level:2,title:"注意事项",slug:"注意事项",normalizedTitle:"注意事项",charIndex:2},{level:3,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:11}],headersStr:"注意事项 问题",content:"# 注意事项\n\n\n# 问题\n\n工程报错: Received status code 400 from server: Bad Request\n\nCould not GET 'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.5.2/gradle-3.5.2.pom'. Received status code 400 from server: Bad Request\n\n\n1\n\n\n解决方法:\n\n原因: 我安装Android Studio 的时候设置的代理, 在user/.gradle/gradle.properties中注释掉代理即可\n\n\n\n## For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n#\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx1024m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n#\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n#Mon Mar 06 23:13:34 CST 2023\n# systemProp.http.proxyHost=mirrors.neusoft.edu.cn\n# systemProp.https.proxyHost=mirrors.neusoft.edu.cn\n# systemProp.https.proxyPort=80\n# systemProp.http.proxyPort=80\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"# 注意事项\n\n\n# 问题\n\n工程报错: received status code 400 from server: bad request\n\ncould not get 'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.5.2/gradle-3.5.2.pom'. received status code 400 from server: bad request\n\n\n1\n\n\n解决方法:\n\n原因: 我安装android studio 的时候设置的代理, 在user/.gradle/gradle.properties中注释掉代理即可\n\n\n\n## for more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n#\n# specifies the jvm arguments used for the daemon process.\n# the setting is particularly useful for tweaking memory settings.\n# default value: -xmx1024m -xx:maxpermsize=256m\n# org.gradle.jvmargs=-xmx2048m -xx:maxpermsize=512m -xx:+heapdumponoutofmemoryerror -dfile.encoding=utf-8\n#\n# when configured, gradle will run in incubating parallel mode.\n# this option should only be used with decoupled projects. more details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n#mon mar 06 23:13:34 cst 2023\n# systemprop.http.proxyhost=mirrors.neusoft.edu.cn\n# systemprop.https.proxyhost=mirrors.neusoft.edu.cn\n# systemprop.https.proxyport=80\n# systemprop.http.proxyport=80\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"键来",frontmatter:{title:"键来",date:"2022-11-11T15:02:13.000Z",permalink:"/pages/a704e3/",categories:["其他技术","编辑器"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3011.%E7%BC%96%E8%BE%91%E5%99%A8/2011010.%E9%94%AE%E6%9D%A5.html",relativePath:"30.其他技术/3011.编辑器/2011010.键来.md",key:"v-2aefaf68",path:"/pages/a704e3/",headersStr:null,content:"剑来",normalizedContent:"剑来",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"vscode 使用技巧",frontmatter:{title:"vscode 使用技巧",date:"2021-12-07T09:39:57.000Z",permalink:"/pages/ae97cd/",categories:["其他","编辑器"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3011.%E7%BC%96%E8%BE%91%E5%99%A8/301101.vscode%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html",relativePath:"30.其他技术/3011.编辑器/301101.vscode 使用技巧.md",key:"v-73200d26",path:"/pages/ae97cd/",headers:[{level:2,title:"在Mac中使用",slug:"在mac中使用",normalizedTitle:"在mac中使用",charIndex:2},{level:3,title:"在终端中使用code . 命令打开当前文件夹",slug:"在终端中使用code-命令打开当前文件夹",normalizedTitle:"在终端中使用code . 命令打开当前文件夹",charIndex:14}],headersStr:"在Mac中使用 在终端中使用code . 命令打开当前文件夹",content:"# 在Mac中使用\n\n\n# 在终端中使用code . 命令打开当前文件夹\n\n * 在vscode 编辑器中 打开命令台command+shift+p 输入shell Command，出现Install 'code' command in PATH选项，点击安装。\n\n-D --DIFF                         COMPARE TWO FILES WITH EACH OTHER.                            比较两个文件的差异\n-a --add                          Add folder(s) to the last active window.                      向窗口中添加文件夹\n-g --goto file:line[:character]   Open a file at the path on the specified line and character   指定某一行\n                                  position.\n-n --new-window                   Force to open a new window.                                   强制使用新窗口\n-r --reuse-window                 Force to open a file or folder in an already opened window.   复用现有窗口\n-w --wait                         Wait for the files to be closed before returning.             等待文件关闭\n--user-data-dir                   Specifies the directory that user data is kept in. Can be     用户数据保存目录\n                                  used to open multiple distinct instances of Code.\n-h --help                         Print usage.                                                  帮助",normalizedContent:"# 在mac中使用\n\n\n# 在终端中使用code . 命令打开当前文件夹\n\n * 在vscode 编辑器中 打开命令台command+shift+p 输入shell command，出现install 'code' command in path选项，点击安装。\n\n-d --diff                         compare two files with each other.                            比较两个文件的差异\n-a --add                          add folder(s) to the last active window.                      向窗口中添加文件夹\n-g --goto file:line[:character]   open a file at the path on the specified line and character   指定某一行\n                                  position.\n-n --new-window                   force to open a new window.                                   强制使用新窗口\n-r --reuse-window                 force to open a file or folder in an already opened window.   复用现有窗口\n-w --wait                         wait for the files to be closed before returning.             等待文件关闭\n--user-data-dir                   specifies the directory that user data is kept in. can be     用户数据保存目录\n                                  used to open multiple distinct instances of code.\n-h --help                         print usage.                                                  帮助",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"代码截击术",frontmatter:{title:"代码截击术",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/271cec/",categories:["其他技术","编辑器"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3011.%E7%BC%96%E8%BE%91%E5%99%A8/301102.%E4%BB%A3%E7%A0%81%E6%88%AA%E5%87%BB%E6%9C%AF.html",relativePath:"30.其他技术/3011.编辑器/301102.代码截击术.md",key:"v-5fbf5ab8",path:"/pages/271cec/",headers:[{level:2,title:"快捷键",slug:"快捷键",normalizedTitle:"快捷键",charIndex:2},{level:2,title:"打字姿势练习",slug:"打字姿势练习",normalizedTitle:"打字姿势练习",charIndex:77},{level:2,title:"系统剪切、拷贝、粘贴和其他常用快捷键",slug:"系统剪切、拷贝、粘贴和其他常用快捷键",normalizedTitle:"系统剪切、拷贝、粘贴和其他常用快捷键",charIndex:148},{level:2,title:"场景",slug:"场景",normalizedTitle:"场景",charIndex:1379},{level:3,title:"项目开始",slug:"项目开始",normalizedTitle:"项目开始",charIndex:1396},{level:3,title:"一、整体流程",slug:"一、整体流程",normalizedTitle:"一、整体流程",charIndex:1458},{level:3,title:"二、各平台客户端",slug:"二、各平台客户端",normalizedTitle:"二、各平台客户端",charIndex:1500},{level:3,title:"二、导入订阅链接",slug:"二、导入订阅链接",normalizedTitle:"二、导入订阅链接",charIndex:2356},{level:3,title:"三、其他",slug:"三、其他",normalizedTitle:"三、其他",charIndex:2419}],headersStr:"快捷键 打字姿势练习 系统剪切、拷贝、粘贴和其他常用快捷键 场景 项目开始 一、整体流程 二、各平台客户端 二、导入订阅链接 三、其他",content:"# 快捷键\n\nhttps://www.bilibili.com/video/BV1Rt4y1B7sC/?spm_id_from=autoNext\n\n\n# 打字姿势练习\n\n国外的 https://www.typingclub.com/\n\n国内的 https://www.ldou.com/\n\n\n# 系统剪切、拷贝、粘贴和其他常用快捷键\n\n * Command-X：剪切所选项并拷贝到剪贴板。\n * Command-C：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。\n * Command-V：将剪贴板的内容粘贴到当前文稿或 App 中。这同样适用于“访达”中的文件。\n * Command-Z：撤销上一个命令。随后你可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些 App 中，你可以撤销和重做多个命令。\n * Command-A：全选各项。\n * Command-F：查找文稿中的项目或打开“查找”窗口。\n * Command-G：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。\n * Command-H：隐藏最前面的 App 的窗口。要查看最前面的 App 但隐藏所有其他 App，请按 Option-Command-H。\n * Command-M：将最前面的窗口最小化至“程序坞”。要最小化最前面的 App 的所有窗口，请按 Option-Command-M。\n * **Command-O：**打开所选项，或打开一个对话框以选择要打开的文件。\n * Command-P：打印当前文稿。\n * Command-S：存储当前文稿。\n * Command-T：打开新标签页。\n * Command-W：关闭最前面的窗口。要关闭 App 的所有窗口，请按下 Option-Command-W。\n * Option-Command-Esc：强制退出 App。\n * Command-空格键：显示或隐藏“聚焦”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 Command–Option–空格键。（如果你使用多个输入法以便用不同的语言键入内容，这些快捷键会更改输入法而非显示“聚焦”。了解如何更改冲突的键盘快捷键。）\n * Control-Command-空格键：显示字符检视器，你可以从中选择表情符号和其他符号。\n * Control-Command-F：全屏使用 App（如果 App 支持）。\n * 空格键：使用“快速查看”来预览所选项。\n * Command-Tab：在打开的 App 中切换到下一个最近使用的 App。\n * **Command-重音符 (`)：**在你当前所用 App 的各个窗口之间切换。（第二个按键上的字符因键盘而异，通常是在 Tab 键上方，数字 1 的左侧。）\n * Shift-Command-5：在 macOS Mojave 或更高版本中，拍摄截屏或录制屏幕。也可以使用 Shift-Command-3 或 Shift-Command-4 来拍摄截屏。进一步了解截屏。\n * **Shift-Command-N：**在“访达”中创建一个新文件夹。\n * Command-逗号 (,)：打开最前面的 App 的偏好设置。\n\n\n# 场景\n\n以项目的流程为例\n\n\n# 项目开始\n\n向上插入空行：ctrl+alt+enter\n\n向下插入空行：shift+enter\n\n\n# 客户端使用\n\n\n# 一、整体流程\n\n下载安装客户端 -> 导入订阅链接 -> 配置软件开始使用\n\n\n# 二、各平台客户端\n\n建议设置客户端的打开时更新订阅，获取最新的节点信息及代理规则以保持最佳的用户体验\n\n\n1\n\n\n> Windows平台\n\n * Clash_for_Windows （推荐）| 下载地址（Github） | 下载地址（Github加速） | 教程 | 教程\n * v2rayN | 下载地址（Github） | 下载地址（Github加速） | 教程\n\n> macOS平台\n\n * ClashX（推荐） | 下载地址（Github） | 下载地址（Github加速） | 教程\n * Clash_for_Windows Intel 平台 | 下载地址（Github） | 下载地址（Github加速） | 教程 | 教程\n * Clash_for_Windows ARM 平台 | 下载地址（Github） | 下载地址（Github加速） | 教程 | 教程\n * Surge\n\n> Android平台\n\n * Clash for Android （推荐）| 下载地址（Github） | 下载地址（Github加速） | 教程\n * Surfboard | 下载地址（Github） | 下载地址（Github加速） | 教程\n * v2rayNG（需手动设置跳过证书验证） | 下载地址（Github） | 下载地址（Github加速） | 教程\n\n> iOS平台（须使用非国区应用商店）\n\n * Shadowrocket\n   \n   （推荐）\n   \n   点击跳转单独的教程\n\n * QuantumultX（推荐）下载链接（Appstore） | 教程\n\n * Surge\n\n> OpenWrt平台\n\n * OpenClash Github\n * ShellClash Github\n\n> Linux平台\n\n * Clash_for_Windows | 下载地址（Github） | 下载地址（Github加速） | 教程 | 教程\n * ShellClash Github\n\n\n# 二、导入订阅链接\n\n 1. 一键导入：仪表盘-捷径-一键订阅\n 2. 复制导入：复制订阅链接，打开客户端软件导入订阅\n\n\n# 三、其他\n\n默认的代理规则不满足需求? 可以请使用: 订阅转换",normalizedContent:"# 快捷键\n\nhttps://www.bilibili.com/video/bv1rt4y1b7sc/?spm_id_from=autonext\n\n\n# 打字姿势练习\n\n国外的 https://www.typingclub.com/\n\n国内的 https://www.ldou.com/\n\n\n# 系统剪切、拷贝、粘贴和其他常用快捷键\n\n * command-x：剪切所选项并拷贝到剪贴板。\n * command-c：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。\n * command-v：将剪贴板的内容粘贴到当前文稿或 app 中。这同样适用于“访达”中的文件。\n * command-z：撤销上一个命令。随后你可以按 shift-command-z 来重做，从而反向执行撤销命令。在某些 app 中，你可以撤销和重做多个命令。\n * command-a：全选各项。\n * command-f：查找文稿中的项目或打开“查找”窗口。\n * command-g：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 shift-command-g。\n * command-h：隐藏最前面的 app 的窗口。要查看最前面的 app 但隐藏所有其他 app，请按 option-command-h。\n * command-m：将最前面的窗口最小化至“程序坞”。要最小化最前面的 app 的所有窗口，请按 option-command-m。\n * **command-o：**打开所选项，或打开一个对话框以选择要打开的文件。\n * command-p：打印当前文稿。\n * command-s：存储当前文稿。\n * command-t：打开新标签页。\n * command-w：关闭最前面的窗口。要关闭 app 的所有窗口，请按下 option-command-w。\n * option-command-esc：强制退出 app。\n * command-空格键：显示或隐藏“聚焦”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 command–option–空格键。（如果你使用多个输入法以便用不同的语言键入内容，这些快捷键会更改输入法而非显示“聚焦”。了解如何更改冲突的键盘快捷键。）\n * control-command-空格键：显示字符检视器，你可以从中选择表情符号和其他符号。\n * control-command-f：全屏使用 app（如果 app 支持）。\n * 空格键：使用“快速查看”来预览所选项。\n * command-tab：在打开的 app 中切换到下一个最近使用的 app。\n * **command-重音符 (`)：**在你当前所用 app 的各个窗口之间切换。（第二个按键上的字符因键盘而异，通常是在 tab 键上方，数字 1 的左侧。）\n * shift-command-5：在 macos mojave 或更高版本中，拍摄截屏或录制屏幕。也可以使用 shift-command-3 或 shift-command-4 来拍摄截屏。进一步了解截屏。\n * **shift-command-n：**在“访达”中创建一个新文件夹。\n * command-逗号 (,)：打开最前面的 app 的偏好设置。\n\n\n# 场景\n\n以项目的流程为例\n\n\n# 项目开始\n\n向上插入空行：ctrl+alt+enter\n\n向下插入空行：shift+enter\n\n\n# 客户端使用\n\n\n# 一、整体流程\n\n下载安装客户端 -> 导入订阅链接 -> 配置软件开始使用\n\n\n# 二、各平台客户端\n\n建议设置客户端的打开时更新订阅，获取最新的节点信息及代理规则以保持最佳的用户体验\n\n\n1\n\n\n> windows平台\n\n * clash_for_windows （推荐）| 下载地址（github） | 下载地址（github加速） | 教程 | 教程\n * v2rayn | 下载地址（github） | 下载地址（github加速） | 教程\n\n> macos平台\n\n * clashx（推荐） | 下载地址（github） | 下载地址（github加速） | 教程\n * clash_for_windows intel 平台 | 下载地址（github） | 下载地址（github加速） | 教程 | 教程\n * clash_for_windows arm 平台 | 下载地址（github） | 下载地址（github加速） | 教程 | 教程\n * surge\n\n> android平台\n\n * clash for android （推荐）| 下载地址（github） | 下载地址（github加速） | 教程\n * surfboard | 下载地址（github） | 下载地址（github加速） | 教程\n * v2rayng（需手动设置跳过证书验证） | 下载地址（github） | 下载地址（github加速） | 教程\n\n> ios平台（须使用非国区应用商店）\n\n * shadowrocket\n   \n   （推荐）\n   \n   点击跳转单独的教程\n\n * quantumultx（推荐）下载链接（appstore） | 教程\n\n * surge\n\n> openwrt平台\n\n * openclash github\n * shellclash github\n\n> linux平台\n\n * clash_for_windows | 下载地址（github） | 下载地址（github加速） | 教程 | 教程\n * shellclash github\n\n\n# 二、导入订阅链接\n\n 1. 一键导入：仪表盘-捷径-一键订阅\n 2. 复制导入：复制订阅链接，打开客户端软件导入订阅\n\n\n# 三、其他\n\n默认的代理规则不满足需求? 可以请使用: 订阅转换",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"jetbrains 系列编辑器正则批量替换",frontmatter:{title:"jetbrains 系列编辑器正则批量替换",date:"2023-04-12T16:03:42.000Z",permalink:"/pages/aed421/",categories:["其他技术","编辑器"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3011.%E7%BC%96%E8%BE%91%E5%99%A8/3011101.jetbrains%20%E7%B3%BB%E5%88%97%E7%BC%96%E8%BE%91%E5%99%A8%E6%AD%A3%E5%88%99%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2.html",relativePath:"30.其他技术/3011.编辑器/3011101.jetbrains 系列编辑器正则批量替换.md",key:"v-e866ea6c",path:"/pages/aed421/",headers:[{level:3,title:"示例一",slug:"示例一",normalizedTitle:"示例一",charIndex:2},{level:3,title:"需求",slug:"需求",normalizedTitle:"需求",charIndex:10},{level:4,title:"操作",slug:"操作",normalizedTitle:"操作",charIndex:173}],headersStr:"示例一 需求 操作",content:"# 示例一\n\n\n# 需求\n\nclassName={style.PollutionDischargePermitCate_container}替换成className='PollutionDischargePermitCate_container'\n\nPollutionDischargePermitCate_container 为动态变量\n\n# 操作\n\nclassName=\\{style\\.(\\w+)\\}\n\nclassName=\\'$1'\n\n",normalizedContent:"# 示例一\n\n\n# 需求\n\nclassname={style.pollutiondischargepermitcate_container}替换成classname='pollutiondischargepermitcate_container'\n\npollutiondischargepermitcate_container 为动态变量\n\n# 操作\n\nclassname=\\{style\\.(\\w+)\\}\n\nclassname=\\'$1'\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"vim日常使用记录",frontmatter:{title:"vim日常使用记录",date:"2024-04-08T16:23:30.000Z",permalink:"/pages/a5eeb6/",categories:["其他技术","编辑器"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3011.%E7%BC%96%E8%BE%91%E5%99%A8/3011200.vim%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html",relativePath:"30.其他技术/3011.编辑器/3011200.vim日常使用记录.md",key:"v-61745406",path:"/pages/a5eeb6/",headers:[{level:2,title:"基础操作",slug:"基础操作",normalizedTitle:"基础操作",charIndex:2},{level:2,title:"进阶操作",slug:"进阶操作",normalizedTitle:"进阶操作",charIndex:57},{level:2,title:"高级操作(语法)",slug:"高级操作-语法",normalizedTitle:"高级操作(语法)",charIndex:176},{level:2,title:"电脑配置",slug:"电脑配置",normalizedTitle:"电脑配置",charIndex:508}],headersStr:"基础操作 进阶操作 高级操作(语法) 电脑配置",content:"# 基础操作\n\ni 插入模式\n\nesc or Ctrl+[ 退出插入模式\n\nh j k l 对应上下左右\n\n\n# 进阶操作\n\n * 行首: 0 ^\n\n * 行位: $ g_\n\n * 插入\n\n * 行首: I\n\n * 行尾: A\n\n * 行前: O\n\n * 行后: o\n\n * 复制当前行: yy\n\n * 粘贴: p\n\n * 剪切当前行: dd\n\n\n# 高级操作(语法)\n\n操作符 + 动作(区域范围)\n\n * 操作\n\n * 删除: d\n\n * $ 删除至行尾\n\n * 0 删除至行首\n\n * l 删除后一个字符\n\n * h 删除前一个字符\n\n * j 删除一行和一个下换行\n\n * k 删除一行和一个上换行\n\n * 数字 + d\n\n * c 跟 d一样 , 只不过操作完成后进入了insert模式\n\n * 基于单词/字串移动\n\n * e: 移动到单词的结尾\n\n * w: 移动到单词的开头\n\n * b: 移动到上一个单词的结尾\n\n * ge: 移动到上一个单词的开头\n\n*大写为字串操作*\n\n * 组合\n\n * cw 删除当前单词\n\n * ea: 在当前单词结尾处添加\n\n * bi: 在当前单词开始处添加\n\n\n# 电脑配置\n\n长按快速移动\n\n# 全局开启\n>>> defaults write -g ApplePressAndHoldEnabled -bool false\n# 全局关闭\n>>> defaults write -g ApplePressAndHoldEnabled -bool true\n# vscode开启\n>>> defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false\n>>> defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool true\n# firefox开启\n>>> defaults write org.mozilla.firefox ApplePressAndHoldEnabled -bool false\n# firefox关闭\n>>> defaults write org.mozilla.firefox ApplePressAndHoldEnabled -bool true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",normalizedContent:"# 基础操作\n\ni 插入模式\n\nesc or ctrl+[ 退出插入模式\n\nh j k l 对应上下左右\n\n\n# 进阶操作\n\n * 行首: 0 ^\n\n * 行位: $ g_\n\n * 插入\n\n * 行首: i\n\n * 行尾: a\n\n * 行前: o\n\n * 行后: o\n\n * 复制当前行: yy\n\n * 粘贴: p\n\n * 剪切当前行: dd\n\n\n# 高级操作(语法)\n\n操作符 + 动作(区域范围)\n\n * 操作\n\n * 删除: d\n\n * $ 删除至行尾\n\n * 0 删除至行首\n\n * l 删除后一个字符\n\n * h 删除前一个字符\n\n * j 删除一行和一个下换行\n\n * k 删除一行和一个上换行\n\n * 数字 + d\n\n * c 跟 d一样 , 只不过操作完成后进入了insert模式\n\n * 基于单词/字串移动\n\n * e: 移动到单词的结尾\n\n * w: 移动到单词的开头\n\n * b: 移动到上一个单词的结尾\n\n * ge: 移动到上一个单词的开头\n\n*大写为字串操作*\n\n * 组合\n\n * cw 删除当前单词\n\n * ea: 在当前单词结尾处添加\n\n * bi: 在当前单词开始处添加\n\n\n# 电脑配置\n\n长按快速移动\n\n# 全局开启\n>>> defaults write -g applepressandholdenabled -bool false\n# 全局关闭\n>>> defaults write -g applepressandholdenabled -bool true\n# vscode开启\n>>> defaults write com.microsoft.vscode applepressandholdenabled -bool false\n>>> defaults write com.microsoft.vscode applepressandholdenabled -bool true\n# firefox开启\n>>> defaults write org.mozilla.firefox applepressandholdenabled -bool false\n# firefox关闭\n>>> defaults write org.mozilla.firefox applepressandholdenabled -bool true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",charsets:{cjk:!0},lastUpdated:"2024/04/08, 16:26:17",lastUpdatedTimestamp:1712564777e3},{title:"微信私域",frontmatter:{title:"微信私域",date:"2022-12-31T10:35:02.000Z",permalink:"/pages/6ae971/",categories:["其他技术","产品&设计"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3020.%E4%BA%A7%E5%93%81&%E8%AE%BE%E8%AE%A1/3020050.%E5%BE%AE%E4%BF%A1%E7%A7%81%E5%9F%9F.html",relativePath:"30.其他技术/3020.产品&设计/3020050.微信私域.md",key:"v-a44c2b60",path:"/pages/6ae971/",headers:[{level:2,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:2},{level:2,title:"微信公域",slug:"微信公域",normalizedTitle:"微信公域",charIndex:25},{level:2,title:"公域获客，私域成交",slug:"公域获客-私域成交",normalizedTitle:"公域获客，私域成交",charIndex:34}],headersStr:"概念 微信公域 公域获客，私域成交",content:"# 概念\n\n*微信生态是最大的私域场 *\n\n\n# 微信公域\n\n\n# 公域获客，私域成交",normalizedContent:"# 概念\n\n*微信生态是最大的私域场 *\n\n\n# 微信公域\n\n\n# 公域获客，私域成交",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"产品经理学习路线",frontmatter:{title:"产品经理学习路线",date:"2021-12-26T23:07:27.000Z",permalink:"/pages/f72cd5/",categories:["其他","产品&设计"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3020.%E4%BA%A7%E5%93%81&%E8%AE%BE%E8%AE%A1/302010.%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",relativePath:"30.其他技术/3020.产品&设计/302010.产品经理学习路线.md",key:"v-b9442570",path:"/pages/f72cd5/",headers:[{level:2,title:"产品经理做什么",slug:"产品经理做什么",normalizedTitle:"产品经理做什么",charIndex:2},{level:3,title:"招聘要求",slug:"招聘要求",normalizedTitle:"招聘要求",charIndex:14},{level:3,title:"要求解析",slug:"要求解析",normalizedTitle:"要求解析",charIndex:25},{level:4,title:"Axure",slug:"axure",normalizedTitle:"axure",charIndex:72},{level:4,title:"xmind",slug:"xmind",normalizedTitle:"xmind",charIndex:570},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:4,title:"侧重写文档，做培训优先",slug:"侧重写文档-做培训优先",normalizedTitle:"侧重写文档，做培训优先",charIndex:769},{level:4,title:"至少独自主导过一款互联网产品从0到1的过程，熟悉互联网产品快速迭代的方法论；",slug:"至少独自主导过一款互联网产品从0到1的过程-熟悉互联网产品快速迭代的方法论",normalizedTitle:"至少独自主导过一款互联网产品从0到1的过程，熟悉互联网产品快速迭代的方法论；",charIndex:784},{level:2,title:"软实力",slug:"软实力",normalizedTitle:"软实力",charIndex:827},{level:2,title:"",slug:"-2",normalizedTitle:"",charIndex:0}],headersStr:"产品经理做什么 招聘要求 要求解析 Axure xmind  侧重写文档，做培训优先 至少独自主导过一款互联网产品从0到1的过程，熟悉互联网产品快速迭代的方法论； 软实力 ",content:"# 产品经理做什么\n\n\n# 招聘要求\n\n\n\n\n# 要求解析\n\n具备良好的需求分析和产品设计能力，会使用目前主流的原型设计软件（如：XMind*、Axure等），* 可以独立完成prd等标准产品文档撰写。\n\n# Axure\n\n * 熟练使用Axure、墨刀、Xmind等原型工具和产品相关软件、工具。\n\n * * axure 会Axure就肯定会墨刀 photoshop 跟 美图秀秀的差别\n   * 安装包\n * * * 破解版: https://mp.weixin.qq.com/s?__biz=MzIyNjU2NzIxNQ==&mid=2247506469&idx=2&sn=757a1dade2b0ded6d859a6e80e30d210&chksm=e86cef65df1b6673fd816056d82fd4e6fa68d78abb59f755035f913f1eded860e657b8a4c5a9&scene=21#wechat_redirect\n     * 解压密码：@vposy 或者 123456\n * * 样例\n\nAxureUX客户关系管理系统中台原型模板 v1.2.rp\n\n * 视频教程\n\nhttps://player.bilibili.com/player.html?bvid=BV1Df4y167S8\n\n# xmind\n\n * * xmind 即思维导图\n * * * 是一个全功能的思维导图和头脑风暴软件，为激发灵感和创意而生。作为一款有效提升工作和生活效率的生产力工具, 下面是教程:\n\nhttps://player.bilibili.com/player.html?bvid=BV1Rb411s7VG\n\n\n#\n\n----------------------------------------\n\n# 侧重写文档，做培训优先\n\n# 至少独自主导过一款互联网产品从0到1的过程，熟悉互联网产品快速迭代的方法论；\n\n\n# 软实力\n\n\n#\n\n----------------------------------------\n\nhttps://www.bilibili.com/video/BV184411g7R2?from=search&seid=6714815151045673791\n\nhttp://www.woshipm.com/pmd/281880.html",normalizedContent:"# 产品经理做什么\n\n\n# 招聘要求\n\n\n\n\n# 要求解析\n\n具备良好的需求分析和产品设计能力，会使用目前主流的原型设计软件（如：xmind*、axure等），* 可以独立完成prd等标准产品文档撰写。\n\n# axure\n\n * 熟练使用axure、墨刀、xmind等原型工具和产品相关软件、工具。\n\n * * axure 会axure就肯定会墨刀 photoshop 跟 美图秀秀的差别\n   * 安装包\n * * * 破解版: https://mp.weixin.qq.com/s?__biz=mziynju2nzixnq==&mid=2247506469&idx=2&sn=757a1dade2b0ded6d859a6e80e30d210&chksm=e86cef65df1b6673fd816056d82fd4e6fa68d78abb59f755035f913f1eded860e657b8a4c5a9&scene=21#wechat_redirect\n     * 解压密码：@vposy 或者 123456\n * * 样例\n\naxureux客户关系管理系统中台原型模板 v1.2.rp\n\n * 视频教程\n\nhttps://player.bilibili.com/player.html?bvid=bv1df4y167s8\n\n# xmind\n\n * * xmind 即思维导图\n * * * 是一个全功能的思维导图和头脑风暴软件，为激发灵感和创意而生。作为一款有效提升工作和生活效率的生产力工具, 下面是教程:\n\nhttps://player.bilibili.com/player.html?bvid=bv1rb411s7vg\n\n\n#\n\n----------------------------------------\n\n# 侧重写文档，做培训优先\n\n# 至少独自主导过一款互联网产品从0到1的过程，熟悉互联网产品快速迭代的方法论；\n\n\n# 软实力\n\n\n#\n\n----------------------------------------\n\nhttps://www.bilibili.com/video/bv184411g7r2?from=search&seid=6714815151045673791\n\nhttp://www.woshipm.com/pmd/281880.html",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"headlessui初探",frontmatter:{title:"headlessui初探",date:"2022-06-15T08:04:23.000Z",permalink:"/pages/59c7ac/",categories:["其他技术","产品&设计"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3020.%E4%BA%A7%E5%93%81&%E8%AE%BE%E8%AE%A1/3020200.headlessui%E5%88%9D%E6%8E%A2.html",relativePath:"30.其他技术/3020.产品&设计/3020200.headlessui初探.md",key:"v-5e1134a2",path:"/pages/59c7ac/",headersStr:null,content:"4",normalizedContent:"4",charsets:{},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"fielder 学习",frontmatter:{title:"fielder 学习",date:"2021-12-30T13:30:21.000Z",permalink:"/pages/ebaf44/",categories:["其他","测试"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3030.%E6%B5%8B%E8%AF%95/033001.fielder%20%E5%AD%A6%E4%B9%A0.html",relativePath:"30.其他技术/3030.测试/033001.fielder 学习.md",key:"v-422ec5c3",path:"/pages/ebaf44/",headersStr:null,content:"https需要配置证书才能获取 请求体内容\n\n\n\n而http的请求请求体是直接能截取到的\n\n",normalizedContent:"https需要配置证书才能获取 请求体内容\n\n\n\n而http的请求请求体是直接能截取到的\n\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"nvware 使用",frontmatter:{title:"nvware 使用",date:"2021-12-30T13:39:21.000Z",permalink:"/pages/2ea55b/",categories:["其他","虚拟机"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3040.%E8%99%9A%E6%8B%9F%E6%9C%BA/304001.nvware%20%E4%BD%BF%E7%94%A8.html",relativePath:"30.其他技术/3040.虚拟机/304001.nvware 使用.md",key:"v-3b5de10f",path:"/pages/2ea55b/",headers:[{level:2,title:"网络适配器",slug:"网络适配器",normalizedTitle:"网络适配器",charIndex:2},{level:3,title:"桥街模式, 复制物理网络连接状态",slug:"桥街模式-复制物理网络连接状态",normalizedTitle:"桥街模式, 复制物理网络连接状态",charIndex:12}],headersStr:"网络适配器 桥街模式, 复制物理网络连接状态",content:"# 网络适配器\n\n\n# 桥街模式, 复制物理网络连接状态\n\nvi /etc/sysconfig/network-scripts/ifcfg-e**\n\n\n1\n\n\n说明： ifcfg-e**文件每个人可能不同\n\nTYPE=Ethernet\nBOOTPROTO=static #修改成static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nNAME=eno16777736\nUUID=bf5337ab-c044-4af7-9143-12da0d493b89\nDEVICE=eno16777736\nONBOOT=yes #修改成yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPADDR=192.168.0.200 # 自定义虚拟机的ip地址（主机是192.168.0.107），必须与主机在同一网段\nNETMASK=255.255.255.0 #设置子网掩码，跟宿主一样\nGETWAY=192.168.0.1  #默认网关，跟宿主一样\nDNS1=192.168.0.1 #DNS，跟宿主一样\nip地址：设置和宿主机同网段ip\nNETMASK：子网掩码和宿主机相同\nGETWAY: 默认网关和宿主机相同\nDNS1: 跟宿主一样\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n添加网关地址\n\nvi /etc/sysconfig/network \n\n\n1\n\n\n内容如下：\n\nNETWORKING=yes\nHOSTNAME=xxxx #名字随便了\nGETWAY=192.168.1.1 #默认网关和宿主机相同\n\n\n1\n2\n3\n\n\n添加DNS\n\nvi /etc/resolv.conf \n\n\n1\n\n\n内容如下：\n\n# Generated by NetworkManager\nnameserver 192.168.0.1 #DNS，跟宿主一样\n\n\n1\n2\n\n\n重启network\n\nservice network restart\n\n\n1\n\n\n----------------------------------------\n\nTYPE=Ethernet\nPROXY_METHOD=static\nBROWSER_ONLY=no\nBOOTPROTO=dhcp\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=e6b6435d-1f19-4fb9-96ec-cef2ee6416a6\nDEVICE=ens33\nONBOOT=yes\nIPADDR=192.168.3.222\nNETMASK=255.255.255.0\nGATEWAY=192.168.3.1\nDNS1=192.168.3.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n配置到这一步也可以试试ping www.baidu.com通了就可以了",normalizedContent:"# 网络适配器\n\n\n# 桥街模式, 复制物理网络连接状态\n\nvi /etc/sysconfig/network-scripts/ifcfg-e**\n\n\n1\n\n\n说明： ifcfg-e**文件每个人可能不同\n\ntype=ethernet\nbootproto=static #修改成static\ndefroute=yes\nipv4_failure_fatal=no\nipv6init=yes\nipv6_autoconf=yes\nipv6_defroute=yes\nipv6_failure_fatal=no\nname=eno16777736\nuuid=bf5337ab-c044-4af7-9143-12da0d493b89\ndevice=eno16777736\nonboot=yes #修改成yes\npeerdns=yes\npeerroutes=yes\nipv6_peerdns=yes\nipv6_peerroutes=yes\nipaddr=192.168.0.200 # 自定义虚拟机的ip地址（主机是192.168.0.107），必须与主机在同一网段\nnetmask=255.255.255.0 #设置子网掩码，跟宿主一样\ngetway=192.168.0.1  #默认网关，跟宿主一样\ndns1=192.168.0.1 #dns，跟宿主一样\nip地址：设置和宿主机同网段ip\nnetmask：子网掩码和宿主机相同\ngetway: 默认网关和宿主机相同\ndns1: 跟宿主一样\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n添加网关地址\n\nvi /etc/sysconfig/network \n\n\n1\n\n\n内容如下：\n\nnetworking=yes\nhostname=xxxx #名字随便了\ngetway=192.168.1.1 #默认网关和宿主机相同\n\n\n1\n2\n3\n\n\n添加dns\n\nvi /etc/resolv.conf \n\n\n1\n\n\n内容如下：\n\n# generated by networkmanager\nnameserver 192.168.0.1 #dns，跟宿主一样\n\n\n1\n2\n\n\n重启network\n\nservice network restart\n\n\n1\n\n\n----------------------------------------\n\ntype=ethernet\nproxy_method=static\nbrowser_only=no\nbootproto=dhcp\ndefroute=yes\nipv4_failure_fatal=no\nipv6init=yes\nipv6_autoconf=yes\nipv6_defroute=yes\nipv6_failure_fatal=no\nipv6_addr_gen_mode=stable-privacy\nname=ens33\nuuid=e6b6435d-1f19-4fb9-96ec-cef2ee6416a6\ndevice=ens33\nonboot=yes\nipaddr=192.168.3.222\nnetmask=255.255.255.0\ngateway=192.168.3.1\ndns1=192.168.3.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n配置到这一步也可以试试ping www.baidu.com通了就可以了",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"最长公共前缀",frontmatter:{title:"最长公共前缀",tags:["算法","简单"],date:"2022-05-07T15:12:03.000Z",permalink:"/pages/0097e6/",categories:["其他技术","算法"]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305004.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80.html",relativePath:"30.其他技术/3050.算法/305004.最长公共前缀.md",key:"v-4df87696",path:"/pages/0097e6/",headersStr:null,content:'CATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (42.32%)   2227    -\n\nTags\n\nstring\n\nCompanies\n\nyelp\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 ""。\n\n示例 1：\n\n输入：strs = ["flower","flow","flight"]\n输出："fl"\n\n\n1\n2\n\n\n示例 2：\n\n输入：strs = ["dog","racecar","car"]\n输出：""\n解释：输入不存在公共前缀。\n\n\n1\n2\n3\n\n\n提示：\n\n * 1 <= strs.length <= 200\n * 0 <= strs[i].length <= 200\n * strs[i] 仅由小写英文字母组成\n\n----------------------------------------\n\nDiscussion | Solution\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-05-07 11:35:19\n * @LastEditTime: 2022-05-07 12:30:06\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description: 暂无\n * @FilePath: /question100/Users/izhaong/Documents/leetcode/14.最长公共前缀.js\n */\n/*\n * @lc app=leetcode.cn id=14 lang=javascript\n *\n * [14] 最长公共前缀\n *\n * https://leetcode-cn.com/problems/longest-common-prefix/description/\n *\n * algorithms\n * Easy (42.32%)\n * Likes:    2227\n * Dislikes: 0\n * Total Accepted:    822.7K\n * Total Submissions: 1.9M\n * Testcase Example:  \'["flower","flow","flight"]\'\n *\n * 编写一个函数来查找字符串数组中的最长公共前缀。\n *\n * 如果不存在公共前缀，返回空字符串 ""。\n *\n *\n *\n * 示例 1：\n *\n *\n * 输入：strs = ["flower","flow","flight"]\n * 输出："fl"\n *\n *\n * 示例 2：\n *\n *\n * 输入：strs = ["dog","racecar","car"]\n * 输出：""\n * 解释：输入不存在公共前缀。\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= strs.length <= 200\n * 0 <= strs[i].length <= 200\n * strs[i] 仅由小写英文字母组成\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function (strs) {\n  let prefix = "";\n\n  for (let i = 0; i < strs[0].length; i++) {\n    let rec = strs[0].slice(0, i + 1);\n    let isStart = false;\n\n    for (let j = 0; j < strs.length; j++) {\n      isStart = false;\n      const e = strs[j];\n      if (e.startsWith(rec)) {\n        isStart = true;\n      } else {\n        isStart = false;\n        break;\n      }\n    }\n    if (isStart) {\n      prefix = rec;\n    } else {\n      break;\n    }\n  }\n  return prefix;\n};\n// @lc code=end\n\n// @after-stub-for-debug-begin\nmodule.exports = longestCommonPrefix;\n// @after-stub-for-debug-end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n',normalizedContent:'category     difficulty      likes   dislikes\nalgorithms   easy (42.32%)   2227    -\n\ntags\n\nstring\n\ncompanies\n\nyelp\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 ""。\n\n示例 1：\n\n输入：strs = ["flower","flow","flight"]\n输出："fl"\n\n\n1\n2\n\n\n示例 2：\n\n输入：strs = ["dog","racecar","car"]\n输出：""\n解释：输入不存在公共前缀。\n\n\n1\n2\n3\n\n\n提示：\n\n * 1 <= strs.length <= 200\n * 0 <= strs[i].length <= 200\n * strs[i] 仅由小写英文字母组成\n\n----------------------------------------\n\ndiscussion | solution\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-05-07 11:35:19\n * @lastedittime: 2022-05-07 12:30:06\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description: 暂无\n * @filepath: /question100/users/izhaong/documents/leetcode/14.最长公共前缀.js\n */\n/*\n * @lc app=leetcode.cn id=14 lang=javascript\n *\n * [14] 最长公共前缀\n *\n * https://leetcode-cn.com/problems/longest-common-prefix/description/\n *\n * algorithms\n * easy (42.32%)\n * likes:    2227\n * dislikes: 0\n * total accepted:    822.7k\n * total submissions: 1.9m\n * testcase example:  \'["flower","flow","flight"]\'\n *\n * 编写一个函数来查找字符串数组中的最长公共前缀。\n *\n * 如果不存在公共前缀，返回空字符串 ""。\n *\n *\n *\n * 示例 1：\n *\n *\n * 输入：strs = ["flower","flow","flight"]\n * 输出："fl"\n *\n *\n * 示例 2：\n *\n *\n * 输入：strs = ["dog","racecar","car"]\n * 输出：""\n * 解释：输入不存在公共前缀。\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= strs.length <= 200\n * 0 <= strs[i].length <= 200\n * strs[i] 仅由小写英文字母组成\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestcommonprefix = function (strs) {\n  let prefix = "";\n\n  for (let i = 0; i < strs[0].length; i++) {\n    let rec = strs[0].slice(0, i + 1);\n    let isstart = false;\n\n    for (let j = 0; j < strs.length; j++) {\n      isstart = false;\n      const e = strs[j];\n      if (e.startswith(rec)) {\n        isstart = true;\n      } else {\n        isstart = false;\n        break;\n      }\n    }\n    if (isstart) {\n      prefix = rec;\n    } else {\n      break;\n    }\n  }\n  return prefix;\n};\n// @lc code=end\n\n// @after-stub-for-debug-begin\nmodule.exports = longestcommonprefix;\n// @after-stub-for-debug-end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"盛最多水的容器",frontmatter:{title:"盛最多水的容器",date:"2023-11-04T10:39:42.000Z",permalink:"/pages/7b3bc0/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305011.%20%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8.html",relativePath:"30.其他技术/3050.算法/305011. 盛最多水的容器.md",key:"v-0613a89c",path:"/pages/7b3bc0/",headers:[{level:2,title:"题目",slug:"题目",normalizedTitle:"题目",charIndex:16},{level:2,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:371},{level:3,title:"1. 枚举",slug:"_1-枚举",normalizedTitle:"1. 枚举",charIndex:378},{level:2,title:"2.双指针",slug:"_2-双指针",normalizedTitle:"2.双指针",charIndex:769}],headersStr:"题目 代码 1. 枚举 2.双指针",content:"11. 盛最多水的容器\n\n\n# 题目\n\n给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。\n\n找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n返回容器可以储存的最大水量。\n\n**说明：**你不能倾斜容器。\n\n示例 1：\n\n\n\n输入：[1,8,6,2,5,4,8,3,7] 输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n示例 2：\n\n输入：height = [1,1] 输出：1\n\n提示：\n\n * n == height.length\n * 2 <= n <= 105\n * 0 <= height[i] <= 104\n\n\n# 代码\n\n\n# 1. 枚举\n\nclass Solution {\n    public int maxArea(int[] height) {\n        int max = 0;\n        for(int i = 0; i < height.length - 1; i++) {\n            for(int j = i + 1; i < height.length; ++j) {\n                int area = (j - i) * Math.min(height[i],height[j]);\n                max = Math.max(area, max);\n            }\n        }\n        return max;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2.双指针\n\nclass Solution {\n    public int maxArea(int[] height) {\n        int max = 0;\n        int i = 0;\n        int j = height.length - 1;\n        while(i < j) {\n            int area = (j - i) * Math.min(height[i], height[j]);\n            max = Math.max(max, area);\n            if(height[i] < height[j]) {\n                i ++;\n            } else {\n                j ++;\n            }\n        }\n        return max;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"11. 盛最多水的容器\n\n\n# 题目\n\n给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。\n\n找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n返回容器可以储存的最大水量。\n\n**说明：**你不能倾斜容器。\n\n示例 1：\n\n\n\n输入：[1,8,6,2,5,4,8,3,7] 输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n示例 2：\n\n输入：height = [1,1] 输出：1\n\n提示：\n\n * n == height.length\n * 2 <= n <= 105\n * 0 <= height[i] <= 104\n\n\n# 代码\n\n\n# 1. 枚举\n\nclass solution {\n    public int maxarea(int[] height) {\n        int max = 0;\n        for(int i = 0; i < height.length - 1; i++) {\n            for(int j = i + 1; i < height.length; ++j) {\n                int area = (j - i) * math.min(height[i],height[j]);\n                max = math.max(area, max);\n            }\n        }\n        return max;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2.双指针\n\nclass solution {\n    public int maxarea(int[] height) {\n        int max = 0;\n        int i = 0;\n        int j = height.length - 1;\n        while(i < j) {\n            int area = (j - i) * math.min(height[i], height[j]);\n            max = math.max(max, area);\n            if(height[i] < height[j]) {\n                i ++;\n            } else {\n                j ++;\n            }\n        }\n        return max;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{cjk:!0},lastUpdated:"2023/11/04, 10:56:47",lastUpdatedTimestamp:1699066607e3},{title:"IP 地址无效化",frontmatter:{title:"IP 地址无效化",date:"2022-11-08T13:36:55.000Z",permalink:"/pages/acce5f/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501108.IP%20%E5%9C%B0%E5%9D%80%E6%97%A0%E6%95%88%E5%8C%96.html",relativePath:"30.其他技术/3050.算法/30501108.IP 地址无效化.md",key:"v-b3eeeae6",path:"/pages/acce5f/",headersStr:null,content:'# IP 地址无效化\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (85.59%)   122     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个有效的 IPv4 地址 address，返回这个 IP 地址的无效化版本。\n\n所谓无效化 IP 地址，其实就是用 "[.]" 代替了每个 "."。\n\n示例 1：\n\n输入：address = "1.1.1.1"\n输出："1[.]1[.]1[.]1"\n\n\n1\n2\n\n\n示例 2：\n\n输入：address = "255.100.50.0"\n输出："255[.]100[.]50[.]0"\n\n\n1\n2\n\n\n提示：\n\n * 给出的 address 是一个有效的 IPv4 地址\n\n----------------------------------------\n\nDiscussion | Solution\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-08 13:28:15\n * @LastEditTime: 2022-11-08 13:36:16\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /loan-home/Users/izhaong/izhaong/Project_me/leetcode/1108.ip-地址无效化.ts\n */\n/*\n * @lc app=leetcode.cn id=1108 lang=typescript\n *\n * [1108] IP 地址无效化\n *\n * https://leetcode.cn/problems/defanging-an-ip-address/description/\n *\n * algorithms\n * Easy (85.59%)\n * Likes:    122\n * Dislikes: 0\n * Total Accepted:    107.5K\n * Total Submissions: 125.6K\n * Testcase Example:  \'"1.1.1.1"\'\n *\n * 给你一个有效的 IPv4 地址 address，返回这个 IP 地址的无效化版本。\n * \n * 所谓无效化 IP 地址，其实就是用 "[.]" 代替了每个 "."。\n * \n * \n * \n * 示例 1：\n * \n * 输入：address = "1.1.1.1"\n * 输出："1[.]1[.]1[.]1"\n * \n * \n * 示例 2：\n * \n * 输入：address = "255.100.50.0"\n * 输出："255[.]100[.]50[.]0"\n * \n * \n * \n * \n * 提示：\n * \n * \n * 给出的 address 是一个有效的 IPv4 地址\n * \n * \n */\n\n// @lc code=start\nfunction defangIPaddr(address: string): string {\n    // return address.replaceAll(\'.\', \'[.]\')\n    return address.split(\'\\.\').join(\'[.]\')\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n',normalizedContent:'# ip 地址无效化\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (85.59%)   122     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个有效的 ipv4 地址 address，返回这个 ip 地址的无效化版本。\n\n所谓无效化 ip 地址，其实就是用 "[.]" 代替了每个 "."。\n\n示例 1：\n\n输入：address = "1.1.1.1"\n输出："1[.]1[.]1[.]1"\n\n\n1\n2\n\n\n示例 2：\n\n输入：address = "255.100.50.0"\n输出："255[.]100[.]50[.]0"\n\n\n1\n2\n\n\n提示：\n\n * 给出的 address 是一个有效的 ipv4 地址\n\n----------------------------------------\n\ndiscussion | solution\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-08 13:28:15\n * @lastedittime: 2022-11-08 13:36:16\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /loan-home/users/izhaong/izhaong/project_me/leetcode/1108.ip-地址无效化.ts\n */\n/*\n * @lc app=leetcode.cn id=1108 lang=typescript\n *\n * [1108] ip 地址无效化\n *\n * https://leetcode.cn/problems/defanging-an-ip-address/description/\n *\n * algorithms\n * easy (85.59%)\n * likes:    122\n * dislikes: 0\n * total accepted:    107.5k\n * total submissions: 125.6k\n * testcase example:  \'"1.1.1.1"\'\n *\n * 给你一个有效的 ipv4 地址 address，返回这个 ip 地址的无效化版本。\n * \n * 所谓无效化 ip 地址，其实就是用 "[.]" 代替了每个 "."。\n * \n * \n * \n * 示例 1：\n * \n * 输入：address = "1.1.1.1"\n * 输出："1[.]1[.]1[.]1"\n * \n * \n * 示例 2：\n * \n * 输入：address = "255.100.50.0"\n * 输出："255[.]100[.]50[.]0"\n * \n * \n * \n * \n * 提示：\n * \n * \n * 给出的 address 是一个有效的 ipv4 地址\n * \n * \n */\n\n// @lc code=start\nfunction defangipaddr(address: string): string {\n    // return address.replaceall(\'.\', \'[.]\')\n    return address.split(\'\\.\').join(\'[.]\')\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n',charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"分割平衡字符串",frontmatter:{title:"分割平衡字符串",date:"2022-11-10T14:20:35.000Z",permalink:"/pages/91e133/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501221.%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2.html",relativePath:"30.其他技术/3050.算法/30501221.分割平衡字符串.md",key:"v-6cdc77c0",path:"/pages/91e133/",headersStr:null,content:'# 分割平衡字符串\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.69%)   203     -\n\nTags\n\n\n\nCompanies\n\n\n\n在一个 平衡字符串 中，\'L\' 和 \'R\' 字符的数量是相同的。\n\n给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。\n\n**注意：**分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。\n\n返回可以通过分割得到的平衡字符串的 最大数量 。\n\n示例 1：\n\n输入：s = "RLRRLLRLRL"\n输出：4\n解释：s 可以分割为 "RL"、"RRLL"、"RL"、"RL" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：s = "RLLLLRRRLR"\n输出：3\n解释：s 可以分割为 "RL"、"LLLRRR"、"LR" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：s = "LLLLRRRR"\n输出：1\n解释：s 只能保持原样 "LLLLRRRR".\n\n\n1\n2\n3\n\n\n示例 4：\n\n输入：s = "RLRRRLLRLL"\n输出：2\n解释：s 可以分割为 "RL"、"RRRLLRLL" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n\n\n1\n2\n3\n\n\n提示：\n\n * 1 <= s.length <= 1000\n * s[i] = \'L\' 或 \'R\'\n * s 是一个 平衡 字符串\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-10 14:14:37\n * @LastEditTime: 2022-11-10 14:19:24\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /imooc-jira/Users/izhaong/izhaong/Project_me/leetcode/1221.分割平衡字符串.js\n */\n/*\n * @lc app=leetcode.cn id=1221 lang=javascript\n *\n * [1221] 分割平衡字符串\n *\n * https://leetcode.cn/problems/split-a-string-in-balanced-strings/description/\n *\n * algorithms\n * Easy (84.69%)\n * Likes:    203\n * Dislikes: 0\n * Total Accepted:    93K\n * Total Submissions: 109.8K\n * Testcase Example:  \'"RLRRLLRLRL"\'\n *\n * 在一个 平衡字符串 中，\'L\' 和 \'R\' 字符的数量是相同的。\n * \n * 给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。\n * \n * 注意：分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。\n * \n * 返回可以通过分割得到的平衡字符串的 最大数量 。\n * \n * \n * \n * 示例 1：\n * \n * \n * 输入：s = "RLRRLLRLRL"\n * 输出：4\n * 解释：s 可以分割为 "RL"、"RRLL"、"RL"、"RL" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n * \n * \n * 示例 2：\n * \n * \n * 输入：s = "RLLLLRRRLR"\n * 输出：3\n * 解释：s 可以分割为 "RL"、"LLLRRR"、"LR" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n * \n * \n * 示例 3：\n * \n * \n * 输入：s = "LLLLRRRR"\n * 输出：1\n * 解释：s 只能保持原样 "LLLLRRRR".\n * \n * \n * 示例 4：\n * \n * \n * 输入：s = "RLRRRLLRLL"\n * 输出：2\n * 解释：s 可以分割为 "RL"、"RRRLLRLL" ，每个子字符串中都包含相同数量的 \'L\' 和 \'R\' 。\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= s.length <= 1000\n * s[i] = \'L\' 或 \'R\'\n * s 是一个 平衡 字符串\n * \n * \n */\n\n// @lc code=start\n/**\n * @param {string} s\n * @return {number}\n */\nvar balancedStringSplit = function(s) {\n    let r = 0\n    let l = 0\n    let sum = 0\n    for (let i = 0; i < s.length; i++) {\n        s[i] === "R" ?  r++ : l++\n        if(r === l && r) {\n            sum ++\n            r = 0\n            l = 0\n        }\n    }\n    return sum\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n',normalizedContent:'# 分割平衡字符串\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.69%)   203     -\n\ntags\n\n\n\ncompanies\n\n\n\n在一个 平衡字符串 中，\'l\' 和 \'r\' 字符的数量是相同的。\n\n给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。\n\n**注意：**分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。\n\n返回可以通过分割得到的平衡字符串的 最大数量 。\n\n示例 1：\n\n输入：s = "rlrrllrlrl"\n输出：4\n解释：s 可以分割为 "rl"、"rrll"、"rl"、"rl" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：s = "rllllrrrlr"\n输出：3\n解释：s 可以分割为 "rl"、"lllrrr"、"lr" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：s = "llllrrrr"\n输出：1\n解释：s 只能保持原样 "llllrrrr".\n\n\n1\n2\n3\n\n\n示例 4：\n\n输入：s = "rlrrrllrll"\n输出：2\n解释：s 可以分割为 "rl"、"rrrllrll" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n\n\n1\n2\n3\n\n\n提示：\n\n * 1 <= s.length <= 1000\n * s[i] = \'l\' 或 \'r\'\n * s 是一个 平衡 字符串\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-10 14:14:37\n * @lastedittime: 2022-11-10 14:19:24\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /imooc-jira/users/izhaong/izhaong/project_me/leetcode/1221.分割平衡字符串.js\n */\n/*\n * @lc app=leetcode.cn id=1221 lang=javascript\n *\n * [1221] 分割平衡字符串\n *\n * https://leetcode.cn/problems/split-a-string-in-balanced-strings/description/\n *\n * algorithms\n * easy (84.69%)\n * likes:    203\n * dislikes: 0\n * total accepted:    93k\n * total submissions: 109.8k\n * testcase example:  \'"rlrrllrlrl"\'\n *\n * 在一个 平衡字符串 中，\'l\' 和 \'r\' 字符的数量是相同的。\n * \n * 给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。\n * \n * 注意：分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。\n * \n * 返回可以通过分割得到的平衡字符串的 最大数量 。\n * \n * \n * \n * 示例 1：\n * \n * \n * 输入：s = "rlrrllrlrl"\n * 输出：4\n * 解释：s 可以分割为 "rl"、"rrll"、"rl"、"rl" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n * \n * \n * 示例 2：\n * \n * \n * 输入：s = "rllllrrrlr"\n * 输出：3\n * 解释：s 可以分割为 "rl"、"lllrrr"、"lr" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n * \n * \n * 示例 3：\n * \n * \n * 输入：s = "llllrrrr"\n * 输出：1\n * 解释：s 只能保持原样 "llllrrrr".\n * \n * \n * 示例 4：\n * \n * \n * 输入：s = "rlrrrllrll"\n * 输出：2\n * 解释：s 可以分割为 "rl"、"rrrllrll" ，每个子字符串中都包含相同数量的 \'l\' 和 \'r\' 。\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= s.length <= 1000\n * s[i] = \'l\' 或 \'r\'\n * s 是一个 平衡 字符串\n * \n * \n */\n\n// @lc code=start\n/**\n * @param {string} s\n * @return {number}\n */\nvar balancedstringsplit = function(s) {\n    let r = 0\n    let l = 0\n    let sum = 0\n    for (let i = 0; i < s.length; i++) {\n        s[i] === "r" ?  r++ : l++\n        if(r === l && r) {\n            sum ++\n            r = 0\n            l = 0\n        }\n    }\n    return sum\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n',charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"拥有最多糖果的孩子",frontmatter:{title:"拥有最多糖果的孩子",date:"2022-11-14T15:21:35.000Z",permalink:"/pages/5ed14a/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501431.%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90.html",relativePath:"30.其他技术/3050.算法/30501431.拥有最多糖果的孩子.md",key:"v-45feb2d4",path:"/pages/5ed14a/",headersStr:null,content:"# 拥有最多糖果的孩子\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.55%)   137     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。\n\n对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多 的糖果数目。\n\n示例 1：\n\n输入：candies = [2,3,5,1,3], extraCandies = 3\n输出：[true,true,true,false,true] \n解释：\n孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例 2：\n\n输入：candies = [4,2,1,1,2], extraCandies = 1\n输出：[true,false,false,false,false] \n解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：candies = [12,1,12], extraCandies = 10\n输出：[true,false,true]\n\n\n1\n2\n\n\n提示：\n\n * 2 <= candies.length <= 100\n * 1 <= candies[i] <= 100\n * 1 <= extraCandies <= 50\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-14 14:17:16\n * @LastEditTime: 2022-11-14 15:20:38\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /面试题1/Users/izhaong/izhaong/Project_me/leetcode/1431.拥有最多糖果的孩子.ts\n */\n/*\n * @lc app=leetcode.cn id=1431 lang=typescript\n *\n * [1431] 拥有最多糖果的孩子\n *\n * https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies/description/\n *\n * algorithms\n * Easy (84.55%)\n * Likes:    137\n * Dislikes: 0\n * Total Accepted:    86.3K\n * Total Submissions: 102.1K\n * Testcase Example:  '[2,3,5,1,3]\\n3'\n *\n * 给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。\n *\n * 对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有\n * 最多 的糖果数目。\n *\n *\n *\n * 示例 1：\n *\n * 输入：candies = [2,3,5,1,3], extraCandies = 3\n * 输出：[true,true,true,false,true]\n * 解释：\n * 孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n * 孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n * 孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n * 孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n * 孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n *\n *\n * 示例 2：\n *\n * 输入：candies = [4,2,1,1,2], extraCandies = 1\n * 输出：[true,false,false,false,false]\n * 解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n *\n *\n * 示例 3：\n *\n * 输入：candies = [12,1,12], extraCandies = 10\n * 输出：[true,false,true]\n *\n *\n *\n *\n * 提示：\n *\n *\n * 2 <= candies.length <= 100\n * 1 <= candies[i] <= 100\n * 1 <= extraCandies <= 50\n *\n *\n */\n\n// @lc code=start\nfunction kidsWithCandies(candies: number[], extraCandies: number): boolean[] {\n  const maxCount = Math.max(...candies);\n  return candies.map((v) => v + extraCandies >= maxCount);\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n",normalizedContent:"# 拥有最多糖果的孩子\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.55%)   137     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个数组 candies 和一个整数 extracandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。\n\n对每一个孩子，检查是否存在一种方案，将额外的 extracandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多 的糖果数目。\n\n示例 1：\n\n输入：candies = [2,3,5,1,3], extracandies = 3\n输出：[true,true,true,false,true] \n解释：\n孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例 2：\n\n输入：candies = [4,2,1,1,2], extracandies = 1\n输出：[true,false,false,false,false] \n解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：candies = [12,1,12], extracandies = 10\n输出：[true,false,true]\n\n\n1\n2\n\n\n提示：\n\n * 2 <= candies.length <= 100\n * 1 <= candies[i] <= 100\n * 1 <= extracandies <= 50\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-14 14:17:16\n * @lastedittime: 2022-11-14 15:20:38\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /面试题1/users/izhaong/izhaong/project_me/leetcode/1431.拥有最多糖果的孩子.ts\n */\n/*\n * @lc app=leetcode.cn id=1431 lang=typescript\n *\n * [1431] 拥有最多糖果的孩子\n *\n * https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies/description/\n *\n * algorithms\n * easy (84.55%)\n * likes:    137\n * dislikes: 0\n * total accepted:    86.3k\n * total submissions: 102.1k\n * testcase example:  '[2,3,5,1,3]\\n3'\n *\n * 给你一个数组 candies 和一个整数 extracandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。\n *\n * 对每一个孩子，检查是否存在一种方案，将额外的 extracandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有\n * 最多 的糖果数目。\n *\n *\n *\n * 示例 1：\n *\n * 输入：candies = [2,3,5,1,3], extracandies = 3\n * 输出：[true,true,true,false,true]\n * 解释：\n * 孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n * 孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n * 孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n * 孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n * 孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n *\n *\n * 示例 2：\n *\n * 输入：candies = [4,2,1,1,2], extracandies = 1\n * 输出：[true,false,false,false,false]\n * 解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n *\n *\n * 示例 3：\n *\n * 输入：candies = [12,1,12], extracandies = 10\n * 输出：[true,false,true]\n *\n *\n *\n *\n * 提示：\n *\n *\n * 2 <= candies.length <= 100\n * 1 <= candies[i] <= 100\n * 1 <= extracandies <= 50\n *\n *\n */\n\n// @lc code=start\nfunction kidswithcandies(candies: number[], extracandies: number): boolean[] {\n  const maxcount = math.max(...candies);\n  return candies.map((v) => v + extracandies >= maxcount);\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"重新排列数组",frontmatter:{title:"重新排列数组",date:"2022-11-09T11:42:09.000Z",permalink:"/pages/a6973a/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501470.%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84.html",relativePath:"30.其他技术/3050.算法/30501470.重新排列数组.md",key:"v-4ee676b6",path:"/pages/a6973a/",headersStr:null,content:"# 重新排列数组\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (85.25%)   150     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,...,xn,y1,y2,...,yn] 的格式排列。\n\n请你将数组按 [x1,y1,x2,y2,...,xn,yn] 格式重新排列，返回重排后的数组。\n\n示例 1：\n\n输入：nums = [2,5,1,3,4,7], n = 3\n输出：[2,3,5,4,1,7] \n解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：nums = [1,2,3,4,4,3,2,1], n = 4\n输出：[1,4,2,3,3,2,4,1]\n\n\n1\n2\n\n\n示例 3：\n\n输入：nums = [1,1,2,2], n = 2\n输出：[1,2,1,2]\n\n\n1\n2\n\n\n提示：\n\n * 1 <= n <= 500\n * nums.length == 2n\n * 1 <= nums[i] <= 10^3\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-09 11:11:35\n * @LastEditTime: 2022-11-09 11:40:34\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /leetcode/1470.重新排列数组.ts\n */\n/*\n * @lc app=leetcode.cn id=1470 lang=typescript\n *\n * [1470] 重新排列数组\n *\n * https://leetcode.cn/problems/shuffle-the-array/description/\n *\n * algorithms\n * Easy (85.25%)\n * Likes:    150\n * Dislikes: 0\n * Total Accepted:    95.8K\n * Total Submissions: 112.4K\n * Testcase Example:  '[2,5,1,3,4,7]\\n3'\n *\n * 给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,...,xn,y1,y2,...,yn] 的格式排列。\n *\n * 请你将数组按 [x1,y1,x2,y2,...,xn,yn] 格式重新排列，返回重排后的数组。\n *\n *\n *\n * 示例 1：\n *\n * 输入：nums = [2,5,1,3,4,7], n = 3\n * 输出：[2,3,5,4,1,7]\n * 解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]\n *\n *\n * 示例 2：\n *\n * 输入：nums = [1,2,3,4,4,3,2,1], n = 4\n * 输出：[1,4,2,3,3,2,4,1]\n *\n *\n * 示例 3：\n *\n * 输入：nums = [1,1,2,2], n = 2\n * 输出：[1,2,1,2]\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= n <= 500\n * nums.length == 2n\n * 1 <= nums[i] <= 10^3\n *\n *\n */\n\n// @lc code=start\nfunction shuffle(nums: number[], n: number): number[] {\n  const res: number[] = new Array(2 * n).fill(0);\n  for (let i = 0; i < n; i++) {\n    res[2 * i] = nums[i];\n    res[2 * i + 1] = nums[i + n];\n  }\n  return res;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n",normalizedContent:"# 重新排列数组\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (85.25%)   150     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,...,xn,y1,y2,...,yn] 的格式排列。\n\n请你将数组按 [x1,y1,x2,y2,...,xn,yn] 格式重新排列，返回重排后的数组。\n\n示例 1：\n\n输入：nums = [2,5,1,3,4,7], n = 3\n输出：[2,3,5,4,1,7] \n解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：nums = [1,2,3,4,4,3,2,1], n = 4\n输出：[1,4,2,3,3,2,4,1]\n\n\n1\n2\n\n\n示例 3：\n\n输入：nums = [1,1,2,2], n = 2\n输出：[1,2,1,2]\n\n\n1\n2\n\n\n提示：\n\n * 1 <= n <= 500\n * nums.length == 2n\n * 1 <= nums[i] <= 10^3\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-09 11:11:35\n * @lastedittime: 2022-11-09 11:40:34\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /leetcode/1470.重新排列数组.ts\n */\n/*\n * @lc app=leetcode.cn id=1470 lang=typescript\n *\n * [1470] 重新排列数组\n *\n * https://leetcode.cn/problems/shuffle-the-array/description/\n *\n * algorithms\n * easy (85.25%)\n * likes:    150\n * dislikes: 0\n * total accepted:    95.8k\n * total submissions: 112.4k\n * testcase example:  '[2,5,1,3,4,7]\\n3'\n *\n * 给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,...,xn,y1,y2,...,yn] 的格式排列。\n *\n * 请你将数组按 [x1,y1,x2,y2,...,xn,yn] 格式重新排列，返回重排后的数组。\n *\n *\n *\n * 示例 1：\n *\n * 输入：nums = [2,5,1,3,4,7], n = 3\n * 输出：[2,3,5,4,1,7]\n * 解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]\n *\n *\n * 示例 2：\n *\n * 输入：nums = [1,2,3,4,4,3,2,1], n = 4\n * 输出：[1,4,2,3,3,2,4,1]\n *\n *\n * 示例 3：\n *\n * 输入：nums = [1,1,2,2], n = 2\n * 输出：[1,2,1,2]\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= n <= 500\n * nums.length == 2n\n * 1 <= nums[i] <= 10^3\n *\n *\n */\n\n// @lc code=start\nfunction shuffle(nums: number[], n: number): number[] {\n  const res: number[] = new array(2 * n).fill(0);\n  for (let i = 0; i < n; i++) {\n    res[2 * i] = nums[i];\n    res[2 * i + 1] = nums[i + n];\n  }\n  return res;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"数组异或操作",frontmatter:{title:"数组异或操作",date:"2022-11-08T11:02:43.000Z",permalink:"/pages/f25ca3/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501486.%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C.html",relativePath:"30.其他技术/3050.算法/30501486.数组异或操作.md",key:"v-8ca4ec2c",path:"/pages/f25ca3/",headersStr:null,content:'# 数组异或操作\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (85.68%)   117     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你两个整数，n 和 start 。\n\n数组 nums 定义为：nums[i] = start + 2*i（下标从 0 开始）且 n == nums.length 。\n\n请返回 nums 中所有元素按位异或（XOR）后得到的结果。\n\n示例 1：\n\n输入：n = 5, start = 0\n输出：8\n解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。\n     "^" 为按位异或 XOR 运算符。\n\n\n1\n2\n3\n4\n\n\n示例 2：\n\n输入：n = 4, start = 3\n输出：8\n解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：n = 1, start = 7\n输出：7\n\n\n1\n2\n\n\n示例 4：\n\n输入：n = 10, start = 5\n输出：2\n\n\n1\n2\n\n\n提示：\n\n * 1 <= n <= 1000\n * 0 <= start <= 1000\n * n == nums.length\n\n----------------------------------------\n\nDiscussion | Solution\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-08 11:02:34\n * @LastEditTime: 2022-11-08 13:18:58\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /loan-home/Users/izhaong/izhaong/Project_me/leetcode/1486.数组异或操作.ts\n */\n/*\n * @lc app=leetcode.cn id=1486 lang=typescript\n *\n * [1486] 数组异或操作\n *\n * https://leetcode.cn/problems/xor-operation-in-an-array/description/\n *\n * algorithms\n * Easy (85.68%)\n * Likes:    117\n * Dislikes: 0\n * Total Accepted:    79.2K\n * Total Submissions: 92.4K\n * Testcase Example:  \'5\\n0\'\n *\n * 给你两个整数，n 和 start 。\n *\n * 数组 nums 定义为：nums[i] = start + 2*i（下标从 0 开始）且 n == nums.length 。\n *\n * 请返回 nums 中所有元素按位异或（XOR）后得到的结果。\n *\n *\n *\n * 示例 1：\n *\n * 输入：n = 5, start = 0\n * 输出：8\n * 解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。\n * ⁠    "^" 为按位异或 XOR 运算符。\n *\n *\n * 示例 2：\n *\n * 输入：n = 4, start = 3\n * 输出：8\n * 解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.\n *\n * 示例 3：\n *\n * 输入：n = 1, start = 7\n * 输出：7\n *\n *\n * 示例 4：\n *\n * 输入：n = 10, start = 5\n * 输出：2\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= n <= 1000\n * 0 <= start <= 1000\n * n == nums.length\n *\n *\n */\n\n// @lc code=start\nfunction xorOperation(n: number, start: number): number {\n  let ans = 0;\n  for (let i = 0; i < n; i++) {\n    ans ^= start + 2 * i;\n  }\n  return ans;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n',normalizedContent:'# 数组异或操作\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (85.68%)   117     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你两个整数，n 和 start 。\n\n数组 nums 定义为：nums[i] = start + 2*i（下标从 0 开始）且 n == nums.length 。\n\n请返回 nums 中所有元素按位异或（xor）后得到的结果。\n\n示例 1：\n\n输入：n = 5, start = 0\n输出：8\n解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。\n     "^" 为按位异或 xor 运算符。\n\n\n1\n2\n3\n4\n\n\n示例 2：\n\n输入：n = 4, start = 3\n输出：8\n解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：n = 1, start = 7\n输出：7\n\n\n1\n2\n\n\n示例 4：\n\n输入：n = 10, start = 5\n输出：2\n\n\n1\n2\n\n\n提示：\n\n * 1 <= n <= 1000\n * 0 <= start <= 1000\n * n == nums.length\n\n----------------------------------------\n\ndiscussion | solution\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-08 11:02:34\n * @lastedittime: 2022-11-08 13:18:58\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /loan-home/users/izhaong/izhaong/project_me/leetcode/1486.数组异或操作.ts\n */\n/*\n * @lc app=leetcode.cn id=1486 lang=typescript\n *\n * [1486] 数组异或操作\n *\n * https://leetcode.cn/problems/xor-operation-in-an-array/description/\n *\n * algorithms\n * easy (85.68%)\n * likes:    117\n * dislikes: 0\n * total accepted:    79.2k\n * total submissions: 92.4k\n * testcase example:  \'5\\n0\'\n *\n * 给你两个整数，n 和 start 。\n *\n * 数组 nums 定义为：nums[i] = start + 2*i（下标从 0 开始）且 n == nums.length 。\n *\n * 请返回 nums 中所有元素按位异或（xor）后得到的结果。\n *\n *\n *\n * 示例 1：\n *\n * 输入：n = 5, start = 0\n * 输出：8\n * 解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。\n * ⁠    "^" 为按位异或 xor 运算符。\n *\n *\n * 示例 2：\n *\n * 输入：n = 4, start = 3\n * 输出：8\n * 解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.\n *\n * 示例 3：\n *\n * 输入：n = 1, start = 7\n * 输出：7\n *\n *\n * 示例 4：\n *\n * 输入：n = 10, start = 5\n * 输出：2\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= n <= 1000\n * 0 <= start <= 1000\n * n == nums.length\n *\n *\n */\n\n// @lc code=start\nfunction xoroperation(n: number, start: number): number {\n  let ans = 0;\n  for (let i = 0; i < n; i++) {\n    ans ^= start + 2 * i;\n  }\n  return ans;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n',charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"三数之和",frontmatter:{title:"三数之和",date:"2023-11-04T10:38:14.000Z",permalink:"/pages/6304a6/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305015.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html",relativePath:"30.其他技术/3050.算法/305015. 三数之和.md",key:"v-6035f632",path:"/pages/6304a6/",headers:[{level:2,title:"题目",slug:"题目",normalizedTitle:"题目",charIndex:51},{level:2,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:659}],headersStr:"题目 代码",content:"https://leetcode.cn/problems/3sum/description/\n\n\n# 题目\n\n给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请\n\n你返回所有和为 0 且不重复的三元组。\n\n**注意：**答案中不可以包含重复的三元组。\n\n示例 1：\n\n输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。\n\n示例 2：\n\n输入：nums = [0,1,1] 输出：[] 解释：唯一可能的三元组和不为 0 。\n\n示例 3：\n\n输入：nums = [0,0,0] 输出：[[0,0,0]] 解释：唯一可能的三元组和为 0 。\n\n提示：\n\n * 3 <= nums.length <= 3000\n * -105 <= nums[i] <= 105\n\n\n# 代码\n\n 1. 暴力 O(n^3)\n\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function (nums) {\n    const res = [];\n    for (let i = 0; i < nums.length - 2; i++) {\n        for (let j = i + 1; j < nums.length - 1; j++) {\n            for (let k = j + 1; k < nums.length; k++) {\n                if (nums[i] + nums[j] + nums[k] === 0) {\n                    res.push([nums[i], nums[j], nums[k]])\n                }\n            }\n        }\n    }\n    return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n 1. hash\n\n...\n\n\n1\n\n 1. 双指针\n\nvar threeSum = function (nums) {\n    const res = []\n    const len = nums.length\n    const sortNums = nums.sort((a, b) => a - b)\n    for (let k = 0; k < len - 2; k++) {\n        let i = k + 1;\n        let j = len - 1;\n        // 去重\n        while (sortNums[k] === sortNums[k + 1]) {\n            k++\n        }\n        while (i < j) {\n            if (-sortNums[k] === sortNums[i] + sortNums[j]) {\n                res.push([nums[i], nums[j], nums[k]])\n                // 去重\n                while (sortNums[i] === sortNums[i + 1]) {\n                    i++\n                }\n                while (sortNums[j] === sortNums[j + 1]) {\n                    j--\n                }\n                i++\n                j--\n            } else if (-sortNums[k] > sortNums[i] + sortNums[j]) {\n                i++\n            } else {\n                j--\n            }\n        }\n    }\n    return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n",normalizedContent:"https://leetcode.cn/problems/3sum/description/\n\n\n# 题目\n\n给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请\n\n你返回所有和为 0 且不重复的三元组。\n\n**注意：**答案中不可以包含重复的三元组。\n\n示例 1：\n\n输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。\n\n示例 2：\n\n输入：nums = [0,1,1] 输出：[] 解释：唯一可能的三元组和不为 0 。\n\n示例 3：\n\n输入：nums = [0,0,0] 输出：[[0,0,0]] 解释：唯一可能的三元组和为 0 。\n\n提示：\n\n * 3 <= nums.length <= 3000\n * -105 <= nums[i] <= 105\n\n\n# 代码\n\n 1. 暴力 o(n^3)\n\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threesum = function (nums) {\n    const res = [];\n    for (let i = 0; i < nums.length - 2; i++) {\n        for (let j = i + 1; j < nums.length - 1; j++) {\n            for (let k = j + 1; k < nums.length; k++) {\n                if (nums[i] + nums[j] + nums[k] === 0) {\n                    res.push([nums[i], nums[j], nums[k]])\n                }\n            }\n        }\n    }\n    return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n 1. hash\n\n...\n\n\n1\n\n 1. 双指针\n\nvar threesum = function (nums) {\n    const res = []\n    const len = nums.length\n    const sortnums = nums.sort((a, b) => a - b)\n    for (let k = 0; k < len - 2; k++) {\n        let i = k + 1;\n        let j = len - 1;\n        // 去重\n        while (sortnums[k] === sortnums[k + 1]) {\n            k++\n        }\n        while (i < j) {\n            if (-sortnums[k] === sortnums[i] + sortnums[j]) {\n                res.push([nums[i], nums[j], nums[k]])\n                // 去重\n                while (sortnums[i] === sortnums[i + 1]) {\n                    i++\n                }\n                while (sortnums[j] === sortnums[j + 1]) {\n                    j--\n                }\n                i++\n                j--\n            } else if (-sortnums[k] > sortnums[i] + sortnums[j]) {\n                i++\n            } else {\n                j--\n            }\n        }\n    }\n    return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n",charsets:{cjk:!0},lastUpdated:"2023/11/04, 10:56:47",lastUpdatedTimestamp:1699066607e3},{title:"好数对的数目",frontmatter:{title:"好数对的数目",date:"2022-11-11T11:03:26.000Z",permalink:"/pages/7ad13c/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501512.%E5%A5%BD%E6%95%B0%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE.html",relativePath:"30.其他技术/3050.算法/30501512.好数对的数目.md",key:"v-0ca18440",path:"/pages/7ad13c/",headersStr:null,content:"# 好数对的数目\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.69%)   101     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个整数数组 nums 。\n\n如果一组数字 (i,j) 满足 nums[i] == nums[j] 且 i < j ，就可以认为这是一组 好数对 。\n\n返回好数对的数目。\n\n示例 1：\n\n输入：nums = [1,2,3,1,1,3]\n输出：4\n解释：有 4 组好数对，分别是 (0,3), (0,4), (3,4), (2,5) ，下标从 0 开始\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：nums = [1,1,1,1]\n输出：6\n解释：数组中的每组数字都是好数对\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：nums = [1,2,3]\n输出：0\n\n\n1\n2\n\n\n提示：\n\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 100\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n方法一：暴力统计 思路与算法\n\n对于每个 a_ia i\n\n，枚举所有的 a_j (j > i)a j\n\n(j>i)，检查是否满足 a_i = a_ja i\n\n=a j\n\n，如果是就计入答案。\n\n代码\n\nC++JavaPython3\n\nclass Solution { public: int numIdenticalPairs(vector& nums) { int ans = 0; for (int i = 0; i < nums.size(); ++i) { for (int j = i + 1; j < nums.size(); ++j) { if (nums[i] == nums[j]) { ++ans; } } } return ans; } }; 复杂度分析\n\n时间复杂度：O(n^2)O(n 2 )。 空间复杂度：O(1)O(1)。 方法二：组合计数 思路与算法\n\n用哈希表统计每个数在序列中出现的次数，假设数字 kk 在序列中出现的次数为 vv，那么满足题目中所说的 {\\rm nums}[i] = {\\rm nums}[j] = k(i < j)nums[i]=nums[j]=k(i<j) 的 (i, j)(i,j) 的数量就是 \\frac{v(v - 1)}{2} 2 v(v−1)\n\n，即 kk 这个数值对答案的贡献是 \\frac{v(v - 1)}{2} 2 v(v−1)\n\n。我们只需要把所有数值的贡献相加，即可得到答案。\n\n代码\n\nC++JavaPython3\n\nclass Solution { public: int numIdenticalPairs(vector& nums) { unordered_map <int, int> m; for (int num: nums) { ++m[num]; }\n\n    int ans = 0;\n    for (const auto &[k, v]: m) {\n        ans += v * (v - 1) / 2;\n    }\n\n    return ans;\n}\n\n\n}; 复杂度分析\n\n时间复杂度：O(n)O(n)。 空间复杂度：O(n)O(n)，即哈希表使用到的辅助空间的空间代价。\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-11 10:49:58\n * @LastEditTime: 2022-11-11 11:02:46\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /loan-home/Users/izhaong/izhaong/Project_me/leetcode/1512.好数对的数目.js\n */\n/*\n * @lc app=leetcode.cn id=1512 lang=javascript\n *\n * [1512] 好数对的数目\n *\n * https://leetcode.cn/problems/number-of-good-pairs/description/\n *\n * algorithms\n * Easy (84.69%)\n * Likes:    101\n * Dislikes: 0\n * Total Accepted:    70.3K\n * Total Submissions: 83.1K\n * Testcase Example:  '[1,2,3,1,1,3]'\n *\n * 给你一个整数数组 nums 。\n *\n * 如果一组数字 (i,j) 满足 nums[i] == nums[j] 且 i < j ，就可以认为这是一组 好数对 。\n *\n * 返回好数对的数目。\n *\n *\n *\n * 示例 1：\n *\n * 输入：nums = [1,2,3,1,1,3]\n * 输出：4\n * 解释：有 4 组好数对，分别是 (0,3), (0,4), (3,4), (2,5) ，下标从 0 开始\n *\n *\n * 示例 2：\n *\n * 输入：nums = [1,1,1,1]\n * 输出：6\n * 解释：数组中的每组数字都是好数对\n *\n * 示例 3：\n *\n * 输入：nums = [1,2,3]\n * 输出：0\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 100\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numIdenticalPairs = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const iv = nums[i];\n\n    for (let j = i + 1; j < nums.length; j++) {\n      const jv = nums[j];\n      if (jv === iv) {\n        sum++;\n      }\n    }\n  }\n  return sum;\n};\nvar numIdenticalPairs1 = function (nums) {\n  let sum = 0;\n  const numMap = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const e = nums[i];\n    const getNum = numMap.get(e);\n    if (getNum) {\n      numMap.set(e, getNum + 1);\n    } else {\n      numMap.set(e, 1);\n    }\n  }\n  for (const [k, v] of numMap) {\n    sum += (v * (v - 1)) / 2;\n  }\n  return sum;\n};\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n",normalizedContent:"# 好数对的数目\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.69%)   101     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个整数数组 nums 。\n\n如果一组数字 (i,j) 满足 nums[i] == nums[j] 且 i < j ，就可以认为这是一组 好数对 。\n\n返回好数对的数目。\n\n示例 1：\n\n输入：nums = [1,2,3,1,1,3]\n输出：4\n解释：有 4 组好数对，分别是 (0,3), (0,4), (3,4), (2,5) ，下标从 0 开始\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：nums = [1,1,1,1]\n输出：6\n解释：数组中的每组数字都是好数对\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：nums = [1,2,3]\n输出：0\n\n\n1\n2\n\n\n提示：\n\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 100\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n方法一：暴力统计 思路与算法\n\n对于每个 a_ia i\n\n，枚举所有的 a_j (j > i)a j\n\n(j>i)，检查是否满足 a_i = a_ja i\n\n=a j\n\n，如果是就计入答案。\n\n代码\n\nc++javapython3\n\nclass solution { public: int numidenticalpairs(vector& nums) { int ans = 0; for (int i = 0; i < nums.size(); ++i) { for (int j = i + 1; j < nums.size(); ++j) { if (nums[i] == nums[j]) { ++ans; } } } return ans; } }; 复杂度分析\n\n时间复杂度：o(n^2)o(n 2 )。 空间复杂度：o(1)o(1)。 方法二：组合计数 思路与算法\n\n用哈希表统计每个数在序列中出现的次数，假设数字 kk 在序列中出现的次数为 vv，那么满足题目中所说的 {\\rm nums}[i] = {\\rm nums}[j] = k(i < j)nums[i]=nums[j]=k(i<j) 的 (i, j)(i,j) 的数量就是 \\frac{v(v - 1)}{2} 2 v(v−1)\n\n，即 kk 这个数值对答案的贡献是 \\frac{v(v - 1)}{2} 2 v(v−1)\n\n。我们只需要把所有数值的贡献相加，即可得到答案。\n\n代码\n\nc++javapython3\n\nclass solution { public: int numidenticalpairs(vector& nums) { unordered_map <int, int> m; for (int num: nums) { ++m[num]; }\n\n    int ans = 0;\n    for (const auto &[k, v]: m) {\n        ans += v * (v - 1) / 2;\n    }\n\n    return ans;\n}\n\n\n}; 复杂度分析\n\n时间复杂度：o(n)o(n)。 空间复杂度：o(n)o(n)，即哈希表使用到的辅助空间的空间代价。\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-11 10:49:58\n * @lastedittime: 2022-11-11 11:02:46\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /loan-home/users/izhaong/izhaong/project_me/leetcode/1512.好数对的数目.js\n */\n/*\n * @lc app=leetcode.cn id=1512 lang=javascript\n *\n * [1512] 好数对的数目\n *\n * https://leetcode.cn/problems/number-of-good-pairs/description/\n *\n * algorithms\n * easy (84.69%)\n * likes:    101\n * dislikes: 0\n * total accepted:    70.3k\n * total submissions: 83.1k\n * testcase example:  '[1,2,3,1,1,3]'\n *\n * 给你一个整数数组 nums 。\n *\n * 如果一组数字 (i,j) 满足 nums[i] == nums[j] 且 i < j ，就可以认为这是一组 好数对 。\n *\n * 返回好数对的数目。\n *\n *\n *\n * 示例 1：\n *\n * 输入：nums = [1,2,3,1,1,3]\n * 输出：4\n * 解释：有 4 组好数对，分别是 (0,3), (0,4), (3,4), (2,5) ，下标从 0 开始\n *\n *\n * 示例 2：\n *\n * 输入：nums = [1,1,1,1]\n * 输出：6\n * 解释：数组中的每组数字都是好数对\n *\n * 示例 3：\n *\n * 输入：nums = [1,2,3]\n * 输出：0\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= nums.length <= 100\n * 1 <= nums[i] <= 100\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numidenticalpairs = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const iv = nums[i];\n\n    for (let j = i + 1; j < nums.length; j++) {\n      const jv = nums[j];\n      if (jv === iv) {\n        sum++;\n      }\n    }\n  }\n  return sum;\n};\nvar numidenticalpairs1 = function (nums) {\n  let sum = 0;\n  const nummap = new map();\n  for (let i = 0; i < nums.length; i++) {\n    const e = nums[i];\n    const getnum = nummap.get(e);\n    if (getnum) {\n      nummap.set(e, getnum + 1);\n    } else {\n      nummap.set(e, 1);\n    }\n  }\n  for (const [k, v] of nummap) {\n    sum += (v * (v - 1)) / 2;\n  }\n  return sum;\n};\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"设计停车系统",frontmatter:{title:"设计停车系统",date:"2022-11-15T14:36:26.000Z",permalink:"/pages/860565/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501603.%E8%AE%BE%E8%AE%A1%E5%81%9C%E8%BD%A6%E7%B3%BB%E7%BB%9F.html",relativePath:"30.其他技术/3050.算法/30501603.设计停车系统.md",key:"v-0128ec18",path:"/pages/860565/",headersStr:null,content:'# 设计停车系统\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.14%)   122     -\n\nTags\n\n\n\nCompanies\n\n\n\n请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。\n\n请你实现 ParkingSystem 类：\n\n * ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。\n * bool addCar(int carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。一辆车只能停在 carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。\n\n示例 1：\n\n输入：\n["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]\n[[1, 1, 0], [1], [2], [3], [1]]\n输出：\n[null, true, true, false, false]\n\n解释：\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位\nparkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位\nparkingSystem.addCar(3); // 返回 false ，因为没有空的小车位\nparkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n提示：\n\n * 0 <= big, medium, small <= 1000\n * carType 取值为 1， 2 或 3\n * 最多会调用 addCar 函数 1000 次\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-15 14:05:48\n * @LastEditTime: 2022-11-15 14:35:29\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /loan-home/Users/izhaong/izhaong/Project_me/leetcode/1603.设计停车系统.ts\n */\n/*\n * @lc app=leetcode.cn id=1603 lang=typescript\n *\n * [1603] 设计停车系统\n *\n * https://leetcode.cn/problems/design-parking-system/description/\n *\n * algorithms\n * Easy (84.14%)\n * Likes:    122\n * Dislikes: 0\n * Total Accepted:    70.5K\n * Total Submissions: 83.9K\n * Testcase Example:  \'["ParkingSystem","addCar","addCar","addCar","addCar"]\\n\' +\n  \'[[1,1,0],[1],[2],[3],[1]]\'\n *\n * 请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。\n * \n * 请你实现 ParkingSystem 类：\n * \n * \n * ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem\n * 类，三个参数分别对应每种停车位的数目。\n * bool addCar(int carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1，\n * 2 和 3 表示。一辆车只能停在  carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true\n * 。\n * \n * \n * \n * \n * 示例 1：\n * \n * \n * 输入：\n * ["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]\n * [[1, 1, 0], [1], [2], [3], [1]]\n * 输出：\n * [null, true, true, false, false]\n * \n * 解释：\n * ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\n * parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位\n * parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位\n * parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位\n * parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了\n * \n * \n * \n * \n * 提示：\n * \n * \n * 0 \n * carType 取值为 1， 2 或 3\n * 最多会调用 addCar 函数 1000 次\n * \n * \n */\n\n// @lc code=start\n\nenum CarType {\n    "big" = 1,\n    "medium" = 2,\n    "small" = 3,\n}\nclass ParkingSystem {\n    big: number = 0;\n    medium: number = 0;\n    small: number = 0;\n\n    constructor(big: number, medium: number, small: number) {\n        this.big = big;\n        this.medium = medium;\n        this.small = small;\n    }\n\n    addCar(carType: number): boolean {\n        return --this[CarType[carType]] >= 0;\n    }\n}\n\n/**\n * Your ParkingSystem object will be instantiated and called as such:\n * var obj = new ParkingSystem(big, medium, small)\n * var param_1 = obj.addCar(carType)\n */\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n',normalizedContent:'# 设计停车系统\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.14%)   122     -\n\ntags\n\n\n\ncompanies\n\n\n\n请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。\n\n请你实现 parkingsystem 类：\n\n * parkingsystem(int big, int medium, int small) 初始化 parkingsystem 类，三个参数分别对应每种停车位的数目。\n * bool addcar(int cartype) 检查是否有 cartype 对应的停车位。 cartype 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。一辆车只能停在 cartype 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。\n\n示例 1：\n\n输入：\n["parkingsystem", "addcar", "addcar", "addcar", "addcar"]\n[[1, 1, 0], [1], [2], [3], [1]]\n输出：\n[null, true, true, false, false]\n\n解释：\nparkingsystem parkingsystem = new parkingsystem(1, 1, 0);\nparkingsystem.addcar(1); // 返回 true ，因为有 1 个空的大车位\nparkingsystem.addcar(2); // 返回 true ，因为有 1 个空的中车位\nparkingsystem.addcar(3); // 返回 false ，因为没有空的小车位\nparkingsystem.addcar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n提示：\n\n * 0 <= big, medium, small <= 1000\n * cartype 取值为 1， 2 或 3\n * 最多会调用 addcar 函数 1000 次\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-15 14:05:48\n * @lastedittime: 2022-11-15 14:35:29\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /loan-home/users/izhaong/izhaong/project_me/leetcode/1603.设计停车系统.ts\n */\n/*\n * @lc app=leetcode.cn id=1603 lang=typescript\n *\n * [1603] 设计停车系统\n *\n * https://leetcode.cn/problems/design-parking-system/description/\n *\n * algorithms\n * easy (84.14%)\n * likes:    122\n * dislikes: 0\n * total accepted:    70.5k\n * total submissions: 83.9k\n * testcase example:  \'["parkingsystem","addcar","addcar","addcar","addcar"]\\n\' +\n  \'[[1,1,0],[1],[2],[3],[1]]\'\n *\n * 请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。\n * \n * 请你实现 parkingsystem 类：\n * \n * \n * parkingsystem(int big, int medium, int small) 初始化 parkingsystem\n * 类，三个参数分别对应每种停车位的数目。\n * bool addcar(int cartype) 检查是否有 cartype 对应的停车位。 cartype 有三种类型：大，中，小，分别用数字 1，\n * 2 和 3 表示。一辆车只能停在  cartype 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true\n * 。\n * \n * \n * \n * \n * 示例 1：\n * \n * \n * 输入：\n * ["parkingsystem", "addcar", "addcar", "addcar", "addcar"]\n * [[1, 1, 0], [1], [2], [3], [1]]\n * 输出：\n * [null, true, true, false, false]\n * \n * 解释：\n * parkingsystem parkingsystem = new parkingsystem(1, 1, 0);\n * parkingsystem.addcar(1); // 返回 true ，因为有 1 个空的大车位\n * parkingsystem.addcar(2); // 返回 true ，因为有 1 个空的中车位\n * parkingsystem.addcar(3); // 返回 false ，因为没有空的小车位\n * parkingsystem.addcar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了\n * \n * \n * \n * \n * 提示：\n * \n * \n * 0 \n * cartype 取值为 1， 2 或 3\n * 最多会调用 addcar 函数 1000 次\n * \n * \n */\n\n// @lc code=start\n\nenum cartype {\n    "big" = 1,\n    "medium" = 2,\n    "small" = 3,\n}\nclass parkingsystem {\n    big: number = 0;\n    medium: number = 0;\n    small: number = 0;\n\n    constructor(big: number, medium: number, small: number) {\n        this.big = big;\n        this.medium = medium;\n        this.small = small;\n    }\n\n    addcar(cartype: number): boolean {\n        return --this[cartype[cartype]] >= 0;\n    }\n}\n\n/**\n * your parkingsystem object will be instantiated and called as such:\n * var obj = new parkingsystem(big, medium, small)\n * var param_1 = obj.addcar(cartype)\n */\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n',charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"最富有客户的资产总量",frontmatter:{title:"最富有客户的资产总量",date:"2022-11-07T11:27:54.000Z",permalink:"/pages/333bac/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501672.%E6%9C%80%E5%AF%8C%E6%9C%89%E5%AE%A2%E6%88%B7%E7%9A%84%E8%B5%84%E4%BA%A7%E6%80%BB%E9%87%8F.html",relativePath:"30.其他技术/3050.算法/30501672.最富有客户的资产总量.md",key:"v-597c5320",path:"/pages/333bac/",headersStr:null,content:"# 最富有客户的资产总量\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (86.41%)   150     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。\n\n客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。\n\n示例 1：\n\n输入：accounts = [[1,2,3],[3,2,1]]\n输出：6\n解释：\n第 1 位客户的资产总量 = 1 + 2 + 3 = 6\n第 2 位客户的资产总量 = 3 + 2 + 1 = 6\n两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。\n\n\n1\n2\n3\n4\n5\n6\n\n\n示例 2：\n\n输入：accounts = [[1,5],[7,3],[3,5]]\n输出：10\n解释：\n第 1 位客户的资产总量 = 6\n第 2 位客户的资产总量 = 10 \n第 3 位客户的资产总量 = 8\n第 2 位客户是最富有的，资产总量是 10\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 3：\n\n输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n输出：17\n\n\n1\n2\n\n\n提示：\n\n * m == accounts.length\n * n == accounts[i].length\n * 1 <= m, n <= 50\n * 1 <= accounts[i][j] <= 100\n\n----------------------------------------\n\nDiscussion | Solution\n\nCode Now\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-07 10:35:48\n * @LastEditTime: 2022-11-07 11:27:24\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /leetcode/1672.最富有客户的资产总量.ts\n */\n/*\n * @lc app=leetcode.cn id=1672 lang=typescript\n *\n * [1672] 最富有客户的资产总量\n *\n * https://leetcode.cn/problems/richest-customer-wealth/description/\n *\n * algorithms\n * Easy (86.41%)\n * Likes:    150\n * Dislikes: 0\n * Total Accepted:    111.4K\n * Total Submissions: 128.9K\n * Testcase Example:  '[[1,2,3],[3,2,1]]'\n *\n * 给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i​​​​​^​​​​​​​ 位客户在第 j\n * 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。\n *\n * 客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。\n *\n *\n *\n * 示例 1：\n *\n * 输入：accounts = [[1,2,3],[3,2,1]]\n * 输出：6\n * 解释：\n * 第 1 位客户的资产总量 = 1 + 2 + 3 = 6\n * 第 2 位客户的资产总量 = 3 + 2 + 1 = 6\n * 两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。\n *\n *\n * 示例 2：\n *\n * 输入：accounts = [[1,5],[7,3],[3,5]]\n * 输出：10\n * 解释：\n * 第 1 位客户的资产总量 = 6\n * 第 2 位客户的资产总量 = 10\n * 第 3 位客户的资产总量 = 8\n * 第 2 位客户是最富有的，资产总量是 10\n *\n * 示例 3：\n *\n * 输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n * 输出：17\n *\n *\n *\n *\n * 提示：\n *\n *\n * m == accounts.length\n * n == accounts[i].length\n * 1 <= m, n <= 50\n * 1 <= accounts[i][j] <= 100\n *\n *\n */\n\n// @lc code=start\n// function maximumWealth(accounts: number[][]): number {\n//     let maxCount = 0\n//     for (let i = 0; i < accounts.length; i++) {\n//         const u = accounts[i];\n//         let um = 0\n//         for (let j = 0; j < u.length; j++) {\n//             const m = u[j];\n//             um += m\n//         }\n//         if(um > maxCount) maxCount = um\n//     }\n//     return maxCount\n// };\nfunction maximumWealth(accounts: number[][]): number {\n  let maxCount = 0;\n  for (let i = 0; i < accounts.length; i++) {\n    const u = accounts[i];\n    let um = 0;\n    maxCount = Math.max(\n      maxCount,\n      u.reduce((a, b) => a + b)\n    );\n  }\n  return maxCount;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n",normalizedContent:"# 最富有客户的资产总量\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (86.41%)   150     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。\n\n客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。\n\n示例 1：\n\n输入：accounts = [[1,2,3],[3,2,1]]\n输出：6\n解释：\n第 1 位客户的资产总量 = 1 + 2 + 3 = 6\n第 2 位客户的资产总量 = 3 + 2 + 1 = 6\n两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。\n\n\n1\n2\n3\n4\n5\n6\n\n\n示例 2：\n\n输入：accounts = [[1,5],[7,3],[3,5]]\n输出：10\n解释：\n第 1 位客户的资产总量 = 6\n第 2 位客户的资产总量 = 10 \n第 3 位客户的资产总量 = 8\n第 2 位客户是最富有的，资产总量是 10\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 3：\n\n输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n输出：17\n\n\n1\n2\n\n\n提示：\n\n * m == accounts.length\n * n == accounts[i].length\n * 1 <= m, n <= 50\n * 1 <= accounts[i][j] <= 100\n\n----------------------------------------\n\ndiscussion | solution\n\ncode now\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-07 10:35:48\n * @lastedittime: 2022-11-07 11:27:24\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /leetcode/1672.最富有客户的资产总量.ts\n */\n/*\n * @lc app=leetcode.cn id=1672 lang=typescript\n *\n * [1672] 最富有客户的资产总量\n *\n * https://leetcode.cn/problems/richest-customer-wealth/description/\n *\n * algorithms\n * easy (86.41%)\n * likes:    150\n * dislikes: 0\n * total accepted:    111.4k\n * total submissions: 128.9k\n * testcase example:  '[[1,2,3],[3,2,1]]'\n *\n * 给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i​​​​​^​​​​​​​ 位客户在第 j\n * 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。\n *\n * 客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。\n *\n *\n *\n * 示例 1：\n *\n * 输入：accounts = [[1,2,3],[3,2,1]]\n * 输出：6\n * 解释：\n * 第 1 位客户的资产总量 = 1 + 2 + 3 = 6\n * 第 2 位客户的资产总量 = 3 + 2 + 1 = 6\n * 两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。\n *\n *\n * 示例 2：\n *\n * 输入：accounts = [[1,5],[7,3],[3,5]]\n * 输出：10\n * 解释：\n * 第 1 位客户的资产总量 = 6\n * 第 2 位客户的资产总量 = 10\n * 第 3 位客户的资产总量 = 8\n * 第 2 位客户是最富有的，资产总量是 10\n *\n * 示例 3：\n *\n * 输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]\n * 输出：17\n *\n *\n *\n *\n * 提示：\n *\n *\n * m == accounts.length\n * n == accounts[i].length\n * 1 <= m, n <= 50\n * 1 <= accounts[i][j] <= 100\n *\n *\n */\n\n// @lc code=start\n// function maximumwealth(accounts: number[][]): number {\n//     let maxcount = 0\n//     for (let i = 0; i < accounts.length; i++) {\n//         const u = accounts[i];\n//         let um = 0\n//         for (let j = 0; j < u.length; j++) {\n//             const m = u[j];\n//             um += m\n//         }\n//         if(um > maxcount) maxcount = um\n//     }\n//     return maxcount\n// };\nfunction maximumwealth(accounts: number[][]): number {\n  let maxcount = 0;\n  for (let i = 0; i < accounts.length; i++) {\n    const u = accounts[i];\n    let um = 0;\n    maxcount = math.max(\n      maxcount,\n      u.reduce((a, b) => a + b)\n    );\n  }\n  return maxcount;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"比赛中的配对次数",frontmatter:{title:"比赛中的配对次数",date:"2022-11-15T16:02:10.000Z",permalink:"/pages/eba8e5/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501688.%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%9A%84%E9%85%8D%E5%AF%B9%E6%AC%A1%E6%95%B0.html",relativePath:"30.其他技术/3050.算法/30501688.比赛中的配对次数.md",key:"v-7f619821",path:"/pages/eba8e5/",headersStr:null,content:"# 比赛中的配对次数\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.02%)   105     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：\n\n * 如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 n / 2 场比赛，且产生 n / 2 支队伍进入下一轮。\n * 如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 (n - 1) / 2 场比赛，且产生 (n - 1) / 2 + 1 支队伍进入下一轮。\n\n返回在比赛中进行的配对次数，直到决出获胜队伍为止。\n\n示例 1：\n\n输入：n = 7\n输出：6\n解释：比赛详情：\n- 第 1 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。\n- 第 2 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n- 第 3 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n总配对次数 = 3 + 2 + 1 = 6\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：n = 14\n输出：13\n解释：比赛详情：\n- 第 1 轮：队伍数 = 14 ，配对次数 = 7 ，7 支队伍晋级。\n- 第 2 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。 \n- 第 3 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n- 第 4 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n总配对次数 = 7 + 3 + 2 + 1 = 13\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n提示：\n\n * 1 <= n <= 200\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\nimport { Toast } from \"vant\";\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-15 14:37:39\n * @LastEditTime: 2022-11-15 16:01:11\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /leetcode/1688.比赛中的配对次数.ts\n */\n/*\n * @lc app=leetcode.cn id=1688 lang=typescript\n *\n * [1688] 比赛中的配对次数\n *\n * https://leetcode.cn/problems/count-of-matches-in-tournament/description/\n *\n * algorithms\n * Easy (84.02%)\n * Likes:    105\n * Dislikes: 0\n * Total Accepted:    57.7K\n * Total Submissions: 68.7K\n * Testcase Example:  '7'\n *\n * 给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：\n *\n *\n * 如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 n / 2 场比赛，且产生 n / 2 支队伍进入下一轮。\n * 如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 (n - 1) / 2 场比赛，且产生 (n - 1) / 2 +\n * 1 支队伍进入下一轮。\n *\n *\n * 返回在比赛中进行的配对次数，直到决出获胜队伍为止。\n *\n *\n *\n * 示例 1：\n *\n * 输入：n = 7\n * 输出：6\n * 解释：比赛详情：\n * - 第 1 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。\n * - 第 2 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n * - 第 3 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n * 总配对次数 = 3 + 2 + 1 = 6\n *\n *\n * 示例 2：\n *\n * 输入：n = 14\n * 输出：13\n * 解释：比赛详情：\n * - 第 1 轮：队伍数 = 14 ，配对次数 = 7 ，7 支队伍晋级。\n * - 第 2 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。\n * - 第 3 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n * - 第 4 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n * 总配对次数 = 7 + 3 + 2 + 1 = 13\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= n <= 200\n *\n *\n */\n\n// @lc code=start\nfunction numberOfMatches(n: number): number {\n  let sum = 0;\n  while (n > 1) {\n      let y = (n % 2)\n      n = (n + y) / 2;\n      sum += n - y;\n  }\n  return sum\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n",normalizedContent:"# 比赛中的配对次数\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.02%)   105     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：\n\n * 如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 n / 2 场比赛，且产生 n / 2 支队伍进入下一轮。\n * 如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 (n - 1) / 2 场比赛，且产生 (n - 1) / 2 + 1 支队伍进入下一轮。\n\n返回在比赛中进行的配对次数，直到决出获胜队伍为止。\n\n示例 1：\n\n输入：n = 7\n输出：6\n解释：比赛详情：\n- 第 1 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。\n- 第 2 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n- 第 3 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n总配对次数 = 3 + 2 + 1 = 6\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：n = 14\n输出：13\n解释：比赛详情：\n- 第 1 轮：队伍数 = 14 ，配对次数 = 7 ，7 支队伍晋级。\n- 第 2 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。 \n- 第 3 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n- 第 4 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n总配对次数 = 7 + 3 + 2 + 1 = 13\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n提示：\n\n * 1 <= n <= 200\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\nimport { toast } from \"vant\";\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-15 14:37:39\n * @lastedittime: 2022-11-15 16:01:11\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /leetcode/1688.比赛中的配对次数.ts\n */\n/*\n * @lc app=leetcode.cn id=1688 lang=typescript\n *\n * [1688] 比赛中的配对次数\n *\n * https://leetcode.cn/problems/count-of-matches-in-tournament/description/\n *\n * algorithms\n * easy (84.02%)\n * likes:    105\n * dislikes: 0\n * total accepted:    57.7k\n * total submissions: 68.7k\n * testcase example:  '7'\n *\n * 给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：\n *\n *\n * 如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 n / 2 场比赛，且产生 n / 2 支队伍进入下一轮。\n * 如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 (n - 1) / 2 场比赛，且产生 (n - 1) / 2 +\n * 1 支队伍进入下一轮。\n *\n *\n * 返回在比赛中进行的配对次数，直到决出获胜队伍为止。\n *\n *\n *\n * 示例 1：\n *\n * 输入：n = 7\n * 输出：6\n * 解释：比赛详情：\n * - 第 1 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。\n * - 第 2 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n * - 第 3 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n * 总配对次数 = 3 + 2 + 1 = 6\n *\n *\n * 示例 2：\n *\n * 输入：n = 14\n * 输出：13\n * 解释：比赛详情：\n * - 第 1 轮：队伍数 = 14 ，配对次数 = 7 ，7 支队伍晋级。\n * - 第 2 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。\n * - 第 3 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。\n * - 第 4 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。\n * 总配对次数 = 7 + 3 + 2 + 1 = 13\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= n <= 200\n *\n *\n */\n\n// @lc code=start\nfunction numberofmatches(n: number): number {\n  let sum = 0;\n  while (n > 1) {\n      let y = (n % 2)\n      n = (n + y) / 2;\n      sum += n - y;\n  }\n  return sum\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"解码异或后的数组",frontmatter:{title:"解码异或后的数组",date:"2022-11-07T11:28:58.000Z",permalink:"/pages/05769c/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501720.%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84.html",relativePath:"30.其他技术/3050.算法/30501720.解码异或后的数组.md",key:"v-a4adc414",path:"/pages/05769c/",headersStr:null,content:"# 解码异或后的数组\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (86.42%)   106     -\n\nTags\n\n\n\nCompanies\n\n\n\n未知 整数数组 arr 由 n 个非负整数组成。\n\n经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] XOR arr[i + 1] 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。\n\n给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。\n\n请解码返回原数组 arr 。可以证明答案存在并且是唯一的。\n\n示例 1：\n\n输入：encoded = [1,2,3], first = 1\n输出：[1,0,2,1]\n解释：若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：encoded = [6,2,7,3], first = 4\n输出：[4,2,0,7,4]\n\n\n1\n2\n\n\n提示：\n\n * 2 <= n <= 104\n * encoded.length == n - 1\n * 0 <= encoded[i] <= 105\n * 0 <= first <= 105\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-07 10:08:15\n * @LastEditTime: 2022-11-07 10:29:12\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /leetcode/1720.解码异或后的数组.ts\n */\n/*\n * @lc app=leetcode.cn id=1720 lang=typescript\n *\n * [1720] 解码异或后的数组\n *\n * https://leetcode.cn/problems/decode-xored-array/description/\n *\n * algorithms\n * Easy (86.42%)\n * Likes:    106\n * Dislikes: 0\n * Total Accepted:    53.1K\n * Total Submissions: 61.4K\n * Testcase Example:  '[1,2,3]\\n1'\n *\n * 未知 整数数组 arr 由 n 个非负整数组成。\n *\n * 经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] XOR arr[i + 1]\n * 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。\n *\n * 给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。\n *\n * 请解码返回原数组 arr 。可以证明答案存在并且是唯一的。\n *\n *\n *\n * 示例 1：\n *\n *\n * 输入：encoded = [1,2,3], first = 1\n * 输出：[1,0,2,1]\n * 解释：若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] =\n * [1,2,3]\n *\n *\n * 示例 2：\n *\n *\n * 输入：encoded = [6,2,7,3], first = 4\n * 输出：[4,2,0,7,4]\n *\n *\n *\n *\n * 提示：\n *\n *\n * 2\n * encoded.length == n - 1\n * 0\n * 0\n *\n *\n */\n\n// @lc code=start\nfunction decode(encoded: number[], first: number): number[] {\n  const decodeLen = encoded.length + 1;\n  const decodeArr = new Array(decodeLen);\n  decodeArr[0] = first;\n  for (let i = 1; i < decodeLen; i++) {\n    decodeArr[i] = decodeArr[i - 1] ^ encoded[i - 1];\n  }\n  return decodeArr;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n",normalizedContent:"# 解码异或后的数组\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (86.42%)   106     -\n\ntags\n\n\n\ncompanies\n\n\n\n未知 整数数组 arr 由 n 个非负整数组成。\n\n经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] xor arr[i + 1] 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。\n\n给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。\n\n请解码返回原数组 arr 。可以证明答案存在并且是唯一的。\n\n示例 1：\n\n输入：encoded = [1,2,3], first = 1\n输出：[1,0,2,1]\n解释：若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 xor 0, 0 xor 2, 2 xor 1] = [1,2,3]\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：encoded = [6,2,7,3], first = 4\n输出：[4,2,0,7,4]\n\n\n1\n2\n\n\n提示：\n\n * 2 <= n <= 104\n * encoded.length == n - 1\n * 0 <= encoded[i] <= 105\n * 0 <= first <= 105\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-07 10:08:15\n * @lastedittime: 2022-11-07 10:29:12\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /leetcode/1720.解码异或后的数组.ts\n */\n/*\n * @lc app=leetcode.cn id=1720 lang=typescript\n *\n * [1720] 解码异或后的数组\n *\n * https://leetcode.cn/problems/decode-xored-array/description/\n *\n * algorithms\n * easy (86.42%)\n * likes:    106\n * dislikes: 0\n * total accepted:    53.1k\n * total submissions: 61.4k\n * testcase example:  '[1,2,3]\\n1'\n *\n * 未知 整数数组 arr 由 n 个非负整数组成。\n *\n * 经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] xor arr[i + 1]\n * 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。\n *\n * 给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。\n *\n * 请解码返回原数组 arr 。可以证明答案存在并且是唯一的。\n *\n *\n *\n * 示例 1：\n *\n *\n * 输入：encoded = [1,2,3], first = 1\n * 输出：[1,0,2,1]\n * 解释：若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 xor 0, 0 xor 2, 2 xor 1] =\n * [1,2,3]\n *\n *\n * 示例 2：\n *\n *\n * 输入：encoded = [6,2,7,3], first = 4\n * 输出：[4,2,0,7,4]\n *\n *\n *\n *\n * 提示：\n *\n *\n * 2\n * encoded.length == n - 1\n * 0\n * 0\n *\n *\n */\n\n// @lc code=start\nfunction decode(encoded: number[], first: number): number[] {\n  const decodelen = encoded.length + 1;\n  const decodearr = new array(decodelen);\n  decodearr[0] = first;\n  for (let i = 1; i < decodelen; i++) {\n    decodearr[i] = decodearr[i - 1] ^ encoded[i - 1];\n  }\n  return decodearr;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"查找每个员工花费的总时间",frontmatter:{title:"查找每个员工花费的总时间",date:"2022-11-09T11:12:20.000Z",permalink:"/pages/dbf116/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30501741.%E6%9F%A5%E6%89%BE%E6%AF%8F%E4%B8%AA%E5%91%98%E5%B7%A5%E8%8A%B1%E8%B4%B9%E7%9A%84%E6%80%BB%E6%97%B6%E9%97%B4.html",relativePath:"30.其他技术/3050.算法/30501741.查找每个员工花费的总时间.md",key:"v-0aa6bb20",path:"/pages/dbf116/",headersStr:null,content:"# 查找每个员工花费的总时间\n\nCATEGORY   DIFFICULTY      LIKES   DISLIKES\ndatabase   Easy (85.32%)   26      -\n\nTags\n\n\n\nCompanies\n\n\n\n表: Employees\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| emp_id      | int  |\n| event_day   | date |\n| in_time     | int  |\n| out_time    | int  |\n+-------------+------+\n(emp_id, event_day, in_time) 是这个表的主键。\n该表显示了员工在办公室的出入情况。\nevent_day 是此事件发生的日期，in_time 是员工进入办公室的时间，而 out_time 是他们离开办公室的时间。\nin_time 和 out_time 的取值在1到1440之间。\n题目保证同一天没有两个事件在时间上是相交的，并且保证 in_time 小于 out_time。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n编写一个SQL查询以计算每位员工每天在办公室花费的总时间（以分钟为单位）。 请注意，在一天之内，同一员工是可以多次进入和离开办公室的。 在办公室里一次进出所花费的时间为out_time 减去 in_time。\n\n返回结果表单的顺序无要求。 查询结果的格式如下：\n\nEmployees table:\n+--------+------------+---------+----------+\n| emp_id | event_day  | in_time | out_time |\n+--------+------------+---------+----------+\n| 1      | 2020-11-28 | 4       | 32       |\n| 1      | 2020-11-28 | 55      | 200      |\n| 1      | 2020-12-03 | 1       | 42       |\n| 2      | 2020-11-28 | 3       | 33       |\n| 2      | 2020-12-09 | 47      | 74       |\n+--------+------------+---------+----------+\nResult table:\n+------------+--------+------------+\n| day        | emp_id | total_time |\n+------------+--------+------------+\n| 2020-11-28 | 1      | 173        |\n| 2020-11-28 | 2      | 30         |\n| 2020-12-03 | 1      | 41         |\n| 2020-12-09 | 2      | 27         |\n+------------+--------+------------+\n雇员 1 有三次进出: 有两次发生在 2020-11-28 花费的时间为 (32 - 4) + (200 - 55) = 173, 有一次发生在 2020-12-03 花费的时间为 (42 - 1) = 41。\n雇员 2 有两次进出: 有一次发生在 2020-11-28 花费的时间为 (33 - 3) = 30,  有一次发生在 2020-12-09 花费的时间为 (74 - 47) = 27。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\nselect event_day as day, emp_id, sum(out_time - in_time) as total_time from Employees group by day, emp_id;\n\n\n1\n",normalizedContent:"# 查找每个员工花费的总时间\n\ncategory   difficulty      likes   dislikes\ndatabase   easy (85.32%)   26      -\n\ntags\n\n\n\ncompanies\n\n\n\n表: employees\n\n+-------------+------+\n| column name | type |\n+-------------+------+\n| emp_id      | int  |\n| event_day   | date |\n| in_time     | int  |\n| out_time    | int  |\n+-------------+------+\n(emp_id, event_day, in_time) 是这个表的主键。\n该表显示了员工在办公室的出入情况。\nevent_day 是此事件发生的日期，in_time 是员工进入办公室的时间，而 out_time 是他们离开办公室的时间。\nin_time 和 out_time 的取值在1到1440之间。\n题目保证同一天没有两个事件在时间上是相交的，并且保证 in_time 小于 out_time。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n编写一个sql查询以计算每位员工每天在办公室花费的总时间（以分钟为单位）。 请注意，在一天之内，同一员工是可以多次进入和离开办公室的。 在办公室里一次进出所花费的时间为out_time 减去 in_time。\n\n返回结果表单的顺序无要求。 查询结果的格式如下：\n\nemployees table:\n+--------+------------+---------+----------+\n| emp_id | event_day  | in_time | out_time |\n+--------+------------+---------+----------+\n| 1      | 2020-11-28 | 4       | 32       |\n| 1      | 2020-11-28 | 55      | 200      |\n| 1      | 2020-12-03 | 1       | 42       |\n| 2      | 2020-11-28 | 3       | 33       |\n| 2      | 2020-12-09 | 47      | 74       |\n+--------+------------+---------+----------+\nresult table:\n+------------+--------+------------+\n| day        | emp_id | total_time |\n+------------+--------+------------+\n| 2020-11-28 | 1      | 173        |\n| 2020-11-28 | 2      | 30         |\n| 2020-12-03 | 1      | 41         |\n| 2020-12-09 | 2      | 27         |\n+------------+--------+------------+\n雇员 1 有三次进出: 有两次发生在 2020-11-28 花费的时间为 (32 - 4) + (200 - 55) = 173, 有一次发生在 2020-12-03 花费的时间为 (42 - 1) = 41。\n雇员 2 有两次进出: 有一次发生在 2020-11-28 花费的时间为 (33 - 3) = 30,  有一次发生在 2020-12-09 花费的时间为 (74 - 47) = 27。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\nselect event_day as day, emp_id, sum(out_time - in_time) as total_time from employees group by day, emp_id;\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"有效的括号",frontmatter:{title:"有效的括号",date:"2024-01-28T16:57:41.000Z",permalink:"/pages/c39a4c/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305020.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html",relativePath:"30.其他技术/3050.算法/305020. 有效的括号.md",key:"v-667a0d04",path:"/pages/c39a4c/",headers:[{level:2,title:"题目",slug:"题目",normalizedTitle:"题目",charIndex:2},{level:3,title:"个人题解(有很多优化的点)",slug:"个人题解-有很多优化的点",normalizedTitle:"个人题解(有很多优化的点)",charIndex:338}],headersStr:"题目 个人题解(有很多优化的点)",content:"# 题目\n\n20. 有效的括号\n\n已解答\n\n简单\n\n相关标签\n\n相关企业\n\n提示\n\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n 1. 左括号必须用相同类型的右括号闭合。\n 2. 左括号必须以正确的顺序闭合。\n 3. 每个右括号都有一个对应的相同类型的左括号。\n\n示例 1：\n\n输入：s = \"()\"\n输出：true\n\n\n1\n2\n\n\n示例 2：\n\n输入：s = \"()[]{}\"\n输出：true\n\n\n1\n2\n\n\n示例 3：\n\n输入：s = \"(]\"\n输出：false\n\n\n1\n2\n\n\n提示：\n\n * 1 <= s.length <= 104\n * s 仅由括号 '()[]{}' 组成\n\n\n# 个人题解(有很多优化的点)\n\n栈出入方式\n\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const strMap = {\n        '[':']',\n        '(':')',\n        '{':'}'\n    }\n    const stackArr = []\n    for(let i = 0; i < s.length; i++) {\n        const curStr = s[i]\n        if(strMap[stackArr[stackArr.length-1]] === curStr) {\n            stackArr.pop()\n        } else {\n            stackArr.push(curStr)\n        }\n        \n    }\n    return !stackArr.length\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n暴力\n\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const repStrArr = ['[]', '{}', '()']\n    for(let i = 0; i < s.length; i ++) {\n        repStrArr.forEach(e => {\n            s = s.replace(e, '')\n        })\n    }\n    return !s.length\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",normalizedContent:"# 题目\n\n20. 有效的括号\n\n已解答\n\n简单\n\n相关标签\n\n相关企业\n\n提示\n\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n 1. 左括号必须用相同类型的右括号闭合。\n 2. 左括号必须以正确的顺序闭合。\n 3. 每个右括号都有一个对应的相同类型的左括号。\n\n示例 1：\n\n输入：s = \"()\"\n输出：true\n\n\n1\n2\n\n\n示例 2：\n\n输入：s = \"()[]{}\"\n输出：true\n\n\n1\n2\n\n\n示例 3：\n\n输入：s = \"(]\"\n输出：false\n\n\n1\n2\n\n\n提示：\n\n * 1 <= s.length <= 104\n * s 仅由括号 '()[]{}' 组成\n\n\n# 个人题解(有很多优化的点)\n\n栈出入方式\n\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isvalid = function(s) {\n    const strmap = {\n        '[':']',\n        '(':')',\n        '{':'}'\n    }\n    const stackarr = []\n    for(let i = 0; i < s.length; i++) {\n        const curstr = s[i]\n        if(strmap[stackarr[stackarr.length-1]] === curstr) {\n            stackarr.pop()\n        } else {\n            stackarr.push(curstr)\n        }\n        \n    }\n    return !stackarr.length\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n暴力\n\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isvalid = function(s) {\n    const repstrarr = ['[]', '{}', '()']\n    for(let i = 0; i < s.length; i ++) {\n        repstrarr.foreach(e => {\n            s = s.replace(e, '')\n        })\n    }\n    return !s.length\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n",charsets:{cjk:!0},lastUpdated:"2024/01/28, 17:03:40",lastUpdatedTimestamp:170643262e4},{title:"最长公共前缀",frontmatter:{title:"最长公共前缀",tags:["算法","简单"],date:"2022-05-08T22:10:57.000Z",permalink:"/pages/722ed5/",categories:["其他技术","算法"]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html",relativePath:"30.其他技术/3050.算法/305020.有效的括号.md",key:"v-6d11b8ea",path:"/pages/722ed5/",headers:[{level:2,title:"解",slug:"解",normalizedTitle:"解",charIndex:681}],headersStr:"解",content:'# 有效的括号\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (44.57%)   3234    -\n\nTags\n\nstring | stack\n\nCompanies\n\nairbnb | amazon | bloomberg | facebook | google | microsoft | twitter | zenefits\n\n给定一个只包括 \'(\'，\')\'，\'{\'，\'}\'，\'[\'，\']\' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n 1. 左括号必须用相同类型的右括号闭合。\n 2. 左括号必须以正确的顺序闭合。\n\n示例 1：\n\n输入：s = "()"\n输出：true\n\n\n1\n2\n\n\n示例 2：\n\n输入：s = "()[]{}"\n输出：true\n\n\n1\n2\n\n\n示例 3：\n\n输入：s = "(]"\n输出：false\n\n\n1\n2\n\n\n示例 4：\n\n输入：s = "([)]"\n输出：false\n\n\n1\n2\n\n\n示例 5：\n\n输入：s = "{[]}"\n输出：true\n\n\n1\n2\n\n\n提示：\n\n * 1 <= s.length <= 104\n * s 仅由括号 \'()[]{}\' 组成\n\n----------------------------------------\n\nDiscussion | Solutionhttps://leetcode-cn.com/problems/valid-parentheses/solution/)\n\n\n# 解\n\n\n// @lc code=start\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function (s) {\n  const ctx = ["()", "[]", "{}"];\n  while (true) {\n    for (let i = 0; i < ctx.length; i++) {\n      s = s.replaceAll(ctx[i], "");\n    }\n    if (ctx.every((j) => s.indexOf(j) === -1)) {\n      break;\n    }\n  }\n\n  return !s.length;\n};\n// @lc code=end\n\n// @after-stub-for-debug-begin\nmodule.exports = isValid;\n// @after-stub-for-debug-end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n',normalizedContent:'# 有效的括号\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (44.57%)   3234    -\n\ntags\n\nstring | stack\n\ncompanies\n\nairbnb | amazon | bloomberg | facebook | google | microsoft | twitter | zenefits\n\n给定一个只包括 \'(\'，\')\'，\'{\'，\'}\'，\'[\'，\']\' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n 1. 左括号必须用相同类型的右括号闭合。\n 2. 左括号必须以正确的顺序闭合。\n\n示例 1：\n\n输入：s = "()"\n输出：true\n\n\n1\n2\n\n\n示例 2：\n\n输入：s = "()[]{}"\n输出：true\n\n\n1\n2\n\n\n示例 3：\n\n输入：s = "(]"\n输出：false\n\n\n1\n2\n\n\n示例 4：\n\n输入：s = "([)]"\n输出：false\n\n\n1\n2\n\n\n示例 5：\n\n输入：s = "{[]}"\n输出：true\n\n\n1\n2\n\n\n提示：\n\n * 1 <= s.length <= 104\n * s 仅由括号 \'()[]{}\' 组成\n\n----------------------------------------\n\ndiscussion | solutionhttps://leetcode-cn.com/problems/valid-parentheses/solution/)\n\n\n# 解\n\n\n// @lc code=start\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isvalid = function (s) {\n  const ctx = ["()", "[]", "{}"];\n  while (true) {\n    for (let i = 0; i < ctx.length; i++) {\n      s = s.replaceall(ctx[i], "");\n    }\n    if (ctx.every((j) => s.indexof(j) === -1)) {\n      break;\n    }\n  }\n\n  return !s.length;\n};\n// @lc code=end\n\n// @after-stub-for-debug-begin\nmodule.exports = isvalid;\n// @after-stub-for-debug-end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n',charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"差的绝对值为-k-的数对数目",frontmatter:{title:"差的绝对值为-k-的数对数目",date:"2022-11-11T14:45:25.000Z",permalink:"/pages/17c8ea/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502006.%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BA-k-%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE.html",relativePath:"30.其他技术/3050.算法/30502006.差的绝对值为-k-的数对数目.md",key:"v-40b6895a",path:"/pages/17c8ea/",headersStr:null,content:"# 差的绝对值为 K 的数对数目\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.56%)   85      -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i < j 且 |nums[i] - nums[j]| == k 。\n\n|x| 的值定义为：\n\n * 如果 x >= 0 ，那么值为 x 。\n * 如果 x < 0 ，那么值为 -x 。\n\n示例 1：\n\n输入：nums = [1,2,2,1], k = 1\n输出：4\n解释：差的绝对值为 1 的数对为：\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：nums = [1,3], k = 3\n输出：0\n解释：没有任何数对差的绝对值为 3 。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：nums = [3,2,1,5,4], k = 2\n输出：3\n解释：差的绝对值为 2 的数对为：\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n\n\n1\n2\n3\n4\n5\n6\n\n\n提示：\n\n * 1 <= nums.length <= 200\n * 1 <= nums[i] <= 100\n * 1 <= k <= 99\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-11 14:07:00\n * @LastEditTime: 2022-11-11 14:44:46\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /loan-home/Users/izhaong/izhaong/Project_me/leetcode/2006.差的绝对值为-k-的数对数目.js\n */\n/*\n * @lc app=leetcode.cn id=2006 lang=javascript\n *\n * [2006] 差的绝对值为 K 的数对数目\n *\n * https://leetcode.cn/problems/count-number-of-pairs-with-absolute-difference-k/description/\n *\n * algorithms\n * Easy (84.56%)\n * Likes:    85\n * Dislikes: 0\n * Total Accepted:    49.6K\n * Total Submissions: 58.7K\n * Testcase Example:  '[1,2,2,1]\\n1'\n *\n * 给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i < j 且 |nums[i] - nums[j]| == k\n * 。\n * \n * |x| 的值定义为：\n * \n * \n * 如果 x >= 0 ，那么值为 x 。\n * 如果 x < 0 ，那么值为 -x 。\n * \n * \n * \n * \n * 示例 1：\n * \n * 输入：nums = [1,2,2,1], k = 1\n * 输出：4\n * 解释：差的绝对值为 1 的数对为：\n * - [1,2,2,1]\n * - [1,2,2,1]\n * - [1,2,2,1]\n * - [1,2,2,1]\n * \n * \n * 示例 2：\n * \n * 输入：nums = [1,3], k = 3\n * 输出：0\n * 解释：没有任何数对差的绝对值为 3 。\n * \n * \n * 示例 3：\n * \n * 输入：nums = [3,2,1,5,4], k = 2\n * 输出：3\n * 解释：差的绝对值为 2 的数对为：\n * - [3,2,1,5,4]\n * - [3,2,1,5,4]\n * - [3,2,1,5,4]\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= nums.length <= 200\n * 1 <= nums[i] <= 100\n * 1 <= k <= 99\n * \n * \n */\n\n// @lc code=start\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countKDifference = function(nums, k) {\n    let sum = 0, n = nums.length\n    for (let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            if(Math.abs(nums[i] - nums[j]) === k) {\n                sum ++\n            }\n        }\n    }\n    return sum\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n",normalizedContent:"# 差的绝对值为 k 的数对数目\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.56%)   85      -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i < j 且 |nums[i] - nums[j]| == k 。\n\n|x| 的值定义为：\n\n * 如果 x >= 0 ，那么值为 x 。\n * 如果 x < 0 ，那么值为 -x 。\n\n示例 1：\n\n输入：nums = [1,2,2,1], k = 1\n输出：4\n解释：差的绝对值为 1 的数对为：\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：nums = [1,3], k = 3\n输出：0\n解释：没有任何数对差的绝对值为 3 。\n\n\n1\n2\n3\n\n\n示例 3：\n\n输入：nums = [3,2,1,5,4], k = 2\n输出：3\n解释：差的绝对值为 2 的数对为：\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n\n\n1\n2\n3\n4\n5\n6\n\n\n提示：\n\n * 1 <= nums.length <= 200\n * 1 <= nums[i] <= 100\n * 1 <= k <= 99\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-11 14:07:00\n * @lastedittime: 2022-11-11 14:44:46\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /loan-home/users/izhaong/izhaong/project_me/leetcode/2006.差的绝对值为-k-的数对数目.js\n */\n/*\n * @lc app=leetcode.cn id=2006 lang=javascript\n *\n * [2006] 差的绝对值为 k 的数对数目\n *\n * https://leetcode.cn/problems/count-number-of-pairs-with-absolute-difference-k/description/\n *\n * algorithms\n * easy (84.56%)\n * likes:    85\n * dislikes: 0\n * total accepted:    49.6k\n * total submissions: 58.7k\n * testcase example:  '[1,2,2,1]\\n1'\n *\n * 给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i < j 且 |nums[i] - nums[j]| == k\n * 。\n * \n * |x| 的值定义为：\n * \n * \n * 如果 x >= 0 ，那么值为 x 。\n * 如果 x < 0 ，那么值为 -x 。\n * \n * \n * \n * \n * 示例 1：\n * \n * 输入：nums = [1,2,2,1], k = 1\n * 输出：4\n * 解释：差的绝对值为 1 的数对为：\n * - [1,2,2,1]\n * - [1,2,2,1]\n * - [1,2,2,1]\n * - [1,2,2,1]\n * \n * \n * 示例 2：\n * \n * 输入：nums = [1,3], k = 3\n * 输出：0\n * 解释：没有任何数对差的绝对值为 3 。\n * \n * \n * 示例 3：\n * \n * 输入：nums = [3,2,1,5,4], k = 2\n * 输出：3\n * 解释：差的绝对值为 2 的数对为：\n * - [3,2,1,5,4]\n * - [3,2,1,5,4]\n * - [3,2,1,5,4]\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= nums.length <= 200\n * 1 <= nums[i] <= 100\n * 1 <= k <= 99\n * \n * \n */\n\n// @lc code=start\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countkdifference = function(nums, k) {\n    let sum = 0, n = nums.length\n    for (let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            if(math.abs(nums[i] - nums[j]) === k) {\n                sum ++\n            }\n        }\n    }\n    return sum\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"执行操作后的变量值",frontmatter:{title:"执行操作后的变量值",date:"2022-11-07T11:12:27.000Z",permalink:"/pages/990dd4/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502011.%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E5%8F%98%E9%87%8F%E5%80%BC.html",relativePath:"30.其他技术/3050.算法/30502011.执行操作后的变量值.md",key:"v-b95ea328",path:"/pages/990dd4/",headersStr:null,content:'# 执行操作后的变量值\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (86.30%)   23      -\n\nTags\n\n\n\nCompanies\n\n\n\n存在一种仅支持 4 种操作和 1 个变量 X 的编程语言：\n\n * ++X 和 X++ 使变量 X 的值 加 1\n * --X 和 X-- 使变量 X 的值 减 1\n\n最初，X 的值是 0\n\n给你一个字符串数组 operations ，这是由操作组成的一个列表，返回执行所有操作后， X 的 最终值 。\n\n示例 1：\n\n输入：operations = ["--X","X++","X++"]\n输出：1\n解释：操作按下述步骤执行：\n最初，X = 0\n--X：X 减 1 ，X =  0 - 1 = -1\nX++：X 加 1 ，X = -1 + 1 =  0\nX++：X 加 1 ，X =  0 + 1 =  1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：operations = ["++X","++X","X++"]\n输出：3\n解释：操作按下述步骤执行： \n最初，X = 0\n++X：X 加 1 ，X = 0 + 1 = 1\n++X：X 加 1 ，X = 1 + 1 = 2\nX++：X 加 1 ，X = 2 + 1 = 3\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 3：\n\n输入：operations = ["X++","++X","--X","X--"]\n输出：0\n解释：操作按下述步骤执行：\n最初，X = 0\nX++：X 加 1 ，X = 0 + 1 = 1\n++X：X 加 1 ，X = 1 + 1 = 2\n--X：X 减 1 ，X = 2 - 1 = 1\nX--：X 减 1 ，X = 1 - 1 = 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n提示：\n\n * 1 <= operations.length <= 100\n * operations[i] 将会是 "++X"、"X++"、"--X" 或 "X--"\n\n----------------------------------------\n\nDiscussion | Solution\n\nCode Now\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-07 10:50:28\n * @LastEditTime: 2022-11-07 11:11:54\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /leetcode/2011.执行操作后的变量值.ts\n */\n/*\n * @lc app=leetcode.cn id=2011 lang=typescript\n *\n * [2011] 执行操作后的变量值\n *\n * https://leetcode.cn/problems/final-value-of-variable-after-performing-operations/description/\n *\n * algorithms\n * Easy (86.30%)\n * Likes:    23\n * Dislikes: 0\n * Total Accepted:    19.6K\n * Total Submissions: 22.7K\n * Testcase Example:  \'["--X","X++","X++"]\'\n *\n * 存在一种仅支持 4 种操作和 1 个变量 X 的编程语言：\n *\n *\n * ++X 和 X++ 使变量 X 的值 加 1\n * --X 和 X-- 使变量 X 的值 减 1\n *\n *\n * 最初，X 的值是 0\n *\n * 给你一个字符串数组 operations ，这是由操作组成的一个列表，返回执行所有操作后， X 的 最终值 。\n *\n *\n *\n * 示例 1：\n *\n *\n * 输入：operations = ["--X","X++","X++"]\n * 输出：1\n * 解释：操作按下述步骤执行：\n * 最初，X = 0\n * --X：X 减 1 ，X =  0 - 1 = -1\n * X++：X 加 1 ，X = -1 + 1 =  0\n * X++：X 加 1 ，X =  0 + 1 =  1\n *\n *\n * 示例 2：\n *\n *\n * 输入：operations = ["++X","++X","X++"]\n * 输出：3\n * 解释：操作按下述步骤执行：\n * 最初，X = 0\n * ++X：X 加 1 ，X = 0 + 1 = 1\n * ++X：X 加 1 ，X = 1 + 1 = 2\n * X++：X 加 1 ，X = 2 + 1 = 3\n *\n *\n * 示例 3：\n *\n *\n * 输入：operations = ["X++","++X","--X","X--"]\n * 输出：0\n * 解释：操作按下述步骤执行：\n * 最初，X = 0\n * X++：X 加 1 ，X = 0 + 1 = 1\n * ++X：X 加 1 ，X = 1 + 1 = 2\n * --X：X 减 1 ，X = 2 - 1 = 1\n * X--：X 减 1 ，X = 1 - 1 = 0\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= operations.length <= 100\n * operations[i] 将会是 "++X"、"X++"、"--X" 或 "X--"\n *\n *\n */\n\n// @lc code=start\nfunction finalValueAfterOperations(operations: string[]): number {\n  let X = 0;\n  const map = [\n    { label: "++X", value: 1 },\n    { label: "X++", value: 1 },\n    { label: "--X", value: -1 },\n    { label: "X--", value: -1 },\n  ];\n  operations.forEach((e) => {\n    const val = map.find((v) => v.label === e)?.value;\n    X += val ?? 0;\n  });\n  return X;\n}\n\nfunction finalValueAfterOperations1(operations: string[]): number {\n  let X = 0;\n  const map = new Map();\n  map.set("++X", 1);\n  map.set("X++", 1);\n  map.set("--X", -1);\n  map.set("X--", -1);\n  for (let i = 0; i < operations.length; i++) {\n    X += map.get(operations[i])\n  }\n  return X;\n}\n// @lc code=end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n',normalizedContent:'# 执行操作后的变量值\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (86.30%)   23      -\n\ntags\n\n\n\ncompanies\n\n\n\n存在一种仅支持 4 种操作和 1 个变量 x 的编程语言：\n\n * ++x 和 x++ 使变量 x 的值 加 1\n * --x 和 x-- 使变量 x 的值 减 1\n\n最初，x 的值是 0\n\n给你一个字符串数组 operations ，这是由操作组成的一个列表，返回执行所有操作后， x 的 最终值 。\n\n示例 1：\n\n输入：operations = ["--x","x++","x++"]\n输出：1\n解释：操作按下述步骤执行：\n最初，x = 0\n--x：x 减 1 ，x =  0 - 1 = -1\nx++：x 加 1 ，x = -1 + 1 =  0\nx++：x 加 1 ，x =  0 + 1 =  1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：operations = ["++x","++x","x++"]\n输出：3\n解释：操作按下述步骤执行： \n最初，x = 0\n++x：x 加 1 ，x = 0 + 1 = 1\n++x：x 加 1 ，x = 1 + 1 = 2\nx++：x 加 1 ，x = 2 + 1 = 3\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 3：\n\n输入：operations = ["x++","++x","--x","x--"]\n输出：0\n解释：操作按下述步骤执行：\n最初，x = 0\nx++：x 加 1 ，x = 0 + 1 = 1\n++x：x 加 1 ，x = 1 + 1 = 2\n--x：x 减 1 ，x = 2 - 1 = 1\nx--：x 减 1 ，x = 1 - 1 = 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n提示：\n\n * 1 <= operations.length <= 100\n * operations[i] 将会是 "++x"、"x++"、"--x" 或 "x--"\n\n----------------------------------------\n\ndiscussion | solution\n\ncode now\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-07 10:50:28\n * @lastedittime: 2022-11-07 11:11:54\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /leetcode/2011.执行操作后的变量值.ts\n */\n/*\n * @lc app=leetcode.cn id=2011 lang=typescript\n *\n * [2011] 执行操作后的变量值\n *\n * https://leetcode.cn/problems/final-value-of-variable-after-performing-operations/description/\n *\n * algorithms\n * easy (86.30%)\n * likes:    23\n * dislikes: 0\n * total accepted:    19.6k\n * total submissions: 22.7k\n * testcase example:  \'["--x","x++","x++"]\'\n *\n * 存在一种仅支持 4 种操作和 1 个变量 x 的编程语言：\n *\n *\n * ++x 和 x++ 使变量 x 的值 加 1\n * --x 和 x-- 使变量 x 的值 减 1\n *\n *\n * 最初，x 的值是 0\n *\n * 给你一个字符串数组 operations ，这是由操作组成的一个列表，返回执行所有操作后， x 的 最终值 。\n *\n *\n *\n * 示例 1：\n *\n *\n * 输入：operations = ["--x","x++","x++"]\n * 输出：1\n * 解释：操作按下述步骤执行：\n * 最初，x = 0\n * --x：x 减 1 ，x =  0 - 1 = -1\n * x++：x 加 1 ，x = -1 + 1 =  0\n * x++：x 加 1 ，x =  0 + 1 =  1\n *\n *\n * 示例 2：\n *\n *\n * 输入：operations = ["++x","++x","x++"]\n * 输出：3\n * 解释：操作按下述步骤执行：\n * 最初，x = 0\n * ++x：x 加 1 ，x = 0 + 1 = 1\n * ++x：x 加 1 ，x = 1 + 1 = 2\n * x++：x 加 1 ，x = 2 + 1 = 3\n *\n *\n * 示例 3：\n *\n *\n * 输入：operations = ["x++","++x","--x","x--"]\n * 输出：0\n * 解释：操作按下述步骤执行：\n * 最初，x = 0\n * x++：x 加 1 ，x = 0 + 1 = 1\n * ++x：x 加 1 ，x = 1 + 1 = 2\n * --x：x 减 1 ，x = 2 - 1 = 1\n * x--：x 减 1 ，x = 1 - 1 = 0\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1 <= operations.length <= 100\n * operations[i] 将会是 "++x"、"x++"、"--x" 或 "x--"\n *\n *\n */\n\n// @lc code=start\nfunction finalvalueafteroperations(operations: string[]): number {\n  let x = 0;\n  const map = [\n    { label: "++x", value: 1 },\n    { label: "x++", value: 1 },\n    { label: "--x", value: -1 },\n    { label: "x--", value: -1 },\n  ];\n  operations.foreach((e) => {\n    const val = map.find((v) => v.label === e)?.value;\n    x += val ?? 0;\n  });\n  return x;\n}\n\nfunction finalvalueafteroperations1(operations: string[]): number {\n  let x = 0;\n  const map = new map();\n  map.set("++x", 1);\n  map.set("x++", 1);\n  map.set("--x", -1);\n  map.set("x--", -1);\n  for (let i = 0; i < operations.length; i++) {\n    x += map.get(operations[i])\n  }\n  return x;\n}\n// @lc code=end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n',charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"合并两个有序链表",frontmatter:{title:"合并两个有序链表",date:"2022-05-09T12:38:00.000Z",permalink:"/pages/5b9fdf/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305021.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html",relativePath:"30.其他技术/3050.算法/305021.合并两个有序链表.md",key:"v-37b2aac6",path:"/pages/5b9fdf/",headersStr:null,content:"# 合并两个有序链表\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (66.64%)   2418    -\n\nTags\n\nlinked-list\n\nCompanies\n\namazon | apple | linkedin | microsoft\n\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n示例 1：\n\n\n\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n\n\n1\n2\n\n\n示例 2：\n\n输入：l1 = [], l2 = []\n输出：[]\n\n\n1\n2\n\n\n示例 3：\n\n输入：l1 = [], l2 = [0]\n输出：[0]\n\n\n1\n2\n\n\n提示：\n\n * 两个链表的节点数目范围是 [0, 50]\n * -100 <= Node.val <= 100\n * l1 和 l2 均按 非递减顺序 排列\n\n----------------------------------------\n\nDiscussion | Solution",normalizedContent:"# 合并两个有序链表\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (66.64%)   2418    -\n\ntags\n\nlinked-list\n\ncompanies\n\namazon | apple | linkedin | microsoft\n\n将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n示例 1：\n\n\n\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n\n\n1\n2\n\n\n示例 2：\n\n输入：l1 = [], l2 = []\n输出：[]\n\n\n1\n2\n\n\n示例 3：\n\n输入：l1 = [], l2 = [0]\n输出：[0]\n\n\n1\n2\n\n\n提示：\n\n * 两个链表的节点数目范围是 [0, 50]\n * -100 <= node.val <= 100\n * l1 和 l2 均按 非递减顺序 排列\n\n----------------------------------------\n\ndiscussion | solution",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"句子中的最多单词数",frontmatter:{title:"句子中的最多单词数",date:"2022-11-08T11:01:03.000Z",permalink:"/pages/6867b8/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502114.%E5%8F%A5%E5%AD%90%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%9A%E5%8D%95%E8%AF%8D%E6%95%B0.html",relativePath:"30.其他技术/3050.算法/30502114.句子中的最多单词数.md",key:"v-450174da",path:"/pages/6867b8/",headersStr:null,content:'# 句子中的最多单词数\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (85.76%)   16      -\n\nTags\n\n\n\nCompanies\n\n\n\n一个 句子 由一些 单词 以及它们之间的单个空格组成，句子的开头和结尾不会有多余空格。\n\n给你一个字符串数组 sentences ，其中 sentences[i] 表示单个 句子 。\n\n请你返回单个句子里 单词的最多数目 。\n\n示例 1：\n\n输入：sentences = ["alice and bob love leetcode", "i think so too", "this is great thanks very much"]\n输出：6\n解释：\n- 第一个句子 "alice and bob love leetcode" 总共有 5 个单词。\n- 第二个句子 "i think so too" 总共有 4 个单词。\n- 第三个句子 "this is great thanks very much" 总共有 6 个单词。\n所以，单个句子中有最多单词数的是第三个句子，总共有 6 个单词。\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：sentences = ["please wait", "continue to fight", "continue to win"]\n输出：3\n解释：可能有多个句子有相同单词数。\n这个例子中，第二个句子和第三个句子（加粗斜体）有相同数目的单词数。\n\n\n1\n2\n3\n4\n\n\n提示：\n\n * 1 <= sentences.length <= 100\n * 1 <= sentences[i].length <= 100\n * sentences[i] 只包含小写英文字母和 \' \' 。\n * sentences[i] 的开头和结尾都没有空格。\n * sentences[i] 中所有单词由单个空格隔开。\n\n----------------------------------------\n\nDiscussion | Solution\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-08 10:49:33\n * @LastEditTime: 2022-11-08 10:57:23\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /loan-home/Users/izhaong/izhaong/Project_me/leetcode/2114.句子中的最多单词数.ts\n */\n/*\n * @lc app=leetcode.cn id=2114 lang=typescript\n *\n * [2114] 句子中的最多单词数\n *\n * https://leetcode.cn/problems/maximum-number-of-words-found-in-sentences/description/\n *\n * algorithms\n * Easy (85.76%)\n * Likes:    16\n * Dislikes: 0\n * Total Accepted:    15.5K\n * Total Submissions: 18K\n * Testcase Example:  \'["alice and bob love leetcode","i think so too","this is great thanks very much"]\'\n *\n * 一个 句子 由一些 单词 以及它们之间的单个空格组成，句子的开头和结尾不会有多余空格。\n * \n * 给你一个字符串数组 sentences ，其中 sentences[i] 表示单个 句子 。\n * \n * 请你返回单个句子里 单词的最多数目 。\n * \n * \n * \n * 示例 1：\n * \n * 输入：sentences = ["alice and bob love leetcode", "i think so too", "this is\n * great thanks very much"]\n * 输出：6\n * 解释：\n * - 第一个句子 "alice and bob love leetcode" 总共有 5 个单词。\n * - 第二个句子 "i think so too" 总共有 4 个单词。\n * - 第三个句子 "this is great thanks very much" 总共有 6 个单词。\n * 所以，单个句子中有最多单词数的是第三个句子，总共有 6 个单词。\n * \n * \n * 示例 2：\n * \n * 输入：sentences = ["please wait", "continue to fight", "continue to win"]\n * 输出：3\n * 解释：可能有多个句子有相同单词数。\n * 这个例子中，第二个句子和第三个句子（加粗斜体）有相同数目的单词数。\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= sentences.length <= 100\n * 1 <= sentences[i].length <= 100\n * sentences[i] 只包含小写英文字母和 \' \' 。\n * sentences[i] 的开头和结尾都没有空格。\n * sentences[i] 中所有单词由单个空格隔开。\n * \n * \n */\n\n// @lc code=start\nfunction mostWordsFound(sentences: string[]): number {\n    const sentencesLen = sentences.length\n    let maxLen = 0\n    for (let i = 0; i < sentencesLen; i++) {\n        const words = sentences[i].split(\' \')\n        const wordsLen = words.length\n        maxLen = Math.max(maxLen, wordsLen)\n    }\n    return maxLen\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n',normalizedContent:'# 句子中的最多单词数\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (85.76%)   16      -\n\ntags\n\n\n\ncompanies\n\n\n\n一个 句子 由一些 单词 以及它们之间的单个空格组成，句子的开头和结尾不会有多余空格。\n\n给你一个字符串数组 sentences ，其中 sentences[i] 表示单个 句子 。\n\n请你返回单个句子里 单词的最多数目 。\n\n示例 1：\n\n输入：sentences = ["alice and bob love leetcode", "i think so too", "this is great thanks very much"]\n输出：6\n解释：\n- 第一个句子 "alice and bob love leetcode" 总共有 5 个单词。\n- 第二个句子 "i think so too" 总共有 4 个单词。\n- 第三个句子 "this is great thanks very much" 总共有 6 个单词。\n所以，单个句子中有最多单词数的是第三个句子，总共有 6 个单词。\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例 2：\n\n输入：sentences = ["please wait", "continue to fight", "continue to win"]\n输出：3\n解释：可能有多个句子有相同单词数。\n这个例子中，第二个句子和第三个句子（加粗斜体）有相同数目的单词数。\n\n\n1\n2\n3\n4\n\n\n提示：\n\n * 1 <= sentences.length <= 100\n * 1 <= sentences[i].length <= 100\n * sentences[i] 只包含小写英文字母和 \' \' 。\n * sentences[i] 的开头和结尾都没有空格。\n * sentences[i] 中所有单词由单个空格隔开。\n\n----------------------------------------\n\ndiscussion | solution\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-08 10:49:33\n * @lastedittime: 2022-11-08 10:57:23\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /loan-home/users/izhaong/izhaong/project_me/leetcode/2114.句子中的最多单词数.ts\n */\n/*\n * @lc app=leetcode.cn id=2114 lang=typescript\n *\n * [2114] 句子中的最多单词数\n *\n * https://leetcode.cn/problems/maximum-number-of-words-found-in-sentences/description/\n *\n * algorithms\n * easy (85.76%)\n * likes:    16\n * dislikes: 0\n * total accepted:    15.5k\n * total submissions: 18k\n * testcase example:  \'["alice and bob love leetcode","i think so too","this is great thanks very much"]\'\n *\n * 一个 句子 由一些 单词 以及它们之间的单个空格组成，句子的开头和结尾不会有多余空格。\n * \n * 给你一个字符串数组 sentences ，其中 sentences[i] 表示单个 句子 。\n * \n * 请你返回单个句子里 单词的最多数目 。\n * \n * \n * \n * 示例 1：\n * \n * 输入：sentences = ["alice and bob love leetcode", "i think so too", "this is\n * great thanks very much"]\n * 输出：6\n * 解释：\n * - 第一个句子 "alice and bob love leetcode" 总共有 5 个单词。\n * - 第二个句子 "i think so too" 总共有 4 个单词。\n * - 第三个句子 "this is great thanks very much" 总共有 6 个单词。\n * 所以，单个句子中有最多单词数的是第三个句子，总共有 6 个单词。\n * \n * \n * 示例 2：\n * \n * 输入：sentences = ["please wait", "continue to fight", "continue to win"]\n * 输出：3\n * 解释：可能有多个句子有相同单词数。\n * 这个例子中，第二个句子和第三个句子（加粗斜体）有相同数目的单词数。\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= sentences.length <= 100\n * 1 <= sentences[i].length <= 100\n * sentences[i] 只包含小写英文字母和 \' \' 。\n * sentences[i] 的开头和结尾都没有空格。\n * sentences[i] 中所有单词由单个空格隔开。\n * \n * \n */\n\n// @lc code=start\nfunction mostwordsfound(sentences: string[]): number {\n    const sentenceslen = sentences.length\n    let maxlen = 0\n    for (let i = 0; i < sentenceslen; i++) {\n        const words = sentences[i].split(\' \')\n        const wordslen = words.length\n        maxlen = math.max(maxlen, wordslen)\n    }\n    return maxlen\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n',charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"拆分数位后四位数字的最小和",frontmatter:{title:"拆分数位后四位数字的最小和",date:"2022-11-10T11:10:42.000Z",permalink:"/pages/ae5c30/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502160.%E6%8B%86%E5%88%86%E6%95%B0%E4%BD%8D%E5%90%8E%E5%9B%9B%E4%BD%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%9C%80%E5%B0%8F%E5%92%8C.html",relativePath:"30.其他技术/3050.算法/30502160.拆分数位后四位数字的最小和.md",key:"v-0c2c6274",path:"/pages/ae5c30/",headersStr:null,content:"# 拆分数位后四位数字的最小和\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (85.20%)   21      -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个四位 正 整数 num 。请你使用 num 中的 数位 ，将 num 拆成两个新的整数 new1 和 new2 。new1 和 new2 中可以有 前导 0 ，且 num 中 所有 数位都必须使用。\n\n * 比方说，给你 num = 2932 ，你拥有的数位包括：两个 2 ，一个 9 和一个 3 。一些可能的 [new1, new2] 数对为 [22, 93]，[23, 92]，[223, 9] 和 [2, 329] 。\n\n请你返回可以得到的 new1 和 new2 的 最小 和。\n\n示例 1：\n\n输入：num = 2932\n输出：52\n解释：可行的 [new1, new2] 数对为 [29, 23] ，[223, 9] 等等。\n最小和为数对 [29, 23] 的和：29 + 23 = 52 。\n\n\n1\n2\n3\n4\n\n\n示例 2：\n\n输入：num = 4009\n输出：13\n解释：可行的 [new1, new2] 数对为 [0, 49] ，[490, 0] 等等。\n最小和为数对 [4, 9] 的和：4 + 9 = 13 。\n\n\n1\n2\n3\n4\n\n\n提示：\n\n * 1000 <= num <= 9999\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-10 10:57:00\n * @LastEditTime: 2022-11-10 11:09:25\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /imooc-jira/Users/izhaong/izhaong/Project_me/leetcode/2160.拆分数位后四位数字的最小和.ts\n */\n/*\n * @lc app=leetcode.cn id=2160 lang=typescript\n *\n * [2160] 拆分数位后四位数字的最小和\n *\n * https://leetcode.cn/problems/minimum-sum-of-four-digit-number-after-splitting-digits/description/\n *\n * algorithms\n * Easy (85.20%)\n * Likes:    21\n * Dislikes: 0\n * Total Accepted:    11.1K\n * Total Submissions: 13K\n * Testcase Example:  '2932'\n *\n * 给你一个四位 正 整数 num 。请你使用 num 中的 数位 ，将 num 拆成两个新的整数 new1 和 new2 。new1 和 new2\n * 中可以有 前导 0 ，且 num 中 所有 数位都必须使用。\n *\n *\n * 比方说，给你 num = 2932 ，你拥有的数位包括：两个 2 ，一个 9 和一个 3 。一些可能的 [new1, new2] 数对为 [22,\n * 93]，[23, 92]，[223, 9] 和 [2, 329] 。\n *\n *\n * 请你返回可以得到的 new1 和 new2 的 最小 和。\n *\n *\n *\n * 示例 1：\n *\n * 输入：num = 2932\n * 输出：52\n * 解释：可行的 [new1, new2] 数对为 [29, 23] ，[223, 9] 等等。\n * 最小和为数对 [29, 23] 的和：29 + 23 = 52 。\n *\n *\n * 示例 2：\n *\n * 输入：num = 4009\n * 输出：13\n * 解释：可行的 [new1, new2] 数对为 [0, 49] ，[490, 0] 等等。\n * 最小和为数对 [4, 9] 的和：4 + 9 = 13 。\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1000 <= num <= 9999\n *\n *\n */\n\n// @lc code=start\nfunction minimumSum(num: number): number {\n  const sortNumStr = String(num).split('').sort().join('');\n  return (\n    Number(sortNumStr[0] + sortNumStr[2]) +\n    Number(sortNumStr[1] + sortNumStr[3])\n  );\n}\n// @lc code=end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n",normalizedContent:"# 拆分数位后四位数字的最小和\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (85.20%)   21      -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个四位 正 整数 num 。请你使用 num 中的 数位 ，将 num 拆成两个新的整数 new1 和 new2 。new1 和 new2 中可以有 前导 0 ，且 num 中 所有 数位都必须使用。\n\n * 比方说，给你 num = 2932 ，你拥有的数位包括：两个 2 ，一个 9 和一个 3 。一些可能的 [new1, new2] 数对为 [22, 93]，[23, 92]，[223, 9] 和 [2, 329] 。\n\n请你返回可以得到的 new1 和 new2 的 最小 和。\n\n示例 1：\n\n输入：num = 2932\n输出：52\n解释：可行的 [new1, new2] 数对为 [29, 23] ，[223, 9] 等等。\n最小和为数对 [29, 23] 的和：29 + 23 = 52 。\n\n\n1\n2\n3\n4\n\n\n示例 2：\n\n输入：num = 4009\n输出：13\n解释：可行的 [new1, new2] 数对为 [0, 49] ，[490, 0] 等等。\n最小和为数对 [4, 9] 的和：4 + 9 = 13 。\n\n\n1\n2\n3\n4\n\n\n提示：\n\n * 1000 <= num <= 9999\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-10 10:57:00\n * @lastedittime: 2022-11-10 11:09:25\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /imooc-jira/users/izhaong/izhaong/project_me/leetcode/2160.拆分数位后四位数字的最小和.ts\n */\n/*\n * @lc app=leetcode.cn id=2160 lang=typescript\n *\n * [2160] 拆分数位后四位数字的最小和\n *\n * https://leetcode.cn/problems/minimum-sum-of-four-digit-number-after-splitting-digits/description/\n *\n * algorithms\n * easy (85.20%)\n * likes:    21\n * dislikes: 0\n * total accepted:    11.1k\n * total submissions: 13k\n * testcase example:  '2932'\n *\n * 给你一个四位 正 整数 num 。请你使用 num 中的 数位 ，将 num 拆成两个新的整数 new1 和 new2 。new1 和 new2\n * 中可以有 前导 0 ，且 num 中 所有 数位都必须使用。\n *\n *\n * 比方说，给你 num = 2932 ，你拥有的数位包括：两个 2 ，一个 9 和一个 3 。一些可能的 [new1, new2] 数对为 [22,\n * 93]，[23, 92]，[223, 9] 和 [2, 329] 。\n *\n *\n * 请你返回可以得到的 new1 和 new2 的 最小 和。\n *\n *\n *\n * 示例 1：\n *\n * 输入：num = 2932\n * 输出：52\n * 解释：可行的 [new1, new2] 数对为 [29, 23] ，[223, 9] 等等。\n * 最小和为数对 [29, 23] 的和：29 + 23 = 52 。\n *\n *\n * 示例 2：\n *\n * 输入：num = 4009\n * 输出：13\n * 解释：可行的 [new1, new2] 数对为 [0, 49] ，[490, 0] 等等。\n * 最小和为数对 [4, 9] 的和：4 + 9 = 13 。\n *\n *\n *\n *\n * 提示：\n *\n *\n * 1000 <= num <= 9999\n *\n *\n */\n\n// @lc code=start\nfunction minimumsum(num: number): number {\n  const sortnumstr = string(num).split('').sort().join('');\n  return (\n    number(sortnumstr[0] + sortnumstr[2]) +\n    number(sortnumstr[1] + sortnumstr[3])\n  );\n}\n// @lc code=end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"excel-表中某个范围内的单元格",frontmatter:{title:"excel-表中某个范围内的单元格",date:"2022-11-11T13:59:12.000Z",permalink:"/pages/5e1bb5/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502194.excel-%E8%A1%A8%E4%B8%AD%E6%9F%90%E4%B8%AA%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC.html",relativePath:"30.其他技术/3050.算法/30502194.excel-表中某个范围内的单元格.md",key:"v-2b4555ef",path:"/pages/5e1bb5/",headersStr:null,content:'# Excel 表中某个范围内的单元格\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.66%)   15      -\n\nTags\n\n\n\nCompanies\n\n\n\nExcel 表中的一个单元格 (r, c) 会以字符串 "<col><row>" 的形式进行表示，其中：\n\n * <col>\n   \n   \n   1\n   \n   \n   即单元格的列号\n   \n   c\n   \n   \n   1\n   \n   \n   。用英文字母表中的\n   \n   字母\n   \n   标识。\n   \n   * 例如，第 1 列用 \'A\' 表示，第 2 列用 \'B\' 表示，第 3 列用 \'C\' 表示，以此类推。\n\n * <row> 即单元格的行号 r 。第 r 行就用 整数 r 标识。\n\n给你一个格式为 "<col1><row1>:<col2><row2>" 的字符串 s ，其中 <col1> 表示 c1 列，<row1> 表示 r1 行，<col2> 表示 c2 列，<row2> 表示 r2 行，并满足 r1 <= r2 且 c1 <= c2 。\n\n找出所有满足 r1 <= x <= r2 且 c1 <= y <= c2 的单元格，并以列表形式返回。单元格应该按前面描述的格式用 字符串 表示，并以 非递减 顺序排列（先按列排，再按行排）。\n\n示例 1：\n\n\n\n输入：s = "K1:L2"\n输出：["K1","K2","L1","L2"]\n解释：\n上图显示了列表中应该出现的单元格。\n红色箭头指示单元格的出现顺序。\n\n\n1\n2\n3\n4\n5\n\n\n示例 2：\n\n\n\n输入：s = "A1:F1"\n输出：["A1","B1","C1","D1","E1","F1"]\n解释：\n上图显示了列表中应该出现的单元格。 \n红色箭头指示单元格的出现顺序。\n\n\n1\n2\n3\n4\n5\n\n\n提示：\n\n * s.length == 5\n * \'A\' <= s[0] <= s[3] <= \'Z\'\n * \'1\' <= s[1] <= s[4] <= \'9\'\n * s 由大写英文字母、数字、和 \':\' 组成\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-11 11:30:21\n * @LastEditTime: 2022-11-11 13:58:41\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /loan-home/Users/izhaong/izhaong/Project_me/leetcode/2194.excel-表中某个范围内的单元格.js\n */\n/*\n * @lc app=leetcode.cn id=2194 lang=javascript\n *\n * [2194] Excel 表中某个范围内的单元格\n *\n * https://leetcode.cn/problems/cells-in-a-range-on-an-excel-sheet/description/\n *\n * algorithms\n * Easy (84.66%)\n * Likes:    15\n * Dislikes: 0\n * Total Accepted:    12.3K\n * Total Submissions: 14.5K\n * Testcase Example:  \'"K1:L2"\'\n *\n * Excel 表中的一个单元格 (r, c) 会以字符串 "<col><row>" 的形式进行表示，其中：\n *\n *\n * <col> 即单元格的列号 c 。用英文字母表中的 字母 标识。\n *\n *\n * 例如，第 1 列用 \'A\' 表示，第 2 列用 \'B\' 表示，第 3 列用 \'C\' 表示，以此类推。\n *\n *\n * <row> 即单元格的行号 r 。第 r 行就用 整数 r 标识。\n *\n *\n * 给你一个格式为 "<col1><row1>:<col2><row2>" 的字符串 s ，其中 <col1> 表示 c1 列，<row1> 表示 r1\n * 行，<col2> 表示 c2 列，<row2> 表示 r2 行，并满足 r1 <= r2 且 c1 <= c2 。\n *\n * 找出所有满足 r1 <= x <= r2 且 c1 <= y <= c2 的单元格，并以列表形式返回。单元格应该按前面描述的格式用 字符串 表示，并以\n * 非递减 顺序排列（先按列排，再按行排）。\n *\n *\n *\n * 示例 1：\n *\n *\n *\n *\n * 输入：s = "K1:L2"\n * 输出：["K1","K2","L1","L2"]\n * 解释：\n * 上图显示了列表中应该出现的单元格。\n * 红色箭头指示单元格的出现顺序。\n *\n *\n * 示例 2：\n *\n *\n *\n *\n * 输入：s = "A1:F1"\n * 输出：["A1","B1","C1","D1","E1","F1"]\n * 解释：\n * 上图显示了列表中应该出现的单元格。\n * 红色箭头指示单元格的出现顺序。\n *\n *\n *\n *\n * 提示：\n *\n *\n * s.length == 5\n * \'A\' <= s[0] <= s[3] <= \'Z\'\n * \'1\' <= s[1] <= s[4] <= \'9\'\n * s 由大写英文字母、数字、和 \':\' 组成\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {string} s\n * @return {string[]}\n */\n// var cellsInRange = function (s) {\n//   const [start, end] = s.split(":");\n//   const [sa, sw, sd] = /(^[A-Z])(\\d+)/.exec(start);\n//   const [ea, ew, ed] = /(^[A-Z])(\\d+)/.exec(end);\n//   let resArr = [];\n//   for (let i = sw.charCodeAt(); i <= ew.charCodeAt(); i++) {\n//     for (let j = 1; j <= ed - sd + 1; j++) {\n//       resArr.push(String.fromCharCode(i) + j);\n//     }\n//   }\n//   return resArr.length;\n// };\nvar cellsInRange = function (s) {\n  const colonIndex = s.indexOf(":");\n  const sw = s.slice(0, colonIndex)[0];\n  const sd = Number(s.slice(1, colonIndex));\n  const ew = s.slice(colonIndex + 1)[0];\n  const ed = Number(s.slice(colonIndex + 2)[0]);\n\n  let resArr = [];\n  for (let i = sw.charCodeAt(); i <= ew.charCodeAt(); i++) {\n    for (let j = 1; j <= ed - sd + 1; j++) {\n      resArr.push(String.fromCharCode(i) + j);\n    }\n  }\n  return resArr;\n};\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n',normalizedContent:'# excel 表中某个范围内的单元格\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.66%)   15      -\n\ntags\n\n\n\ncompanies\n\n\n\nexcel 表中的一个单元格 (r, c) 会以字符串 "<col><row>" 的形式进行表示，其中：\n\n * <col>\n   \n   \n   1\n   \n   \n   即单元格的列号\n   \n   c\n   \n   \n   1\n   \n   \n   。用英文字母表中的\n   \n   字母\n   \n   标识。\n   \n   * 例如，第 1 列用 \'a\' 表示，第 2 列用 \'b\' 表示，第 3 列用 \'c\' 表示，以此类推。\n\n * <row> 即单元格的行号 r 。第 r 行就用 整数 r 标识。\n\n给你一个格式为 "<col1><row1>:<col2><row2>" 的字符串 s ，其中 <col1> 表示 c1 列，<row1> 表示 r1 行，<col2> 表示 c2 列，<row2> 表示 r2 行，并满足 r1 <= r2 且 c1 <= c2 。\n\n找出所有满足 r1 <= x <= r2 且 c1 <= y <= c2 的单元格，并以列表形式返回。单元格应该按前面描述的格式用 字符串 表示，并以 非递减 顺序排列（先按列排，再按行排）。\n\n示例 1：\n\n\n\n输入：s = "k1:l2"\n输出：["k1","k2","l1","l2"]\n解释：\n上图显示了列表中应该出现的单元格。\n红色箭头指示单元格的出现顺序。\n\n\n1\n2\n3\n4\n5\n\n\n示例 2：\n\n\n\n输入：s = "a1:f1"\n输出：["a1","b1","c1","d1","e1","f1"]\n解释：\n上图显示了列表中应该出现的单元格。 \n红色箭头指示单元格的出现顺序。\n\n\n1\n2\n3\n4\n5\n\n\n提示：\n\n * s.length == 5\n * \'a\' <= s[0] <= s[3] <= \'z\'\n * \'1\' <= s[1] <= s[4] <= \'9\'\n * s 由大写英文字母、数字、和 \':\' 组成\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-11 11:30:21\n * @lastedittime: 2022-11-11 13:58:41\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /loan-home/users/izhaong/izhaong/project_me/leetcode/2194.excel-表中某个范围内的单元格.js\n */\n/*\n * @lc app=leetcode.cn id=2194 lang=javascript\n *\n * [2194] excel 表中某个范围内的单元格\n *\n * https://leetcode.cn/problems/cells-in-a-range-on-an-excel-sheet/description/\n *\n * algorithms\n * easy (84.66%)\n * likes:    15\n * dislikes: 0\n * total accepted:    12.3k\n * total submissions: 14.5k\n * testcase example:  \'"k1:l2"\'\n *\n * excel 表中的一个单元格 (r, c) 会以字符串 "<col><row>" 的形式进行表示，其中：\n *\n *\n * <col> 即单元格的列号 c 。用英文字母表中的 字母 标识。\n *\n *\n * 例如，第 1 列用 \'a\' 表示，第 2 列用 \'b\' 表示，第 3 列用 \'c\' 表示，以此类推。\n *\n *\n * <row> 即单元格的行号 r 。第 r 行就用 整数 r 标识。\n *\n *\n * 给你一个格式为 "<col1><row1>:<col2><row2>" 的字符串 s ，其中 <col1> 表示 c1 列，<row1> 表示 r1\n * 行，<col2> 表示 c2 列，<row2> 表示 r2 行，并满足 r1 <= r2 且 c1 <= c2 。\n *\n * 找出所有满足 r1 <= x <= r2 且 c1 <= y <= c2 的单元格，并以列表形式返回。单元格应该按前面描述的格式用 字符串 表示，并以\n * 非递减 顺序排列（先按列排，再按行排）。\n *\n *\n *\n * 示例 1：\n *\n *\n *\n *\n * 输入：s = "k1:l2"\n * 输出：["k1","k2","l1","l2"]\n * 解释：\n * 上图显示了列表中应该出现的单元格。\n * 红色箭头指示单元格的出现顺序。\n *\n *\n * 示例 2：\n *\n *\n *\n *\n * 输入：s = "a1:f1"\n * 输出：["a1","b1","c1","d1","e1","f1"]\n * 解释：\n * 上图显示了列表中应该出现的单元格。\n * 红色箭头指示单元格的出现顺序。\n *\n *\n *\n *\n * 提示：\n *\n *\n * s.length == 5\n * \'a\' <= s[0] <= s[3] <= \'z\'\n * \'1\' <= s[1] <= s[4] <= \'9\'\n * s 由大写英文字母、数字、和 \':\' 组成\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {string} s\n * @return {string[]}\n */\n// var cellsinrange = function (s) {\n//   const [start, end] = s.split(":");\n//   const [sa, sw, sd] = /(^[a-z])(\\d+)/.exec(start);\n//   const [ea, ew, ed] = /(^[a-z])(\\d+)/.exec(end);\n//   let resarr = [];\n//   for (let i = sw.charcodeat(); i <= ew.charcodeat(); i++) {\n//     for (let j = 1; j <= ed - sd + 1; j++) {\n//       resarr.push(string.fromcharcode(i) + j);\n//     }\n//   }\n//   return resarr.length;\n// };\nvar cellsinrange = function (s) {\n  const colonindex = s.indexof(":");\n  const sw = s.slice(0, colonindex)[0];\n  const sd = number(s.slice(1, colonindex));\n  const ew = s.slice(colonindex + 1)[0];\n  const ed = number(s.slice(colonindex + 2)[0]);\n\n  let resarr = [];\n  for (let i = sw.charcodeat(); i <= ew.charcodeat(); i++) {\n    for (let j = 1; j <= ed - sd + 1; j++) {\n      resarr.push(string.fromcharcode(i) + j);\n    }\n  }\n  return resarr;\n};\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n',charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"第一个出现两次的字母",frontmatter:{title:"第一个出现两次的字母",date:"2022-11-14T15:31:13.000Z",permalink:"/pages/17e5f7/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502351.%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%87%BA%E7%8E%B0%E4%B8%A4%E6%AC%A1%E7%9A%84%E5%AD%97%E6%AF%8D.html",relativePath:"30.其他技术/3050.算法/30502351.第一个出现两次的字母.md",key:"v-202ff976",path:"/pages/17e5f7/",headersStr:null,content:"# 第一个出现两次的字母\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.41%)   13      -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个由小写英文字母组成的字符串 s ，请你找出并返回第一个出现 两次 的字母。\n\n注意：\n\n * 如果 a 的 第二次 出现比 b 的 第二次 出现在字符串中的位置更靠前，则认为字母 a 在字母 b 之前出现两次。\n * s 包含至少一个出现两次的字母。\n\n示例 1：\n\n输入：s = \"abccbaacz\"\n输出：\"c\"\n解释：\n字母 'a' 在下标 0 、5 和 6 处出现。\n字母 'b' 在下标 1 和 4 处出现。\n字母 'c' 在下标 2 、3 和 7 处出现。\n字母 'z' 在下标 8 处出现。\n字母 'c' 是第一个出现两次的字母，因为在所有字母中，'c' 第二次出现的下标是最小的。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例 2：\n\n输入：s = \"abcdd\"\n输出：\"d\"\n解释：\n只有字母 'd' 出现两次，所以返回 'd' 。\n\n\n1\n2\n3\n4\n\n\n提示：\n\n * 2 <= s.length <= 100\n * s 由小写英文字母组成\n * s 包含至少一个重复字母\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-14 15:26:40\n * @LastEditTime: 2022-11-14 15:30:14\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /面试题1/Users/izhaong/izhaong/Project_me/leetcode/2351.第一个出现两次的字母.ts\n */\n/*\n * @lc app=leetcode.cn id=2351 lang=typescript\n *\n * [2351] 第一个出现两次的字母\n *\n * https://leetcode.cn/problems/first-letter-to-appear-twice/description/\n *\n * algorithms\n * Easy (84.41%)\n * Likes:    13\n * Dislikes: 0\n * Total Accepted:    13.4K\n * Total Submissions: 15.9K\n * Testcase Example:  '\"abccbaacz\"'\n *\n * 给你一个由小写英文字母组成的字符串 s ，请你找出并返回第一个出现 两次 的字母。\n * \n * 注意：\n * \n * \n * 如果 a 的 第二次 出现比 b 的 第二次 出现在字符串中的位置更靠前，则认为字母 a 在字母 b 之前出现两次。\n * s 包含至少一个出现两次的字母。\n * \n * \n * \n * \n * 示例 1：\n * \n * 输入：s = \"abccbaacz\"\n * 输出：\"c\"\n * 解释：\n * 字母 'a' 在下标 0 、5 和 6 处出现。\n * 字母 'b' 在下标 1 和 4 处出现。\n * 字母 'c' 在下标 2 、3 和 7 处出现。\n * 字母 'z' 在下标 8 处出现。\n * 字母 'c' 是第一个出现两次的字母，因为在所有字母中，'c' 第二次出现的下标是最小的。\n * \n * \n * 示例 2：\n * \n * 输入：s = \"abcdd\"\n * 输出：\"d\"\n * 解释：\n * 只有字母 'd' 出现两次，所以返回 'd' 。\n * \n * \n * \n * \n * 提示：\n * \n * \n * 2 <= s.length <= 100\n * s 由小写英文字母组成\n * s 包含至少一个重复字母\n * \n * \n */\n\n// @lc code=start\nfunction repeatedCharacter(s: string): string {\n    let had = ''\n    let res = ''\n    for (let i = 0; i < s.length; i++) {\n        const e = s[i];\n        if(had.indexOf(e) !== -1) {\n            res = e\n            break;\n        }\n        had += e\n    }\n    return res\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n",normalizedContent:"# 第一个出现两次的字母\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.41%)   13      -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个由小写英文字母组成的字符串 s ，请你找出并返回第一个出现 两次 的字母。\n\n注意：\n\n * 如果 a 的 第二次 出现比 b 的 第二次 出现在字符串中的位置更靠前，则认为字母 a 在字母 b 之前出现两次。\n * s 包含至少一个出现两次的字母。\n\n示例 1：\n\n输入：s = \"abccbaacz\"\n输出：\"c\"\n解释：\n字母 'a' 在下标 0 、5 和 6 处出现。\n字母 'b' 在下标 1 和 4 处出现。\n字母 'c' 在下标 2 、3 和 7 处出现。\n字母 'z' 在下标 8 处出现。\n字母 'c' 是第一个出现两次的字母，因为在所有字母中，'c' 第二次出现的下标是最小的。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例 2：\n\n输入：s = \"abcdd\"\n输出：\"d\"\n解释：\n只有字母 'd' 出现两次，所以返回 'd' 。\n\n\n1\n2\n3\n4\n\n\n提示：\n\n * 2 <= s.length <= 100\n * s 由小写英文字母组成\n * s 包含至少一个重复字母\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-14 15:26:40\n * @lastedittime: 2022-11-14 15:30:14\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /面试题1/users/izhaong/izhaong/project_me/leetcode/2351.第一个出现两次的字母.ts\n */\n/*\n * @lc app=leetcode.cn id=2351 lang=typescript\n *\n * [2351] 第一个出现两次的字母\n *\n * https://leetcode.cn/problems/first-letter-to-appear-twice/description/\n *\n * algorithms\n * easy (84.41%)\n * likes:    13\n * dislikes: 0\n * total accepted:    13.4k\n * total submissions: 15.9k\n * testcase example:  '\"abccbaacz\"'\n *\n * 给你一个由小写英文字母组成的字符串 s ，请你找出并返回第一个出现 两次 的字母。\n * \n * 注意：\n * \n * \n * 如果 a 的 第二次 出现比 b 的 第二次 出现在字符串中的位置更靠前，则认为字母 a 在字母 b 之前出现两次。\n * s 包含至少一个出现两次的字母。\n * \n * \n * \n * \n * 示例 1：\n * \n * 输入：s = \"abccbaacz\"\n * 输出：\"c\"\n * 解释：\n * 字母 'a' 在下标 0 、5 和 6 处出现。\n * 字母 'b' 在下标 1 和 4 处出现。\n * 字母 'c' 在下标 2 、3 和 7 处出现。\n * 字母 'z' 在下标 8 处出现。\n * 字母 'c' 是第一个出现两次的字母，因为在所有字母中，'c' 第二次出现的下标是最小的。\n * \n * \n * 示例 2：\n * \n * 输入：s = \"abcdd\"\n * 输出：\"d\"\n * 解释：\n * 只有字母 'd' 出现两次，所以返回 'd' 。\n * \n * \n * \n * \n * 提示：\n * \n * \n * 2 <= s.length <= 100\n * s 由小写英文字母组成\n * s 包含至少一个重复字母\n * \n * \n */\n\n// @lc code=start\nfunction repeatedcharacter(s: string): string {\n    let had = ''\n    let res = ''\n    for (let i = 0; i < s.length; i++) {\n        const e = s[i];\n        if(had.indexof(e) !== -1) {\n            res = e\n            break;\n        }\n        had += e\n    }\n    return res\n};\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"算术三元组的数目",frontmatter:{title:"算术三元组的数目",date:"2022-11-14T16:06:58.000Z",permalink:"/pages/798e78/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502367.%E7%AE%97%E6%9C%AF%E4%B8%89%E5%85%83%E7%BB%84%E7%9A%84%E6%95%B0%E7%9B%AE.html",relativePath:"30.其他技术/3050.算法/30502367.算术三元组的数目.md",key:"v-9bc8ee5e",path:"/pages/798e78/",headersStr:null,content:"# 算术三元组的数目\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.18%)   17      -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个下标从 0 开始、严格递增 的整数数组 nums 和一个正整数 diff 。如果满足下述全部条件，则三元组 (i, j, k) 就是一个 算术三元组 ：\n\n * i < j < k ，\n * nums[j] - nums[i] == diff 且\n * nums[k] - nums[j] == diff\n\n返回不同 算术三元组 的数目*。*\n\n示例 1：\n\n输入：nums = [0,1,4,6,7,10], diff = 3\n输出：2\n解释：\n(1, 2, 4) 是算术三元组：7 - 4 == 3 且 4 - 1 == 3 。\n(2, 4, 5) 是算术三元组：10 - 7 == 3 且 7 - 4 == 3 。\n\n\n1\n2\n3\n4\n5\n\n\n示例 2：\n\n输入：nums = [4,5,6,7,8,9], diff = 2\n输出：2\n解释：\n(0, 2, 4) 是算术三元组：8 - 6 == 2 且 6 - 4 == 2 。\n(1, 3, 5) 是算术三元组：9 - 7 == 2 且 7 - 5 == 2 。\n\n\n1\n2\n3\n4\n5\n\n\n提示：\n\n * 3 <= nums.length <= 200\n * 0 <= nums[i] <= 200\n * 1 <= diff <= 50\n * nums 严格 递增\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-14 15:56:11\n * @LastEditTime: 2022-11-14 16:06:11\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /面试题1/Users/izhaong/izhaong/Project_me/leetcode/2367.算术三元组的数目.ts\n */\n/*\n * @lc app=leetcode.cn id=2367 lang=typescript\n *\n * [2367] 算术三元组的数目\n *\n * https://leetcode.cn/problems/number-of-arithmetic-triplets/description/\n *\n * algorithms\n * Easy (84.18%)\n * Likes:    17\n * Dislikes: 0\n * Total Accepted:    13.1K\n * Total Submissions: 15.5K\n * Testcase Example:  '[0,1,4,6,7,10]\\n3'\n *\n * 给你一个下标从 0 开始、严格递增 的整数数组 nums 和一个正整数 diff 。如果满足下述全部条件，则三元组 (i, j, k) 就是一个\n * 算术三元组 ：\n *\n *\n * i < j < k ，\n * nums[j] - nums[i] == diff 且\n * nums[k] - nums[j] == diff\n *\n *\n * 返回不同 算术三元组 的数目。\n *\n *\n *\n * 示例 1：\n *\n * 输入：nums = [0,1,4,6,7,10], diff = 3\n * 输出：2\n * 解释：\n * (1, 2, 4) 是算术三元组：7 - 4 == 3 且 4 - 1 == 3 。\n * (2, 4, 5) 是算术三元组：10 - 7 == 3 且 7 - 4 == 3 。\n *\n *\n * 示例 2：\n *\n * 输入：nums = [4,5,6,7,8,9], diff = 2\n * 输出：2\n * 解释：\n * (0, 2, 4) 是算术三元组：8 - 6 == 2 且 6 - 4 == 2 。\n * (1, 3, 5) 是算术三元组：9 - 7 == 2 且 7 - 5 == 2 。\n *\n *\n *\n *\n * 提示：\n *\n *\n * 3 <= nums.length <= 200\n * 0 <= nums[i] <= 200\n * 1 <= diff <= 50\n * nums 严格 递增\n *\n *\n */\n\n// @lc code=start\nfunction arithmeticTriplets(nums: number[], diff: number): number {\n  const numsLen = nums.length;\n  let res = 0;\n  for (let i = 0; i < numsLen; i++) {\n    for (let j = i + 1; j < numsLen; j++) {\n      for (let k = j + 1; k < numsLen; k++) {\n        if (nums[j] - nums[i] === diff && nums[k] - nums[j] === diff) {\n          res++;\n        }\n      }\n    }\n  }\n  return res;\n}\nfunction arithmeticTriplets(nums: number[], diff: number): number {\n  const numsLen = nums.length;\n  let res = 0;\n  for (let i = 0; i < numsLen; i++) {\n    const nj = nums[i] + diff;\n    const nk = nj + diff;\n    if (nums.indexOf(nj) !== -1 && nums.indexOf(nk) !== -1) {\n      res++;\n    }\n  }\n  return res;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n",normalizedContent:"# 算术三元组的数目\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.18%)   17      -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个下标从 0 开始、严格递增 的整数数组 nums 和一个正整数 diff 。如果满足下述全部条件，则三元组 (i, j, k) 就是一个 算术三元组 ：\n\n * i < j < k ，\n * nums[j] - nums[i] == diff 且\n * nums[k] - nums[j] == diff\n\n返回不同 算术三元组 的数目*。*\n\n示例 1：\n\n输入：nums = [0,1,4,6,7,10], diff = 3\n输出：2\n解释：\n(1, 2, 4) 是算术三元组：7 - 4 == 3 且 4 - 1 == 3 。\n(2, 4, 5) 是算术三元组：10 - 7 == 3 且 7 - 4 == 3 。\n\n\n1\n2\n3\n4\n5\n\n\n示例 2：\n\n输入：nums = [4,5,6,7,8,9], diff = 2\n输出：2\n解释：\n(0, 2, 4) 是算术三元组：8 - 6 == 2 且 6 - 4 == 2 。\n(1, 3, 5) 是算术三元组：9 - 7 == 2 且 7 - 5 == 2 。\n\n\n1\n2\n3\n4\n5\n\n\n提示：\n\n * 3 <= nums.length <= 200\n * 0 <= nums[i] <= 200\n * 1 <= diff <= 50\n * nums 严格 递增\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-14 15:56:11\n * @lastedittime: 2022-11-14 16:06:11\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /面试题1/users/izhaong/izhaong/project_me/leetcode/2367.算术三元组的数目.ts\n */\n/*\n * @lc app=leetcode.cn id=2367 lang=typescript\n *\n * [2367] 算术三元组的数目\n *\n * https://leetcode.cn/problems/number-of-arithmetic-triplets/description/\n *\n * algorithms\n * easy (84.18%)\n * likes:    17\n * dislikes: 0\n * total accepted:    13.1k\n * total submissions: 15.5k\n * testcase example:  '[0,1,4,6,7,10]\\n3'\n *\n * 给你一个下标从 0 开始、严格递增 的整数数组 nums 和一个正整数 diff 。如果满足下述全部条件，则三元组 (i, j, k) 就是一个\n * 算术三元组 ：\n *\n *\n * i < j < k ，\n * nums[j] - nums[i] == diff 且\n * nums[k] - nums[j] == diff\n *\n *\n * 返回不同 算术三元组 的数目。\n *\n *\n *\n * 示例 1：\n *\n * 输入：nums = [0,1,4,6,7,10], diff = 3\n * 输出：2\n * 解释：\n * (1, 2, 4) 是算术三元组：7 - 4 == 3 且 4 - 1 == 3 。\n * (2, 4, 5) 是算术三元组：10 - 7 == 3 且 7 - 4 == 3 。\n *\n *\n * 示例 2：\n *\n * 输入：nums = [4,5,6,7,8,9], diff = 2\n * 输出：2\n * 解释：\n * (0, 2, 4) 是算术三元组：8 - 6 == 2 且 6 - 4 == 2 。\n * (1, 3, 5) 是算术三元组：9 - 7 == 2 且 7 - 5 == 2 。\n *\n *\n *\n *\n * 提示：\n *\n *\n * 3 <= nums.length <= 200\n * 0 <= nums[i] <= 200\n * 1 <= diff <= 50\n * nums 严格 递增\n *\n *\n */\n\n// @lc code=start\nfunction arithmetictriplets(nums: number[], diff: number): number {\n  const numslen = nums.length;\n  let res = 0;\n  for (let i = 0; i < numslen; i++) {\n    for (let j = i + 1; j < numslen; j++) {\n      for (let k = j + 1; k < numslen; k++) {\n        if (nums[j] - nums[i] === diff && nums[k] - nums[j] === diff) {\n          res++;\n        }\n      }\n    }\n  }\n  return res;\n}\nfunction arithmetictriplets(nums: number[], diff: number): number {\n  const numslen = nums.length;\n  let res = 0;\n  for (let i = 0; i < numslen; i++) {\n    const nj = nums[i] + diff;\n    const nk = nj + diff;\n    if (nums.indexof(nj) !== -1 && nums.indexof(nk) !== -1) {\n      res++;\n    }\n  }\n  return res;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"矩阵中的局部最大值",frontmatter:{title:"矩阵中的局部最大值",date:"2022-11-10T14:13:04.000Z",permalink:"/pages/6862b5/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/30502373.%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E6%9C%80%E5%A4%A7%E5%80%BC.html",relativePath:"30.其他技术/3050.算法/30502373.矩阵中的局部最大值.md",key:"v-999c427e",path:"/pages/6862b5/",headersStr:null,content:"# 矩阵中的局部最大值\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (84.79%)   11      -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个大小为 n x n 的整数矩阵 grid 。\n\n生成一个大小为 (n - 2) x (n - 2) 的整数矩阵 maxLocal ，并满足：\n\n * maxLocal[i][j] 等于 grid 中以 i + 1 行和 j + 1 列为中心的 3 x 3 矩阵中的 最大值 。\n\n换句话说，我们希望找出 grid 中每个 3 x 3 矩阵中的最大值。\n\n返回生成的矩阵。\n\n示例 1：\n\n\n\n输入：grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]\n输出：[[9,9],[8,6]]\n解释：原矩阵和生成的矩阵如上图所示。\n注意，生成的矩阵中，每个值都对应 grid 中一个相接的 3 x 3 矩阵的最大值。\n\n\n1\n2\n3\n4\n\n\n示例 2：\n\n\n\n输入：grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n输出：[[2,2,2],[2,2,2],[2,2,2]]\n解释：注意，2 包含在 grid 中每个 3 x 3 的矩阵中。\n\n\n1\n2\n3\n\n\n提示：\n\n * n == grid.length == grid[i].length\n * 3 <= n <= 100\n * 1 <= grid[i][j] <= 100\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-10 13:59:00\n * @LastEditTime: 2022-11-10 14:12:19\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /imooc-jira/Users/izhaong/izhaong/Project_me/leetcode/2373.矩阵中的局部最大值.js\n */\n/*\n * @lc app=leetcode.cn id=2373 lang=javascript\n *\n * [2373] 矩阵中的局部最大值\n *\n * https://leetcode.cn/problems/largest-local-values-in-a-matrix/description/\n *\n * algorithms\n * Easy (84.79%)\n * Likes:    11\n * Dislikes: 0\n * Total Accepted:    10.3K\n * Total Submissions: 12.1K\n * Testcase Example:  '[[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]'\n *\n * 给你一个大小为 n x n 的整数矩阵 grid 。\n *\n * 生成一个大小为 (n - 2) x (n - 2) 的整数矩阵  maxLocal ，并满足：\n *\n *\n * maxLocal[i][j] 等于 grid 中以 i + 1 行和 j + 1 列为中心的 3 x 3 矩阵中的 最大值 。\n *\n *\n * 换句话说，我们希望找出 grid 中每个 3 x 3 矩阵中的最大值。\n *\n * 返回生成的矩阵。\n *\n *\n *\n * 示例 1：\n *\n *\n *\n *\n * 输入：grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]\n * 输出：[[9,9],[8,6]]\n * 解释：原矩阵和生成的矩阵如上图所示。\n * 注意，生成的矩阵中，每个值都对应 grid 中一个相接的 3 x 3 矩阵的最大值。\n *\n * 示例 2：\n *\n *\n *\n *\n * 输入：grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n * 输出：[[2,2,2],[2,2,2],[2,2,2]]\n * 解释：注意，2 包含在 grid 中每个 3 x 3 的矩阵中。\n *\n *\n *\n *\n * 提示：\n *\n *\n * n == grid.length == grid[i].length\n * 3 <= n <= 100\n * 1 <= grid[i][j] <= 100\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nfunction largestLocal(grid) {\n  const n = grid.length - 2;\n  const resArr = new Array(n);\n  for (let i = 0; i < n; i++) {\n    resArr[i] = new Array(n);\n    for (let j = 0; j < n; j++) {\n      resArr[i][j] = Math.max(\n        grid[i][j],\n        grid[i][j + 1],\n        grid[i][j + 2],\n        grid[i + 2][j],\n        grid[i + 2][j + 1],\n        grid[i + 2][j + 2],\n        grid[i + 1][j],\n        grid[i + 1][j + 1],\n        grid[i + 1][j + 2]\n      );\n    }\n  }\n  return resArr;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n",normalizedContent:"# 矩阵中的局部最大值\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (84.79%)   11      -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个大小为 n x n 的整数矩阵 grid 。\n\n生成一个大小为 (n - 2) x (n - 2) 的整数矩阵 maxlocal ，并满足：\n\n * maxlocal[i][j] 等于 grid 中以 i + 1 行和 j + 1 列为中心的 3 x 3 矩阵中的 最大值 。\n\n换句话说，我们希望找出 grid 中每个 3 x 3 矩阵中的最大值。\n\n返回生成的矩阵。\n\n示例 1：\n\n\n\n输入：grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]\n输出：[[9,9],[8,6]]\n解释：原矩阵和生成的矩阵如上图所示。\n注意，生成的矩阵中，每个值都对应 grid 中一个相接的 3 x 3 矩阵的最大值。\n\n\n1\n2\n3\n4\n\n\n示例 2：\n\n\n\n输入：grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n输出：[[2,2,2],[2,2,2],[2,2,2]]\n解释：注意，2 包含在 grid 中每个 3 x 3 的矩阵中。\n\n\n1\n2\n3\n\n\n提示：\n\n * n == grid.length == grid[i].length\n * 3 <= n <= 100\n * 1 <= grid[i][j] <= 100\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-10 13:59:00\n * @lastedittime: 2022-11-10 14:12:19\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /imooc-jira/users/izhaong/izhaong/project_me/leetcode/2373.矩阵中的局部最大值.js\n */\n/*\n * @lc app=leetcode.cn id=2373 lang=javascript\n *\n * [2373] 矩阵中的局部最大值\n *\n * https://leetcode.cn/problems/largest-local-values-in-a-matrix/description/\n *\n * algorithms\n * easy (84.79%)\n * likes:    11\n * dislikes: 0\n * total accepted:    10.3k\n * total submissions: 12.1k\n * testcase example:  '[[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]'\n *\n * 给你一个大小为 n x n 的整数矩阵 grid 。\n *\n * 生成一个大小为 (n - 2) x (n - 2) 的整数矩阵  maxlocal ，并满足：\n *\n *\n * maxlocal[i][j] 等于 grid 中以 i + 1 行和 j + 1 列为中心的 3 x 3 矩阵中的 最大值 。\n *\n *\n * 换句话说，我们希望找出 grid 中每个 3 x 3 矩阵中的最大值。\n *\n * 返回生成的矩阵。\n *\n *\n *\n * 示例 1：\n *\n *\n *\n *\n * 输入：grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]\n * 输出：[[9,9],[8,6]]\n * 解释：原矩阵和生成的矩阵如上图所示。\n * 注意，生成的矩阵中，每个值都对应 grid 中一个相接的 3 x 3 矩阵的最大值。\n *\n * 示例 2：\n *\n *\n *\n *\n * 输入：grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\n * 输出：[[2,2,2],[2,2,2],[2,2,2]]\n * 解释：注意，2 包含在 grid 中每个 3 x 3 的矩阵中。\n *\n *\n *\n *\n * 提示：\n *\n *\n * n == grid.length == grid[i].length\n * 3 <= n <= 100\n * 1 <= grid[i][j] <= 100\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nfunction largestlocal(grid) {\n  const n = grid.length - 2;\n  const resarr = new array(n);\n  for (let i = 0; i < n; i++) {\n    resarr[i] = new array(n);\n    for (let j = 0; j < n; j++) {\n      resarr[i][j] = math.max(\n        grid[i][j],\n        grid[i][j + 1],\n        grid[i][j + 2],\n        grid[i + 2][j],\n        grid[i + 2][j + 1],\n        grid[i + 2][j + 2],\n        grid[i + 1][j],\n        grid[i + 1][j + 1],\n        grid[i + 1][j + 2]\n      );\n    }\n  }\n  return resarr;\n}\n// @lc code=end\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"滑动窗口最大值",frontmatter:{title:"滑动窗口最大值",date:"2024-04-08T16:21:10.000Z",permalink:"/pages/dd448c/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/3050239.%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html",relativePath:"30.其他技术/3050.算法/3050239. 滑动窗口最大值.md",key:"v-0ba7a38a",path:"/pages/dd448c/",headers:[{level:2,title:"题目",slug:"题目",normalizedTitle:"题目",charIndex:2},{level:2,title:"题解",slug:"题解",normalizedTitle:"题解",charIndex:627}],headersStr:"题目 题解",content:"# 题目\n\n239. 滑动窗口最大值\n\n困难\n\n相关标签\n\n相关企业\n\n提示\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回 滑动窗口中的最大值 。\n\n示例 1：\n\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n示例 2：\n\n输入：nums = [1], k = 1\n输出：[1]\n\n\n1\n2\n\n\n提示：\n\n * 1 <= nums.length <= 105\n * -104 <= nums[i] <= 104\n * 1 <= k <= nums.length\n\n\n# 题解\n\n * 暴力求解\n\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function (nums, k) {\n    let s = 0;\n    let e = s + k - 1;\n    const maxArr = []\n    for (let s = 0; e < nums.length; s++, e++) {\n        let max = nums[s];\n        for (let i = 0; i < k; i++) {\n            max = Math.max(nums[s+i], max)\n        }\n        maxArr.push(max)\n    }\n    return maxArr\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 栈\n\nvar maxSlidingWindow = function (nums, k) {\n    const ans = []\n    const stack = []\n\n    for (let i = 0; i < nums.length; i++) {\n        // in\n        while (stack.length && nums[stack[stack.length - 1]] <= nums[i]) {\n            stack.pop()\n        }\n        stack.push(i)\n        // out\n        if (i - stack[0] >= k) {\n            stack.shift()\n        }\n        // record\n        if (i > k-2) {\n            ans.push(nums[stack[0]])\n        }\n    }\n    return ans\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",normalizedContent:"# 题目\n\n239. 滑动窗口最大值\n\n困难\n\n相关标签\n\n相关企业\n\n提示\n\n给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n\n返回 滑动窗口中的最大值 。\n\n示例 1：\n\n输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n示例 2：\n\n输入：nums = [1], k = 1\n输出：[1]\n\n\n1\n2\n\n\n提示：\n\n * 1 <= nums.length <= 105\n * -104 <= nums[i] <= 104\n * 1 <= k <= nums.length\n\n\n# 题解\n\n * 暴力求解\n\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxslidingwindow = function (nums, k) {\n    let s = 0;\n    let e = s + k - 1;\n    const maxarr = []\n    for (let s = 0; e < nums.length; s++, e++) {\n        let max = nums[s];\n        for (let i = 0; i < k; i++) {\n            max = math.max(nums[s+i], max)\n        }\n        maxarr.push(max)\n    }\n    return maxarr\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 栈\n\nvar maxslidingwindow = function (nums, k) {\n    const ans = []\n    const stack = []\n\n    for (let i = 0; i < nums.length; i++) {\n        // in\n        while (stack.length && nums[stack[stack.length - 1]] <= nums[i]) {\n            stack.pop()\n        }\n        stack.push(i)\n        // out\n        if (i - stack[0] >= k) {\n            stack.shift()\n        }\n        // record\n        if (i > k-2) {\n            ans.push(nums[stack[0]])\n        }\n    }\n    return ans\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",charsets:{cjk:!0},lastUpdated:"2024/04/08, 16:26:17",lastUpdatedTimestamp:1712564777e3},{title:"有效的字母异位词",frontmatter:{title:"有效的字母异位词",date:"2024-04-08T16:22:41.000Z",permalink:"/pages/d46779/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/3050242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html",relativePath:"30.其他技术/3050.算法/3050242.有效的字母异位词.md",key:"v-46dca920",path:"/pages/d46779/",headers:[{level:2,title:"题解",slug:"题解",normalizedTitle:"题解",charIndex:507}],headersStr:"题解",content:"# 有效的字母异位词\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (66.23%)   891     -\n\nTags\n\nhash-table | sort\n\nCompanies\n\n给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。\n\n**注意：**若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。\n\n示例 1:\n\n输入: s = \"anagram\", t = \"nagaram\"\n输出: true\n\n\n1\n2\n\n\n示例 2:\n\n输入: s = \"rat\", t = \"car\"\n输出: false\n\n\n1\n2\n\n\n提示:\n\n * 1 <= s.length, t.length <= 5 * 104\n * s 和 t 仅包含小写字母\n\n进阶: 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？\n\n----------------------------------------\n\nDiscussion | Solution\n\n\n# 题解\n\n/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n  const ss = s.split('').sort().join('')\n  const st = t.split('').sort().join('') \n  return ss === st\n};\n/**\n * @description map\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function (s, t) {\n  const map = new Map();\n  for (let i = 0; i < s.length; i++) {\n    const e = s[i];\n    map.set(e, (map.get(e) ?? 0) + 1);\n  }\n  for (let i = 0; i < t.length; i++) {\n    const e = t[i];\n    if (map.get(e) === undefined) {\n      return false;\n    }\n    map.set(e, map.get(e) - 1);\n    if (map.get(e) === 0) {\n      map.delete(e);\n    }\n  }\n  return !map.size;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n",normalizedContent:"# 有效的字母异位词\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (66.23%)   891     -\n\ntags\n\nhash-table | sort\n\ncompanies\n\n给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。\n\n**注意：**若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。\n\n示例 1:\n\n输入: s = \"anagram\", t = \"nagaram\"\n输出: true\n\n\n1\n2\n\n\n示例 2:\n\n输入: s = \"rat\", t = \"car\"\n输出: false\n\n\n1\n2\n\n\n提示:\n\n * 1 <= s.length, t.length <= 5 * 104\n * s 和 t 仅包含小写字母\n\n进阶: 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？\n\n----------------------------------------\n\ndiscussion | solution\n\n\n# 题解\n\n/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isanagram = function(s, t) {\n  const ss = s.split('').sort().join('')\n  const st = t.split('').sort().join('') \n  return ss === st\n};\n/**\n * @description map\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isanagram = function (s, t) {\n  const map = new map();\n  for (let i = 0; i < s.length; i++) {\n    const e = s[i];\n    map.set(e, (map.get(e) ?? 0) + 1);\n  }\n  for (let i = 0; i < t.length; i++) {\n    const e = t[i];\n    if (map.get(e) === undefined) {\n      return false;\n    }\n    map.set(e, map.get(e) - 1);\n    if (map.get(e) === 0) {\n      map.delete(e);\n    }\n  }\n  return !map.size;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n",charsets:{cjk:!0},lastUpdated:"2024/04/08, 16:26:17",lastUpdatedTimestamp:1712564777e3},{title:"移动零",frontmatter:{title:"移动零",date:"2023-11-04T10:40:30.000Z",permalink:"/pages/d2126f/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/3050283.%20%E7%A7%BB%E5%8A%A8%E9%9B%B6.html",relativePath:"30.其他技术/3050.算法/3050283. 移动零.md",key:"v-02fb82dd",path:"/pages/d2126f/",headers:[{level:2,title:"题目",slug:"题目",normalizedTitle:"题目",charIndex:2},{level:2,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:240}],headersStr:"题目 代码",content:"# 题目\n\n283. 移动零\n\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。\n\n示例 1:\n\n输入: nums = [0,1,0,3,12] 输出: [1,3,12,0,0]\n\n示例 2:\n\n输入: nums = [0] 输出: [0]\n\n提示:\n\n * 1 <= nums.length <= 104\n * -231 <= nums[i] <= 231 - 1\n\n\n# 代码\n\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int j = 0;\n        for(int i = 0; i < nums.length; i++) {\n            if(nums[i] != 0) {\n                nums[j] = nums[i];\n                if(j != i) {\n                    nums[i] = 0;\n                }\n                j++;\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",normalizedContent:"# 题目\n\n283. 移动零\n\n给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。\n\n示例 1:\n\n输入: nums = [0,1,0,3,12] 输出: [1,3,12,0,0]\n\n示例 2:\n\n输入: nums = [0] 输出: [0]\n\n提示:\n\n * 1 <= nums.length <= 104\n * -231 <= nums[i] <= 231 - 1\n\n\n# 代码\n\nclass solution {\n    public void movezeroes(int[] nums) {\n        int j = 0;\n        for(int i = 0; i < nums.length; i++) {\n            if(nums[i] != 0) {\n                nums[j] = nums[i];\n                if(j != i) {\n                    nums[i] = 0;\n                }\n                j++;\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",charsets:{cjk:!0},lastUpdated:"2023/11/04, 10:56:47",lastUpdatedTimestamp:1699066607e3},{title:"接雨水",frontmatter:{title:"接雨水",date:"2024-04-08T16:25:25.000Z",permalink:"/pages/e3ef00/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305042.%E6%8E%A5%E9%9B%A8%E6%B0%B4.html",relativePath:"30.其他技术/3050.算法/305042.接雨水.md",key:"v-39bb54b4",path:"/pages/e3ef00/",headers:[{level:2,title:"接雨水",slug:"接雨水",normalizedTitle:"接雨水",charIndex:2},{level:2,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:485}],headersStr:"接雨水 代码",content:"# 接雨水\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Hard (63.24%)   5001    -\n\nTags\n\nCompanies\n\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n示例 1：\n\n\n\n输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n输出：6\n解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：height = [4,2,0,3,2,5]\n输出：9\n\n\n1\n2\n\n\n提示：\n\n * n == height.length\n * 1 <= n <= 2 * 104\n * 0 <= height[i] <= 105\n\n----------------------------------------\n\nDiscussion | Solution\n\n\n# 代码\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2024-02-06 12:36:21\n * @LastEditTime: 2024-02-06 13:11:52\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /leetcode/42.接雨水.js\n */\n/*\n * @lc app=leetcode.cn id=42 lang=javascript\n *\n * [42] 接雨水\n *\n * https://leetcode.cn/problems/trapping-rain-water/description/\n *\n * algorithms\n * Hard (63.24%)\n * Likes:    5001\n * Dislikes: 0\n * Total Accepted:    856.9K\n * Total Submissions: 1.4M\n * Testcase Example:  '[0,1,0,2,1,0,1,3,2,1,2,1]'\n *\n * 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n *\n *\n *\n * 示例 1：\n *\n *\n *\n *\n * 输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n * 输出：6\n * 解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\n *\n *\n * 示例 2：\n *\n *\n * 输入：height = [4,2,0,3,2,5]\n * 输出：9\n *\n *\n *\n *\n * 提示：\n *\n *\n * n == height.length\n * 1 <= n <= 2 * 10^4\n * 0 <= height[i] <= 10^5\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function (height) {\n    let area = 0\n    const stack = []\n    for (let i = 0; i < height.length; i++) {\n        while (stack.length && height[i] >= height[stack[stack.length - 1]]) {\n            const bh = height[stack.pop()]\n            if (!stack.length) {\n                break;\n            }\n            const end = stack[stack.length - 1]\n            const ca = (Math.min(height[end], height[i]) - bh) * (i - end - 1)\n            area += ca\n        }\n        stack.push(i)\n    }\n    return area\n\n};\n// @lc code=end\n\n// @after-stub-for-debug-begin\nmodule.exports = trap;\n// @after-stub-for-debug-end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n",normalizedContent:"# 接雨水\n\ncategory     difficulty      likes   dislikes\nalgorithms   hard (63.24%)   5001    -\n\ntags\n\ncompanies\n\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n示例 1：\n\n\n\n输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n输出：6\n解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\n\n\n1\n2\n3\n\n\n示例 2：\n\n输入：height = [4,2,0,3,2,5]\n输出：9\n\n\n1\n2\n\n\n提示：\n\n * n == height.length\n * 1 <= n <= 2 * 104\n * 0 <= height[i] <= 105\n\n----------------------------------------\n\ndiscussion | solution\n\n\n# 代码\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2024-02-06 12:36:21\n * @lastedittime: 2024-02-06 13:11:52\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /leetcode/42.接雨水.js\n */\n/*\n * @lc app=leetcode.cn id=42 lang=javascript\n *\n * [42] 接雨水\n *\n * https://leetcode.cn/problems/trapping-rain-water/description/\n *\n * algorithms\n * hard (63.24%)\n * likes:    5001\n * dislikes: 0\n * total accepted:    856.9k\n * total submissions: 1.4m\n * testcase example:  '[0,1,0,2,1,0,1,3,2,1,2,1]'\n *\n * 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n *\n *\n *\n * 示例 1：\n *\n *\n *\n *\n * 输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n * 输出：6\n * 解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\n *\n *\n * 示例 2：\n *\n *\n * 输入：height = [4,2,0,3,2,5]\n * 输出：9\n *\n *\n *\n *\n * 提示：\n *\n *\n * n == height.length\n * 1 <= n <= 2 * 10^4\n * 0 <= height[i] <= 10^5\n *\n *\n */\n\n// @lc code=start\n/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function (height) {\n    let area = 0\n    const stack = []\n    for (let i = 0; i < height.length; i++) {\n        while (stack.length && height[i] >= height[stack[stack.length - 1]]) {\n            const bh = height[stack.pop()]\n            if (!stack.length) {\n                break;\n            }\n            const end = stack[stack.length - 1]\n            const ca = (math.min(height[end], height[i]) - bh) * (i - end - 1)\n            area += ca\n        }\n        stack.push(i)\n    }\n    return area\n\n};\n// @lc code=end\n\n// @after-stub-for-debug-begin\nmodule.exports = trap;\n// @after-stub-for-debug-end\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n",charsets:{cjk:!0},lastUpdated:"2024/04/08, 16:26:17",lastUpdatedTimestamp:1712564777e3},{title:"字母异位词分组",frontmatter:{title:"字母异位词分组",date:"2024-04-08T16:22:10.000Z",permalink:"/pages/e35155/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305049.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.html",relativePath:"30.其他技术/3050.算法/305049.字母异位词分组.md",key:"v-637a46ad",path:"/pages/e35155/",headersStr:null,content:'# 字母异位词分组\n\nCATEGORY     DIFFICULTY        LIKES   DISLIKES\nalgorithms   Medium (67.84%)   1813    -\n\nTags\n\nCompanies\n\n给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。\n\n字母异位词 是由重新排列源单词的所有字母得到的一个新单词。\n\n示例 1:\n\n输入: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]\n输出: [["bat"],["nat","tan"],["ate","eat","tea"]]\n\n\n1\n2\n\n\n示例 2:\n\n输入: strs = [""]\n输出: [[""]]\n\n\n1\n2\n\n\n示例 3:\n\n输入: strs = ["a"]\n输出: [["a"]]\n\n\n1\n2\n\n\n提示：\n\n * 1 <= strs.length <= 104\n * 0 <= strs[i].length <= 100\n * strs[i] 仅包含小写字母\n\n----------------------------------------\n\nDiscussion | Solution\n\n/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function (strs) {\n  const map = new Map()\n  for (let i = 0; i < strs.length; i++) {\n    const w = strs[i];\n    const sw = w.split(\'\').sort().join(\'\')\n    if (!map.has(sw)) {\n      map.set(sw, [w])\n    } else {\n      map.set(sw, [...map.get(sw), w])\n    }\n  }\n  return Array.from(map.values())\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n',normalizedContent:'# 字母异位词分组\n\ncategory     difficulty        likes   dislikes\nalgorithms   medium (67.84%)   1813    -\n\ntags\n\ncompanies\n\n给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。\n\n字母异位词 是由重新排列源单词的所有字母得到的一个新单词。\n\n示例 1:\n\n输入: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]\n输出: [["bat"],["nat","tan"],["ate","eat","tea"]]\n\n\n1\n2\n\n\n示例 2:\n\n输入: strs = [""]\n输出: [[""]]\n\n\n1\n2\n\n\n示例 3:\n\n输入: strs = ["a"]\n输出: [["a"]]\n\n\n1\n2\n\n\n提示：\n\n * 1 <= strs.length <= 104\n * 0 <= strs[i].length <= 100\n * strs[i] 仅包含小写字母\n\n----------------------------------------\n\ndiscussion | solution\n\n/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupanagrams = function (strs) {\n  const map = new map()\n  for (let i = 0; i < strs.length; i++) {\n    const w = strs[i];\n    const sw = w.split(\'\').sort().join(\'\')\n    if (!map.has(sw)) {\n      map.set(sw, [w])\n    } else {\n      map.set(sw, [...map.get(sw), w])\n    }\n  }\n  return array.from(map.values())\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n',charsets:{cjk:!0},lastUpdated:"2024/04/08, 16:26:17",lastUpdatedTimestamp:1712564777e3},{title:"爬楼梯",frontmatter:{title:"爬楼梯",date:"2023-11-04T10:39:11.000Z",permalink:"/pages/6d7960/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305070.%20%E7%88%AC%E6%A5%BC%E6%A2%AF.html",relativePath:"30.其他技术/3050.算法/305070. 爬楼梯.md",key:"v-52830739",path:"/pages/6d7960/",headers:[{level:2,title:"题目",slug:"题目",normalizedTitle:"题目",charIndex:2},{level:2,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:234},{level:2,title:"题解",slug:"题解",normalizedTitle:"题解",charIndex:592}],headersStr:"题目 代码 题解",content:"# 题目\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n示例 1：\n\n输入：n = 2 输出：2 解释：有两种方法可以爬到楼顶。 1. 1 阶 + 1 阶 2. 2 阶\n\n示例 2：\n\n输入：n = 3 输出：3 解释：有三种方法可以爬到楼顶。 1. 1 阶 + 1 阶 + 1 阶 2. 1 阶 + 2 阶 3. 2 阶 + 1 阶\n\n提示：\n\n * 1 <= n <= 45\n\n\n# 代码\n\n// f(1): 1\n// f(2): 2\n// f(3): 3\n// f(4): 5\n// f(n): f(n-1) + f(n-2)\n\nclass Solution {\n    public int climbStairs(int n) {\n        int [] f = new int[n+1];\n        f[0] = 1;\n        f[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2];\n        }\n        return f[n];\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 题解\n\n首先找最近重复, 类似斐波那契数列\n\n把所有的f(i)全部存起来, 通过遍历计算到fn就可以了",normalizedContent:"# 题目\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n示例 1：\n\n输入：n = 2 输出：2 解释：有两种方法可以爬到楼顶。 1. 1 阶 + 1 阶 2. 2 阶\n\n示例 2：\n\n输入：n = 3 输出：3 解释：有三种方法可以爬到楼顶。 1. 1 阶 + 1 阶 + 1 阶 2. 1 阶 + 2 阶 3. 2 阶 + 1 阶\n\n提示：\n\n * 1 <= n <= 45\n\n\n# 代码\n\n// f(1): 1\n// f(2): 2\n// f(3): 3\n// f(4): 5\n// f(n): f(n-1) + f(n-2)\n\nclass solution {\n    public int climbstairs(int n) {\n        int [] f = new int[n+1];\n        f[0] = 1;\n        f[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2];\n        }\n        return f[n];\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 题解\n\n首先找最近重复, 类似斐波那契数列\n\n把所有的f(i)全部存起来, 通过遍历计算到fn就可以了",charsets:{cjk:!0},lastUpdated:"2023/11/04, 10:56:47",lastUpdatedTimestamp:1699066607e3},{title:"宝石与石头",frontmatter:{title:"宝石与石头",date:"2022-11-09T11:43:13.000Z",permalink:"/pages/8777d6/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/3050771.%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4.html",relativePath:"30.其他技术/3050.算法/3050771.宝石与石头.md",key:"v-11f041eb",path:"/pages/8777d6/",headersStr:null,content:'# 宝石与石头\n\nCATEGORY     DIFFICULTY      LIKES   DISLIKES\nalgorithms   Easy (85.22%)   721     -\n\nTags\n\n\n\nCompanies\n\n\n\n给你一个字符串 jewels 代表石头中宝石的类型，另有一个字符串 stones 代表你拥有的石头。 stones 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。\n\n字母区分大小写，因此 "a" 和 "A" 是不同类型的石头。\n\n示例 1：\n\n输入：jewels = "aA", stones = "aAAbbbb"\n输出：3\n\n\n1\n2\n\n\n示例 2：\n\n输入：jewels = "z", stones = "ZZ"\n输出：0\n\n\n1\n2\n\n\n提示：\n\n * 1 <= jewels.length, stones.length <= 50\n * jewels 和 stones 仅由英文字母组成\n * jewels 中的所有字符都是 唯一的\n\n----------------------------------------\n\nDiscussion | Solution\n\n----------------------------------------\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-11-09 11:42:49\n * @LastEditTime: 2022-11-09 11:45:45\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: /leetcode/771.宝石与石头.ts\n */\n/*\n * @lc app=leetcode.cn id=771 lang=typescript\n *\n * [771] 宝石与石头\n *\n * https://leetcode.cn/problems/jewels-and-stones/description/\n *\n * algorithms\n * Easy (85.22%)\n * Likes:    721\n * Dislikes: 0\n * Total Accepted:    174.5K\n * Total Submissions: 204.8K\n * Testcase Example:  \'"aA"\\n"aAAbbbb"\'\n *\n *  给你一个字符串 jewels 代表石头中宝石的类型，另有一个字符串 stones 代表你拥有的石头。 stones\n * 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。\n * \n * 字母区分大小写，因此 "a" 和 "A" 是不同类型的石头。\n * \n * \n * \n * 示例 1：\n * \n * \n * 输入：jewels = "aA", stones = "aAAbbbb"\n * 输出：3\n * \n * \n * 示例 2：\n * \n * \n * 输入：jewels = "z", stones = "ZZ"\n * 输出：0\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= jewels.length, stones.length <= 50\n * jewels 和 stones 仅由英文字母组成\n * jewels 中的所有字符都是 唯一的\n * \n * \n */\n\n// @lc code=start\nfunction numJewelsInStones(jewels: string, stones: string): number {\n    let num = 0\n    for (let i = 0; i < stones.length; i++) {\n        const s = stones[i];\n        if(jewels.indexOf(s) !== -1) {\n            num ++\n        }\n    }\n    return num\n};\n\nfunction numJewelsInStones1(jewels: string, stones: string): number {\n  const jewelsSet = new Set(jewels.split(""));\n  return stones.split("").reduce((prev, val) => {\n    return prev + jewelsSet.has(val);\n  }, 0);\n}\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n',normalizedContent:'# 宝石与石头\n\ncategory     difficulty      likes   dislikes\nalgorithms   easy (85.22%)   721     -\n\ntags\n\n\n\ncompanies\n\n\n\n给你一个字符串 jewels 代表石头中宝石的类型，另有一个字符串 stones 代表你拥有的石头。 stones 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。\n\n字母区分大小写，因此 "a" 和 "a" 是不同类型的石头。\n\n示例 1：\n\n输入：jewels = "aa", stones = "aaabbbb"\n输出：3\n\n\n1\n2\n\n\n示例 2：\n\n输入：jewels = "z", stones = "zz"\n输出：0\n\n\n1\n2\n\n\n提示：\n\n * 1 <= jewels.length, stones.length <= 50\n * jewels 和 stones 仅由英文字母组成\n * jewels 中的所有字符都是 唯一的\n\n----------------------------------------\n\ndiscussion | solution\n\n----------------------------------------\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-11-09 11:42:49\n * @lastedittime: 2022-11-09 11:45:45\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: /leetcode/771.宝石与石头.ts\n */\n/*\n * @lc app=leetcode.cn id=771 lang=typescript\n *\n * [771] 宝石与石头\n *\n * https://leetcode.cn/problems/jewels-and-stones/description/\n *\n * algorithms\n * easy (85.22%)\n * likes:    721\n * dislikes: 0\n * total accepted:    174.5k\n * total submissions: 204.8k\n * testcase example:  \'"aa"\\n"aaabbbb"\'\n *\n *  给你一个字符串 jewels 代表石头中宝石的类型，另有一个字符串 stones 代表你拥有的石头。 stones\n * 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。\n * \n * 字母区分大小写，因此 "a" 和 "a" 是不同类型的石头。\n * \n * \n * \n * 示例 1：\n * \n * \n * 输入：jewels = "aa", stones = "aaabbbb"\n * 输出：3\n * \n * \n * 示例 2：\n * \n * \n * 输入：jewels = "z", stones = "zz"\n * 输出：0\n * \n * \n * \n * \n * 提示：\n * \n * \n * 1 <= jewels.length, stones.length <= 50\n * jewels 和 stones 仅由英文字母组成\n * jewels 中的所有字符都是 唯一的\n * \n * \n */\n\n// @lc code=start\nfunction numjewelsinstones(jewels: string, stones: string): number {\n    let num = 0\n    for (let i = 0; i < stones.length; i++) {\n        const s = stones[i];\n        if(jewels.indexof(s) !== -1) {\n            num ++\n        }\n    }\n    return num\n};\n\nfunction numjewelsinstones1(jewels: string, stones: string): number {\n  const jewelsset = new set(jewels.split(""));\n  return stones.split("").reduce((prev, val) => {\n    return prev + jewelsset.has(val);\n  }, 0);\n}\n// @lc code=end\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n',charsets:{cjk:!0},lastUpdated:"2022/11/09, 12:24:33",lastUpdatedTimestamp:1667967873e3},{title:"柱状图中最大的矩形",frontmatter:{title:"柱状图中最大的矩形",date:"2024-01-28T16:56:10.000Z",permalink:"/pages/e9e1e8/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/305084.%20%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2.html",relativePath:"30.其他技术/3050.算法/305084. 柱状图中最大的矩形.md",key:"v-14a0ffc2",path:"/pages/e9e1e8/",headers:[{level:2,title:"题目",slug:"题目",normalizedTitle:"题目",charIndex:2},{level:2,title:"题解",slug:"题解",normalizedTitle:"题解",charIndex:290}],headersStr:"题目 题解",content:"# 题目\n\n84. 柱状图中最大的矩形\n\n困难\n\n相关标签\n\n相关企业\n\n给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n\n求在该柱状图中，能够勾勒出来的矩形的最大面积。\n\n示例 1:\n\n\n\n输入：heights = [2,1,5,6,2,3]\n输出：10\n解释：最大的矩形为图中红色区域，面积为 10\n\n\n1\n2\n3\n\n\n示例 2：\n\n\n\n输入： heights = [2,4]\n输出： 4\n\n\n1\n2\n\n\n提示：\n\n * 1 <= heights.length <=105\n * 0 <= heights[i] <= 104\n\n\n# 题解\n\n/**\n * 暴力1\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function (heights) {\n    let maxArea = 0;\n    for (let i = 0; i < heights.length - 1; i++) {\n        for (let j = i + 1; j < heights.length; j++) {\n            const minHeight = Math.min(...heights.slice(i, j+1))\n            maxArea = Math.max(maxArea, (j - i + 1) * minHeight)\n        }\n    }\n    return maxArea\n};\n/**\n * 暴力2  找边界\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function (heights) {\n    let maxArea = 0;\n    for (let i = 0; i < heights.length - 1; i++) {\n        const curHeight = heights[i]\n        let leftBound = i;\n        let rightBound = i;\n        while(leftBound-1 >= 0 && heights[leftBound-1] >= curHeight ) {\n            leftBound --\n        }\n        while(rightBound+1 <= heights.length && heights[rightBound+1] >= curHeight ) {\n            rightBound ++\n        }\n        maxArea = Math.max(maxArea, (rightBound - leftBound + 1) * curHeight)\n    }\n    return maxArea\n};\n/**\n * 栈方法\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function (heights) {\n    let maxArea = 0;\n    const stackArr = [];\n    heights = [0, ...heights, 0]\n    for (let i = 0; i < heights.length; i++) {\n        while (stackArr.length && heights[stackArr[stackArr.length - 1]] > heights[i]) {\n            const stackPopIndex = stackArr.pop() // 栈顶元素出栈，并保存栈顶bar的索引\n            maxArea = Math.max(maxArea, heights[stackPopIndex] * (i - stackArr[stackArr.length - 1] - 1))\n        }\n        stackArr.push(i)\n    }\n    return maxArea\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n",normalizedContent:"# 题目\n\n84. 柱状图中最大的矩形\n\n困难\n\n相关标签\n\n相关企业\n\n给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n\n求在该柱状图中，能够勾勒出来的矩形的最大面积。\n\n示例 1:\n\n\n\n输入：heights = [2,1,5,6,2,3]\n输出：10\n解释：最大的矩形为图中红色区域，面积为 10\n\n\n1\n2\n3\n\n\n示例 2：\n\n\n\n输入： heights = [2,4]\n输出： 4\n\n\n1\n2\n\n\n提示：\n\n * 1 <= heights.length <=105\n * 0 <= heights[i] <= 104\n\n\n# 题解\n\n/**\n * 暴力1\n * @param {number[]} heights\n * @return {number}\n */\nvar largestrectanglearea = function (heights) {\n    let maxarea = 0;\n    for (let i = 0; i < heights.length - 1; i++) {\n        for (let j = i + 1; j < heights.length; j++) {\n            const minheight = math.min(...heights.slice(i, j+1))\n            maxarea = math.max(maxarea, (j - i + 1) * minheight)\n        }\n    }\n    return maxarea\n};\n/**\n * 暴力2  找边界\n * @param {number[]} heights\n * @return {number}\n */\nvar largestrectanglearea = function (heights) {\n    let maxarea = 0;\n    for (let i = 0; i < heights.length - 1; i++) {\n        const curheight = heights[i]\n        let leftbound = i;\n        let rightbound = i;\n        while(leftbound-1 >= 0 && heights[leftbound-1] >= curheight ) {\n            leftbound --\n        }\n        while(rightbound+1 <= heights.length && heights[rightbound+1] >= curheight ) {\n            rightbound ++\n        }\n        maxarea = math.max(maxarea, (rightbound - leftbound + 1) * curheight)\n    }\n    return maxarea\n};\n/**\n * 栈方法\n * @param {number[]} heights\n * @return {number}\n */\nvar largestrectanglearea = function (heights) {\n    let maxarea = 0;\n    const stackarr = [];\n    heights = [0, ...heights, 0]\n    for (let i = 0; i < heights.length; i++) {\n        while (stackarr.length && heights[stackarr[stackarr.length - 1]] > heights[i]) {\n            const stackpopindex = stackarr.pop() // 栈顶元素出栈，并保存栈顶bar的索引\n            maxarea = math.max(maxarea, heights[stackpopindex] * (i - stackarr[stackarr.length - 1] - 1))\n        }\n        stackarr.push(i)\n    }\n    return maxarea\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n",charsets:{cjk:!0},lastUpdated:"2024/01/28, 17:03:40",lastUpdatedTimestamp:170643262e4},{title:"快速排序",frontmatter:{title:"快速排序",date:"2022-05-31T17:39:07.000Z",permalink:"/pages/74033f/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html",relativePath:"30.其他技术/3050.算法/快速排序.md",key:"v-c4b199f0",path:"/pages/74033f/",headers:[{level:3,title:"功能测试",slug:"功能测试",normalizedTitle:"功能测试",charIndex:1527},{level:3,title:"单元测试",slug:"单元测试",normalizedTitle:"单元测试",charIndex:1660},{level:3,title:"性能测试",slug:"性能测试",normalizedTitle:"性能测试",charIndex:2562}],headersStr:"功能测试 单元测试 性能测试",content:"/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-05-31 12:59:40\n * @LastEditTime: 2022-05-31 14:34:29\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /question100/src/01-algorithm/快速排序.ts\n */\n\nexport function quickSort1(arr: number[]): number[] {\n    const length = arr.length;\n    if (!length) return [];\n\n    const midIndex = Math.floor(length / 2);\n    const midValue = arr.splice(midIndex, 1)[0];\n\n    const left: number[] = [];\n    const right: number[] = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const e = arr[i];\n        if (e > midValue) {\n            right.push(e);\n        } else {\n            left.push(e);\n        }\n    }\n    return quickSort1(left).concat([midValue], quickSort1(right));\n}\n\nexport function quickSort2(arr: number[]): number[] {\n    const length = arr.length;\n    if (length === 0) return arr;\n\n    const midIndex = Math.floor(length / 2);\n    const midValue = arr.slice(midIndex, midIndex + 1)[0];\n    const left: number[] = [];\n    const right: number[] = [];\n\n    for (let i = 0; i < length; i++) {\n        if (i !== midIndex) {\n            const n = arr[i];\n            if (n < midValue) {\n                left.push(n);\n            } else {\n                right.push(n);\n            }\n        }\n    }\n\n    return quickSort2(left).concat([midValue], quickSort2(right));\n}\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 功能测试\n\n// 功能测试\nconst arr = [1, 3, 5, 2, 4, 6, 9, 7, 8];\n// console.log(quickSort1(arr));\nconsole.log(quickSort2(arr));\n\n\n1\n2\n3\n4\n\n\n\n# 单元测试\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-05-31 14:16:38\n * @LastEditTime: 2022-05-31 14:34:56\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /question100/src/01-algorithm/快速排序.test.ts\n */\nimport { quickSort2 as quickSort } from './快速排序';\ndescribe('快速排序', () => {\n    it('正常情况', () => {\n        const arr = [1, 3, 5, 2, 4, 6, 9, 7, 8];\n        expect(quickSort(arr)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    });\n\n    it('空数组', () => {\n        expect(quickSort([])).toEqual([]);\n    });\n    it('已排序数组', () => {\n        const arr = [1, 2, 3, 4, 5, 6, 7, 8];\n        expect(quickSort(arr)).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);\n    });\n\n    it('连续数组', () => {\n        const arr = [5, 5, 5, 5, 5];\n        expect(quickSort(arr)).toEqual([5, 5, 5, 5, 5]);\n    });\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 性能测试",normalizedContent:"/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-05-31 12:59:40\n * @lastedittime: 2022-05-31 14:34:29\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /question100/src/01-algorithm/快速排序.ts\n */\n\nexport function quicksort1(arr: number[]): number[] {\n    const length = arr.length;\n    if (!length) return [];\n\n    const midindex = math.floor(length / 2);\n    const midvalue = arr.splice(midindex, 1)[0];\n\n    const left: number[] = [];\n    const right: number[] = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const e = arr[i];\n        if (e > midvalue) {\n            right.push(e);\n        } else {\n            left.push(e);\n        }\n    }\n    return quicksort1(left).concat([midvalue], quicksort1(right));\n}\n\nexport function quicksort2(arr: number[]): number[] {\n    const length = arr.length;\n    if (length === 0) return arr;\n\n    const midindex = math.floor(length / 2);\n    const midvalue = arr.slice(midindex, midindex + 1)[0];\n    const left: number[] = [];\n    const right: number[] = [];\n\n    for (let i = 0; i < length; i++) {\n        if (i !== midindex) {\n            const n = arr[i];\n            if (n < midvalue) {\n                left.push(n);\n            } else {\n                right.push(n);\n            }\n        }\n    }\n\n    return quicksort2(left).concat([midvalue], quicksort2(right));\n}\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 功能测试\n\n// 功能测试\nconst arr = [1, 3, 5, 2, 4, 6, 9, 7, 8];\n// console.log(quicksort1(arr));\nconsole.log(quicksort2(arr));\n\n\n1\n2\n3\n4\n\n\n\n# 单元测试\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-05-31 14:16:38\n * @lastedittime: 2022-05-31 14:34:56\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /question100/src/01-algorithm/快速排序.test.ts\n */\nimport { quicksort2 as quicksort } from './快速排序';\ndescribe('快速排序', () => {\n    it('正常情况', () => {\n        const arr = [1, 3, 5, 2, 4, 6, 9, 7, 8];\n        expect(quicksort(arr)).toequal([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    });\n\n    it('空数组', () => {\n        expect(quicksort([])).toequal([]);\n    });\n    it('已排序数组', () => {\n        const arr = [1, 2, 3, 4, 5, 6, 7, 8];\n        expect(quicksort(arr)).toequal([1, 2, 3, 4, 5, 6, 7, 8]);\n    });\n\n    it('连续数组', () => {\n        const arr = [5, 5, 5, 5, 5];\n        expect(quicksort(arr)).toequal([5, 5, 5, 5, 5]);\n    });\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 性能测试",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"求连续最多的字符和次数",frontmatter:{title:"求连续最多的字符和次数",date:"2022-05-30T16:43:58.000Z",permalink:"/pages/96f8e3/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/%E6%B1%82%E8%BF%9E%E7%BB%AD%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%92%8C%E6%AC%A1%E6%95%B0.html",relativePath:"30.其他技术/3050.算法/求连续最多的字符和次数.md",key:"v-56a682c3",path:"/pages/96f8e3/",headers:[{level:3,title:"双指针",slug:"双指针",normalizedTitle:"双指针",charIndex:2}],headersStr:"双指针",content:"# 双指针\n\n * 定义指针 i 和 j。j 不动 , i 继续移动\n * 如果 i 和 j 的值一直相等, 则 i 继续移动\n * 知道 i 和 j 的值不相等, 记录处理, 让 j 追上i. 继续下一步",normalizedContent:"# 双指针\n\n * 定义指针 i 和 j。j 不动 , i 继续移动\n * 如果 i 和 j 的值一直相等, 则 i 继续移动\n * 知道 i 和 j 的值不相等, 记录处理, 让 j 追上i. 继续下一步",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"获取1-10000所有的回文数",frontmatter:{title:"获取1-10000所有的回文数",date:"2022-05-31T18:07:44.000Z",permalink:"/pages/041ec3/",categories:["其他技术","算法"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3050.%E7%AE%97%E6%B3%95/%E8%8E%B7%E5%8F%961-10000%E6%89%80%E6%9C%89%E7%9A%84%E5%9B%9E%E6%96%87%E6%95%B0.html",relativePath:"30.其他技术/3050.算法/获取1-10000所有的回文数.md",key:"v-7f3d874b",path:"/pages/041ec3/",headers:[{level:3,title:"单元测试",slug:"单元测试",normalizedTitle:"单元测试",charIndex:1840},{level:3,title:"功能测试",slug:"功能测试",normalizedTitle:"功能测试",charIndex:1849},{level:3,title:"性能测试",slug:"性能测试",normalizedTitle:"性能测试",charIndex:2014}],headersStr:"单元测试 功能测试 性能测试",content:"> 获取1-10000所有的回文数\n\n\n/**\n * @description: api\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} max\n * @return {*}\n */\nfunction findPalindromeNumbers1(max: number): number[] {\n    const res: number[] = [];\n    if (max <= 0) return res;\n\n    for (let i = 0; i < max; i++) {\n        const s = i.toString();\n        if (s === s.split('').reverse().join('')) {\n            res.push(i);\n        }\n    }\n    return res;\n}\n\n/**\n * @description: 字符串\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} max\n * @return {*}\n */\nfunction findPalindromeNumbers2(max: number): number[] {\n    const res: number[] = [];\n    if (max <= 0) return res;\n\n    for (let i = 0; i < max; i++) {\n        const s = i.toString();\n        let start = 0;\n        let end = s.length - 1;\n        let flag = true;\n        while (start < end) {\n            if (s[start] !== s[end]) {\n                flag = false;\n                break;\n            } else {\n                start++;\n                end--;\n            }\n        }\n        if (flag) res.push(i);\n    }\n    return res;\n}\n\n/**\n * @description: 数字\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} max\n * @return {*}\n */\nfunction findPalindromeNumbers3(max: number): number[] {\n    const res: number[] = [];\n    if (max <= 0) return res;\n\n    for (let i = 0; i < max; i++) {\n        let n = i; // 123 12 1 0\n        let rev = 0; // 0 3 32 321\n\n        while (n > 0) {\n            // t t t t f\n            rev = rev * 10 + (n % 10); // 0+3 30+2 320+1\n            n = Math.floor(n / 10); // 12 1 0\n        }\n        if (rev === i) res.push(i);\n    }\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n\n\n\n# 单元测试\n\n\n# 功能测试\n\nconsole.log(findPalindromeNumbers1(10 * 1000));\nconsole.log(findPalindromeNumbers2(10 * 1000));\nconsole.log(findPalindromeNumbers3(10 * 1000));\n\n\n1\n2\n3\n\n\n\n\n\n# 性能测试\n\nconst num = 1000 * 1000\nconsole.time('findPalindromeNumbers1')\nfindPalindromeNumbers1(num)\nconsole.timeEnd('findPalindromeNumbers1') // 284ms\n\nconsole.time('findPalindromeNumbers2')\nfindPalindromeNumbers2(num)\nconsole.timeEnd('findPalindromeNumbers2') // 48ms\n\nconsole.time('findPalindromeNumbers3')\nfindPalindromeNumbers3(num)\nconsole.timeEnd('findPalindromeNumbers3') // 34ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n",normalizedContent:"> 获取1-10000所有的回文数\n\n\n/**\n * @description: api\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} max\n * @return {*}\n */\nfunction findpalindromenumbers1(max: number): number[] {\n    const res: number[] = [];\n    if (max <= 0) return res;\n\n    for (let i = 0; i < max; i++) {\n        const s = i.tostring();\n        if (s === s.split('').reverse().join('')) {\n            res.push(i);\n        }\n    }\n    return res;\n}\n\n/**\n * @description: 字符串\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} max\n * @return {*}\n */\nfunction findpalindromenumbers2(max: number): number[] {\n    const res: number[] = [];\n    if (max <= 0) return res;\n\n    for (let i = 0; i < max; i++) {\n        const s = i.tostring();\n        let start = 0;\n        let end = s.length - 1;\n        let flag = true;\n        while (start < end) {\n            if (s[start] !== s[end]) {\n                flag = false;\n                break;\n            } else {\n                start++;\n                end--;\n            }\n        }\n        if (flag) res.push(i);\n    }\n    return res;\n}\n\n/**\n * @description: 数字\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @param {number} max\n * @return {*}\n */\nfunction findpalindromenumbers3(max: number): number[] {\n    const res: number[] = [];\n    if (max <= 0) return res;\n\n    for (let i = 0; i < max; i++) {\n        let n = i; // 123 12 1 0\n        let rev = 0; // 0 3 32 321\n\n        while (n > 0) {\n            // t t t t f\n            rev = rev * 10 + (n % 10); // 0+3 30+2 320+1\n            n = math.floor(n / 10); // 12 1 0\n        }\n        if (rev === i) res.push(i);\n    }\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n\n\n\n# 单元测试\n\n\n# 功能测试\n\nconsole.log(findpalindromenumbers1(10 * 1000));\nconsole.log(findpalindromenumbers2(10 * 1000));\nconsole.log(findpalindromenumbers3(10 * 1000));\n\n\n1\n2\n3\n\n\n\n\n\n# 性能测试\n\nconst num = 1000 * 1000\nconsole.time('findpalindromenumbers1')\nfindpalindromenumbers1(num)\nconsole.timeend('findpalindromenumbers1') // 284ms\n\nconsole.time('findpalindromenumbers2')\nfindpalindromenumbers2(num)\nconsole.timeend('findpalindromenumbers2') // 48ms\n\nconsole.time('findpalindromenumbers3')\nfindpalindromenumbers3(num)\nconsole.timeend('findpalindromenumbers3') // 34ms\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"搭建内网穿透服务器 基于frp",frontmatter:{title:"搭建内网穿透服务器 基于frp",date:"2022-06-19T10:58:01.000Z",permalink:"/pages/b387de/",categories:["其他技术","网络"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3080.%E7%BD%91%E7%BB%9C/3080100.%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E5%9F%BA%E4%BA%8Efrp.html",relativePath:"30.其他技术/3080.网络/3080100.搭建内网穿透服务器 基于frp.md",key:"v-77a48bc4",path:"/pages/b387de/",headers:[{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:4,title:"缺点",slug:"缺点",normalizedTitle:"缺点",charIndex:50},{level:3,title:"服务器搭建",slug:"服务器搭建",normalizedTitle:"服务器搭建",charIndex:102},{level:3,title:"客户端搭建",slug:"客户端搭建",normalizedTitle:"客户端搭建",charIndex:851},{level:4,title:"客户端容器",slug:"客户端容器",normalizedTitle:"客户端容器",charIndex:1514},{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:1678}],headersStr:" 缺点 服务器搭建 客户端搭建 客户端容器 问题",content:"#\n\n之前一直用的是三方穿透服务natapp免费穿透\n\nhttps://natapp.cn/\n\n# 缺点\n\n * 不定时强制更换域名/端口\n * 服务不稳定\n * 中转速度相当有限\n\n就在想着用自己的公网服务器搭建 更为可控一个 很稳定 类似natapp的穿透服务\n\n一下记录 基于frp与zerotier moon服务器 的使用\n\n * 一台公网服务器\n * docker\n\nhttps://hub.docker.com/r/snowdreamtech/frpc\n\n\n# 服务器搭建\n\n自建内网穿透服务器\n\n创建初始化文件, 文件位置： /izhaong/frp\n\n[common]\n# 监听端口\nbind_port = 7000\n# 面板端口\ndashboard_port = 7500\n# 登录面板账号设置\ndashboard_user = ******  \ndashboard_pwd = ******\n# 设置http及https协议下代理端口（非重要）\nvhost_http_port = 7080\nvhost_https_port = 7081\n\n\n# 身份验证\ntoken = 1234\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\ndocker 命令 创建frp容器\n\n#服务器镜像：snowdreamtech/frps\n#重启：always\n#网络模式：host\n#文件映射：/izhaong/frp/frps.ini:/etc/frp/frps.ini   // 本地:容器位置\n\ndocker run --restart=always --network host -d -v /izhaong/frp/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n因为是一个host模式， 现在是可以在在公网上访问端口了，注意你的服务器防火墙\n\n\n# 客户端搭建\n\n * 在本级上开启一个8080的服务\n * 配置frpc.ini 文件\n\n[common]\n# server_addr为FRPS服务器IP地址\nserver_addr = ** // 你线上服务器地址如：121.41.41.41\n# server_port为服务端监听端口，bind_port\nserver_port = 7000\n# 身份验证\ntoken = 1234 // 跟上面一样\n\n[web_dev_8080]\ntype = tcp\nlocal_ip = 127.0.0.1 // docker可能会有网络隔离 可以填写ip地址：192.168.31.163\nlocal_port = 8080\nremote_port = 28080\n\n# [ssh] 为服务名称，下方此处设置为，访问frp服务段的2288端口时，等同于通过中转服务器访问127.0.0.1的22端口。\n# type 为连接的类型，此处为tcp\n# local_ip 为中转客户端实际访问的IP \n# local_port 为目标端口\n# remote_port 为远程端口\n\n# 桌面连接\n# [desk_6580]\n# type = tcp\n# local_ip = 192.168.1.229\n# local_port = 6580\n# remote_port = 16580\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n# 客户端容器\n\n\ndocker run --restart=always --network host -d -v /Users/izhaong/izhaong/Docker_K8s/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc\n\n\n1\n2\n\n\n\n# 问题\n\n2022/06/19 06:00:09 [E] [proxy.go:796] [ac8fcbae50e11478] [web_server_8080] connect to local service [127.0.0.1:8080] error: dial tcp 127.0.0.1:8080: connect: connection refused\n\n\n1\n\n\ndocker容器之间是互相隔离的，不能互相访问,解决掉就好了",normalizedContent:"#\n\n之前一直用的是三方穿透服务natapp免费穿透\n\nhttps://natapp.cn/\n\n# 缺点\n\n * 不定时强制更换域名/端口\n * 服务不稳定\n * 中转速度相当有限\n\n就在想着用自己的公网服务器搭建 更为可控一个 很稳定 类似natapp的穿透服务\n\n一下记录 基于frp与zerotier moon服务器 的使用\n\n * 一台公网服务器\n * docker\n\nhttps://hub.docker.com/r/snowdreamtech/frpc\n\n\n# 服务器搭建\n\n自建内网穿透服务器\n\n创建初始化文件, 文件位置： /izhaong/frp\n\n[common]\n# 监听端口\nbind_port = 7000\n# 面板端口\ndashboard_port = 7500\n# 登录面板账号设置\ndashboard_user = ******  \ndashboard_pwd = ******\n# 设置http及https协议下代理端口（非重要）\nvhost_http_port = 7080\nvhost_https_port = 7081\n\n\n# 身份验证\ntoken = 1234\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\ndocker 命令 创建frp容器\n\n#服务器镜像：snowdreamtech/frps\n#重启：always\n#网络模式：host\n#文件映射：/izhaong/frp/frps.ini:/etc/frp/frps.ini   // 本地:容器位置\n\ndocker run --restart=always --network host -d -v /izhaong/frp/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n因为是一个host模式， 现在是可以在在公网上访问端口了，注意你的服务器防火墙\n\n\n# 客户端搭建\n\n * 在本级上开启一个8080的服务\n * 配置frpc.ini 文件\n\n[common]\n# server_addr为frps服务器ip地址\nserver_addr = ** // 你线上服务器地址如：121.41.41.41\n# server_port为服务端监听端口，bind_port\nserver_port = 7000\n# 身份验证\ntoken = 1234 // 跟上面一样\n\n[web_dev_8080]\ntype = tcp\nlocal_ip = 127.0.0.1 // docker可能会有网络隔离 可以填写ip地址：192.168.31.163\nlocal_port = 8080\nremote_port = 28080\n\n# [ssh] 为服务名称，下方此处设置为，访问frp服务段的2288端口时，等同于通过中转服务器访问127.0.0.1的22端口。\n# type 为连接的类型，此处为tcp\n# local_ip 为中转客户端实际访问的ip \n# local_port 为目标端口\n# remote_port 为远程端口\n\n# 桌面连接\n# [desk_6580]\n# type = tcp\n# local_ip = 192.168.1.229\n# local_port = 6580\n# remote_port = 16580\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n# 客户端容器\n\n\ndocker run --restart=always --network host -d -v /users/izhaong/izhaong/docker_k8s/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc\n\n\n1\n2\n\n\n\n# 问题\n\n2022/06/19 06:00:09 [e] [proxy.go:796] [ac8fcbae50e11478] [web_server_8080] connect to local service [127.0.0.1:8080] error: dial tcp 127.0.0.1:8080: connect: connection refused\n\n\n1\n\n\ndocker容器之间是互相隔离的，不能互相访问,解决掉就好了",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"Nas作用规划",frontmatter:{title:"Nas作用规划",date:"2023-09-17T15:48:19.000Z",permalink:"/pages/64da6e/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085005.Nas%E4%BD%9C%E7%94%A8%E8%A7%84%E5%88%92.html",relativePath:"30.其他技术/3085.Nas/3085005.Nas作用规划.md",key:"v-5a649ff4",path:"/pages/64da6e/",headers:[{level:2,title:"主要作用:",slug:"主要作用",normalizedTitle:"主要作用:",charIndex:2}],headersStr:"主要作用:",content:"# 主要作用:\n\n 1. 数据管理\n 2. 数据备份\n\n个人觉得应该避免的\n\n 1.  功耗\n\n 2.  不需要随时满功率运行\n\n 3.  尽量在nas中避免使用服务\n\n 4.  硬盘磨损\n\n 5.  需要有硬盘休眠计划\n\n 6.  all in one\n\n 7.  我现在(20230915-111822)是esxi8 + ikuai + istoreOs + dsm1621\n\n 8.  我即将要做的就是\n\n 9.  更好的硬件使用\n\n 10. 更好的驱动加载\n\n 11. 更直接和纯粹的nas服务",normalizedContent:"# 主要作用:\n\n 1. 数据管理\n 2. 数据备份\n\n个人觉得应该避免的\n\n 1.  功耗\n\n 2.  不需要随时满功率运行\n\n 3.  尽量在nas中避免使用服务\n\n 4.  硬盘磨损\n\n 5.  需要有硬盘休眠计划\n\n 6.  all in one\n\n 7.  我现在(20230915-111822)是esxi8 + ikuai + istoreos + dsm1621\n\n 8.  我即将要做的就是\n\n 9.  更好的硬件使用\n\n 10. 更好的驱动加载\n\n 11. 更直接和纯粹的nas服务",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"磁盘整列了解一下",frontmatter:{title:"磁盘整列了解一下",date:"2023-09-17T16:19:05.000Z",permalink:"/pages/b4fc6b/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085010.%E7%A3%81%E7%9B%98%E6%95%B4%E5%88%97%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B.html",relativePath:"30.其他技术/3085.Nas/3085010.磁盘整列了解一下.md",key:"v-069bf93c",path:"/pages/b4fc6b/",headersStr:null,content:"整列卡",normalizedContent:"整列卡",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"windows硬盘挂载群晖（移动ipv6网络也能挂）",frontmatter:{title:"windows硬盘挂载群晖（移动ipv6网络也能挂）",date:"2023-09-17T15:45:53.000Z",permalink:"/pages/ba2cf0/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085050.windows%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E7%BE%A4%E6%99%96%EF%BC%88%E7%A7%BB%E5%8A%A8ipv6%E7%BD%91%E7%BB%9C%E4%B9%9F%E8%83%BD%E6%8C%82%EF%BC%89.html",relativePath:"30.其他技术/3085.Nas/3085050.windows硬盘挂载群晖（移动ipv6网络也能挂）.md",key:"v-afbab932",path:"/pages/ba2cf0/",headers:[{level:3,title:"方法一：WebDav FTP SFTP等方式（我目前使用的）",slug:"方法一-webdav-ftp-sftp等方式-我目前使用的",normalizedTitle:"方法一：webdav ftp sftp等方式（我目前使用的）",charIndex:46},{level:3,title:"方法二：TailScale",slug:"方法二-tailscale",normalizedTitle:"方法二：tailscale",charIndex:240}],headersStr:"方法一：WebDav FTP SFTP等方式（我目前使用的） 方法二：TailScale",content:"正常的ipv4就省略掉了， 网上有很多大佬都出教程了\n\n现在出一个ipv6的方式挂\n\n\n# 方法一：WebDav FTP SFTP等方式（我目前使用的）\n\n * 群晖套件中下载安装WebDAV Server\n\n\n\n * 启用我这儿使用的是https 端口为默认的5006\n\n * \n\n * 下载RaiDrive\n\n * 下载地址：https://www.raidrive.com/download\n\n * 启用添加即可\n\n\n\n最终成果：\n\n域名映射我使用的是ddnsgo\n\n\n# 方法二：TailScale\n\n这个也很简单 在群晖和各个设备上安装该应用即可\n\n安装登录后可以看看每个设备的ipv4地址，如图：\n\n然后直接使用win+R 输入：对应的设备地址即可\n\n\n\n说明：这个默认使用的是官方的服务器，速度非常感人，建议搭建自己的DERP Servers\n\n附上一个大佬的地址：https://icloudnative.io/posts/custom-derp-servers/",normalizedContent:"正常的ipv4就省略掉了， 网上有很多大佬都出教程了\n\n现在出一个ipv6的方式挂\n\n\n# 方法一：webdav ftp sftp等方式（我目前使用的）\n\n * 群晖套件中下载安装webdav server\n\n\n\n * 启用我这儿使用的是https 端口为默认的5006\n\n * \n\n * 下载raidrive\n\n * 下载地址：https://www.raidrive.com/download\n\n * 启用添加即可\n\n\n\n最终成果：\n\n域名映射我使用的是ddnsgo\n\n\n# 方法二：tailscale\n\n这个也很简单 在群晖和各个设备上安装该应用即可\n\n安装登录后可以看看每个设备的ipv4地址，如图：\n\n然后直接使用win+r 输入：对应的设备地址即可\n\n\n\n说明：这个默认使用的是官方的服务器，速度非常感人，建议搭建自己的derp servers\n\n附上一个大佬的地址：https://icloudnative.io/posts/custom-derp-servers/",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"影音中心",frontmatter:{title:"影音中心",date:"2023-09-17T16:20:22.000Z",permalink:"/pages/d7a5c5/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085060.%E5%BD%B1%E9%9F%B3%E4%B8%AD%E5%BF%83.html",relativePath:"30.其他技术/3085.Nas/3085060.影音中心.md",key:"v-2aedc5db",path:"/pages/d7a5c5/",headers:[{level:3,title:"kodi",slug:"kodi",normalizedTitle:"kodi",charIndex:126},{level:3,title:"软件服务（ PLEX emby Jellyfin）",slug:"软件服务-plex-emby-jellyfin",normalizedTitle:"软件服务（ plex emby jellyfin）",charIndex:250},{level:3,title:"媒体服务器",slug:"媒体服务器",normalizedTitle:"媒体服务器",charIndex:415},{level:3,title:"索引器",slug:"索引器",normalizedTitle:"索引器",charIndex:473},{level:3,title:"下载器",slug:"下载器",normalizedTitle:"下载器",charIndex:519},{level:3,title:"字幕管理器",slug:"字幕管理器",normalizedTitle:"字幕管理器",charIndex:569},{level:2,title:"文件映射&目录配置",slug:"文件映射-目录配置",normalizedTitle:"文件映射&amp;目录配置",charIndex:null},{level:4,title:"!img 目录同步",slug:"目录同步",normalizedTitle:"!img 目录同步",charIndex:null}],headersStr:"kodi 软件服务（ PLEX emby Jellyfin） 媒体服务器 索引器 下载器 字幕管理器 文件映射&目录配置 !img 目录同步",content:"nas-tools\n\nhttps://github.com/jxxghp/nas-tools/wiki/%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D\n\ntinyMediaManager\n\n中文包：https://forum.kodi.tv/showthread.php?tid=174987\n\n\n# kodi\n\n优点： 文件流推送，能够到流畅播放，不会吃服务器性能。\n\n缺点：吃带宽，如果带宽低于视频码率会卡顿。本地无所谓，远程访问需要考虑到手机流量，带宽等问题\n\n\n# 软件服务（ PLEX emby Jellyfin）\n\n会建立专门的影音资料库，可以通过浏览器，app，kodi插件访问\n\n解决上述问题，能够实时编码推流。在中间过程中可以降解码率来做到视频流畅。\n\n能做到两种：通过http协议直接推送源文件，播放设备解码视频原编码；转码为h264编码推送，播放设备将编码的视频解码播放。\n\n\n# 媒体服务器\n\n * Emby（推荐） 安装镜像\n * Jellyfin 安装镜像\n * Plex 安装镜像\n\n\n# 索引器\n\n * Jackett（推荐） 安装镜像\n * Prowlarr 安装镜像\n\n\n# 下载器\n\n * Qbittorrent 安装镜像\n * Transmission 安装镜像\n\n\n# 字幕管理器\n\n * OpenSubtitles帐号的申请（配置简单，海量字幕）\n * ChineseSubFinder的部署（国内大佬开发，功能强大）\n\n\n\n\n# 文件映射&目录配置\n\n\n\n# 目录同步\n\n源目录为需要同步的目录，目的目录为识别和改名后存放的目录，未识别目录为无法识别时转移的目录；只有源目录必须配置；目的目录未配置时将自动识别分类并转移到媒体库对应目录中；未识别目录下产生的文件程序不会主动清理， 建议不配置，未识别记录可在媒体整理->手动识别功能下处理\n\n",normalizedContent:"nas-tools\n\nhttps://github.com/jxxghp/nas-tools/wiki/%e5%8a%9f%e8%83%bd%e4%bb%8b%e7%bb%8d\n\ntinymediamanager\n\n中文包：https://forum.kodi.tv/showthread.php?tid=174987\n\n\n# kodi\n\n优点： 文件流推送，能够到流畅播放，不会吃服务器性能。\n\n缺点：吃带宽，如果带宽低于视频码率会卡顿。本地无所谓，远程访问需要考虑到手机流量，带宽等问题\n\n\n# 软件服务（ plex emby jellyfin）\n\n会建立专门的影音资料库，可以通过浏览器，app，kodi插件访问\n\n解决上述问题，能够实时编码推流。在中间过程中可以降解码率来做到视频流畅。\n\n能做到两种：通过http协议直接推送源文件，播放设备解码视频原编码；转码为h264编码推送，播放设备将编码的视频解码播放。\n\n\n# 媒体服务器\n\n * emby（推荐） 安装镜像\n * jellyfin 安装镜像\n * plex 安装镜像\n\n\n# 索引器\n\n * jackett（推荐） 安装镜像\n * prowlarr 安装镜像\n\n\n# 下载器\n\n * qbittorrent 安装镜像\n * transmission 安装镜像\n\n\n# 字幕管理器\n\n * opensubtitles帐号的申请（配置简单，海量字幕）\n * chinesesubfinder的部署（国内大佬开发，功能强大）\n\n\n\n\n# 文件映射&目录配置\n\n\n\n# 目录同步\n\n源目录为需要同步的目录，目的目录为识别和改名后存放的目录，未识别目录为无法识别时转移的目录；只有源目录必须配置；目的目录未配置时将自动识别分类并转移到媒体库对应目录中；未识别目录下产生的文件程序不会主动清理， 建议不配置，未识别记录可在媒体整理->手动识别功能下处理\n\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"使用群晖全球站注册账户",frontmatter:{title:"使用群晖全球站注册账户",date:"2023-09-17T15:49:23.000Z",permalink:"/pages/99aea4/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085102.%E4%BD%BF%E7%94%A8%E7%BE%A4%E6%99%96%E5%85%A8%E7%90%83%E7%AB%99%E6%B3%A8%E5%86%8C%E8%B4%A6%E6%88%B7.html",relativePath:"30.其他技术/3085.Nas/3085102.使用群晖全球站注册账户.md",key:"v-37d9273c",path:"/pages/99aea4/",headersStr:null,content:"此文章为转载:原文地址:https://www.ainas.cc:88/?p=572\n\n若侵犯权益联系我删除\n\n【黑群晖注册Synology账号的步骤】此步骤为黑群晖用户专用，白群晖用户跳过；\n\n1、在浏览器打开【这个链接 】；\n\n\n\n2、输入你的个人邮箱，选择任意一个邮箱，只要没有注册过群晖账号的邮箱均可，下一步；\n\n\n\n3、此时，系统会自动给你的邮箱发送一封邮件，请打开邮箱查看；\n\n\n\n4、复制验证码；\n\n\n\n5、把上一步骤复制的验证码，粘贴到下图处，点“下一步”；\n\n\n\n6、填写信息要求如下：\n\n（1）姓名：不要求实名，随便写；\n\n（2）用户类型：选“家庭用户”；\n\n（3）位置：选择“新加坡”或者“美国”。\n\n（4）密码：这个是设置群晖官网synology账户的密码，并非邮箱密码，也不是你安装群晖时设置的登录密码，不要搞混淆了。密码要求大写英文+小写英文+数字的组合，长度8位或者以上。\n\n\n\n确认信息无误后，点：下一步；\n\n7、这里会显示有一个提示“检测到您选择的位置与浏览器的所在位置不符”等等，不用理会，无须更改，点“下一步”；\n\n\n\n8、在“我同意 Synology 账户的服务条款”和“我已阅读并同意上述数据处理政策”两处打勾，提交；\n\n\n\n9、出现这个“恭喜”的界面就表示注册完成了，点“登录”；\n\n\n\n10、检查一下“电子邮箱”和“所在位置”，设置正确了就可以了。\n\n\n\n----------------------------------------\n\n【黑群晖Synology账号的用途】\n\n1、这个注册黑群晖Synology账号干嘛用呢？比如你在使用某些套件（Active Backup for Business、OFFICE、exFAT、Advanced Media Extensions）的时候，需要登录账号来激活，那么这个时候就需要用到这个账号了。",normalizedContent:"此文章为转载:原文地址:https://www.ainas.cc:88/?p=572\n\n若侵犯权益联系我删除\n\n【黑群晖注册synology账号的步骤】此步骤为黑群晖用户专用，白群晖用户跳过；\n\n1、在浏览器打开【这个链接 】；\n\n\n\n2、输入你的个人邮箱，选择任意一个邮箱，只要没有注册过群晖账号的邮箱均可，下一步；\n\n\n\n3、此时，系统会自动给你的邮箱发送一封邮件，请打开邮箱查看；\n\n\n\n4、复制验证码；\n\n\n\n5、把上一步骤复制的验证码，粘贴到下图处，点“下一步”；\n\n\n\n6、填写信息要求如下：\n\n（1）姓名：不要求实名，随便写；\n\n（2）用户类型：选“家庭用户”；\n\n（3）位置：选择“新加坡”或者“美国”。\n\n（4）密码：这个是设置群晖官网synology账户的密码，并非邮箱密码，也不是你安装群晖时设置的登录密码，不要搞混淆了。密码要求大写英文+小写英文+数字的组合，长度8位或者以上。\n\n\n\n确认信息无误后，点：下一步；\n\n7、这里会显示有一个提示“检测到您选择的位置与浏览器的所在位置不符”等等，不用理会，无须更改，点“下一步”；\n\n\n\n8、在“我同意 synology 账户的服务条款”和“我已阅读并同意上述数据处理政策”两处打勾，提交；\n\n\n\n9、出现这个“恭喜”的界面就表示注册完成了，点“登录”；\n\n\n\n10、检查一下“电子邮箱”和“所在位置”，设置正确了就可以了。\n\n\n\n----------------------------------------\n\n【黑群晖synology账号的用途】\n\n1、这个注册黑群晖synology账号干嘛用呢？比如你在使用某些套件（active backup for business、office、exfat、advanced media extensions）的时候，需要登录账号来激活，那么这个时候就需要用到这个账号了。",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"arpl 装载 dsm",frontmatter:{title:"arpl 装载 dsm",date:"2023-09-17T15:51:15.000Z",permalink:"/pages/957c8c/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085104.arpl%20%E8%A3%85%E8%BD%BD%20dsm.html",relativePath:"30.其他技术/3085.Nas/3085104.arpl 装载 dsm.md",key:"v-fb185790",path:"/pages/957c8c/",headersStr:null,content:" * 下载arpl多语言版: https://github.com/wjz304/arpl-i18n/releases/download/23.7.1/arpl-i18n-23.7.1.img.zip\n\n仓库地址: https://github.com/wjz304/arpl-i18n\n\n * 解压后使用u盘启动项制作工具(推荐使用rufus) 刷入img镜像到u盘\n\n * 电脑 插入制作好的U盘;插入网线;bios选择第一启动项为U盘\n\n * 开机就会看到地址\n\n * \n\n * ",normalizedContent:" * 下载arpl多语言版: https://github.com/wjz304/arpl-i18n/releases/download/23.7.1/arpl-i18n-23.7.1.img.zip\n\n仓库地址: https://github.com/wjz304/arpl-i18n\n\n * 解压后使用u盘启动项制作工具(推荐使用rufus) 刷入img镜像到u盘\n\n * 电脑 插入制作好的u盘;插入网线;bios选择第一启动项为u盘\n\n * 开机就会看到地址\n\n * \n\n * ",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"arpl使用概览",frontmatter:{title:"arpl使用概览",date:"2023-09-17T15:53:04.000Z",permalink:"/pages/03046a/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085103.arpl%E4%BD%BF%E7%94%A8%E6%A6%82%E8%A7%88.html",relativePath:"30.其他技术/3085.Nas/3085103.arpl使用概览.md",key:"v-758ceeb4",path:"/pages/03046a/",headers:[{level:3,title:"常用工具:",slug:"常用工具",normalizedTitle:"常用工具:",charIndex:11},{level:3,title:"命令输入方法演示  https://www.bilibili.com/video/BV1T84y1P7Kq",slug:"命令输入方法演示-https-www-bilibili-com-video-bv1t84y1p7kq",normalizedTitle:"命令输入方法演示  https://www.bilibili.com/video/bv1t84y1p7kq",charIndex:null},{level:2,title:"DEBUG",slug:"debug",normalizedTitle:"debug",charIndex:6261}],headersStr:"常用工具: 命令输入方法演示  https://www.bilibili.com/video/BV1T84y1P7Kq DEBUG",content:'# ENV:\n\n\n# 常用工具:\n\n * telnet 工具 putty (下载: https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html)\n * ssh 工具 FinalShell (下载: https://www.hostbuf.com/t/988.html)\n * sftp 工具 WinSCP (下载: https://winscp.net/eng/index.php)\n * 文本编辑工具 Notepad3 (下载: https://github.com/rizonesoft/Notepad3/releases) (抵制Notepad++)\n * 镜像写盘工具 Rufus (下载: https://rufus.ie/zh/)\n * 磁盘管理工具 Diskgenius (下载: 不敢说)\n\n\n# LINK:\n\n * 查找:\n\n * http://find.synology.cn/\n\n * http://find.synology.com/\n\n * 下载:\n\n * https://archive.synology.cn/download/Os/DSM\n\n * https://archive.synology.com/download/Os/DSM\n\n * 型号列表:\n\n * https://kb.synology.cn/zh-cn/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have\n\n * https://kb.synology.com/zh-hk/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have\n\n * RAID计算:\n\n * https://www.synology.cn/zh-cn/support/RAID_calculator\n\n * https://www.synology.com/zh-tw/support/RAID_calculator\n\n\n# ARPL:\n\n\n# 命令输入方法演示 https://www.bilibili.com/video/BV1T84y1P7Kq\n\n * arpl各版本间切换(手动方式, 全量) (Any version):\n\n# 在 shell 中下载需要的版本或者手动上传到/opt/arpl/下\n# Download the required version in the shell or manually upload it to/opt/arpl/\ncurl -kL -o /opt/arpl/arpl.zip https://github.com/wjz304/arpl-i18n/releases/download/23.4.5/arpl-i18n-23.4.5.img.zip\n# 卸载挂载的引导盘\n# Uninstalling the mounted boot disk\numount /mnt/p1 /mnt/p2 /mnt/p3\n# 解压 并写入到引导盘\n# Decompress and write to the boot disk\nunzip -p arpl.zip | dd of=`blkid | grep \'LABEL="ARPL3"\' | cut -d3 -f1` bs=1M conv=fsync\n# 重启 reboot\nreboot\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * arpl各版本间切换(菜单更新, 增量)(arpl / arpl-zh_CN / arpl-i18n(ver < 23.4.5)):\n\n# shell 下输入以下命令修改更新 repo. \n# 如果要切换原版修改第二条命令中的 wjz304/arpl-i18n 为 fbelavenuto/arpl\n# 如果切换中文版修改第二条命令中的 wjz304/arpl-i18n 为 wjz304/arpl-zh_CN\n# Enter the following command under the shell to modify and update repo\n# If you want to switch the original version and modify wjz304/arpl-i18n to fbelavenuto/arpl in the second command.\n# If you switch to the Chinese version and modify the wjz304/arpl-i18n to wjz304/arpl_zh_CN in the second command.\nCURREPO=`grep "github.com.*update" menu.sh | sed -r \'s/.*com\\/(.*)\\/releases.*/\\1/\'`\nsed -i "s|${CURREPO}|wjz304/arpl-i18n|g" /opt/arpl/menu.sh\n# 进入设置菜单执行更新arpl操作即可. 更新后请重启.\n# Simply enter the main menu and perform the update arpl operation. Please restart after the update.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * arpl 备份 (Any version):\n\n# 备份为 disk.img.gz, 自行导出.\ndd if=`blkid | grep \'LABEL="ARPL3"\' | cut -d3 -f1` | gzip > disk.img.gz\n# 结合 transfer.sh 直接导出链接\ncurl -skL --insecure -w \'\\n\' --upload-file disk.img.gz https://transfer.sh\n\n\n1\n2\n3\n4\n\n * arpl 持久化 /opt/arpl 目录的修改 (Any version):\n\nRDXZ_PATH=/tmp/rdxz_tmp\nmkdir -p "${RDXZ_PATH}"\n(cd "${RDXZ_PATH}"; xz -dc < "/mnt/p3/initrd-arpl" | cpio -idm) >/dev/null 2>&1 || true\nrm -rf "${RDXZ_PATH}/opt/arpl"\ncp -rf "/opt/arpl" "${RDXZ_PATH}/opt"\n(cd "${RDXZ_PATH}"; find . 2>/dev/null | cpio -o -H newc -R root:root | xz --check=crc32 > "/mnt/p3/initrd-arpl") || true\nrm -rf "${RDXZ_PATH}"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * arpl 修改所有的pat下载源 (Any version):\n\nsed -i \'s/global.synologydownload.com/cndl.synology.cn/g\' /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f\'`\nsed -i \'s/global.download.synology.com/cndl.synology.cn/g\' /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f\'`\n\n\n1\n2\n\n * arpl 更新慢的解决办法 (arpl-zh_CN / arpl):\n\nsed -i \'s|https://.*/https://|https://|g\' /opt/arpl/menu.sh \nsed -i \'s|https://github.com|https://ghproxy.homeboyc.cn/&|g\' /opt/arpl/menu.sh \nsed -i \'s|https://api.github.com|http://ghproxy.homeboyc.cn/&|g\' /opt/arpl/menu.sh\n\n\n1\n2\n3\n\n * arpl 去掉pat的hash校验 (Any version):\n\nsed -i \'s/HASH}" ]/& \\&\\& false/g\' /opt/arpl/menu.sh\n\n\n1\n\n * arpl 下获取网卡驱动 (Any version):\n\nfor i in `ls /sys/class/net | grep -v \'lo\'`; do echo $i -- `ethtool -i $i | grep driver`; done\n\n\n1\n\n * arpl 使用自定义的dts文件 (arpl(ver > v1.1-beta2a / arpl-zh_CN):\n\n# 将dts文件放到/mnt/p1下,并重命名为model.dts. "/mnt/p1/model.dts"\nsed -i \'/^.*\\/addons\\/disks.sh.*$/a [ -f "\\/mnt\\/p1\\/model.dts" ] \\&\\& cp "\\/mnt\\/p1\\/model.dts" "${RAMDISK_PATH}\\/addons\\/model.dts"\' /opt/arpl/ramdisk-patch.sh\n\n\n1\n2\n\n * arpl 离线安装 (arpl_zh_CN(ver > ++-v1.3) / arpl-i18n(ver < 23.7.0>)):\n\n1. arpl 下\n# arpl下获取型号版本的pat下载地址 (替换以下命令中的 版本号和型号部分)\nyq eval \'.builds.42218.pat.url\' "/opt/arpl/model-configs/DS3622xs+.yml"\n# 将pat重命名为<型号>-<版本>.pat, 放入 /mnt/p3/dl/ 下\n# 例: /mnt/p3/dl/DS3622xs+-42218.pat\n\n2. pc 下\n# 通过 DG等其他软件打开arpl.img, 将pat重命名为<型号>-<版本>.pat, 放入 第3个分区的 /dl/ 下.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * arpl 增删驱动 (Any version):\n\n# 1.首先你要有对应平台的驱动 比如 SA6400 7.1.1 增加 r8125\n# 略\n# 2.解包\nmkdir -p /mnt/p3/modules/epyc7002-5.10.55\ngzip -dc /mnt/p3/modules/epyc7002-5.10.55.tgz | tar xf - -C /mnt/p3/modules/epyc7002-5.10.55\n# 3.放入或删除驱动\n# 略\n# 4.打包\ntar -cf /mnt/p3/modules/epyc7002-5.10.55.tar -C /mnt/p3/modules/epyc7002-5.10.55 .\ngzip -c /mnt/p3/modules/epyc7002-5.10.55.tar > /mnt/p3/modules/epyc7002-5.10.55.tgz\nrm -rf /mnt/p3/modules/epyc7002-5.10.55.tar /mnt/p3/modules/epyc7002-5.10.55\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * arpl 开机强行进入到arpl (Any version):\n\n# 在 wait IP 的时候, 快速的连上, 杀死 boot.sh 进程.\nkill `ps | grep -v grep | grep boot.sh | awk \'{print $1}\'`\n\n\n1\n2\n\n\n\n# SYNO:\n\n * ssh 开启 root 权限:\n\nsudo -i\nsed -i \'s/^.*PermitRootLogin.*$/PermitRootLogin yes/\' /etc/ssh/sshd_config  \nsynouser --setpw root xxxxxx  # xxxxxx 为你要设置的密码\nsystemctl restart sshd\n\n\n1\n2\n3\n4\n\n * dsm下挂载引导盘:\n\nsudo -i\necho 1 > /proc/sys/kernel/syno_install_flag\nls /dev/synoboot*    # 正常会有 /dev/synoboot  /dev/synoboot1  /dev/synoboot2  /dev/synoboot3\n# 挂载第1个分区\nmkdir -p /tmp/synoboot1 \nmount /dev/synoboot1 /tmp/synoboot1 \nls /tmp/synoboot1/\n# 挂载第2个分区\nmkdir -p /tmp/synoboot2\nmount /dev/synoboot2 /tmp/synoboot2\nls /tmp/synoboot2/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * dsm下重启到arpl(免键盘) (Any version):\n\nsudo -i  # 输入密码\n/usr/bin/arpl-reboot.sh "config"\n\n\n1\n2\n\n * dsm下修改sn (Any version):\n\nsudo -i  # 输入密码\nSN=xxxxxxxxxx   # 输入你要设置的SN\necho 1 > /proc/sys/kernel/syno_install_flag\n[ -b "/dev/synoboot1" ] && (mkdir -p /tmp/synoboot1; mount /dev/synoboot1 /tmp/synoboot1)\n[ -f "/tmp/synoboot1/user-config.yml" ] && OLD_SN=`grep \'^sn:\' /tmp/synoboot1/user-config.yml | sed -r \'s/sn:(.*)/\\1/; s/[\\" ]//g\'`\n[ -n "${OLD_SN}" ] && sed -i "s/${OLD_SN}/${SN}/g" /tmp/synoboot1/user-config.yml\nreboot\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 群晖 opkg 包管理:\n\nwget -O - http://bin.entware.net/x64-k3.2/installer/generic.sh | /bin/sh\n/opt/bin/opkg update\n/opt/bin/opkg install rename\n\n\n1\n2\n3\n\n\n\n# DEBUG\n\n * log:\n\n# 驱动相关\nlsmod                                         # 查看已加载驱动  \nls -ld /sys/class/net/*/device/driver         # 查看已加载网卡和对应驱动  \ncat /sys/class/net/*/address                  # 查看已加载网卡的MAC地址\n\n# 磁盘相关\nfdisk -l                                      # 查看硬盘信息 \nls /sys/block/                                # 查看块设备  \nls /sys/block/sd*                             # 查看识别的 sata 硬盘 (非设备树(dtb)的型号)    \nls /sys/block/sata*                           # 查看识别的 sata 硬盘  (设备树(dtb)的型号)  \nls /sys/block/nvme*                           # 查看识别的 nvme 硬盘  \ncat /sys/block/sd*/device/syno_block_info     # 查看识别的 sata 硬盘挂载点 (非设备树(dtb)的型号)  \ncat /sys/block/sata*/device/syno_block_info   # 查看识别的 sata 硬盘挂载点 (设备树(dtb)的型号)  \ncat /sys/block/nvme*/device/syno_block_info   # 查看识别的 nvme 硬盘挂载点  \n\n# 日志相关\ndmesg                                         # 内核日志\ncat /proc/cmdlime                             # 引导参数\ncat /var/log/linuxrc.syno.log                 # 引导态下启动日志\ncat /var/log/messages                         # 引导态下操作日志\n\n# Intel GPU\nlspci -n | grep 0300 | cut -d " " -f 3           # PIDVID\nls /dev/dri                                      # 查看显卡设备\ncat /sys/kernel/debug/dri/0/i915_frequency_info  # 显卡驱动详细信息\n\n# Nvidia GPU\nls /dev/nvid*                                    # 查看显卡设备\nnvidia-smi                                       # 显卡驱动详细信息\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n',normalizedContent:'# env:\n\n\n# 常用工具:\n\n * telnet 工具 putty (下载: https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html)\n * ssh 工具 finalshell (下载: https://www.hostbuf.com/t/988.html)\n * sftp 工具 winscp (下载: https://winscp.net/eng/index.php)\n * 文本编辑工具 notepad3 (下载: https://github.com/rizonesoft/notepad3/releases) (抵制notepad++)\n * 镜像写盘工具 rufus (下载: https://rufus.ie/zh/)\n * 磁盘管理工具 diskgenius (下载: 不敢说)\n\n\n# link:\n\n * 查找:\n\n * http://find.synology.cn/\n\n * http://find.synology.com/\n\n * 下载:\n\n * https://archive.synology.cn/download/os/dsm\n\n * https://archive.synology.com/download/os/dsm\n\n * 型号列表:\n\n * https://kb.synology.cn/zh-cn/dsm/tutorial/what_kind_of_cpu_does_my_nas_have\n\n * https://kb.synology.com/zh-hk/dsm/tutorial/what_kind_of_cpu_does_my_nas_have\n\n * raid计算:\n\n * https://www.synology.cn/zh-cn/support/raid_calculator\n\n * https://www.synology.com/zh-tw/support/raid_calculator\n\n\n# arpl:\n\n\n# 命令输入方法演示 https://www.bilibili.com/video/bv1t84y1p7kq\n\n * arpl各版本间切换(手动方式, 全量) (any version):\n\n# 在 shell 中下载需要的版本或者手动上传到/opt/arpl/下\n# download the required version in the shell or manually upload it to/opt/arpl/\ncurl -kl -o /opt/arpl/arpl.zip https://github.com/wjz304/arpl-i18n/releases/download/23.4.5/arpl-i18n-23.4.5.img.zip\n# 卸载挂载的引导盘\n# uninstalling the mounted boot disk\numount /mnt/p1 /mnt/p2 /mnt/p3\n# 解压 并写入到引导盘\n# decompress and write to the boot disk\nunzip -p arpl.zip | dd of=`blkid | grep \'label="arpl3"\' | cut -d3 -f1` bs=1m conv=fsync\n# 重启 reboot\nreboot\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * arpl各版本间切换(菜单更新, 增量)(arpl / arpl-zh_cn / arpl-i18n(ver < 23.4.5)):\n\n# shell 下输入以下命令修改更新 repo. \n# 如果要切换原版修改第二条命令中的 wjz304/arpl-i18n 为 fbelavenuto/arpl\n# 如果切换中文版修改第二条命令中的 wjz304/arpl-i18n 为 wjz304/arpl-zh_cn\n# enter the following command under the shell to modify and update repo\n# if you want to switch the original version and modify wjz304/arpl-i18n to fbelavenuto/arpl in the second command.\n# if you switch to the chinese version and modify the wjz304/arpl-i18n to wjz304/arpl_zh_cn in the second command.\ncurrepo=`grep "github.com.*update" menu.sh | sed -r \'s/.*com\\/(.*)\\/releases.*/\\1/\'`\nsed -i "s|${currepo}|wjz304/arpl-i18n|g" /opt/arpl/menu.sh\n# 进入设置菜单执行更新arpl操作即可. 更新后请重启.\n# simply enter the main menu and perform the update arpl operation. please restart after the update.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * arpl 备份 (any version):\n\n# 备份为 disk.img.gz, 自行导出.\ndd if=`blkid | grep \'label="arpl3"\' | cut -d3 -f1` | gzip > disk.img.gz\n# 结合 transfer.sh 直接导出链接\ncurl -skl --insecure -w \'\\n\' --upload-file disk.img.gz https://transfer.sh\n\n\n1\n2\n3\n4\n\n * arpl 持久化 /opt/arpl 目录的修改 (any version):\n\nrdxz_path=/tmp/rdxz_tmp\nmkdir -p "${rdxz_path}"\n(cd "${rdxz_path}"; xz -dc < "/mnt/p3/initrd-arpl" | cpio -idm) >/dev/null 2>&1 || true\nrm -rf "${rdxz_path}/opt/arpl"\ncp -rf "/opt/arpl" "${rdxz_path}/opt"\n(cd "${rdxz_path}"; find . 2>/dev/null | cpio -o -h newc -r root:root | xz --check=crc32 > "/mnt/p3/initrd-arpl") || true\nrm -rf "${rdxz_path}"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * arpl 修改所有的pat下载源 (any version):\n\nsed -i \'s/global.synologydownload.com/cndl.synology.cn/g\' /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f\'`\nsed -i \'s/global.download.synology.com/cndl.synology.cn/g\' /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f\'`\n\n\n1\n2\n\n * arpl 更新慢的解决办法 (arpl-zh_cn / arpl):\n\nsed -i \'s|https://.*/https://|https://|g\' /opt/arpl/menu.sh \nsed -i \'s|https://github.com|https://ghproxy.homeboyc.cn/&|g\' /opt/arpl/menu.sh \nsed -i \'s|https://api.github.com|http://ghproxy.homeboyc.cn/&|g\' /opt/arpl/menu.sh\n\n\n1\n2\n3\n\n * arpl 去掉pat的hash校验 (any version):\n\nsed -i \'s/hash}" ]/& \\&\\& false/g\' /opt/arpl/menu.sh\n\n\n1\n\n * arpl 下获取网卡驱动 (any version):\n\nfor i in `ls /sys/class/net | grep -v \'lo\'`; do echo $i -- `ethtool -i $i | grep driver`; done\n\n\n1\n\n * arpl 使用自定义的dts文件 (arpl(ver > v1.1-beta2a / arpl-zh_cn):\n\n# 将dts文件放到/mnt/p1下,并重命名为model.dts. "/mnt/p1/model.dts"\nsed -i \'/^.*\\/addons\\/disks.sh.*$/a [ -f "\\/mnt\\/p1\\/model.dts" ] \\&\\& cp "\\/mnt\\/p1\\/model.dts" "${ramdisk_path}\\/addons\\/model.dts"\' /opt/arpl/ramdisk-patch.sh\n\n\n1\n2\n\n * arpl 离线安装 (arpl_zh_cn(ver > ++-v1.3) / arpl-i18n(ver < 23.7.0>)):\n\n1. arpl 下\n# arpl下获取型号版本的pat下载地址 (替换以下命令中的 版本号和型号部分)\nyq eval \'.builds.42218.pat.url\' "/opt/arpl/model-configs/ds3622xs+.yml"\n# 将pat重命名为<型号>-<版本>.pat, 放入 /mnt/p3/dl/ 下\n# 例: /mnt/p3/dl/ds3622xs+-42218.pat\n\n2. pc 下\n# 通过 dg等其他软件打开arpl.img, 将pat重命名为<型号>-<版本>.pat, 放入 第3个分区的 /dl/ 下.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * arpl 增删驱动 (any version):\n\n# 1.首先你要有对应平台的驱动 比如 sa6400 7.1.1 增加 r8125\n# 略\n# 2.解包\nmkdir -p /mnt/p3/modules/epyc7002-5.10.55\ngzip -dc /mnt/p3/modules/epyc7002-5.10.55.tgz | tar xf - -c /mnt/p3/modules/epyc7002-5.10.55\n# 3.放入或删除驱动\n# 略\n# 4.打包\ntar -cf /mnt/p3/modules/epyc7002-5.10.55.tar -c /mnt/p3/modules/epyc7002-5.10.55 .\ngzip -c /mnt/p3/modules/epyc7002-5.10.55.tar > /mnt/p3/modules/epyc7002-5.10.55.tgz\nrm -rf /mnt/p3/modules/epyc7002-5.10.55.tar /mnt/p3/modules/epyc7002-5.10.55\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * arpl 开机强行进入到arpl (any version):\n\n# 在 wait ip 的时候, 快速的连上, 杀死 boot.sh 进程.\nkill `ps | grep -v grep | grep boot.sh | awk \'{print $1}\'`\n\n\n1\n2\n\n\n\n# syno:\n\n * ssh 开启 root 权限:\n\nsudo -i\nsed -i \'s/^.*permitrootlogin.*$/permitrootlogin yes/\' /etc/ssh/sshd_config  \nsynouser --setpw root xxxxxx  # xxxxxx 为你要设置的密码\nsystemctl restart sshd\n\n\n1\n2\n3\n4\n\n * dsm下挂载引导盘:\n\nsudo -i\necho 1 > /proc/sys/kernel/syno_install_flag\nls /dev/synoboot*    # 正常会有 /dev/synoboot  /dev/synoboot1  /dev/synoboot2  /dev/synoboot3\n# 挂载第1个分区\nmkdir -p /tmp/synoboot1 \nmount /dev/synoboot1 /tmp/synoboot1 \nls /tmp/synoboot1/\n# 挂载第2个分区\nmkdir -p /tmp/synoboot2\nmount /dev/synoboot2 /tmp/synoboot2\nls /tmp/synoboot2/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * dsm下重启到arpl(免键盘) (any version):\n\nsudo -i  # 输入密码\n/usr/bin/arpl-reboot.sh "config"\n\n\n1\n2\n\n * dsm下修改sn (any version):\n\nsudo -i  # 输入密码\nsn=xxxxxxxxxx   # 输入你要设置的sn\necho 1 > /proc/sys/kernel/syno_install_flag\n[ -b "/dev/synoboot1" ] && (mkdir -p /tmp/synoboot1; mount /dev/synoboot1 /tmp/synoboot1)\n[ -f "/tmp/synoboot1/user-config.yml" ] && old_sn=`grep \'^sn:\' /tmp/synoboot1/user-config.yml | sed -r \'s/sn:(.*)/\\1/; s/[\\" ]//g\'`\n[ -n "${old_sn}" ] && sed -i "s/${old_sn}/${sn}/g" /tmp/synoboot1/user-config.yml\nreboot\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 群晖 opkg 包管理:\n\nwget -o - http://bin.entware.net/x64-k3.2/installer/generic.sh | /bin/sh\n/opt/bin/opkg update\n/opt/bin/opkg install rename\n\n\n1\n2\n3\n\n\n\n# debug\n\n * log:\n\n# 驱动相关\nlsmod                                         # 查看已加载驱动  \nls -ld /sys/class/net/*/device/driver         # 查看已加载网卡和对应驱动  \ncat /sys/class/net/*/address                  # 查看已加载网卡的mac地址\n\n# 磁盘相关\nfdisk -l                                      # 查看硬盘信息 \nls /sys/block/                                # 查看块设备  \nls /sys/block/sd*                             # 查看识别的 sata 硬盘 (非设备树(dtb)的型号)    \nls /sys/block/sata*                           # 查看识别的 sata 硬盘  (设备树(dtb)的型号)  \nls /sys/block/nvme*                           # 查看识别的 nvme 硬盘  \ncat /sys/block/sd*/device/syno_block_info     # 查看识别的 sata 硬盘挂载点 (非设备树(dtb)的型号)  \ncat /sys/block/sata*/device/syno_block_info   # 查看识别的 sata 硬盘挂载点 (设备树(dtb)的型号)  \ncat /sys/block/nvme*/device/syno_block_info   # 查看识别的 nvme 硬盘挂载点  \n\n# 日志相关\ndmesg                                         # 内核日志\ncat /proc/cmdlime                             # 引导参数\ncat /var/log/linuxrc.syno.log                 # 引导态下启动日志\ncat /var/log/messages                         # 引导态下操作日志\n\n# intel gpu\nlspci -n | grep 0300 | cut -d " " -f 3           # pidvid\nls /dev/dri                                      # 查看显卡设备\ncat /sys/kernel/debug/dri/0/i915_frequency_info  # 显卡驱动详细信息\n\n# nvidia gpu\nls /dev/nvid*                                    # 查看显卡设备\nnvidia-smi                                       # 显卡驱动详细信息\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n',charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"我的all in one 分离",frontmatter:{title:"我的all in one 分离",date:"2023-09-17T15:47:56.000Z",permalink:"/pages/b4250f/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085105.%E6%88%91%E7%9A%84all%20in%20one%20%E5%88%86%E7%A6%BB.html",relativePath:"30.其他技术/3085.Nas/3085105.我的all in one 分离.md",key:"v-64a3be22",path:"/pages/b4250f/",headers:[{level:2,title:"all in one",slug:"all-in-one",normalizedTitle:"all in one",charIndex:2},{level:2,title:"测试(可有无, 后续我会贴出来)",slug:"测试-可有无-后续我会贴出来",normalizedTitle:"测试(可有无, 后续我会贴出来)",charIndex:121},{level:2,title:"分离任务分解",slug:"分离任务分解",normalizedTitle:"分离任务分解",charIndex:179}],headersStr:"all in one 测试(可有无, 后续我会贴出来) 分离任务分解",content:"# all in one\n\n * 硬件: 工业版+n6000\n\n * 启动盘: sata拓展卡+ssd\n\n * 软件:\n\n * esxi8\n\n * ikuai\n\n * istoreOs\n\n * centos7\n\n * dsm1621\n\n\n# 测试(可有无, 后续我会贴出来)\n\n用另一台安装物理群辉\n\n * 功耗\n * 硬件识别度\n * 驱动识别度\n\n\n# 分离任务分解\n\n * 备份\n\n * 虚拟机\n\n * ",normalizedContent:"# all in one\n\n * 硬件: 工业版+n6000\n\n * 启动盘: sata拓展卡+ssd\n\n * 软件:\n\n * esxi8\n\n * ikuai\n\n * istoreos\n\n * centos7\n\n * dsm1621\n\n\n# 测试(可有无, 后续我会贴出来)\n\n用另一台安装物理群辉\n\n * 功耗\n * 硬件识别度\n * 驱动识别度\n\n\n# 分离任务分解\n\n * 备份\n\n * 虚拟机\n\n * ",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"群晖问题记录",frontmatter:{title:"群晖问题记录",date:"2023-09-17T16:06:57.000Z",permalink:"/pages/3505b5/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.Nas/3085141.%E7%BE%A4%E6%99%96%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.html",relativePath:"30.其他技术/3085.Nas/3085141.群晖问题记录.md",key:"v-99e641ee",path:"/pages/3505b5/",headers:[{level:3,title:"Cloud Sync 系统错误",slug:"cloud-sync-系统错误",normalizedTitle:"cloud sync 系统错误",charIndex:2},{level:3,title:"群晖 Docker注册表访问失败",slug:"群晖-docker注册表访问失败",normalizedTitle:"群晖 docker注册表访问失败",charIndex:303},{level:3,title:"群晖 caldav无法验证用户信息",slug:"群晖-caldav无法验证用户信息",normalizedTitle:"群晖 caldav无法验证用户信息",charIndex:349}],headersStr:"Cloud Sync 系统错误 群晖 Docker注册表访问失败 群晖 caldav无法验证用户信息",content:"# Cloud Sync 系统错误\n\n\n\n * 网络驱动映射\n\n * 前提是：群晖和外网电脑都在ipv6环境下\n   \n   假设群晖的ipv6地址是2409:7b56:23cc:2280::1 把冒号 : 修改为连字符 - 并附加.ipv6-literal.net，把符号%替换为s，替换后的UNC路径如下： \\2409-7b56-23cc-2280--1.ipv6-literal.net\\\n\n * 2409:8a62:32a:f161:211:32ff:fed8:a658\n\n * 2409-8a62-32a-f161-211-32ff-fed8-a658.ipv6-literal.net\n\n\n# 群晖 Docker注册表访问失败\n\n * 使用代理解决：如下（clash）\n * \n\n\n# 群晖 caldav无法验证用户信息\n\n\n\n日历和待办信息也是这样的\n\n我也不知道是哪一步出错了 只能把我回复的所有步骤都记录下来 具体是哪一步我并没有做排查\n\n处理步骤:\n\n * 更换新的ssl证书\n\n * 卸载\n\n * synology calendar\n\n * synology drive server\n\n * synology 应用程序服务\n\n * mail\n\n * mail server\n\n * docker\n\n * synology 所有的环境\n\n * node14\n\n * node16\n\n * node18\n\n * php7.3\n\n * php8.0\n\n * ...\n\n * ...\n\n * 卸载calendar我是清楚了清楚了数据了的\n\n * 执行计划数据清理\n\n * \n\n * 等待清理完成后重启\n\n * 重新安装之间卸载的插件\n\n * 在calendar中新建测试用的日历事件\n\n * 再次在手机上订阅就可以了\n\n * ",normalizedContent:"# cloud sync 系统错误\n\n\n\n * 网络驱动映射\n\n * 前提是：群晖和外网电脑都在ipv6环境下\n   \n   假设群晖的ipv6地址是2409:7b56:23cc:2280::1 把冒号 : 修改为连字符 - 并附加.ipv6-literal.net，把符号%替换为s，替换后的unc路径如下： \\2409-7b56-23cc-2280--1.ipv6-literal.net\\\n\n * 2409:8a62:32a:f161:211:32ff:fed8:a658\n\n * 2409-8a62-32a-f161-211-32ff-fed8-a658.ipv6-literal.net\n\n\n# 群晖 docker注册表访问失败\n\n * 使用代理解决：如下（clash）\n * \n\n\n# 群晖 caldav无法验证用户信息\n\n\n\n日历和待办信息也是这样的\n\n我也不知道是哪一步出错了 只能把我回复的所有步骤都记录下来 具体是哪一步我并没有做排查\n\n处理步骤:\n\n * 更换新的ssl证书\n\n * 卸载\n\n * synology calendar\n\n * synology drive server\n\n * synology 应用程序服务\n\n * mail\n\n * mail server\n\n * docker\n\n * synology 所有的环境\n\n * node14\n\n * node16\n\n * node18\n\n * php7.3\n\n * php8.0\n\n * ...\n\n * ...\n\n * 卸载calendar我是清楚了清楚了数据了的\n\n * 执行计划数据清理\n\n * \n\n * 等待清理完成后重启\n\n * 重新安装之间卸载的插件\n\n * 在calendar中新建测试用的日历事件\n\n * 再次在手机上订阅就可以了\n\n * ",charsets:{cjk:!0},lastUpdated:"2023/11/04, 10:55:11",lastUpdatedTimestamp:1699066511e3},{title:"cc攻击",frontmatter:{title:"cc攻击",date:"2022-12-17T15:07:06.000Z",permalink:"/pages/fc6308/",categories:["其他技术","安全"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3085.%E5%AE%89%E5%85%A8/3085020.cc%E6%94%BB%E5%87%BB.html",relativePath:"30.其他技术/3085.安全/3085020.cc攻击.md",key:"v-fac0801c",path:"/pages/fc6308/",headersStr:null,content:"CC攻击（Challenge Collapsar Attack，CC）是针对Web服务器或应用程序的攻击，利用获取信息的标准的GET/POST请求，如请求涉及数据库操作的URI（Universal Resource Identifier）或其他消耗系统资源的URI，造成服务器资源耗尽，无法响应正常请求。\n\nCC攻击是攻击者借助代理服务器生成指向受害主机的合法请求，实现DDoS和伪装攻击。攻击者通过控制某些主机不停地发送大量数据包给对方服务器，造成服务器资源耗尽，直至宕机崩溃。例如，当一个网页访问的人数特别多的时候，用户打开网页就慢了，CC攻击模拟多个用户（多少线程就是多少用户）不停地访问需要大量数据操作（需要占用大量的CPU资源）的页面，造成服务器资源的浪费，CPU的使用率长时间处于100%，将一直在处理连接直至网络拥塞，导致正常的访问被中止。\n\n",normalizedContent:"cc攻击（challenge collapsar attack，cc）是针对web服务器或应用程序的攻击，利用获取信息的标准的get/post请求，如请求涉及数据库操作的uri（universal resource identifier）或其他消耗系统资源的uri，造成服务器资源耗尽，无法响应正常请求。\n\ncc攻击是攻击者借助代理服务器生成指向受害主机的合法请求，实现ddos和伪装攻击。攻击者通过控制某些主机不停地发送大量数据包给对方服务器，造成服务器资源耗尽，直至宕机崩溃。例如，当一个网页访问的人数特别多的时候，用户打开网页就慢了，cc攻击模拟多个用户（多少线程就是多少用户）不停地访问需要大量数据操作（需要占用大量的cpu资源）的页面，造成服务器资源的浪费，cpu的使用率长时间处于100%，将一直在处理连接直至网络拥塞，导致正常的访问被中止。\n\n",charsets:{cjk:!0},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"我在使用群晖中的问题",frontmatter:{title:"我在使用群晖中的问题",date:"2023-06-23T23:46:50.000Z",permalink:"/pages/edadd2/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/1088205.%E6%88%91%E5%9C%A8%E4%BD%BF%E7%94%A8%E7%BE%A4%E6%99%96%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98.html",relativePath:"30.其他技术/3088.Nas/1088205.我在使用群晖中的问题.md",key:"v-096b8acd",path:"/pages/edadd2/",headersStr:null,content:" * 抱歉,你所指定的页面不存在\n   * 删除登录门户/DSM/域/自定义域 就好了",normalizedContent:" * 抱歉,你所指定的页面不存在\n   * 删除登录门户/dsm/域/自定义域 就好了",charsets:{cjk:!0},lastUpdated:"2023/09/11, 21:43:39",lastUpdatedTimestamp:1694439819e3},{title:"esxi 硬盘直通 黑群晖",frontmatter:{title:"esxi 硬盘直通 黑群晖",date:"2022-12-06T02:45:07.000Z",permalink:"/pages/494851/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/3088101.esxi%20%E7%A1%AC%E7%9B%98%E7%9B%B4%E9%80%9A%20%E9%BB%91%E7%BE%A4%E6%99%96.html",relativePath:"30.其他技术/3088.Nas/3088101.esxi 硬盘直通 黑群晖.md",key:"v-c7da08e8",path:"/pages/494851/",headers:[{level:2,title:"后期扩容",slug:"后期扩容",normalizedTitle:"后期扩容",charIndex:8},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:39}],headersStr:"后期扩容 配置",content:"...\n\n\n# 后期扩容\n\n\n\n可以看到硬盘大小跟存储池容量不一致，我这里已经配置好了，所有有扩容选项提示\n\n\n# 配置\n\n * ssh 登录\n\n * sodu -i切换root账号，密码一样的\n\n * 查看分区情况 fdisk /dev/sdb 然后按p键\n\n * 执行如下命令,就好了\n   \n   parted /dev/sdb resizepart 3 100%\n   \n   parted /dev/sdb resizepart 5 100%\n\n",normalizedContent:"...\n\n\n# 后期扩容\n\n\n\n可以看到硬盘大小跟存储池容量不一致，我这里已经配置好了，所有有扩容选项提示\n\n\n# 配置\n\n * ssh 登录\n\n * sodu -i切换root账号，密码一样的\n\n * 查看分区情况 fdisk /dev/sdb 然后按p键\n\n * 执行如下命令,就好了\n   \n   parted /dev/sdb resizepart 3 100%\n   \n   parted /dev/sdb resizepart 5 100%\n\n",charsets:{cjk:!0},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"黑群晖nas-tools使用",frontmatter:{title:"黑群晖nas-tools使用",date:"2022-12-09T02:08:32.000Z",permalink:"/pages/6f5e8b/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/3088200.%E9%BB%91%E7%BE%A4%E6%99%96nas-tools%E4%BD%BF%E7%94%A8.html",relativePath:"30.其他技术/3088.Nas/3088200.黑群晖nas-tools使用.md",key:"v-830953a2",path:"/pages/6f5e8b/",headers:[{level:3,title:"docker 安装",slug:"docker-安装",normalizedTitle:"docker 安装",charIndex:2},{level:3,title:"媒体库配置",slug:"媒体库配置",normalizedTitle:"媒体库配置",charIndex:56},{level:3,title:"目录同步配置",slug:"目录同步配置",normalizedTitle:"目录同步配置",charIndex:68},{level:3,title:"下载器配",slug:"下载器配",normalizedTitle:"下载器配",charIndex:81},{level:4,title:"下载目录配置",slug:"下载目录配置",normalizedTitle:"下载目录配置",charIndex:89},{level:4,title:"transmission",slug:"transmission",normalizedTitle:"transmission",charIndex:101},{level:3,title:"媒体服务器",slug:"媒体服务器",normalizedTitle:"媒体服务器",charIndex:120},{level:3,title:"问题：",slug:"问题",normalizedTitle:"问题：",charIndex:202}],headersStr:"docker 安装 媒体库配置 目录同步配置 下载器配 下载目录配置 transmission 媒体服务器 问题：",content:"# docker 安装\n\n\n\n在套件中心搜索安装即可，前提是需要建立存储空间 不然不知道安装在哪儿去了\n\n\n# 媒体库配置\n\n\n\n\n# 目录同步配置\n\n\n\n\n# 下载器配\n\n# 下载目录配置\n\n\n\n# transmission\n\n\n\n\n# 媒体服务器\n\n\n\n我这里使用的是 jellyfin\n\n需要在控制台中所有的类型目录指定到 link 文件夹中 这样更准确\n\n\n\n在钩上nfo的储存方式\n\n\n\n\n# 问题：\n\n安装启用后 如果报错 加载路径失败: [Errno 13] Permission denied: '/volume1/video'\n\n需要去：control panel -> shared folder -> 找到video -> edit -> Permissions -> 更改system internal user权限到全部read write",normalizedContent:"# docker 安装\n\n\n\n在套件中心搜索安装即可，前提是需要建立存储空间 不然不知道安装在哪儿去了\n\n\n# 媒体库配置\n\n\n\n\n# 目录同步配置\n\n\n\n\n# 下载器配\n\n# 下载目录配置\n\n\n\n# transmission\n\n\n\n\n# 媒体服务器\n\n\n\n我这里使用的是 jellyfin\n\n需要在控制台中所有的类型目录指定到 link 文件夹中 这样更准确\n\n\n\n在钩上nfo的储存方式\n\n\n\n\n# 问题：\n\n安装启用后 如果报错 加载路径失败: [errno 13] permission denied: '/volume1/video'\n\n需要去：control panel -> shared folder -> 找到video -> edit -> permissions -> 更改system internal user权限到全部read write",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"黑群晖安装",frontmatter:{title:"黑群晖安装",date:"2022-12-09T03:05:38.000Z",permalink:"/pages/7cd537/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/3088201.%E9%BB%91%E7%BE%A4%E6%99%96%E5%AE%89%E8%A3%85.html",relativePath:"30.其他技术/3088.Nas/3088201.黑群晖安装.md",key:"v-2f1c16fe",path:"/pages/7cd537/",headersStr:null,content:" * 创建现有硬盘\n * 依次上传 flat文件和 另外一个小文件，最后就能看到出现了新的vmdk\n   * \n * 如果你跟我一样用了 pcie 转 sata 的话，把sata控制器直通给群晖就好了。 （另外一种方式就是在esxi中转换存储格式，分配给群晖。好想不支持硬盘休眠）\n   * ",normalizedContent:" * 创建现有硬盘\n * 依次上传 flat文件和 另外一个小文件，最后就能看到出现了新的vmdk\n   * \n * 如果你跟我一样用了 pcie 转 sata 的话，把sata控制器直通给群晖就好了。 （另外一种方式就是在esxi中转换存储格式，分配给群晖。好想不支持硬盘休眠）\n   * ",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"磁盘阵列",frontmatter:{title:"磁盘阵列",date:"2022-12-09T02:15:14.000Z",permalink:"/pages/0f2be8/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/3088204.%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97.html",relativePath:"30.其他技术/3088.Nas/3088204.磁盘阵列.md",key:"v-843e79e6",path:"/pages/0f2be8/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"群晖Docker版Jellyfin+TMM刮削器",frontmatter:{title:"群晖Docker版Jellyfin+TMM刮削器",date:"2022-12-09T12:56:59.000Z",permalink:"/pages/1f9c44/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/3088301.%E7%BE%A4%E6%99%96Docker%E7%89%88Jellyfin+TMM%E5%88%AE%E5%89%8A%E5%99%A8.html",relativePath:"30.其他技术/3088.Nas/3088301.群晖Docker版Jellyfin+TMM刮削器.md",key:"v-056c5481",path:"/pages/1f9c44/",headers:[{level:2,title:"jellyfin",slug:"jellyfin",normalizedTitle:"jellyfin",charIndex:2},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:15},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:231},{level:4,title:"硬解",slug:"硬解",normalizedTitle:"硬解",charIndex:26},{level:5,title:"是否支持",slug:"是否支持",normalizedTitle:"是否支持",charIndex:726},{level:5,title:"结果：",slug:"结果",normalizedTitle:"结果：",charIndex:888}],headersStr:"jellyfin 安装 配置 硬解 是否支持 结果：",content:"# jellyfin\n\n\n# 安装\n\n使用这个，支持硬解\n\n> nyanmisaka/jellyfin\n> \n> https://registry.hub.docker.com/r/nyanmisaka/jellyfin/\n\n * Vulkan滤波支持AMD VAAPI与RADV驱动程序。\n * 支持HEVC播放Chrome 104+可选标志。\n * VPP色调映射亮度/对比度增益支持。\n * 支持shaka播放器在桌面浏览器上播放fMP4。\n * 杜比视觉配置文件5和8到SDR硬件色调映射。\n * AMD/Intel/Nvidia全硬件滤波支持。\n * 实验AV1硬件解码。\n * 英特尔低功耗编码。(减少4k转码和色调映射的开销，gen11之前只支持LP H264)\n * 改进的色调映射和字幕刻录性能。\n\n在注册表中搜索下载后，在映像中启动\n\n\n\n * 配置文件路径映射\n\n我的是这样的：\n\ndocker/jellyfin/config => /config\n\ndocker/jellyfin/catch => /catch\n\nmovie => /movie\n\n * 网络选择与宿主机共享\n\n最终的配置截图：\n\n最终运行如下：（改了下文件路径 catch => cache)\n\n\n\n----------------------------------------\n\n\n# 配置\n\n打开：docker ip:8096\n\n媒体库：电影：media/movie\n\n节目（电视剧）：media/tv\n\n节目（动漫）：media/anime\n\n混合（课程）：lesson\n\n# 硬解\n\n硬件转码：提升视频解码的能力，同时 CPU 占用不会很高\n\n# 是否支持\n\nssh 连接到群晖 （默认关闭了ssh连接的，需要手动打开）\n\n输入命令： ls /dev/dri\n\n\n\n只要群晖 /dev/dri 目录下有 renderD128 文件，就说明显卡驱动成功了，显卡如果本身支持硬解码、那就可以硬解。\n\n我这里本来是没有的，我就在esxi把 cpu 核显直通给了群晖就好了\n\n# 结果：\n\n\n\n",normalizedContent:"# jellyfin\n\n\n# 安装\n\n使用这个，支持硬解\n\n> nyanmisaka/jellyfin\n> \n> https://registry.hub.docker.com/r/nyanmisaka/jellyfin/\n\n * vulkan滤波支持amd vaapi与radv驱动程序。\n * 支持hevc播放chrome 104+可选标志。\n * vpp色调映射亮度/对比度增益支持。\n * 支持shaka播放器在桌面浏览器上播放fmp4。\n * 杜比视觉配置文件5和8到sdr硬件色调映射。\n * amd/intel/nvidia全硬件滤波支持。\n * 实验av1硬件解码。\n * 英特尔低功耗编码。(减少4k转码和色调映射的开销，gen11之前只支持lp h264)\n * 改进的色调映射和字幕刻录性能。\n\n在注册表中搜索下载后，在映像中启动\n\n\n\n * 配置文件路径映射\n\n我的是这样的：\n\ndocker/jellyfin/config => /config\n\ndocker/jellyfin/catch => /catch\n\nmovie => /movie\n\n * 网络选择与宿主机共享\n\n最终的配置截图：\n\n最终运行如下：（改了下文件路径 catch => cache)\n\n\n\n----------------------------------------\n\n\n# 配置\n\n打开：docker ip:8096\n\n媒体库：电影：media/movie\n\n节目（电视剧）：media/tv\n\n节目（动漫）：media/anime\n\n混合（课程）：lesson\n\n# 硬解\n\n硬件转码：提升视频解码的能力，同时 cpu 占用不会很高\n\n# 是否支持\n\nssh 连接到群晖 （默认关闭了ssh连接的，需要手动打开）\n\n输入命令： ls /dev/dri\n\n\n\n只要群晖 /dev/dri 目录下有 renderd128 文件，就说明显卡驱动成功了，显卡如果本身支持硬解码、那就可以硬解。\n\n我这里本来是没有的，我就在esxi把 cpu 核显直通给了群晖就好了\n\n# 结果：\n\n\n\n",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"黑群晖基础使用",frontmatter:{title:"黑群晖基础使用",date:"2022-12-09T02:11:33.000Z",permalink:"/pages/dd4d32/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/3099202.%E9%BB%91%E7%BE%A4%E6%99%96%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8.html",relativePath:"30.其他技术/3088.Nas/3099202.黑群晖基础使用.md",key:"v-44d36276",path:"/pages/dd4d32/",headers:[{level:3,title:"存储空间使用",slug:"存储空间使用",normalizedTitle:"存储空间使用",charIndex:2},{level:3,title:"共享文件夹",slug:"共享文件夹",normalizedTitle:"共享文件夹",charIndex:102}],headersStr:"存储空间使用 共享文件夹",content:"# 存储空间使用\n\n在此之前可以了解一下磁盘阵列\n\n\n\n插入硬盘后建立存储池，可以根据你的硬盘来（我的硬盘大小不一，而且初步使用没有那么高的性能要求，就正常建立了，用不着阵列）\n\n就比较简单\n\n\n\n\n# 共享文件夹\n\n很多时候需要用多共享文件夹，不论你是其他机器访问也好。还是本身软件或者容器需要跨存储空间读写都需要用到这样的文件夹\n\n如：",normalizedContent:"# 存储空间使用\n\n在此之前可以了解一下磁盘阵列\n\n\n\n插入硬盘后建立存储池，可以根据你的硬盘来（我的硬盘大小不一，而且初步使用没有那么高的性能要求，就正常建立了，用不着阵列）\n\n就比较简单\n\n\n\n\n# 共享文件夹\n\n很多时候需要用多共享文件夹，不论你是其他机器访问也好。还是本身软件或者容器需要跨存储空间读写都需要用到这样的文件夹\n\n如：",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"群辉自动备份微信备份文件",frontmatter:{title:"群辉自动备份微信备份文件",date:"2023-05-27T20:14:20.000Z",permalink:"/pages/961bf8/",categories:["其他技术","Nas"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3088.Nas/3099205.%E7%BE%A4%E8%BE%89%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%BE%AE%E4%BF%A1%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6.html",relativePath:"30.其他技术/3088.Nas/3099205.群辉自动备份微信备份文件.md",key:"v-79b275fd",path:"/pages/961bf8/",headersStr:null,content:"备份地址:\n\n\n\n/Users/izhaong/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/Backup\n\n",normalizedContent:"备份地址:\n\n\n\n/users/izhaong/library/containers/com.tencent.xinwechat/data/library/application support/com.tencent.xinwechat/2.0b4.0.9/backup\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"网卡选配指南",frontmatter:{title:"网卡选配指南",date:"2022-08-29T19:16:30.000Z",permalink:"/pages/c508da/",categories:["其他技术","硬件"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3090.%E7%A1%AC%E4%BB%B6/1090050.%E7%BD%91%E5%8D%A1%E9%80%89%E9%85%8D%E6%8C%87%E5%8D%97.html",relativePath:"30.其他技术/3090.硬件/1090050.网卡选配指南.md",key:"v-a5adc4d6",path:"/pages/c508da/",headers:[{level:2,title:"选配问题",slug:"选配问题",normalizedTitle:"选配问题",charIndex:2},{level:2,title:"网卡介绍",slug:"网卡介绍",normalizedTitle:"网卡介绍",charIndex:48},{level:3,title:"网卡速率",slug:"网卡速率",normalizedTitle:"网卡速率",charIndex:57},{level:3,title:"网卡类型",slug:"网卡类型",normalizedTitle:"网卡类型",charIndex:109},{level:3,title:"驱动支持",slug:"驱动支持",normalizedTitle:"驱动支持",charIndex:175}],headersStr:"选配问题 网卡介绍 网卡速率 网卡类型 驱动支持",content:"# 选配问题\n\n * 不同系统\n\n * 网卡的驱动\n\n * 在安装驱动时遇到的各种问题\n\n\n# 网卡介绍\n\n\n# 网卡速率\n\n现在时间为 2022 08 29\n\n如今这个时候多数为千兆 2.5g 甚至万兆网卡\n\n\n# 网卡类型\n\n * usb3.0\n   \n   * 绿联 rtl8236\n\n * pcie\n   \n   * RTL8125\n\n\n# 驱动支持\n\n * 群晖系统\n   \n   * 可能会存在最大网口限制的情况，需要手动修改系统文件，最后rebott\n\n * windows系统\n\n * ESXi 系统\n\n * unRaid 系统\n   \n   * 6.8版本以后默认支持 pcie RTL8125\n   * 没有阵列，需要通过缓存加快写入速度\n\n测试速度\n\niperf3 -c 192.168.2.143 -n 100G",normalizedContent:"# 选配问题\n\n * 不同系统\n\n * 网卡的驱动\n\n * 在安装驱动时遇到的各种问题\n\n\n# 网卡介绍\n\n\n# 网卡速率\n\n现在时间为 2022 08 29\n\n如今这个时候多数为千兆 2.5g 甚至万兆网卡\n\n\n# 网卡类型\n\n * usb3.0\n   \n   * 绿联 rtl8236\n\n * pcie\n   \n   * rtl8125\n\n\n# 驱动支持\n\n * 群晖系统\n   \n   * 可能会存在最大网口限制的情况，需要手动修改系统文件，最后rebott\n\n * windows系统\n\n * esxi 系统\n\n * unraid 系统\n   \n   * 6.8版本以后默认支持 pcie rtl8125\n   * 没有阵列，需要通过缓存加快写入速度\n\n测试速度\n\niperf3 -c 192.168.2.143 -n 100g",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"到手的新硬盘最佳校验方式",frontmatter:{title:"到手的新硬盘最佳校验方式",date:"2023-09-17T12:31:39.000Z",permalink:"/pages/a352ca/",categories:["其他技术","硬件"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3090.%E7%A1%AC%E4%BB%B6/3090020.%E5%88%B0%E6%89%8B%E7%9A%84%E6%96%B0%E7%A1%AC%E7%9B%98%E6%9C%80%E4%BD%B3%E6%A0%A1%E9%AA%8C%E6%96%B9%E5%BC%8F.html",relativePath:"30.其他技术/3090.硬件/3090020.到手的新硬盘最佳校验方式.md",key:"v-3a0ac19e",path:"/pages/a352ca/",headers:[{level:2,title:"坏道扫描",slug:"坏道扫描",normalizedTitle:"坏道扫描",charIndex:225},{level:3,title:"Victoria",slug:"victoria",normalizedTitle:"victoria",charIndex:244}],headersStr:"坏道扫描 Victoria",content:"机械硬盘主要为堆叠盘， 每个碟片基本最大不超过2T容量\n\n\n\n使用CrystalDiskInfo查看硬盘信息\n\n下载地址：https://dsm.izhaong.com:5001/sharing/KuWQHoCsT\n\n主要几个点：\n\n * 通电次数\n * 通电时间\n * 扇区是否有坏道(C4 C5 C6)\n * 读写历程（F1 F2）主要在固态硬盘和企业级硬盘中才会有\n\n\n\n试一下读写，感觉我这个有点坑。正常企业级应该能有140上下\n\n\n\n\n# 坏道扫描\n\n单个硬盘推荐是用这个：\n\nVictoria 5.37：https://hdd.by/Victoria/Victoria537.zip\n\n多个硬盘使用硬盘哨兵\n\n硬盘哨兵:https://dsm.izhaong.com:5001/sharing/aS39B5ioc\n\n\n# Victoria\n\n\n\n使用看我另外一篇文章\n\n硬盘检测工具 Victoria 简单使用教程，Victoria 无响应？无法扫描？\n\n检测结果：\n\n",normalizedContent:"机械硬盘主要为堆叠盘， 每个碟片基本最大不超过2t容量\n\n\n\n使用crystaldiskinfo查看硬盘信息\n\n下载地址：https://dsm.izhaong.com:5001/sharing/kuwqhocst\n\n主要几个点：\n\n * 通电次数\n * 通电时间\n * 扇区是否有坏道(c4 c5 c6)\n * 读写历程（f1 f2）主要在固态硬盘和企业级硬盘中才会有\n\n\n\n试一下读写，感觉我这个有点坑。正常企业级应该能有140上下\n\n\n\n\n# 坏道扫描\n\n单个硬盘推荐是用这个：\n\nvictoria 5.37：https://hdd.by/victoria/victoria537.zip\n\n多个硬盘使用硬盘哨兵\n\n硬盘哨兵:https://dsm.izhaong.com:5001/sharing/as39b5ioc\n\n\n# victoria\n\n\n\n使用看我另外一篇文章\n\n硬盘检测工具 victoria 简单使用教程，victoria 无响应？无法扫描？\n\n检测结果：\n\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"硬盘检测工具 Victoria 简单使用教程，Victoria 无响应？无法扫描？",frontmatter:{title:"硬盘检测工具 Victoria 简单使用教程，Victoria 无响应？无法扫描？",date:"2023-09-17T16:09:48.000Z",permalink:"/pages/f91b53/",categories:["其他技术","硬件"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3090.%E7%A1%AC%E4%BB%B6/3090022.%E7%A1%AC%E7%9B%98%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%20Victoria%20%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8CVictoria%20%E6%97%A0%E5%93%8D%E5%BA%94%EF%BC%9F%E6%97%A0%E6%B3%95%E6%89%AB%E6%8F%8F%EF%BC%9F.html",relativePath:"30.其他技术/3090.硬件/3090022.硬盘检测工具 Victoria 简单使用教程，Victoria 无响应？无法扫描？.md",key:"v-3a1e5206",path:"/pages/f91b53/",headers:[{level:2,title:"一、注意事项",slug:"一、注意事项",normalizedTitle:"一、注意事项",charIndex:53},{level:2,title:"二、使用教程",slug:"二、使用教程",normalizedTitle:"二、使用教程",charIndex:391},{level:3,title:"1. 如果使用汉化版先将语言修改为英文",slug:"_1-如果使用汉化版先将语言修改为英文",normalizedTitle:"1. 如果使用汉化版先将语言修改为英文",charIndex:529},{level:3,title:"2. 修改设置",slug:"_2-修改设置",normalizedTitle:"2. 修改设置",charIndex:620},{level:3,title:"3. 选择需要检测的硬盘",slug:"_3-选择需要检测的硬盘",normalizedTitle:"3. 选择需要检测的硬盘",charIndex:845},{level:3,title:"4. 检测",slug:"_4-检测",normalizedTitle:"4. 检测",charIndex:919},{level:3,title:"5. 检测标准参考块的颜色",slug:"_5-检测标准参考块的颜色",normalizedTitle:"5. 检测标准参考块的颜色",charIndex:1009},{level:3,title:"6. 如何查看深灰色/绿块/橙色块/坏块？",slug:"_6-如何查看深灰色-绿块-橙色块-坏块",normalizedTitle:"6. 如何查看深灰色/绿块/橙色块/坏块？",charIndex:1074},{level:3,title:"7. 如何对块进行复扫",slug:"_7-如何对块进行复扫",normalizedTitle:"7. 如何对块进行复扫",charIndex:1660},{level:3,title:"8. 硬盘修复教程，先做好备份",slug:"_8-硬盘修复教程-先做好备份",normalizedTitle:"8. 硬盘修复教程，先做好备份",charIndex:2024},{level:2,title:"三、其他补充",slug:"三、其他补充",normalizedTitle:"三、其他补充",charIndex:2402}],headersStr:"一、注意事项 二、使用教程 1. 如果使用汉化版先将语言修改为英文 2. 修改设置 3. 选择需要检测的硬盘 4. 检测 5. 检测标准参考块的颜色 6. 如何查看深灰色/绿块/橙色块/坏块？ 7. 如何对块进行复扫 8. 硬盘修复教程，先做好备份 三、其他补充",content:"转载：https://www.cnblogs.com/kjcy8/p/17037779.html\n\n\n# 一、注意事项\n\n 1. 下载完成后不要在压缩包内运行软件直接使用，先解压；\n 2. 如果软件无法正常打开，请右键使用管理员模式运行。\n 3. 为确保检测结果准确 (避免卡深灰块)，运行 Victoria 检测前请确保电脑满足以下要求：\n\n（1）关掉所有后台运行的软件，避免造成干扰。\n\n（2）关闭电脑自动睡眠/休眠。\n\n（3）尽可能不要拖动 Victoria 窗口。\n\n（4）有条件最好在 pe 下进行扫盘。\n\n（5）扫盘过程中请务必保证供电稳定、散热良好。\n\n 4. 移动硬盘、硬盘盒连接的情况下建议选择 5.23 版本，新版本 5.37 有兼容性问题会把USB盘卡掉线。\n 5. CMR 硬盘不要分区！ 直接扫，SMR 硬盘需要写满再扫，空盘会作弊，读的是缓存。\n\n\n# 二、使用教程\n\n工具下载，下面链接都是官网地址：\n\nVictoria 5.23：https://hdd.by/Victoria/Victoria523.zip Victoria 5.37：https://hdd.by/Victoria/Victoria537.zip\n\n\n# 1. 如果使用汉化版先将语言修改为英文\n\n在上方菜单栏选中语言，将语言修改为English。\n\n\n\n修改为英文是为了保证稳定性，跟着步骤走不担心不认识英文（已加入中文翻译）\n\n\n# 2. 修改设置\n\n上方菜单栏选中 Settings\n\n\n\n切换到 Tests options (即测试选项)\n\nEnable breaking internal loops (即启用断开的内部循环) Dark-gray (即深灰色) Green (即绿色) 将以上三项选中，其他选项保持默认，然后点右上角红叉即保存。\n\n使用 5.23 版本可以选择将 Grid 打勾，会显示为网格模式，测试结果是曲线一样的，只是形式上和5.3X版本统一了。\n\n\n# 3. 选择需要检测的硬盘\n\n点击 Drive Info (即驱动器信息) 回到主界面\n\n\n\n右侧点击选中需要检测的硬盘，确认硬盘容量和型号\n\n\n# 4. 检测\n\n主界面点击 Test & Repair （即测试/维修；绿色医疗箱图标）\n\n\n\n点击 Scan 即可开始扫描 (底下的 Grid 勾选项可以切换网格和曲线)\n\n\n# 5. 检测标准参考块的颜色\n\n三种灰色一般认为良好，绿块及以下需要重点关注，右侧会显示速度、检测进程百分比、预计剩余时间\n\n\n# 6. 如何查看深灰色/绿块/橙色块/坏块？\n\n在之前设置步骤，已经勾选 深灰色 和 绿色，会记录在 log 日志中（即 Victoria 软件下方日志处，会以红色字体显示）\n\n【Block start at xxxxx = xxx ms】（翻译过来就是【xxxxx块的延迟为 xxx ms】）\n\n不同延迟值对应块的不同色块\n\n\n\n色块左边的绿色数字，表示本色块的最大延迟值，上图中 109ms 110ms 都属于深灰块 扫描日志保存在 Victoria 所在目录下 LOGS\\硬盘名称\\eventlog （比如我的：D:\\Programs\\Victoria537\\LOGS\\WDC WD5000AVDS-63U7B1__WD-WCAV9AP17037\\eventlog.txt）\n\n白灰色 25ms 以下，表示优秀 浅灰色 25ms-100ms 之间，表示良好 深灰块 100ms-250ms 之间，110ms，125ms基本上都不用理（延时高的话复扫） 绿块 250ms-1000ms之间，建议复扫 橙色表示可能有坏道，复扫如果还存在最好退货 红色表示有坏道，复扫如果还存在必须退货 Err表示错误块，复扫如果还存在表示硬盘已坏 深灰色和绿色会提示但没有 Warning 橙色及以上都会提示并有【Warning】，根据【xxx ms】查询具体是哪些块的延迟较高\n\n\n# 7. 如何对块进行复扫\n\n查看日志中【Block start at xxxxx = xxx ms】找到对应块 比如对图中的【Block start at 1507328 (772 MB) = 109 ms】进行复扫\n\n\n\n鼠标右键 Set xxxxx as Start LBA 和 Set xxxxx as End LBA 会将 1507328 填入上面的 Start LBA (即起始扇区) 和 End LBA (即结束扇区) 输入框 如果需要复扫的块比较多，可以直接查看日志文件，复制对应扇区值 扫描日志保存在 Victoria 所在目录下 LOGS\\硬盘名称\\eventlog\n\n建议前后至少加减10万个块左右： Start LBA：1407328 End LBA：1607328\n\n\n\n点击 Scan 重新扫描\n\n\n# 8. 硬盘修复教程，先做好备份\n\nIgnore（忽略）： 扫描时发现坏道和超时的磁道时不处理，只检测不修复。\n\nErase（擦除）： 扫描时发现坏道和读取超时的扇区坏道进行擦除处理，对逻辑坏道(CRC错误)修复效果较好\n\nRemap（重新映射）： 重新定义坏块的 LBA 地址，将坏道写入到坏道列表 G-list 中 硬盘生产时都会有保留容量，用保留容量内的好地址替换坏块，适合少量坏扇区的修复。\n\nRefresh（刷新）： 没啥用\n\n如果有大量坏块，先用 Erase（擦除）进行全盘擦写，将 timeout,ms（超时）改为 100-250ms，看是否减少坏道 然后再使用Remap（重新映射），将 timeout,ms（超时）填写合适的超时值，建议先修改为 250ms，扫描多次后再修改为 150ms 扫描，应该可以将多数色块扫描进G表。\n\n\n\n\n# 三、其他补充\n\n\n\n\n\n\n\n\n\n\n\n参考：\n\nhttps://post.smzdm.com/p/a5o5pdpl/\n\nhttps://tieba.baidu.com/p/8019180969\n\nhttps://tieba.baidu.com/p/7276899015",normalizedContent:"转载：https://www.cnblogs.com/kjcy8/p/17037779.html\n\n\n# 一、注意事项\n\n 1. 下载完成后不要在压缩包内运行软件直接使用，先解压；\n 2. 如果软件无法正常打开，请右键使用管理员模式运行。\n 3. 为确保检测结果准确 (避免卡深灰块)，运行 victoria 检测前请确保电脑满足以下要求：\n\n（1）关掉所有后台运行的软件，避免造成干扰。\n\n（2）关闭电脑自动睡眠/休眠。\n\n（3）尽可能不要拖动 victoria 窗口。\n\n（4）有条件最好在 pe 下进行扫盘。\n\n（5）扫盘过程中请务必保证供电稳定、散热良好。\n\n 4. 移动硬盘、硬盘盒连接的情况下建议选择 5.23 版本，新版本 5.37 有兼容性问题会把usb盘卡掉线。\n 5. cmr 硬盘不要分区！ 直接扫，smr 硬盘需要写满再扫，空盘会作弊，读的是缓存。\n\n\n# 二、使用教程\n\n工具下载，下面链接都是官网地址：\n\nvictoria 5.23：https://hdd.by/victoria/victoria523.zip victoria 5.37：https://hdd.by/victoria/victoria537.zip\n\n\n# 1. 如果使用汉化版先将语言修改为英文\n\n在上方菜单栏选中语言，将语言修改为english。\n\n\n\n修改为英文是为了保证稳定性，跟着步骤走不担心不认识英文（已加入中文翻译）\n\n\n# 2. 修改设置\n\n上方菜单栏选中 settings\n\n\n\n切换到 tests options (即测试选项)\n\nenable breaking internal loops (即启用断开的内部循环) dark-gray (即深灰色) green (即绿色) 将以上三项选中，其他选项保持默认，然后点右上角红叉即保存。\n\n使用 5.23 版本可以选择将 grid 打勾，会显示为网格模式，测试结果是曲线一样的，只是形式上和5.3x版本统一了。\n\n\n# 3. 选择需要检测的硬盘\n\n点击 drive info (即驱动器信息) 回到主界面\n\n\n\n右侧点击选中需要检测的硬盘，确认硬盘容量和型号\n\n\n# 4. 检测\n\n主界面点击 test & repair （即测试/维修；绿色医疗箱图标）\n\n\n\n点击 scan 即可开始扫描 (底下的 grid 勾选项可以切换网格和曲线)\n\n\n# 5. 检测标准参考块的颜色\n\n三种灰色一般认为良好，绿块及以下需要重点关注，右侧会显示速度、检测进程百分比、预计剩余时间\n\n\n# 6. 如何查看深灰色/绿块/橙色块/坏块？\n\n在之前设置步骤，已经勾选 深灰色 和 绿色，会记录在 log 日志中（即 victoria 软件下方日志处，会以红色字体显示）\n\n【block start at xxxxx = xxx ms】（翻译过来就是【xxxxx块的延迟为 xxx ms】）\n\n不同延迟值对应块的不同色块\n\n\n\n色块左边的绿色数字，表示本色块的最大延迟值，上图中 109ms 110ms 都属于深灰块 扫描日志保存在 victoria 所在目录下 logs\\硬盘名称\\eventlog （比如我的：d:\\programs\\victoria537\\logs\\wdc wd5000avds-63u7b1__wd-wcav9ap17037\\eventlog.txt）\n\n白灰色 25ms 以下，表示优秀 浅灰色 25ms-100ms 之间，表示良好 深灰块 100ms-250ms 之间，110ms，125ms基本上都不用理（延时高的话复扫） 绿块 250ms-1000ms之间，建议复扫 橙色表示可能有坏道，复扫如果还存在最好退货 红色表示有坏道，复扫如果还存在必须退货 err表示错误块，复扫如果还存在表示硬盘已坏 深灰色和绿色会提示但没有 warning 橙色及以上都会提示并有【warning】，根据【xxx ms】查询具体是哪些块的延迟较高\n\n\n# 7. 如何对块进行复扫\n\n查看日志中【block start at xxxxx = xxx ms】找到对应块 比如对图中的【block start at 1507328 (772 mb) = 109 ms】进行复扫\n\n\n\n鼠标右键 set xxxxx as start lba 和 set xxxxx as end lba 会将 1507328 填入上面的 start lba (即起始扇区) 和 end lba (即结束扇区) 输入框 如果需要复扫的块比较多，可以直接查看日志文件，复制对应扇区值 扫描日志保存在 victoria 所在目录下 logs\\硬盘名称\\eventlog\n\n建议前后至少加减10万个块左右： start lba：1407328 end lba：1607328\n\n\n\n点击 scan 重新扫描\n\n\n# 8. 硬盘修复教程，先做好备份\n\nignore（忽略）： 扫描时发现坏道和超时的磁道时不处理，只检测不修复。\n\nerase（擦除）： 扫描时发现坏道和读取超时的扇区坏道进行擦除处理，对逻辑坏道(crc错误)修复效果较好\n\nremap（重新映射）： 重新定义坏块的 lba 地址，将坏道写入到坏道列表 g-list 中 硬盘生产时都会有保留容量，用保留容量内的好地址替换坏块，适合少量坏扇区的修复。\n\nrefresh（刷新）： 没啥用\n\n如果有大量坏块，先用 erase（擦除）进行全盘擦写，将 timeout,ms（超时）改为 100-250ms，看是否减少坏道 然后再使用remap（重新映射），将 timeout,ms（超时）填写合适的超时值，建议先修改为 250ms，扫描多次后再修改为 150ms 扫描，应该可以将多数色块扫描进g表。\n\n\n\n\n# 三、其他补充\n\n\n\n\n\n\n\n\n\n\n\n参考：\n\nhttps://post.smzdm.com/p/a5o5pdpl/\n\nhttps://tieba.baidu.com/p/8019180969\n\nhttps://tieba.baidu.com/p/7276899015",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"硬盘选配指南",frontmatter:{title:"硬盘选配指南",date:"2022-08-11T20:10:08.000Z",permalink:"/pages/ca1134/",categories:["其他技术","硬件"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3090.%E7%A1%AC%E4%BB%B6/3090040.%E7%A1%AC%E7%9B%98%E9%80%89%E9%85%8D%E6%8C%87%E5%8D%97.html",relativePath:"30.其他技术/3090.硬件/3090040.硬盘选配指南.md",key:"v-7dcec107",path:"/pages/ca1134/",headersStr:null,content:"因为各种原因情况下有对比 西数 和 希捷 系列硬盘产品",normalizedContent:"因为各种原因情况下有对比 西数 和 希捷 系列硬盘产品",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"环境",frontmatter:{title:"环境",date:"2022-09-03T10:02:18.000Z",permalink:"/pages/ea2081/",categories:["其他技术","CDCI"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3092.CDCI/3092010.%E7%8E%AF%E5%A2%83.html",relativePath:"30.其他技术/3092.CDCI/3092010.环境.md",key:"v-c7488666",path:"/pages/ea2081/",headersStr:null,content:"软件应用开发经典模型有这样几个环境：开发环境(development)、集成环境(integration)、测试环境(testing)、QA验证，模拟环境(staging)、生产环境(production)。\n\n",normalizedContent:"软件应用开发经典模型有这样几个环境：开发环境(development)、集成环境(integration)、测试环境(testing)、qa验证，模拟环境(staging)、生产环境(production)。\n\n",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"知识库",frontmatter:{title:"知识库",date:"2022-08-28T11:50:29.000Z",permalink:"/pages/cb780b/",categories:["其他技术","团队管理"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3095.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/3095.%E7%9F%A5%E8%AF%86%E5%BA%93.html",relativePath:"30.其他技术/3095.团队管理/3095.知识库.md",key:"v-8dd3c12e",path:"/pages/cb780b/",headers:[{level:3,title:"知识库",slug:"知识库",normalizedTitle:"知识库",charIndex:2},{level:3,title:"技术方案文档",slug:"技术方案文档",normalizedTitle:"技术方案文档",charIndex:10},{level:3,title:"架构设计文档",slug:"架构设计文档",normalizedTitle:"架构设计文档",charIndex:21}],headersStr:"知识库 技术方案文档 架构设计文档",content:"# 知识库\n\n\n# 技术方案文档\n\n\n# 架构设计文档",normalizedContent:"# 知识库\n\n\n# 技术方案文档\n\n\n# 架构设计文档",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"技术设计文档",frontmatter:{title:"技术设计文档",date:"2023-01-06T12:59:53.000Z",permalink:"/pages/b7d80d/",categories:["其他技术","团队管理"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3095.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/3095020.%E6%8A%80%E6%9C%AF%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3.html",relativePath:"30.其他技术/3095.团队管理/3095020.技术设计文档.md",key:"v-859c6816",path:"/pages/b7d80d/",headersStr:null,content:"为何难写？\n\n * 没有规范可依\n * 不常写\n\n如何写，技巧：\n\n * 随性一些，解释一下你要如何做，即可\n * 可以先尝试写一部分代码，捋一捋思路，再来写文档—【注意】这里写代码纯是为了捋思路、为了写文档，搞清楚目的\n\n写设计文档是浪费时间吗？\n\n * 如果你真的想明白了，最多浪费你 1-2h时间，不会导致项目延期\n\n * 如果你写不出来，说明你没想明白，正好暴露了问题",normalizedContent:"为何难写？\n\n * 没有规范可依\n * 不常写\n\n如何写，技巧：\n\n * 随性一些，解释一下你要如何做，即可\n * 可以先尝试写一部分代码，捋一捋思路，再来写文档—【注意】这里写代码纯是为了捋思路、为了写文档，搞清楚目的\n\n写设计文档是浪费时间吗？\n\n * 如果你真的想明白了，最多浪费你 1-2h时间，不会导致项目延期\n\n * 如果你写不出来，说明你没想明白，正好暴露了问题",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"技能人才评价工作网pdf文件下载方法",frontmatter:{title:"技能人才评价工作网pdf文件下载方法",date:"2023-09-17T13:53:13.000Z",permalink:"/pages/5e8584/",categories:["其他技术","破解"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3095.%E7%A0%B4%E8%A7%A3/3095011.%E6%8A%80%E8%83%BD%E4%BA%BA%E6%89%8D%E8%AF%84%E4%BB%B7%E5%B7%A5%E4%BD%9C%E7%BD%91pdf%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95.html",relativePath:"30.其他技术/3095.破解/3095011.技能人才评价工作网pdf文件下载方法.md",key:"v-c95955ea",path:"/pages/5e8584/",headers:[{level:2,title:"方法一： 元素截图",slug:"方法一-元素截图",normalizedTitle:"方法一： 元素截图",charIndex:39},{level:2,title:"方法二：直接取文件源码处理",slug:"方法二-直接取文件源码处理",normalizedTitle:"方法二：直接取文件源码处理",charIndex:2193}],headersStr:"方法一： 元素截图 方法二：直接取文件源码处理",content:"> 该网站和该技术仅仅学习使用, 若有侵权和侵犯利益, 可联系我删除\n\n\n# 方法一： 元素截图\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2023-08-22 17:31:20\n * @LastEditTime: 2023-08-23 00:35:41\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:  \n * @FilePath: \\js\\batchCanvas2picAnDownload.js\n */\n/**\n * @Description: 批量canvas转图片并下载脚本\n * @author 仲灏 izhaong@outlook.com\n * @date 2023/8/22\n */\n\n// 1. 获取所有的canvas元素并有序存储\n// 2. 批量循环转换为高清图片并有序命名\n// 3. 批量触发下载\n\nconst getCanvasDom = () => {\n  const viewer = document.querySelector('div#viewer.pdfViewer');\n  const childrenList = viewer.childNodes;\n\n  return Array.from(childrenList).map((ce) => {\n    return {\n      ariaLabel: ce.ariaLabel,\n      canvasDom: ce.querySelector('div.canvasWrapper > canvas'),\n    };\n  });\n};\nconsole.table(getCanvasDom());\nconst canvasList = getCanvasDom();\n\nconst getPixelRatio = (context) => {\n  const backingStore =\n      context.backingStorePixelRatio ||\n      context.webkitBackingStorePixelRatio ||\n      context.mozBackingStorePixelRatio ||\n      context.msBackingStorePixelRatio ||\n      context.oBackingStorePixelRatio ||\n      context.backingStorePixelRatio || 1;\n  return (window.devicePixelRatio || 1) / backingStore;\n}\n\nconst downLoadImage = (canvas,name) => {\n  if(!canvas || !name) return\n  const a = document.createElement(\"a\");\n  a.href = canvas.toDataURL('image/jpeg', 2);\n  a.download = name;\n  a.click();\n}\n\nfor (let i = 0; i < canvasList.length; i++) {\n  const canvasItem = canvasList[i]\n  const {ariaLabel, canvasDom} = canvasItem || {}\n  // width: 582px; height: 816px;\n  // const ctx = canvasDom.getContext('2d');\n  // const ratio = getPixelRatio(ctx);\n  canvasDom.style.scale = 10\n  // canvasDom.width = '5820px';\n  // canvasDom.height = '8160px';\n  // ctx.drawImage(image, 20* ratio, 20* ratio, 260* ratio, 460* ratioÏ);\n  // const base64 = cvs.toDataURL(\"image/png\", 2.0);\n  // console.log({ariaLabel, canvasDom})\n  // ((cDom, label) => {\n    downLoadImage(canvasDom, ariaLabel)\n  // })(canvasDom, ariaLabel)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n\n\n\n# 方法二：直接取文件源码处理\n\nhttp://biaozhun.osta.org.cn/index.html\n\n * 获取文件base64编码\n\n * \n\n * base64转换为PDF\n\n * https://products.aspose.app/pdf/zh/conversion/base64-to-pdf\n\n * ",normalizedContent:"> 该网站和该技术仅仅学习使用, 若有侵权和侵犯利益, 可联系我删除\n\n\n# 方法一： 元素截图\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2023-08-22 17:31:20\n * @lastedittime: 2023-08-23 00:35:41\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:  \n * @filepath: \\js\\batchcanvas2picandownload.js\n */\n/**\n * @description: 批量canvas转图片并下载脚本\n * @author 仲灏 izhaong@outlook.com\n * @date 2023/8/22\n */\n\n// 1. 获取所有的canvas元素并有序存储\n// 2. 批量循环转换为高清图片并有序命名\n// 3. 批量触发下载\n\nconst getcanvasdom = () => {\n  const viewer = document.queryselector('div#viewer.pdfviewer');\n  const childrenlist = viewer.childnodes;\n\n  return array.from(childrenlist).map((ce) => {\n    return {\n      arialabel: ce.arialabel,\n      canvasdom: ce.queryselector('div.canvaswrapper > canvas'),\n    };\n  });\n};\nconsole.table(getcanvasdom());\nconst canvaslist = getcanvasdom();\n\nconst getpixelratio = (context) => {\n  const backingstore =\n      context.backingstorepixelratio ||\n      context.webkitbackingstorepixelratio ||\n      context.mozbackingstorepixelratio ||\n      context.msbackingstorepixelratio ||\n      context.obackingstorepixelratio ||\n      context.backingstorepixelratio || 1;\n  return (window.devicepixelratio || 1) / backingstore;\n}\n\nconst downloadimage = (canvas,name) => {\n  if(!canvas || !name) return\n  const a = document.createelement(\"a\");\n  a.href = canvas.todataurl('image/jpeg', 2);\n  a.download = name;\n  a.click();\n}\n\nfor (let i = 0; i < canvaslist.length; i++) {\n  const canvasitem = canvaslist[i]\n  const {arialabel, canvasdom} = canvasitem || {}\n  // width: 582px; height: 816px;\n  // const ctx = canvasdom.getcontext('2d');\n  // const ratio = getpixelratio(ctx);\n  canvasdom.style.scale = 10\n  // canvasdom.width = '5820px';\n  // canvasdom.height = '8160px';\n  // ctx.drawimage(image, 20* ratio, 20* ratio, 260* ratio, 460* ratioi);\n  // const base64 = cvs.todataurl(\"image/png\", 2.0);\n  // console.log({arialabel, canvasdom})\n  // ((cdom, label) => {\n    downloadimage(canvasdom, arialabel)\n  // })(canvasdom, arialabel)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n\n\n\n# 方法二：直接取文件源码处理\n\nhttp://biaozhun.osta.org.cn/index.html\n\n * 获取文件base64编码\n\n * \n\n * base64转换为pdf\n\n * https://products.aspose.app/pdf/zh/conversion/base64-to-pdf\n\n * ",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"自建房_2混凝土施工技术准备",frontmatter:{title:"自建房_2混凝土施工技术准备",date:"2022-01-28T17:00:49.000Z",permalink:"/pages/199a32/",categories:["其他技术","建筑"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/3098.%E5%BB%BA%E7%AD%91/3098010.%E8%87%AA%E5%BB%BA%E6%88%BF_2%E6%B7%B7%E5%87%9D%E5%9C%9F%E6%96%BD%E5%B7%A5%E6%8A%80%E6%9C%AF%E5%87%86%E5%A4%87.html",relativePath:"30.其他技术/3098.建筑/3098010.自建房_2混凝土施工技术准备.md",key:"v-4b8583be",path:"/pages/199a32/",headers:[{level:2,title:"混凝土的技术要求",slug:"混凝土的技术要求",normalizedTitle:"混凝土的技术要求",charIndex:2},{level:2,title:"自制混凝土",slug:"自制混凝土",normalizedTitle:"自制混凝土",charIndex:43},{level:3,title:"砂石硬度",slug:"砂石硬度",normalizedTitle:"砂石硬度",charIndex:53},{level:3,title:"一、岩浆岩",slug:"一、岩浆岩",normalizedTitle:"一、岩浆岩",charIndex:62},{level:3,title:"二、变质岩",slug:"二、变质岩",normalizedTitle:"二、变质岩",charIndex:193},{level:3,title:"三、沉积岩",slug:"三、沉积岩",normalizedTitle:"三、沉积岩",charIndex:311}],headersStr:"混凝土的技术要求 自制混凝土 砂石硬度 一、岩浆岩 二、变质岩 三、沉积岩",content:"# 混凝土的技术要求\n\n\n\n\n\n * 混凝土配合比通知单\n * 混凝土运输单\n\n\n# 自制混凝土\n\n\n# 砂石硬度\n\n\n# 一、岩浆岩\n\n岩浆岩又称火成岩，是由岩浆喷出地表或侵入地壳冷却凝固所形成的岩石。有的矿物晶体颗粒或气孔，约占地壳总体积的65%，总质量的95%。\n\n常见岩浆岩有：花岗岩、花岗斑石、流纹岩、正长石、闪长石、安山石、辉长岩和玄武岩等（强度约为250兆帕）。\n\n\n# 二、变质岩\n\n变质岩是由是由地壳中先形成的岩浆岩或沉积岩，在 环境条件改变的影响下，矿物成分、化学成分以及结构构造发生变化而形成的。\n\n常见变质岩有：片麻岩、石英岩、大理岩、砂岩、花岗片麻岩（强度约为117.6-196兆帕）。\n\n\n# 三、沉积岩\n\n沉积岩，又称为水成岩，是在地表不太深的地方，将其他岩石的风化产物和一些火山喷发物，经过水流或冰川的搬运、沉积、成岩作用形成的岩石。\n\n常见沉积岩有：石灰岩、白云岩、泥灰岩、凝石岩、页岩（强度约为60-150兆帕）。\n\n1级----硬的岩石（玄武岩、辉绿岩）\n\n2级----坚硬的岩石（花岗岩、片麻岩）\n\n3级----中等坚硬岩石（石英岩、鹅卵石）\n\n4级----较软的岩石（石灰岩）\n\n",normalizedContent:"# 混凝土的技术要求\n\n\n\n\n\n * 混凝土配合比通知单\n * 混凝土运输单\n\n\n# 自制混凝土\n\n\n# 砂石硬度\n\n\n# 一、岩浆岩\n\n岩浆岩又称火成岩，是由岩浆喷出地表或侵入地壳冷却凝固所形成的岩石。有的矿物晶体颗粒或气孔，约占地壳总体积的65%，总质量的95%。\n\n常见岩浆岩有：花岗岩、花岗斑石、流纹岩、正长石、闪长石、安山石、辉长岩和玄武岩等（强度约为250兆帕）。\n\n\n# 二、变质岩\n\n变质岩是由是由地壳中先形成的岩浆岩或沉积岩，在 环境条件改变的影响下，矿物成分、化学成分以及结构构造发生变化而形成的。\n\n常见变质岩有：片麻岩、石英岩、大理岩、砂岩、花岗片麻岩（强度约为117.6-196兆帕）。\n\n\n# 三、沉积岩\n\n沉积岩，又称为水成岩，是在地表不太深的地方，将其他岩石的风化产物和一些火山喷发物，经过水流或冰川的搬运、沉积、成岩作用形成的岩石。\n\n常见沉积岩有：石灰岩、白云岩、泥灰岩、凝石岩、页岩（强度约为60-150兆帕）。\n\n1级----硬的岩石（玄武岩、辉绿岩）\n\n2级----坚硬的岩石（花岗岩、片麻岩）\n\n3级----中等坚硬岩石（石英岩、鹅卵石）\n\n4级----较软的岩石（石灰岩）\n\n",charsets:{cjk:!0},lastUpdated:"2024/04/08, 16:26:17",lastUpdatedTimestamp:1712564777e3},{title:"clash-rule最佳配置",frontmatter:{title:"clash-rule最佳配置",date:"2021-12-08T14:28:48.000Z",permalink:"/pages/0dc79d/",categories:["其他"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/309901.clash-rule%E6%9C%80%E4%BD%B3%E9%85%8D%E7%BD%AE.html",relativePath:"30.其他技术/309901.clash-rule最佳配置.md",key:"v-0de0e66d",path:"/pages/0dc79d/",headersStr:null,content:"应法律法规 该内容已删除 感谢您的支持!",normalizedContent:"应法律法规 该内容已删除 感谢您的支持!",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"Untitled",frontmatter:{title:"Untitled",date:"2022-01-21T15:44:09.000Z",permalink:"/pages/9ac756/",categories:["其他技术"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/309910.%E4%B8%AA%E4%BA%BA%E4%B9%A6%E7%AD%BE.html",relativePath:"30.其他技术/309910.个人书签.md",key:"v-954f96d4",path:"/pages/9ac756/",headersStr:null,content:" * 书签栏\n   * TODO码上组合 - 博客园Vue Template - CodeSandbox瀑布流布局实现方法 - waisonlong - 博客园simple-code/javascript/IntersectionObserver at master · Ortonzhang/simple-codetsconfig.json 配置详解 | 跟着流年去旅行的个人博客超详细新手入门Audition CC录音/手机K歌后期处理修音教程 - 知乎PanJiaChen/custom-element-theme: custom-element-theme讲堂 - iView前端开发博客-前端开发,前端博客最强大的 CSS 布局 —— Grid 布局 - 掘金macrozheng/mall-learning: mall学习教程，架构、业务、技术要点全方位解析。mall项目（40k+star）是一套电商系统，使用现阶段主流技术实现。涵盖了SpringBoot 2.3.0、MyBatis 3.4.6、Elasticsearch 7.6.2、RabbitMQ 3.7.15、Redis 5.0、MongoDB 4.2.5、Mysql5.7等技术，采用Docker容器化部署。Bash 脚本教程 - 网道五分钟学算法-一个不错的算法网站！\n * https://micro-frontends.ice.work/)",normalizedContent:" * 书签栏\n   * todo码上组合 - 博客园vue template - codesandbox瀑布流布局实现方法 - waisonlong - 博客园simple-code/javascript/intersectionobserver at master · ortonzhang/simple-codetsconfig.json 配置详解 | 跟着流年去旅行的个人博客超详细新手入门audition cc录音/手机k歌后期处理修音教程 - 知乎panjiachen/custom-element-theme: custom-element-theme讲堂 - iview前端开发博客-前端开发,前端博客最强大的 css 布局 —— grid 布局 - 掘金macrozheng/mall-learning: mall学习教程，架构、业务、技术要点全方位解析。mall项目（40k+star）是一套电商系统，使用现阶段主流技术实现。涵盖了springboot 2.3.0、mybatis 3.4.6、elasticsearch 7.6.2、rabbitmq 3.7.15、redis 5.0、mongodb 4.2.5、mysql5.7等技术，采用docker容器化部署。bash 脚本教程 - 网道五分钟学算法-一个不错的算法网站！\n * https://micro-frontends.ice.work/)",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"PicGo 使用",frontmatter:{title:"PicGo 使用",date:"2023-09-17T16:00:37.000Z",permalink:"/pages/2bb4d0/",categories:["其他技术","软件巧用"],tags:[null]},regularPath:"/30.%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/%E2%80%8B3092.%E8%BD%AF%E4%BB%B6%E5%B7%A7%E7%94%A8/3092011.PicGo%20%E4%BD%BF%E7%94%A8.html",relativePath:"30.其他技术/​3092.软件巧用/3092011.PicGo 使用.md",key:"v-70523ffb",path:"/pages/2bb4d0/",headers:[{level:2,title:"插件",slug:"插件",normalizedTitle:"插件",charIndex:26},{level:3,title:"安装:",slug:"安装",normalizedTitle:"安装:",charIndex:33},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:367},{level:4,title:"picgo-plugin-rename-file",slug:"picgo-plugin-rename-file",normalizedTitle:"picgo-plugin-rename-file",charIndex:373}],headersStr:"插件 安装: 使用 picgo-plugin-rename-file",content:"软件中已经有一些业界知名的OSS管理了\n\n\n\n\n# 插件\n\n\n# 安装:\n\nhttps://github.com/PicGo/Awesome-PicGo\n\nPICGO-PLUGIN-RENAME-FILEPICGO 插件重命名文件   A PICGO PLUGIN FOR CUSTOMIZING FILE               ✅ ✅   ✅ ✅\n                                        NAME.(文件(包括路径)名称支持日期、随机字符串、文件MD5、原文件名、原文件目录结构等)\n                                                                                                \n\n\n# 使用\n\n# picgo-plugin-rename-file\n\nblogImg/{localFolder}/{y}{m}{d}-{h}{i}{s}-{origin}\n\n",normalizedContent:"软件中已经有一些业界知名的oss管理了\n\n\n\n\n# 插件\n\n\n# 安装:\n\nhttps://github.com/picgo/awesome-picgo\n\npicgo-plugin-rename-filepicgo 插件重命名文件   a picgo plugin for customizing file               ✅ ✅   ✅ ✅\n                                        name.(文件(包括路径)名称支持日期、随机字符串、文件md5、原文件名、原文件目录结构等)\n                                                                                                \n\n\n# 使用\n\n# picgo-plugin-rename-file\n\nblogimg/{localfolder}/{y}{m}{d}-{h}{i}{s}-{origin}\n\n",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"罗技 Logitech G Hub 使用技巧",frontmatter:{title:"罗技 Logitech G Hub 使用技巧",date:"2021-12-26T13:06:58.000Z",permalink:"/pages/56b599/",categories:["生活","Mac","产品使用"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0401.%E8%8B%B9%E6%9E%9C%E7%94%9F%E6%80%81/0400.%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8/040010.%E7%BD%97%E6%8A%80%20Logitech%20G%20Hub%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html",relativePath:"40.生活/0401.苹果生态/0400.产品使用/040010.罗技 Logitech G Hub 使用技巧.md",key:"v-61f0d178",path:"/pages/56b599/",headers:[{level:2,title:"设置",slug:"设置",normalizedTitle:"设置",charIndex:2}],headersStr:"设置",content:"# 设置",normalizedContent:"# 设置",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"mac 软件收藏",frontmatter:{title:"mac 软件收藏",date:"2021-12-06T21:15:18.000Z",permalink:"/pages/088ab9/",categories:["其他","Mac"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0401.%E8%8B%B9%E6%9E%9C%E7%94%9F%E6%80%81/040101.mac%20%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F.html",relativePath:"40.生活/0401.苹果生态/040101.mac 软件收藏.md",key:"v-5f1658aa",path:"/pages/088ab9/",headers:[{level:2,title:"软件网站",slug:"软件网站",normalizedTitle:"软件网站",charIndex:2},{level:2,title:"开发软件",slug:"开发软件",normalizedTitle:"开发软件",charIndex:42},{level:2,title:"效率工具",slug:"效率工具",normalizedTitle:"效率工具",charIndex:104},{level:2,title:"娱乐工具",slug:"娱乐工具",normalizedTitle:"娱乐工具",charIndex:148}],headersStr:"软件网站 开发软件 效率工具 娱乐工具",content:"# 软件网站\n\n>  * maxwk https://macwk.com/\n\n\n# 开发软件\n\n * 命令行工具 OhMyZsh 138k star\n * 网页开发 bootstrap studio\n\n\n# 效率工具\n\n * 粘贴板管理 Paste\n * 截图贴图工具 Snipaste\n\n\n# 娱乐工具\n\n * 🎵音乐 洛雪音乐 1.15.3 中文版 (全网音乐播放下载工具)\n\n * 视频播放器 iina https://github.com/iina/iina 29k star",normalizedContent:"# 软件网站\n\n>  * maxwk https://macwk.com/\n\n\n# 开发软件\n\n * 命令行工具 ohmyzsh 138k star\n * 网页开发 bootstrap studio\n\n\n# 效率工具\n\n * 粘贴板管理 paste\n * 截图贴图工具 snipaste\n\n\n# 娱乐工具\n\n * 🎵音乐 洛雪音乐 1.15.3 中文版 (全网音乐播放下载工具)\n\n * 视频播放器 iina https://github.com/iina/iina 29k star",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"mac 使用技巧",frontmatter:{title:"mac 使用技巧",date:"2021-12-06T21:28:54.000Z",permalink:"/pages/6361a7/",categories:["生活","Mac"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0401.%E8%8B%B9%E6%9E%9C%E7%94%9F%E6%80%81/040102.mac%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html",relativePath:"40.生活/0401.苹果生态/040102.mac 使用技巧.md",key:"v-36e6cf13",path:"/pages/6361a7/",headers:[{level:2,title:"操作",slug:"操作",normalizedTitle:"操作",charIndex:2},{level:2,title:"文件夹及文件操作",slug:"文件夹及文件操作",normalizedTitle:"文件夹及文件操作",charIndex:139},{level:3,title:"在所有桌面显示微信qq 等聊天工具",slug:"在所有桌面显示微信qq-等聊天工具",normalizedTitle:"在所有桌面显示微信qq 等聊天工具",charIndex:242}],headersStr:"操作 文件夹及文件操作 在所有桌面显示微信qq 等聊天工具",content:"# 操作\n\n * > https://support.apple.com/zh-cn/HT201236 键盘快捷键\n\n * 多个桌面&切换（如页面开发时，在编辑器中编辑保存后只需要四指横向滑动就可以预览到浏览器的桌面）\n   \n   * 触摸板四指向上平移\n   * \n\n\n# 文件夹及文件操作\n\n * 打开访达,点击下载\n   * command+shift+c 打开“电脑”窗口\n   * command+shift+. 显示/隐藏 隐藏文件（以.开头的文件夹或者文件）\n\n\n# 在所有桌面显示微信qq 等聊天工具",normalizedContent:"# 操作\n\n * > https://support.apple.com/zh-cn/ht201236 键盘快捷键\n\n * 多个桌面&切换（如页面开发时，在编辑器中编辑保存后只需要四指横向滑动就可以预览到浏览器的桌面）\n   \n   * 触摸板四指向上平移\n   * \n\n\n# 文件夹及文件操作\n\n * 打开访达,点击下载\n   * command+shift+c 打开“电脑”窗口\n   * command+shift+. 显示/隐藏 隐藏文件（以.开头的文件夹或者文件）\n\n\n# 在所有桌面显示微信qq 等聊天工具",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"自带输入法快捷打出当前时间",frontmatter:{title:"自带输入法快捷打出当前时间",date:"2022-01-13T16:55:10.000Z",permalink:"/pages/7f2b78/",categories:["生活","Mac"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0401.%E8%8B%B9%E6%9E%9C%E7%94%9F%E6%80%81/040105.%E8%87%AA%E5%B8%A6%E8%BE%93%E5%85%A5%E6%B3%95%E5%BF%AB%E6%8D%B7%E6%89%93%E5%87%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4.html",relativePath:"40.生活/0401.苹果生态/040105.自带输入法快捷打出当前时间.md",key:"v-c1d0aba0",path:"/pages/7f2b78/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"查看占用端口的程序",frontmatter:{title:"查看占用端口的程序",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/32e548/",categories:["生活","苹果生态"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0401.%E8%8B%B9%E6%9E%9C%E7%94%9F%E6%80%81/040106.%E6%9F%A5%E7%9C%8B%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%9A%84%E7%A8%8B%E5%BA%8F.html",relativePath:"40.生活/0401.苹果生态/040106.查看占用端口的程序.md",key:"v-2804e650",path:"/pages/32e548/",headers:[{level:2,title:"查看",slug:"查看",normalizedTitle:"查看",charIndex:42},{level:2,title:"杀掉进程",slug:"杀掉进程",normalizedTitle:"杀掉进程",charIndex:882}],headersStr:"查看 杀掉进程",content:"----------------------------------------\n\n查看进程占用\n\nlsof -i tcp:8080\n\n该命令会显示占用8080端口的进程，有其 pid ,可以通过pid关掉该进程\n\n杀死进程\n\nkill pid\n\n----------------------------------------\n\njava\n\n\n# 查看\n\n➜ Java sudo lsof -n -P | grep :****或者lsof -i :****\n\n➜  Java sudo lsof -n -P | grep :8080\nClashX     1662                izhaong  177u     IPv4 0x5a2f7732da1d8707         0t0                 TCP 192.168.63.2:62100->109.244.152.174:8080 (ESTABLISHED)\nQQ        32270                izhaong   35u     IPv4 0x5a2f7732d95c8c67         0t0                 TCP 198.18.0.1:62099->109.244.152.174:8080 (ESTABLISHED)\nQQ        32270                izhaong   36u     IPv4 0x5a2f7732d95c8c67         0t0                 TCP 198.18.0.1:62099->109.244.152.174:8080 (ESTABLISHED)\njava      38362                izhaong   86u     IPv6 0x5a2f774133dc0bcf         0t0                 TCP *:8080 (LISTEN)\n\n\n1\n2\n3\n4\n5\n\n\n\n# 杀掉进程\n\nkill *****\n\n➜  Java kill 38362\n\n\n1\n\n\n➜  Java lsof -i :8080\nCOMMAND     PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME\nClashX     1662 izhaong  177u  IPv4 0x5a2f7732da1d8707      0t0  TCP 192.168.63.2:62100->109.244.152.174:http-alt (ESTABLISHED)\nQQ        32270 izhaong   35u  IPv4 0x5a2f7732d95c8c67      0t0  TCP 198.18.0.1:62099->109.244.152.174:http-alt (ESTABLISHED)\nQQ        32270 izhaong   36u  IPv4 0x5a2f7732d95c8c67      0t0  TCP 198.18.0.1:62099->109.244.152.174:http-alt (ESTABLISHED)\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"----------------------------------------\n\n查看进程占用\n\nlsof -i tcp:8080\n\n该命令会显示占用8080端口的进程，有其 pid ,可以通过pid关掉该进程\n\n杀死进程\n\nkill pid\n\n----------------------------------------\n\njava\n\n\n# 查看\n\n➜ java sudo lsof -n -p | grep :****或者lsof -i :****\n\n➜  java sudo lsof -n -p | grep :8080\nclashx     1662                izhaong  177u     ipv4 0x5a2f7732da1d8707         0t0                 tcp 192.168.63.2:62100->109.244.152.174:8080 (established)\nqq        32270                izhaong   35u     ipv4 0x5a2f7732d95c8c67         0t0                 tcp 198.18.0.1:62099->109.244.152.174:8080 (established)\nqq        32270                izhaong   36u     ipv4 0x5a2f7732d95c8c67         0t0                 tcp 198.18.0.1:62099->109.244.152.174:8080 (established)\njava      38362                izhaong   86u     ipv6 0x5a2f774133dc0bcf         0t0                 tcp *:8080 (listen)\n\n\n1\n2\n3\n4\n5\n\n\n\n# 杀掉进程\n\nkill *****\n\n➜  java kill 38362\n\n\n1\n\n\n➜  java lsof -i :8080\ncommand     pid    user   fd   type             device size/off node name\nclashx     1662 izhaong  177u  ipv4 0x5a2f7732da1d8707      0t0  tcp 192.168.63.2:62100->109.244.152.174:http-alt (established)\nqq        32270 izhaong   35u  ipv4 0x5a2f7732d95c8c67      0t0  tcp 198.18.0.1:62099->109.244.152.174:http-alt (established)\nqq        32270 izhaong   36u  ipv4 0x5a2f7732d95c8c67      0t0  tcp 198.18.0.1:62099->109.244.152.174:http-alt (established)\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"生活小帮手 打造个人自动化",frontmatter:{title:"生活小帮手 打造个人自动化",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/df5cb0/",categories:["生活","苹果生态"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0401.%E8%8B%B9%E6%9E%9C%E7%94%9F%E6%80%81/040110.%E7%94%9F%E6%B4%BB%E5%B0%8F%E5%B8%AE%E6%89%8B%20%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E8%87%AA%E5%8A%A8%E5%8C%96.html",relativePath:"40.生活/0401.苹果生态/040110.生活小帮手 打造个人自动化.md",key:"v-be6ea94c",path:"/pages/df5cb0/",headers:[{level:2,title:"目的",slug:"目的",normalizedTitle:"目的",charIndex:2},{level:2,title:"流程",slug:"流程",normalizedTitle:"流程",charIndex:64},{level:2,title:"个人日历",slug:"个人日历",normalizedTitle:"个人日历",charIndex:71}],headersStr:"目的 流程 个人日历",content:"# 目的\n\n * 每天晚上临睡前播报第二天 天气 气温 日历事项\n\n * 每天早上起床闹铃调整为 天气 气温 简报播报\n\n\n# 流程\n\n * 个人日历作为我们的变量使用\n\n * 快捷指令创建指令\n   \n   * 指令中变量读取日历使用\n\n * 创建自动化使用快捷指令\n\n\n# 个人日历",normalizedContent:"# 目的\n\n * 每天晚上临睡前播报第二天 天气 气温 日历事项\n\n * 每天早上起床闹铃调整为 天气 气温 简报播报\n\n\n# 流程\n\n * 个人日历作为我们的变量使用\n\n * 快捷指令创建指令\n   \n   * 指令中变量读取日历使用\n\n * 创建自动化使用快捷指令\n\n\n# 个人日历",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"常见网络设备",frontmatter:{title:"常见网络设备",date:"2022-06-18T10:42:17.000Z",permalink:"/pages/3e0879/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/40100010.%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87.html",relativePath:"40.生活/04100.家庭网络/40100010.常见网络设备.md",key:"v-2f59633d",path:"/pages/3e0879/",headers:[{level:3,title:"路由器",slug:"路由器",normalizedTitle:"路由器",charIndex:2},{level:3,title:"光猫",slug:"光猫",normalizedTitle:"光猫",charIndex:10}],headersStr:"路由器 光猫",content:"# 路由器\n\n\n# 光猫\n\n光信号的调制器 + 路由器",normalizedContent:"# 路由器\n\n\n# 光猫\n\n光信号的调制器 + 路由器",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"光猫使用",frontmatter:{title:"光猫使用",date:"2022-06-18T10:51:14.000Z",permalink:"/pages/19e0c4/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/40100011.%E5%85%89%E7%8C%AB%E4%BD%BF%E7%94%A8.html",relativePath:"40.生活/04100.家庭网络/40100011.光猫使用.md",key:"v-44f90c84",path:"/pages/19e0c4/",headers:[{level:3,title:"桥接模式",slug:"桥接模式",normalizedTitle:"桥接模式",charIndex:27},{level:3,title:"路由模式",slug:"路由模式",normalizedTitle:"路由模式",charIndex:84}],headersStr:"桥接模式 路由模式",content:"宽带师傅为家庭安装网络时候基本都没配置好了的\n\n\n# 桥接模式\n\n桥接模式光猫成为光信号调制解调器，仅负责光电信号转换！此时应关闭DHCP让它功能单一而透明！\n\n\n# 路由模式\n\n路由模式由光猫拨号，光猫成为一级路由，无论它是否执行DHCP,它都会具有一级NAT的功能！",normalizedContent:"宽带师傅为家庭安装网络时候基本都没配置好了的\n\n\n# 桥接模式\n\n桥接模式光猫成为光信号调制解调器，仅负责光电信号转换！此时应关闭dhcp让它功能单一而透明！\n\n\n# 路由模式\n\n路由模式由光猫拨号，光猫成为一级路由，无论它是否执行dhcp,它都会具有一级nat的功能！",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"常人不知道的网络设备_软",frontmatter:{title:"常人不知道的网络设备_软",date:"2022-06-18T10:49:57.000Z",permalink:"/pages/646b79/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/40100015.%E5%B8%B8%E4%BA%BA%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87_%E8%BD%AF.html",relativePath:"40.生活/04100.家庭网络/40100015.常人不知道的网络设备_软.md",key:"v-109fad4a",path:"/pages/646b79/",headers:[{level:3,title:"OpenWrt",slug:"openwrt",normalizedTitle:"openwrt",charIndex:2}],headersStr:"OpenWrt",content:"# OpenWrt",normalizedContent:"# openwrt",charsets:{},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"家庭网络",frontmatter:{title:"家庭网络",date:"2022-06-18T10:38:42.000Z",permalink:"/pages/ddb22e/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/40100020.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C.html",relativePath:"40.生活/04100.家庭网络/40100020.家庭网络.md",key:"v-0009ed72",path:"/pages/ddb22e/",headers:[{level:3,title:"光猫",slug:"光猫",normalizedTitle:"光猫",charIndex:2}],headersStr:"光猫",content:"# 光猫\n\n光信号的调制器 + 路由器\n\n提供无线功能以及DHCP分发局域网网络地址的功能",normalizedContent:"# 光猫\n\n光信号的调制器 + 路由器\n\n提供无线功能以及dhcp分发局域网网络地址的功能",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"网线接线",frontmatter:{title:"网线接线",date:"2022-10-25T16:44:18.000Z",permalink:"/pages/b3b9d4/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010009.%E7%BD%91%E7%BA%BF%E6%8E%A5%E7%BA%BF.html",relativePath:"40.生活/04100.家庭网络/4010009.网线接线.md",key:"v-253cad4c",path:"/pages/b3b9d4/",headersStr:null,content:"> https://zhuanlan.zhihu.com/p/140702457\n\n交叉法 用于同类型设备中 基本我们常用的方式是下面的直连方法\n\n\n\n直连法：用于不同设备的连接 比如交换机 与 我们的计算器\n\n",normalizedContent:"> https://zhuanlan.zhihu.com/p/140702457\n\n交叉法 用于同类型设备中 基本我们常用的方式是下面的直连方法\n\n\n\n直连法：用于不同设备的连接 比如交换机 与 我们的计算器\n\n",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"PVE  AIO教程",frontmatter:{title:"PVE  AIO教程",date:"2022-08-11T21:07:30.000Z",permalink:"/pages/553b8f/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010021.PVE%20%20AIO%E6%95%99%E7%A8%8B.html",relativePath:"40.生活/04100.家庭网络/4010021.PVE  AIO教程.md",key:"v-67a409f4",path:"/pages/553b8f/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"家庭网络 拓扑图",frontmatter:{title:"家庭网络 拓扑图",date:"2022-12-11T16:43:15.000Z",permalink:"/pages/b45103/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010022.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%20%E6%8B%93%E6%89%91%E5%9B%BE.html",relativePath:"40.生活/04100.家庭网络/4010022.家庭网络 拓扑图.md",key:"v-1b409232",path:"/pages/b45103/",headersStr:null,content:"iKuai 爱快：流量控制 避免网络波动（简单好用）\n\nopenWrt：内网穿透 去广告 网络加速 翻墙 游戏加速（功能丰富）\n\n成年人的选择自然是都用上\n\n主意\n\n重启服务发现如果没网络，试着重新插拔一下主机端的网线",normalizedContent:"ikuai 爱快：流量控制 避免网络波动（简单好用）\n\nopenwrt：内网穿透 去广告 网络加速 翻墙 游戏加速（功能丰富）\n\n成年人的选择自然是都用上\n\n主意\n\n重启服务发现如果没网络，试着重新插拔一下主机端的网线",charsets:{cjk:!0},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"jellyfin使用",frontmatter:{title:"jellyfin使用",date:"2022-12-14T12:27:24.000Z",permalink:"/pages/db2434/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010023.jellyfin%E4%BD%BF%E7%94%A8.html",relativePath:"40.生活/04100.家庭网络/4010023.jellyfin使用.md",key:"v-c977ad84",path:"/pages/db2434/",headers:[{level:3,title:"中文字幕",slug:"中文字幕",normalizedTitle:"中文字幕",charIndex:2}],headersStr:"中文字幕",content:"# 中文字幕\n\n一开始搜索中文字幕是没有的 就算你设置了首选字幕未chinese有的也不行\n\n * 下载中文字幕放入其中一个映射的文件夹下面 我的是config 所以就放在了/config/font\n   \n   \n\n * 添加插件Open Subtitles\n   \n   \n\n * 配置插件\n   \n   注册登录就好了 在创建一个api 密钥\n   \n   ",normalizedContent:"# 中文字幕\n\n一开始搜索中文字幕是没有的 就算你设置了首选字幕未chinese有的也不行\n\n * 下载中文字幕放入其中一个映射的文件夹下面 我的是config 所以就放在了/config/font\n   \n   \n\n * 添加插件open subtitles\n   \n   \n\n * 配置插件\n   \n   注册登录就好了 在创建一个api 密钥\n   \n   ",charsets:{cjk:!0},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"jellyfin 看电视",frontmatter:{title:"jellyfin 看电视",date:"2022-12-13T21:12:02.000Z",permalink:"/pages/cb233a/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010024.jellyfin%20%E7%9C%8B%E7%94%B5%E8%A7%86.html",relativePath:"40.生活/04100.家庭网络/4010024.jellyfin 看电视.md",key:"v-645905ee",path:"/pages/cb233a/",headersStr:null,content:"> iptv\n> \n> https://github.com/iptv-org/iptv\n\n\n\nhttps://iptv-org.github.io/iptv/countries/cn.m3u",normalizedContent:"> iptv\n> \n> https://github.com/iptv-org/iptv\n\n\n\nhttps://iptv-org.github.io/iptv/countries/cn.m3u",charsets:{},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"exei使用",frontmatter:{title:"exei使用",date:"2022-12-09T12:46:59.000Z",permalink:"/pages/9bfa8b/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010040.exei%E4%BD%BF%E7%94%A8.html",relativePath:"40.生活/04100.家庭网络/4010040.exei使用.md",key:"v-3830fac4",path:"/pages/9bfa8b/",headers:[{level:3,title:"手动设置IP",slug:"手动设置ip",normalizedTitle:"手动设置ip",charIndex:755},{level:3,title:"安装驱动",slug:"安装驱动",normalizedTitle:"安装驱动",charIndex:1419},{level:3,title:"存储：",slug:"存储",normalizedTitle:"存储：",charIndex:1767},{level:3,title:"硬件直通",slug:"硬件直通",normalizedTitle:"硬件直通",charIndex:1970},{level:3,title:"iKuai",slug:"ikuai",normalizedTitle:"ikuai",charIndex:2083},{level:3,title:"问题：",slug:"问题",normalizedTitle:"问题：",charIndex:2612}],headersStr:"手动设置IP 安装驱动 存储： 硬件直通 iKuai 问题：",content:"先把网卡插上再安装系统\n\n> 遇坑：7.0 u1版本 后续安装离线驱动 提示host问题 之后重新安装6.7版本发现网卡是好了的\n\n确认你的网卡是否支持esxi：https://www.vmware.com/resources/compatibility/search.php ![image.png](https://cdn.nlark.com/yuque/0/2022/png/714491/1665801251665-ee32c70c-8809-4c34-8984-fdc821f58521.png#averageHue=%23f6f6f6&clientId=ue8859f6c-7f49-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown error&from=paste&height=1055&id=uc00bc5dc&margin=[object Object]&name=image.png&originHeight=1055&originWidth=1876&originalType=binary&ratio=1&rotation=0&showTitle=false&size=394334&status=error&style=none&taskId=u671edfd4-5207-4880-893b-cc1cafbd235&title=&width=1876)\n\n在安装esxi loading 的时候，迅速按下 shift + O，空格 autoPartitionOSDataSize=9999 有固态硬盘就安装在固态硬盘上\n\nautoPartitionOSDataSize=999 密码：Izhaong164165005+\n\n\n# 手动设置IP\n\n启动后F2登录 进入网络管理 Network Adapters 物理网口管理 IPv4 Configuration 网络配置 IPv4 Address: 192.168.2.9 Subnet Mask: 255.255.255.0 Default Gateway: 192.168.2.1\n\n远程登录： ![image.png](https://cdn.nlark.com/yuque/0/2022/png/714491/1665826650314-805d7a7f-a22c-4382-a0ef-6db7d55057e1.png#averageHue=%23aed4af&clientId=u113ded64-aa55-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown error&from=paste&height=1095&id=u48367184&margin=[object Object]&name=image.png&originHeight=2190&originWidth=3492&originalType=binary&ratio=1&rotation=0&showTitle=false&size=878731&status=error&style=none&taskId=uf33fa976-aa5d-44dc-8c50-a57ae2f14e6&title=&width=1746) ssh root@192.168.2.9\n\n\n# 安装驱动\n\n比如安装rtl8111网卡 在官网包中找到 https://vibsdepot.v-front.de/wiki/index.php/List_of_currently_available_ESXi_packages 如果你已经安装好了esxi 就安装下面的离线包，也可以使用上面一个一起打包成iso镜像包 我使用的下面的离线包 需要使用到window10 的 powershell esxcli software component apply -d /vmfs/volumes/USB_Datastore/driver/net55-r8168-8.045a-napi-offline_bundle.zip esxcli software vib list查看安装的所有驱动\n\n\n# 存储：\n\nusb存储 esxi 默认禁用 usb存储了 要从控制台访问 USB 存储和其他设备，请禁用 USB 直通。要检查 USB 的状态，请运行以下命令：chkconfig --list | grep -i usb chkconfig usbarbitrator off 接入usb硬盘 运行：esxcli storage core device list |grep -i usb就可以看到\n\n\n# 硬件直通\n\nesxi把硬件管理权限移交给虚拟系统 _直通网卡重启后依然提示“已启用/需要重新引导”的解决方法: 需要把_VMkernel.Boot.disableACSCheck 改为 true\n\n * 开启混杂模式\n\n\n# iKuai\n\n2核 4G 预留4G 运存 8G 存储 pci添加 有几个口就添加几次 如图：\n\nlan: 192.168.2.1 wan: PPOE ![image.png](https://cdn.nlark.com/yuque/0/2022/png/714491/1666162707351-551c78f9-dda7-4e0a-bc72-9c3a5c53ce72.png#averageHue=%23f7f7cf&clientId=ub86f58c6-0b03-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=680&id=u4bbd59ab&margin=[object Object]&name=image.png&originHeight=1360&originWidth=2572&originalType=binary&ratio=1&rotation=0&showTitle=false&size=829368&status=done&style=none&taskId=u059de94c-597b-4bce-809d-35755f0f178&title=&width=1286)\n\n\n# 问题：\n\n\n\n解决方法： 1.下载对应的6.x版本，https://labs.vmware.com/flings/esxi-embedded-host-client esxui-offline-bundle-6.x-12086396.zip\n\n2.把包传到exsi存储，然后在exsi shell执行以下命令 esxcli software vib install -d “/vmfs/volumes/datastore1/esxui-offline-bundle-6.x-12086396.zip”\n\n3.重启系统生效。",normalizedContent:"先把网卡插上再安装系统\n\n> 遇坑：7.0 u1版本 后续安装离线驱动 提示host问题 之后重新安装6.7版本发现网卡是好了的\n\n确认你的网卡是否支持esxi：https://www.vmware.com/resources/compatibility/search.php ![image.png](https://cdn.nlark.com/yuque/0/2022/png/714491/1665801251665-ee32c70c-8809-4c34-8984-fdc821f58521.png#averagehue=%23f6f6f6&clientid=ue8859f6c-7f49-4&crop=0&crop=0&crop=1&crop=1&errormessage=unknown error&from=paste&height=1055&id=uc00bc5dc&margin=[object object]&name=image.png&originheight=1055&originwidth=1876&originaltype=binary&ratio=1&rotation=0&showtitle=false&size=394334&status=error&style=none&taskid=u671edfd4-5207-4880-893b-cc1cafbd235&title=&width=1876)\n\n在安装esxi loading 的时候，迅速按下 shift + o，空格 autopartitionosdatasize=9999 有固态硬盘就安装在固态硬盘上\n\nautopartitionosdatasize=999 密码：izhaong164165005+\n\n\n# 手动设置ip\n\n启动后f2登录 进入网络管理 network adapters 物理网口管理 ipv4 configuration 网络配置 ipv4 address: 192.168.2.9 subnet mask: 255.255.255.0 default gateway: 192.168.2.1\n\n远程登录： ![image.png](https://cdn.nlark.com/yuque/0/2022/png/714491/1665826650314-805d7a7f-a22c-4382-a0ef-6db7d55057e1.png#averagehue=%23aed4af&clientid=u113ded64-aa55-4&crop=0&crop=0&crop=1&crop=1&errormessage=unknown error&from=paste&height=1095&id=u48367184&margin=[object object]&name=image.png&originheight=2190&originwidth=3492&originaltype=binary&ratio=1&rotation=0&showtitle=false&size=878731&status=error&style=none&taskid=uf33fa976-aa5d-44dc-8c50-a57ae2f14e6&title=&width=1746) ssh root@192.168.2.9\n\n\n# 安装驱动\n\n比如安装rtl8111网卡 在官网包中找到 https://vibsdepot.v-front.de/wiki/index.php/list_of_currently_available_esxi_packages 如果你已经安装好了esxi 就安装下面的离线包，也可以使用上面一个一起打包成iso镜像包 我使用的下面的离线包 需要使用到window10 的 powershell esxcli software component apply -d /vmfs/volumes/usb_datastore/driver/net55-r8168-8.045a-napi-offline_bundle.zip esxcli software vib list查看安装的所有驱动\n\n\n# 存储：\n\nusb存储 esxi 默认禁用 usb存储了 要从控制台访问 usb 存储和其他设备，请禁用 usb 直通。要检查 usb 的状态，请运行以下命令：chkconfig --list | grep -i usb chkconfig usbarbitrator off 接入usb硬盘 运行：esxcli storage core device list |grep -i usb就可以看到\n\n\n# 硬件直通\n\nesxi把硬件管理权限移交给虚拟系统 _直通网卡重启后依然提示“已启用/需要重新引导”的解决方法: 需要把_vmkernel.boot.disableacscheck 改为 true\n\n * 开启混杂模式\n\n\n# ikuai\n\n2核 4g 预留4g 运存 8g 存储 pci添加 有几个口就添加几次 如图：\n\nlan: 192.168.2.1 wan: ppoe ![image.png](https://cdn.nlark.com/yuque/0/2022/png/714491/1666162707351-551c78f9-dda7-4e0a-bc72-9c3a5c53ce72.png#averagehue=%23f7f7cf&clientid=ub86f58c6-0b03-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=680&id=u4bbd59ab&margin=[object object]&name=image.png&originheight=1360&originwidth=2572&originaltype=binary&ratio=1&rotation=0&showtitle=false&size=829368&status=done&style=none&taskid=u059de94c-597b-4bce-809d-35755f0f178&title=&width=1286)\n\n\n# 问题：\n\n\n\n解决方法： 1.下载对应的6.x版本，https://labs.vmware.com/flings/esxi-embedded-host-client esxui-offline-bundle-6.x-12086396.zip\n\n2.把包传到exsi存储，然后在exsi shell执行以下命令 esxcli software vib install -d “/vmfs/volumes/datastore1/esxui-offline-bundle-6.x-12086396.zip”\n\n3.重启系统生效。",charsets:{cjk:!0},lastUpdated:"2022/12/09, 22:58:08",lastUpdatedTimestamp:1670597888e3},{title:"影音中心",frontmatter:{title:"影音中心",date:"2022-09-13T00:51:27.000Z",permalink:"/pages/264093/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010050.%E5%BD%B1%E9%9F%B3%E4%B8%AD%E5%BF%83.html",relativePath:"40.生活/04100.家庭网络/4010050.影音中心.md",key:"v-6665e6f8",path:"/pages/264093/",headers:[{level:3,title:"kodi",slug:"kodi",normalizedTitle:"kodi",charIndex:138},{level:3,title:"软件服务（ PLEX emby Jellyfin）",slug:"软件服务-plex-emby-jellyfin",normalizedTitle:"软件服务（ plex emby jellyfin）",charIndex:262},{level:3,title:"媒体服务器",slug:"媒体服务器",normalizedTitle:"媒体服务器",charIndex:427},{level:3,title:"索引器",slug:"索引器",normalizedTitle:"索引器",charIndex:485},{level:3,title:"下载器",slug:"下载器",normalizedTitle:"下载器",charIndex:532},{level:3,title:"字幕管理器",slug:"字幕管理器",normalizedTitle:"字幕管理器",charIndex:582}],headersStr:"kodi 软件服务（ PLEX emby Jellyfin） 媒体服务器 索引器 下载器 字幕管理器",content:"> nas-tools\n> \n> https://github.com/jxxghp/nas-tools/wiki/%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D\n\n> tinyMediaManager\n> \n> 中文包：https://forum.kodi.tv/showthread.php?tid=174987\n\n\n# kodi\n\n优点： 文件流推送，能够到流畅播放，不会吃服务器性能。\n\n缺点：吃带宽，如果带宽低于视频码率会卡顿。本地无所谓，远程访问需要考虑到手机流量，带宽等问题\n\n\n# 软件服务（ PLEX emby Jellyfin）\n\n会建立专门的影音资料库，可以通过浏览器，app，kodi插件访问\n\n解决上述问题，能够实时编码推流。在中间过程中可以降解码率来做到视频流畅。\n\n能做到两种：通过http协议直接推送源文件，播放设备解码视频原编码；转码为h264编码推送，播放设备将编码的视频解码播放。\n\n\n# 媒体服务器\n\n * Emby（推荐） 安装镜像\n * Jellyfin 安装镜像\n * Plex 安装镜像\n\n\n# 索引器\n\n * Jackett（推荐） 安装镜像\n\n * Prowlarr 安装镜像\n\n\n# 下载器\n\n * Qbittorrent 安装镜像\n * Transmission 安装镜像\n\n\n# 字幕管理器\n\n * OpenSubtitles帐号的申请（配置简单，海量字幕）\n * ChineseSubFinder的部署（国内大佬开发，功能强大）\n\n",normalizedContent:"> nas-tools\n> \n> https://github.com/jxxghp/nas-tools/wiki/%e5%8a%9f%e8%83%bd%e4%bb%8b%e7%bb%8d\n\n> tinymediamanager\n> \n> 中文包：https://forum.kodi.tv/showthread.php?tid=174987\n\n\n# kodi\n\n优点： 文件流推送，能够到流畅播放，不会吃服务器性能。\n\n缺点：吃带宽，如果带宽低于视频码率会卡顿。本地无所谓，远程访问需要考虑到手机流量，带宽等问题\n\n\n# 软件服务（ plex emby jellyfin）\n\n会建立专门的影音资料库，可以通过浏览器，app，kodi插件访问\n\n解决上述问题，能够实时编码推流。在中间过程中可以降解码率来做到视频流畅。\n\n能做到两种：通过http协议直接推送源文件，播放设备解码视频原编码；转码为h264编码推送，播放设备将编码的视频解码播放。\n\n\n# 媒体服务器\n\n * emby（推荐） 安装镜像\n * jellyfin 安装镜像\n * plex 安装镜像\n\n\n# 索引器\n\n * jackett（推荐） 安装镜像\n\n * prowlarr 安装镜像\n\n\n# 下载器\n\n * qbittorrent 安装镜像\n * transmission 安装镜像\n\n\n# 字幕管理器\n\n * opensubtitles帐号的申请（配置简单，海量字幕）\n * chinesesubfinder的部署（国内大佬开发，功能强大）\n\n",charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"影音中心 nastools使用",frontmatter:{title:"影音中心 nastools使用",date:"2022-09-13T00:51:27.000Z",permalink:"/pages/bbc229/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010055.%E5%BD%B1%E9%9F%B3%E4%B8%AD%E5%BF%83%20nastools%E4%BD%BF%E7%94%A8.html",relativePath:"40.生活/04100.家庭网络/4010055.影音中心 nastools使用.md",key:"v-41806177",path:"/pages/bbc229/",headersStr:null,content:"https://github.com/jxxghp/nas-tools/wiki/%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D\n\n",normalizedContent:"https://github.com/jxxghp/nas-tools/wiki/%e5%8a%9f%e8%83%bd%e4%bb%8b%e7%bb%8d\n\n",charsets:{},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"媒体服务器",frontmatter:{title:"媒体服务器",date:"2022-10-29T23:26:26.000Z",permalink:"/pages/b96bd5/",categories:["生活","家庭网络"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/04100.%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/4010060.%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8.html",relativePath:"40.生活/04100.家庭网络/4010060.媒体服务器.md",key:"v-4da71f67",path:"/pages/b96bd5/",headers:[{level:2,title:"Emby（推荐） 安装镜像",slug:"emby-推荐-安装镜像",normalizedTitle:"emby（推荐） 安装镜像",charIndex:5},{level:2,title:"Jellyfin 安装镜像",slug:"jellyfin-安装镜像",normalizedTitle:"jellyfin 安装镜像",charIndex:26},{level:2,title:"Plex 安装镜像",slug:"plex-安装镜像",normalizedTitle:"plex 安装镜像",charIndex:47}],headersStr:"Emby（推荐） 安装镜像 Jellyfin 安装镜像 Plex 安装镜像",content:" * # Emby（推荐） 安装镜像\n\n\n * # Jellyfin 安装镜像\n\n\n * # Plex 安装镜像",normalizedContent:" * # emby（推荐） 安装镜像\n\n\n * # jellyfin 安装镜像\n\n\n * # plex 安装镜像",charsets:{cjk:!0},lastUpdated:"2022/11/09, 11:51:56",lastUpdatedTimestamp:1667965916e3},{title:"如何成为开源项目的贡献者(提交PR)",frontmatter:{title:"如何成为开源项目的贡献者(提交PR)",date:"2022-02-23T17:04:26.000Z",permalink:"/pages/f51e0a/",categories:["生活"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0411.%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%B4%A1%E7%8C%AE%E8%80%85(%E6%8F%90%E4%BA%A4PR).html",relativePath:"40.生活/0411.如何成为开源项目的贡献者(提交PR).md",key:"v-67950ee7",path:"/pages/f51e0a/",headers:[{level:2,title:"Pull Request 流程",slug:"pull-request-流程",normalizedTitle:"pull request 流程",charIndex:149},{level:3,title:"同步最新代码",slug:"同步最新代码",normalizedTitle:"同步最新代码",charIndex:371},{level:2,title:"1. fork开源项目",slug:"_1-fork开源项目",normalizedTitle:"1. fork开源项目",charIndex:645},{level:2,title:"2. clone fork 到自己仓库的代码",slug:"_2-clone-fork-到自己仓库的代码",normalizedTitle:"2. clone fork 到自己仓库的代码",charIndex:739},{level:2,title:"3. 在专有的开发分支上完成代码提交",slug:"_3-在专有的开发分支上完成代码提交",normalizedTitle:"3. 在专有的开发分支上完成代码提交",charIndex:882},{level:2,title:"4. 创建pull request",slug:"_4-创建pull-request",normalizedTitle:"4. 创建pull request",charIndex:955},{level:2,title:"疑问",slug:"疑问",normalizedTitle:"疑问",charIndex:1202}],headersStr:"Pull Request 流程 同步最新代码 1. fork开源项目 2. clone fork 到自己仓库的代码 3. 在专有的开发分支上完成代码提交 4. 创建pull request 疑问",content:"# Pull Request 规范\n\n * 如果遇到问题，建议保持你的 PR 足够小。保证一个 PR 只解决一个问题或只添加一个功能\n * 当新增组件或者修改原有组件时，记得增加或者修改测试代码，保证代码的稳定\n * 在 PR 中请添加合适的描述，并关联相关的 Issue\n\n\n# 简约版\n\n\n# Pull Request 流程\n\n 1. fork 主仓库，如果已经 fork 过，请同步主仓库的最新代码\n 2. 基于 fork 后仓库的 dev 分支新建一个分支，比如feature/button_color\n 3. 在新分支上进行开发，开发完成后，提 Pull Request 到主仓库的 dev 分支\n 4. Pull Request 会在 Review 通过后被合并到主仓库\n 5. 等待 Vant 发布版本，一般是每周一次\n\n\n# 同步最新代码\n\n提 Pull Request 前，请依照下面的流程同步主仓库的最新代码：\n\n# 添加主仓库到 remote，作为 fork 后仓库的上游仓库\ngit remote add upstream https://github.com/youzan/vant.git\n\n# 拉取主仓库最新代码\ngit fetch upstream\n\n# 切换至 dev 分支\ngit checkout dev\n\n# 合并主仓库代码\ngit merge upstream/dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 详尽版\n\n\n# 1. fork开源项目\n\n 1. 打开Github，找到开源项目主页，点击右上角“Fork”\n 2. 经过数秒的loading后即可完成，页面跳转到forked 之后自己的仓库里\n\n\n# 2. clone fork 到自己仓库的代码\n\ngit clone git@github.com:izhaong/***.git\n\n\n1\n\n * 对第二次提交来讲，上面的操作已经做过一遍了。需要对自己fork的仓库代码与原仓库代码进行同步\n\n\n\n * 然后在本地拉取最新的代码\n\n\n# 3. 在专有的开发分支上完成代码提交\n\n基本上仓库主分支只是最新稳定版本的快照。所有开发都应在专用分支中完成。不要针对主分支提交 PR。\n\n\n# 4. 创建pull request\n\n 1. 打开Github 个人仓库页面，会有工作分支push记录，以及“ Compare & pull request ”的提醒\n\n\n\n 1. 点击“ Compare & pull request ”进入“Open a pull request”，填写PR描述后点击“Create pull request”完成创建。\n\n\n\n 1. pr被接受后，自己远程仓库的工作分支可删除，本地工作分支也可删除，同时你也是一名光荣的贡献者\n    \n    \n\n\n# 疑问\n\n如果您没有在仓库的贡献者图中显示，可能是因为：\n\n * 您并非前 100 名贡献者之一。\n * 您的提交尚未合并到默认分支。\n * 您用于创作提交的电子邮件地址未连接到到您的 GitHub 帐户。",normalizedContent:"# pull request 规范\n\n * 如果遇到问题，建议保持你的 pr 足够小。保证一个 pr 只解决一个问题或只添加一个功能\n * 当新增组件或者修改原有组件时，记得增加或者修改测试代码，保证代码的稳定\n * 在 pr 中请添加合适的描述，并关联相关的 issue\n\n\n# 简约版\n\n\n# pull request 流程\n\n 1. fork 主仓库，如果已经 fork 过，请同步主仓库的最新代码\n 2. 基于 fork 后仓库的 dev 分支新建一个分支，比如feature/button_color\n 3. 在新分支上进行开发，开发完成后，提 pull request 到主仓库的 dev 分支\n 4. pull request 会在 review 通过后被合并到主仓库\n 5. 等待 vant 发布版本，一般是每周一次\n\n\n# 同步最新代码\n\n提 pull request 前，请依照下面的流程同步主仓库的最新代码：\n\n# 添加主仓库到 remote，作为 fork 后仓库的上游仓库\ngit remote add upstream https://github.com/youzan/vant.git\n\n# 拉取主仓库最新代码\ngit fetch upstream\n\n# 切换至 dev 分支\ngit checkout dev\n\n# 合并主仓库代码\ngit merge upstream/dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 详尽版\n\n\n# 1. fork开源项目\n\n 1. 打开github，找到开源项目主页，点击右上角“fork”\n 2. 经过数秒的loading后即可完成，页面跳转到forked 之后自己的仓库里\n\n\n# 2. clone fork 到自己仓库的代码\n\ngit clone git@github.com:izhaong/***.git\n\n\n1\n\n * 对第二次提交来讲，上面的操作已经做过一遍了。需要对自己fork的仓库代码与原仓库代码进行同步\n\n\n\n * 然后在本地拉取最新的代码\n\n\n# 3. 在专有的开发分支上完成代码提交\n\n基本上仓库主分支只是最新稳定版本的快照。所有开发都应在专用分支中完成。不要针对主分支提交 pr。\n\n\n# 4. 创建pull request\n\n 1. 打开github 个人仓库页面，会有工作分支push记录，以及“ compare & pull request ”的提醒\n\n\n\n 1. 点击“ compare & pull request ”进入“open a pull request”，填写pr描述后点击“create pull request”完成创建。\n\n\n\n 1. pr被接受后，自己远程仓库的工作分支可删除，本地工作分支也可删除，同时你也是一名光荣的贡献者\n    \n    \n\n\n# 疑问\n\n如果您没有在仓库的贡献者图中显示，可能是因为：\n\n * 您并非前 100 名贡献者之一。\n * 您的提交尚未合并到默认分支。\n * 您用于创作提交的电子邮件地址未连接到到您的 github 帐户。",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"百度网盘无需会员下载提速",frontmatter:{title:"百度网盘无需会员下载提速",date:"2021-11-30T01:59:34.000Z",permalink:"/pages/135624/",categories:["生活"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0480.%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E6%97%A0%E9%9C%80%E4%BC%9A%E5%91%98%E4%B8%8B%E8%BD%BD%E6%8F%90%E9%80%9F.html",relativePath:"40.生活/0480.百度网盘无需会员下载提速.md",key:"v-61f6be49",path:"/pages/135624/",headers:[{level:3,title:"开启百度网盘下载提速的方法",slug:"开启百度网盘下载提速的方法",normalizedTitle:"开启百度网盘下载提速的方法",charIndex:127},{level:3,title:"该不该开启下载提速模式？",slug:"该不该开启下载提速模式",normalizedTitle:"该不该开启下载提速模式？",charIndex:732}],headersStr:"开启百度网盘下载提速的方法 该不该开启下载提速模式？",content:"百度网盘的下载速度是出了名的“不当人”，开着 5G 都能把你的下载速度压在几十 K  而我又是间接性的存储下载大型文档,最近会员又过期,才发现新版百度网盘客户端的“提速下载”功能 官方表示可平均提速 3.2 倍，这可是之前付费用户才有的特权啊~\n\n\n# 开启百度网盘下载提速的方法\n\n 1. 首先你要下载安装最新版的百度网盘客户端 (下载地址位于本文结尾处)\n 2. 打开百度网盘应用，进入设置 → 传输 ，在「下载提速」处点击 “去开启”\n 3. 勾选同意提速协议并确定\n 4. 最后确保选择的是“提速模式”就可以了\n\n非常可惜的是， macOS 版和 Linux 的百度网盘客户端仍未提供提速选项，目前只有 Windows 版的用户可以使用。Mac 用户要么掏钱买会员，要么像我一样，借助 Parallels Desktop 虚拟机使用 Win 版的度盘客户端曲线救国了。\n\n早在几个月前，度盘就曾推出过“用户激励计划”，它在客户端上默认开启，占用用户的带宽进行 P2P 文件上传 (实质是在帮付费会员们加速) ，以此可以获得积分，可兑换爱奇艺 VIP，极速下载券等奖励。但这个激励计划既不透明、又默认开启，那点的奖励与用户的付出也极其不对等，因此被网友和媒体喷得体无完肤，最终这个“骚操作”被迫全面取消并下线。 而这次，百度网盘“下载提速”功能则是原“用户激励计划”的升级改版，首先它默认是关闭的，其次它提供了「下载提速」和「积分奖励」两种模式可选。最重要的是，现在你利用闲置带宽给别人加速之后，最终也能以“提速”的方式回馈给自己，就像 BT 一样做到我为人人，人人为我。你贡献的带宽能自己享受回来，这不仅更公平，同时也解决了下载缓慢的痛点和刚需。\n\n\n# 该不该开启下载提速模式？\n\n该不该开启其实要看情况的。你要是问我值不值得打开度盘这个下载提速模式？我反正是会打开的，毕竟谁能拒绝「完全免费提高百度网盘下载速度」的好机会呢对吧。 但是，如果你是重度下载者，希望每次都能接近跑满带宽，那么就别开这货了，直接入手超级会员才是王道，始终免费和付费差距还是不小的。还有，如果你的上行带宽太小或与他人共用宽带，那么还得考虑度盘上传时会不会拖慢整个网络导致卡顿，这样也是会影响到上网体验的。",normalizedContent:"百度网盘的下载速度是出了名的“不当人”，开着 5g 都能把你的下载速度压在几十 k  而我又是间接性的存储下载大型文档,最近会员又过期,才发现新版百度网盘客户端的“提速下载”功能 官方表示可平均提速 3.2 倍，这可是之前付费用户才有的特权啊~\n\n\n# 开启百度网盘下载提速的方法\n\n 1. 首先你要下载安装最新版的百度网盘客户端 (下载地址位于本文结尾处)\n 2. 打开百度网盘应用，进入设置 → 传输 ，在「下载提速」处点击 “去开启”\n 3. 勾选同意提速协议并确定\n 4. 最后确保选择的是“提速模式”就可以了\n\n非常可惜的是， macos 版和 linux 的百度网盘客户端仍未提供提速选项，目前只有 windows 版的用户可以使用。mac 用户要么掏钱买会员，要么像我一样，借助 parallels desktop 虚拟机使用 win 版的度盘客户端曲线救国了。\n\n早在几个月前，度盘就曾推出过“用户激励计划”，它在客户端上默认开启，占用用户的带宽进行 p2p 文件上传 (实质是在帮付费会员们加速) ，以此可以获得积分，可兑换爱奇艺 vip，极速下载券等奖励。但这个激励计划既不透明、又默认开启，那点的奖励与用户的付出也极其不对等，因此被网友和媒体喷得体无完肤，最终这个“骚操作”被迫全面取消并下线。 而这次，百度网盘“下载提速”功能则是原“用户激励计划”的升级改版，首先它默认是关闭的，其次它提供了「下载提速」和「积分奖励」两种模式可选。最重要的是，现在你利用闲置带宽给别人加速之后，最终也能以“提速”的方式回馈给自己，就像 bt 一样做到我为人人，人人为我。你贡献的带宽能自己享受回来，这不仅更公平，同时也解决了下载缓慢的痛点和刚需。\n\n\n# 该不该开启下载提速模式？\n\n该不该开启其实要看情况的。你要是问我值不值得打开度盘这个下载提速模式？我反正是会打开的，毕竟谁能拒绝「完全免费提高百度网盘下载速度」的好机会呢对吧。 但是，如果你是重度下载者，希望每次都能接近跑满带宽，那么就别开这货了，直接入手超级会员才是王道，始终免费和付费差距还是不小的。还有，如果你的上行带宽太小或与他人共用宽带，那么还得考虑度盘上传时会不会拖慢整个网络导致卡顿，这样也是会影响到上网体验的。",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"理想的笔记方式",frontmatter:{title:"理想的笔记方式",date:"2021-12-07T00:09:22.000Z",permalink:"/pages/5e342f/",categories:["生活"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0481.%E7%90%86%E6%83%B3%E7%9A%84%E7%AC%94%E8%AE%B0%E6%96%B9%E5%BC%8F.html",relativePath:"40.生活/0481.理想的笔记方式.md",key:"v-31f67e68",path:"/pages/5e342f/",headersStr:null,content:"2018～2019 印象笔记\n\n期间还用过有道云笔记，但是插入图片需要会员这就很坑了\n\n2019-2022年之前我都是用的语雀\n\n\n\n * 有道云笔记（收费）\n * 印象笔记（收费）\n * 语雀\n\n最后发现最适合我的还是markdown的方式\n\n通过github+md文件",normalizedContent:"2018～2019 印象笔记\n\n期间还用过有道云笔记，但是插入图片需要会员这就很坑了\n\n2019-2022年之前我都是用的语雀\n\n\n\n * 有道云笔记（收费）\n * 印象笔记（收费）\n * 语雀\n\n最后发现最适合我的还是markdown的方式\n\n通过github+md文件",charsets:{cjk:!0},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"其他",frontmatter:{title:"其他",date:"2021-12-26T12:51:19.000Z",permalink:"/pages/18e569/",categories:["生活"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/0490.%E5%85%B6%E4%BB%96.html",relativePath:"40.生活/0490.其他.md",key:"v-15087347",path:"/pages/18e569/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"规范性 条理命名",frontmatter:{title:"规范性 条理命名",date:"2022-06-26T00:46:18.000Z",permalink:"/pages/294ba9/",categories:["生活"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4010.%E9%99%88%E5%88%97&%E6%95%B4%E7%90%86/0420.%E8%A7%84%E8%8C%83%E6%80%A7%20%E6%9D%A1%E7%90%86%E5%91%BD%E5%90%8D.html",relativePath:"40.生活/4010.陈列&整理/0420.规范性 条理命名.md",key:"v-5ce2fd45",path:"/pages/294ba9/",headers:[{level:3,title:"FAT",slug:"fat",normalizedTitle:"fat",charIndex:487},{level:3,title:"NTFS",slug:"ntfs",normalizedTitle:"ntfs",charIndex:602},{level:3,title:"HFS",slug:"hfs",normalizedTitle:"hfs",charIndex:713},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:822},{level:3,title:"ext",slug:"ext",normalizedTitle:"ext",charIndex:1024},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:1252},{level:2,title:"命名支持",slug:"命名支持",normalizedTitle:"命名支持",charIndex:477},{level:3,title:"windows 命名约定",slug:"windows-命名约定",normalizedTitle:"windows 命名约定",charIndex:1654},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:2206}],headersStr:"FAT NTFS HFS APFS ext 其他 命名支持 windows 命名约定 总结",content:'一个良好的文件名，除了方便检索外，还让人看着舒服，赏心又悦目。\n\n当用不到的时候，文件命名是小事，但当你因为不恰当的命名导致找不到文件而焦头烂额时，它就不再是小事。\n\n在实际生活中，每次给需要存档的文件起名、整理时，我都要对所起的文件名思考\n\n以下方案就用科学性，原理性的来解决起名头疼问题\n\n如：迪士尼公司的影片文件\n\n\n\n文件名：[TOY-STORY-3_ FTR-1-3D_ F_EN-XX_ US-G_ 71_2K_DL 20100510_ PX_ i3D_ OV]\n\nTOY-STORY-3_\t\t《玩具总动员3》\nFTR-1-3D_\t\t\t\t正版本13D\nF_EN-XX_\t\t\t\t遮幅宽银幕\nUS-G\t\t\t\t\t\t英语音轨无字幕\n71\t\t\t\t\t\t\t7.1声道\n2K_\t\t\t\t\t\t\t2K\nDI\t\t\t\t\t\t\t迪士尼出品\n20100510_\t\t\t\t2010年5月10日\nPX_\t\t\t\t\t\t\t皮克斯打包\n13D\t\t\t\t\t\t\t不需要去鬼影\nOV\t\t\t\t\t\t\t原始版本文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n首先计算机磁盘文件系统及其命名支持：\n\n\n# FAT\n\n档案配置表（英语：File Allocation Table，首字母缩略字：FAT），是一种由微软发明并拥有部分专利[2] 的文件系统，供MS-DOS使用，也是所有非NT核心的Windows系统使用的档案系统。\n\n\n# NTFS\n\nNTFS（英语：New Technology File System），是Microsoft公司开发的专用文件系统，从Windows NT 3.1开始成为Windows NT家族的默认文件系统。[4]\n\n\n# HFS\n\n分层文件系统（Hierarchical File System，HFS）是一种由苹果电脑开发，并使用在Mac OS上的文件系统。最初被设计用于软盘和硬盘，同时也可以在在只读媒体如CD-ROM上见到。\n\n\n# APFS\n\n苹果文件系统（英语：Apple File System，简称APFS）是一个适用于macOS、iOS、tvOS和watchOS的文件系统，目前正在由苹果公司开发和部署。[1][2][3]它的目的是解决HFS+（Mac OS Extend，APFS的前身）文件系统的核心问题。[4]APFS针对闪存和固态存储设备进行优化，具有写入时复制等设计特点，使用I/O合并改进性能。[5][6]\n\n\n# ext\n\n延伸档案系统（英语：Extended file system，缩写为 ext或 ext1），也译为扩展文件系统，一种档案系统，于1992年4月发表，是为linux核心所做的第一个档案系统。最早由Rémy Card所创作，采用Unix文件系统（UFS）的元数据结构，以克服MINIX档案系统效能不佳的问题。它是在linux上，第一个利用虚拟档案系统实作出的档案系统，在linux核心0.96c版中首次加入支援，最大可支援2GB的档案系统。\n\n\n# 其他\n\n......\n\n\n# 命名支持\n\n对主流的几个文件系统做整理\n\n文件系统   应用平台      规范                                建议\nFAT    Windows   不能包含：< > / \\ | : * ?              \nNTFS   Windows   不能包含：< > / \\ | : * ? 不能超过255个字符   \nAPFS   MAC       所有的字符都可以                          不要包含 : ? @ # $&()|; ‘’“”<>等字符，另外 空格符，制表符和退格符也不建议使用\nxfs    CentOS    除了/外，所有的字符都可以                     不要包含 : ? @ # $&()|; ‘’“”<>等字符，另外 空格符，制表符和退格符也不建议使用\n\n\n# windows 命名约定\n\n以下基本规则使应用程序能够创建和处理文件和目录的有效名称，而不考虑文件系统：\n\n * 请勿对文件的名称使用以下保留名称：\n   \n   CON、PRN、AUX、NUL、COM1、COM2、COM3、COM4、COM5、COM6、COM7、COM8、COM9、LPT1、LPT2、LPT3、LPT4、LPT5、LPT6、LPT7、LPT8 和 LPT9。 此外，请避免这些名称紧跟扩展;例如，不建议NUL.txt。 有关详细信息，请参阅命名空间。\n\n * 不要使用空格或句点结束文件或目录名称。 尽管基础文件系统可能支持此类名称，但Windows shell 和用户界面不支持。 但是，可以接受将句点指定为名称的第一个字符。 例如，“.temp”。\n\n * 将当前代码页中的任何字符用于名称，包括扩展字符集中的 Unicode 字符和字符， (128-255) ，但以下除外：\n   \n   * 以下保留字符：\n     * <（小于）\n     * >（大于）\n     * ： (冒号)\n     * "（双引号）\n     * /（正斜杠）\n     * \\（反斜杠）\n     * | (垂直条或管道)\n     * ? （问号）\n     * *（星号）\n\n\n\n\n# 总结\n\n严格：\n\n_ . - 数字、英文字母\n\n宽松：! @ # $ % 空格 中文\n\n文件开头不要以特殊符号开头\n\n总结一套严格的规范命名：\n\n * \n\n前缀\t\t\t\t// 名称排序作用 10_ 20_ 做到序号中间有一定的间隔 后续更方便的插入条目更新位置\n时间\t\t\t\t// YYYYMMDD-HHmmss 精确度可以按情况来 年月日 和 时分秒 用-隔开 更易阅读\n文件名\t\t\t\t// 文件名称 用英文字母 可以用拼音代替\n版本\t\t\t\t// v1.1.1 \tv1.20.101\n人物\t\t\t\t// 人名、组织名都行\n标签\t\t\t\t// 补充信息 地点 文件性质\n备注\t\t\t\t// 注意事项 特别说明等\n\n通用\n\t种类\n\t大小\n\t位置\n\t创建时间\n\t修改时间\n\t\n更多信息\n\t来源\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 文件\n\n时间\t\t\t\t// YYYYMMDD-HHmmss 精确度可以按情况来 年月日 和 时分秒 用-隔开 更易阅读\n标题\t\t\t\t// 使用缩写 不要使用中文\n\n\neg:\n20220626_applet.vote-prod.poster_zhonghao.zip\n日期：20220626\n标题：applet.vote-prod.poster\n标题缩写释义：\n\tapplet.vote：软件类型 软件名称 // 小程序\n\tprod.poster: 功能模块 具体功能 // 作品模块下海报功能\n\tzhonghao：\t\t操作人\t\t\t\t\t\t// zhonghao\n\n\n20210321__ITO.5HT-Lab1-U1__HJ\n\n    日期：20210321，2021年03月21日\n    标题：ITO.5HT-Lab1\n    标题缩写释义：\n        ITO.5HT：实验项目为修饰 ITO 电极，用于测量 5HT\n        Lab1：测试地点，实验室1\n        U1：Unit 1，即第一台设备\n    研究人员：HJ\n\n\n202127__Samp11-OxPPy-7.0PBS0.1-KCl0.1-CV8-M0.4-P1.8-S0.1__Good.elc\n\n    测试时间：202127，20:21:27\n    标题：Samp11-OxPPy-7.0PBS0.1-KCl0.1-CV8-M0.4-P1.8-S0.1\n    标题缩写释义：\n        Samp11：Sample 11，即样品序号11\n        OxPPY：所作的操作为氧化 PPY\n        7.0PBS0.1：溶液环境为 PH7.0 的 PBS 缓冲液，浓度为 0.1M\n        KCl0.1：溶液中还有 0.1M 的 KCl\n        CV8：仪器参数为循环伏安法（cyclic voltammetry），循环8次\n        M0.4：扫描下限 -0.4V （M 表示 Minus）\n        P1.8：扫描上限 1.8V （P 表示 Positive）\n        S0.1：速度 0.1V/s （S 表示 Speed）\n    标签：Good\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n * 目录 分类 大集合 命名\n\n前缀\t\t\t\t// 名称排序作用 10_ 20_ 做到序号中间有一定的间隔 后续更方便的插入条目更新位置\n名称\t\t\t\t// \n\neg:\n10.Matter\n20.Work\n20.Live\n30.Person\n40.Study\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n----------------------------------------\n\n大前端 标题缩写释义\n\nwebSpa\nweb\nh5\n\nweapp\t\t\t\t\t\t\t\t\t\t// 微信小程序\nweOfficialAccounts\t\t\t// 微信公众号\n\nmixApp \t\t\t\t\t\t\t\t\t// 混合开发app\n\nandroidApp\t\t\t\t\t\t\t// 安卓软件\niosApp\t\t\t\t\t\t\t\t\t// 苹果软件\ndesktop\t\t\t\t\t\t\t\t\t// 桌面应用\n\nnode\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\ntodo。。。\n\n参考：',normalizedContent:'一个良好的文件名，除了方便检索外，还让人看着舒服，赏心又悦目。\n\n当用不到的时候，文件命名是小事，但当你因为不恰当的命名导致找不到文件而焦头烂额时，它就不再是小事。\n\n在实际生活中，每次给需要存档的文件起名、整理时，我都要对所起的文件名思考\n\n以下方案就用科学性，原理性的来解决起名头疼问题\n\n如：迪士尼公司的影片文件\n\n\n\n文件名：[toy-story-3_ ftr-1-3d_ f_en-xx_ us-g_ 71_2k_dl 20100510_ px_ i3d_ ov]\n\ntoy-story-3_\t\t《玩具总动员3》\nftr-1-3d_\t\t\t\t正版本13d\nf_en-xx_\t\t\t\t遮幅宽银幕\nus-g\t\t\t\t\t\t英语音轨无字幕\n71\t\t\t\t\t\t\t7.1声道\n2k_\t\t\t\t\t\t\t2k\ndi\t\t\t\t\t\t\t迪士尼出品\n20100510_\t\t\t\t2010年5月10日\npx_\t\t\t\t\t\t\t皮克斯打包\n13d\t\t\t\t\t\t\t不需要去鬼影\nov\t\t\t\t\t\t\t原始版本文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n首先计算机磁盘文件系统及其命名支持：\n\n\n# fat\n\n档案配置表（英语：file allocation table，首字母缩略字：fat），是一种由微软发明并拥有部分专利[2] 的文件系统，供ms-dos使用，也是所有非nt核心的windows系统使用的档案系统。\n\n\n# ntfs\n\nntfs（英语：new technology file system），是microsoft公司开发的专用文件系统，从windows nt 3.1开始成为windows nt家族的默认文件系统。[4]\n\n\n# hfs\n\n分层文件系统（hierarchical file system，hfs）是一种由苹果电脑开发，并使用在mac os上的文件系统。最初被设计用于软盘和硬盘，同时也可以在在只读媒体如cd-rom上见到。\n\n\n# apfs\n\n苹果文件系统（英语：apple file system，简称apfs）是一个适用于macos、ios、tvos和watchos的文件系统，目前正在由苹果公司开发和部署。[1][2][3]它的目的是解决hfs+（mac os extend，apfs的前身）文件系统的核心问题。[4]apfs针对闪存和固态存储设备进行优化，具有写入时复制等设计特点，使用i/o合并改进性能。[5][6]\n\n\n# ext\n\n延伸档案系统（英语：extended file system，缩写为 ext或 ext1），也译为扩展文件系统，一种档案系统，于1992年4月发表，是为linux核心所做的第一个档案系统。最早由remy card所创作，采用unix文件系统（ufs）的元数据结构，以克服minix档案系统效能不佳的问题。它是在linux上，第一个利用虚拟档案系统实作出的档案系统，在linux核心0.96c版中首次加入支援，最大可支援2gb的档案系统。\n\n\n# 其他\n\n......\n\n\n# 命名支持\n\n对主流的几个文件系统做整理\n\n文件系统   应用平台      规范                                建议\nfat    windows   不能包含：< > / \\ | : * ?              \nntfs   windows   不能包含：< > / \\ | : * ? 不能超过255个字符   \napfs   mac       所有的字符都可以                          不要包含 : ? @ # $&()|; ‘’“”<>等字符，另外 空格符，制表符和退格符也不建议使用\nxfs    centos    除了/外，所有的字符都可以                     不要包含 : ? @ # $&()|; ‘’“”<>等字符，另外 空格符，制表符和退格符也不建议使用\n\n\n# windows 命名约定\n\n以下基本规则使应用程序能够创建和处理文件和目录的有效名称，而不考虑文件系统：\n\n * 请勿对文件的名称使用以下保留名称：\n   \n   con、prn、aux、nul、com1、com2、com3、com4、com5、com6、com7、com8、com9、lpt1、lpt2、lpt3、lpt4、lpt5、lpt6、lpt7、lpt8 和 lpt9。 此外，请避免这些名称紧跟扩展;例如，不建议nul.txt。 有关详细信息，请参阅命名空间。\n\n * 不要使用空格或句点结束文件或目录名称。 尽管基础文件系统可能支持此类名称，但windows shell 和用户界面不支持。 但是，可以接受将句点指定为名称的第一个字符。 例如，“.temp”。\n\n * 将当前代码页中的任何字符用于名称，包括扩展字符集中的 unicode 字符和字符， (128-255) ，但以下除外：\n   \n   * 以下保留字符：\n     * <（小于）\n     * >（大于）\n     * ： (冒号)\n     * "（双引号）\n     * /（正斜杠）\n     * \\（反斜杠）\n     * | (垂直条或管道)\n     * ? （问号）\n     * *（星号）\n\n\n\n\n# 总结\n\n严格：\n\n_ . - 数字、英文字母\n\n宽松：! @ # $ % 空格 中文\n\n文件开头不要以特殊符号开头\n\n总结一套严格的规范命名：\n\n * \n\n前缀\t\t\t\t// 名称排序作用 10_ 20_ 做到序号中间有一定的间隔 后续更方便的插入条目更新位置\n时间\t\t\t\t// yyyymmdd-hhmmss 精确度可以按情况来 年月日 和 时分秒 用-隔开 更易阅读\n文件名\t\t\t\t// 文件名称 用英文字母 可以用拼音代替\n版本\t\t\t\t// v1.1.1 \tv1.20.101\n人物\t\t\t\t// 人名、组织名都行\n标签\t\t\t\t// 补充信息 地点 文件性质\n备注\t\t\t\t// 注意事项 特别说明等\n\n通用\n\t种类\n\t大小\n\t位置\n\t创建时间\n\t修改时间\n\t\n更多信息\n\t来源\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 文件\n\n时间\t\t\t\t// yyyymmdd-hhmmss 精确度可以按情况来 年月日 和 时分秒 用-隔开 更易阅读\n标题\t\t\t\t// 使用缩写 不要使用中文\n\n\neg:\n20220626_applet.vote-prod.poster_zhonghao.zip\n日期：20220626\n标题：applet.vote-prod.poster\n标题缩写释义：\n\tapplet.vote：软件类型 软件名称 // 小程序\n\tprod.poster: 功能模块 具体功能 // 作品模块下海报功能\n\tzhonghao：\t\t操作人\t\t\t\t\t\t// zhonghao\n\n\n20210321__ito.5ht-lab1-u1__hj\n\n    日期：20210321，2021年03月21日\n    标题：ito.5ht-lab1\n    标题缩写释义：\n        ito.5ht：实验项目为修饰 ito 电极，用于测量 5ht\n        lab1：测试地点，实验室1\n        u1：unit 1，即第一台设备\n    研究人员：hj\n\n\n202127__samp11-oxppy-7.0pbs0.1-kcl0.1-cv8-m0.4-p1.8-s0.1__good.elc\n\n    测试时间：202127，20:21:27\n    标题：samp11-oxppy-7.0pbs0.1-kcl0.1-cv8-m0.4-p1.8-s0.1\n    标题缩写释义：\n        samp11：sample 11，即样品序号11\n        oxppy：所作的操作为氧化 ppy\n        7.0pbs0.1：溶液环境为 ph7.0 的 pbs 缓冲液，浓度为 0.1m\n        kcl0.1：溶液中还有 0.1m 的 kcl\n        cv8：仪器参数为循环伏安法（cyclic voltammetry），循环8次\n        m0.4：扫描下限 -0.4v （m 表示 minus）\n        p1.8：扫描上限 1.8v （p 表示 positive）\n        s0.1：速度 0.1v/s （s 表示 speed）\n    标签：good\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n * 目录 分类 大集合 命名\n\n前缀\t\t\t\t// 名称排序作用 10_ 20_ 做到序号中间有一定的间隔 后续更方便的插入条目更新位置\n名称\t\t\t\t// \n\neg:\n10.matter\n20.work\n20.live\n30.person\n40.study\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n----------------------------------------\n\n大前端 标题缩写释义\n\nwebspa\nweb\nh5\n\nweapp\t\t\t\t\t\t\t\t\t\t// 微信小程序\nweofficialaccounts\t\t\t// 微信公众号\n\nmixapp \t\t\t\t\t\t\t\t\t// 混合开发app\n\nandroidapp\t\t\t\t\t\t\t// 安卓软件\niosapp\t\t\t\t\t\t\t\t\t// 苹果软件\ndesktop\t\t\t\t\t\t\t\t\t// 桌面应用\n\nnode\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\ntodo。。。\n\n参考：',charsets:{cjk:!0},lastUpdated:"2023/09/17, 16:36:29",lastUpdatedTimestamp:1694939789e3},{title:"个人软件归类存放及安装目录",frontmatter:{title:"个人软件归类存放及安装目录",date:"2023-09-17T16:13:34.000Z",permalink:"/pages/3dad67/",categories:["生活","陈列&整理"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4010.%E9%99%88%E5%88%97&%E6%95%B4%E7%90%86/4010020.%E4%B8%AA%E4%BA%BA%E8%BD%AF%E4%BB%B6%E5%BD%92%E7%B1%BB%E5%AD%98%E6%94%BE%E5%8F%8A%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.html",relativePath:"40.生活/4010.陈列&整理/4010020.个人软件归类存放及安装目录.md",key:"v-99641424",path:"/pages/3dad67/",headers:[{level:2,title:"软件分类",slug:"软件分类",normalizedTitle:"软件分类",charIndex:36},{level:3,title:"平台",slug:"平台",normalizedTitle:"平台",charIndex:74}],headersStr:"软件分类 平台",content:"无故放失，这几年东西太多了，需要整理；很多都参考业界的通用方案\n\n\n# 软件分类\n\n以下面及集中方式来分类存放\n\n * 名称\n\n * 版本\n\n * 平台\n\n * 平台差异（x86、x64、arm架构等）\n\n * 安装格式\n\n * ....\n\n考虑到很多种， 基本就以软件名称_软件版本为文件夹，下面存放各个平台及其安装包\n\n示例：node：\n\n\n# 平台\n\n\n\n\n# Release\n\n或者以github中的release方式管理\n\n\n\n最终决定的方案",normalizedContent:"无故放失，这几年东西太多了，需要整理；很多都参考业界的通用方案\n\n\n# 软件分类\n\n以下面及集中方式来分类存放\n\n * 名称\n\n * 版本\n\n * 平台\n\n * 平台差异（x86、x64、arm架构等）\n\n * 安装格式\n\n * ....\n\n考虑到很多种， 基本就以软件名称_软件版本为文件夹，下面存放各个平台及其安装包\n\n示例：node：\n\n\n# 平台\n\n\n\n\n# release\n\n或者以github中的release方式管理\n\n\n\n最终决定的方案",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"时间管理 GTD",frontmatter:{title:"时间管理 GTD",date:"2023-09-17T13:44:23.000Z",permalink:"/pages/046e76/",categories:["生活","方法论"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4020.%E6%96%B9%E6%B3%95%E8%AE%BA/4020005.%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%20GTD.html",relativePath:"40.生活/4020.方法论/4020005.时间管理 GTD.md",key:"v-acdd69cc",path:"/pages/046e76/",headers:[{level:3,title:"https://www.zhihu.com/column/gaoxiaoxuexifa",slug:"https-www-zhihu-com-column-gaoxiaoxuexifa",normalizedTitle:"https://www.zhihu.com/column/gaoxiaoxuexifa",charIndex:2},{level:3,title:"时间管理的核心",slug:"时间管理的核心",normalizedTitle:"时间管理的核心",charIndex:50},{level:4,title:"1. 收集 —— 收集记录",slug:"_1-收集-收集记录",normalizedTitle:"1. 收集 —— 收集记录",charIndex:246},{level:4,title:"2. 处理 —— 处理分类",slug:"_2-处理-处理分类",normalizedTitle:"2. 处理 —— 处理分类",charIndex:369},{level:4,title:"4. 执行 —— 坚决执行",slug:"_4-执行-坚决执行",normalizedTitle:"4. 执行 —— 坚决执行",charIndex:826},{level:4,title:"5. 回顾 —— 回顾检查",slug:"_5-回顾-回顾检查",normalizedTitle:"5. 回顾 —— 回顾检查",charIndex:1073}],headersStr:"https://www.zhihu.com/column/gaoxiaoxuexifa 时间管理的核心 1. 收集 —— 收集记录 2. 处理 —— 处理分类 4. 执行 —— 坚决执行 5. 回顾 —— 回顾检查",content:"# https://www.zhihu.com/column/gaoxiaoxuexifa\n\n\n# 时间管理的核心\n\n时间管理有很多种方法，而GTD（全称：Getting Things Done）就是其中一套行之有效的方法，也是现在最受欢迎的方法。GTD翻译成中文就是“把事情做完”，GTD的核心理念概括就是 “通过记录的方式把头脑中的各种事情移出来，然后整理安排自己去执行”。带着一些自己的理解，下面谈一谈我对GTD的理解，GTD的核心步骤为五步：收集、处理、管理、执行、回顾。\n\n\n\n# 1. 收集 —— 收集记录\n\n人的大脑能储存很多东西，但有限，不要相信某事情发生后过了一段时间你还能记得，释放大脑的储存负载，让大脑着重于去思考，平时有什么信息、任务和灵感要在忘记之前用工具记录下来，使用的工具要尽可能的方便，易用，便捷。\n\n# 2. 处理 —— 处理分类\n\n只有及时处理信息，对信息及时做出决定和归纳成类，你才能避免信息的堆积和碎片化，处理信息时采用两分钟法则和四象限法则。\n\n两分钟方法就是如果一件事情两分钟内能解决的事情，无论是何种事情，马上着手解决掉，如果不能再进行分类。\n\n四象限法则是把工作按照重要和紧急两个不同的程度划分成四个“象限”：既紧急又重要、重要但不紧急、紧急但不重要、既不紧急也不重要。\n\n\n\n3. 计划 —— 计划安排\n\n除了既有的日程安排外，可以设定每日，每周，每月，每年你需要完成的重大事件，把他们排进日程表。\n\n每天要做的事件采用三只青蛙理论，前天晚上睡觉前设定第二天最重要的三件事，起床后就可以开始着手这三件事了（同理可用于每月的“三只青蛙”, 每季度的“三只青蛙”，每年的“三只青蛙”）。\n\n每周要做的事采用习惯21天效应，一件事只要坚持21天就能习惯成自然，成为一种习惯。每月要做的事采用日历行程表的方法，将每月要做的事排进日程表。\n\n\n\n每年要做的事采用愿望清单法，让自己每年都有收获和进步。\n\n\n\n# 4. 执行 —— 坚决执行\n\n执行是Getting Things Done最关键的一步，也是成功与否的关键，要言行一致，制定了计划就一定得做到，这能很好地提升你的自我认同感。执行时你应当在不分心的情境下，一次只执行一件事，既不要多线工作，也不要让你的工作突然中断。采用番茄工作法，将番茄时间设为25分钟，专注工作，中途不做任何与该任务无关的事，直到番茄时钟响起，然后短暂休息5分钟继续番茄时钟，每4个番茄时段可多休息一会儿。番茄工作法极大地提高了工作的效率，还会有意想不到的成就感。\n\n\n\n# 5. 回顾 —— 回顾检查\n\n目前我采用的是一周回顾一次，采用PDCA****循环法对长期目标、中期目标和短期目标进行回顾，对工作和其它事情进行回顾，看看哪里做的不好，需要改进，重新做出调整计划。这样能使得计划更有效地进行，更加合乎工作程序的逻辑。\n\n\n\n文章来自微信公众号：速读记忆",normalizedContent:"# https://www.zhihu.com/column/gaoxiaoxuexifa\n\n\n# 时间管理的核心\n\n时间管理有很多种方法，而gtd（全称：getting things done）就是其中一套行之有效的方法，也是现在最受欢迎的方法。gtd翻译成中文就是“把事情做完”，gtd的核心理念概括就是 “通过记录的方式把头脑中的各种事情移出来，然后整理安排自己去执行”。带着一些自己的理解，下面谈一谈我对gtd的理解，gtd的核心步骤为五步：收集、处理、管理、执行、回顾。\n\n\n\n# 1. 收集 —— 收集记录\n\n人的大脑能储存很多东西，但有限，不要相信某事情发生后过了一段时间你还能记得，释放大脑的储存负载，让大脑着重于去思考，平时有什么信息、任务和灵感要在忘记之前用工具记录下来，使用的工具要尽可能的方便，易用，便捷。\n\n# 2. 处理 —— 处理分类\n\n只有及时处理信息，对信息及时做出决定和归纳成类，你才能避免信息的堆积和碎片化，处理信息时采用两分钟法则和四象限法则。\n\n两分钟方法就是如果一件事情两分钟内能解决的事情，无论是何种事情，马上着手解决掉，如果不能再进行分类。\n\n四象限法则是把工作按照重要和紧急两个不同的程度划分成四个“象限”：既紧急又重要、重要但不紧急、紧急但不重要、既不紧急也不重要。\n\n\n\n3. 计划 —— 计划安排\n\n除了既有的日程安排外，可以设定每日，每周，每月，每年你需要完成的重大事件，把他们排进日程表。\n\n每天要做的事件采用三只青蛙理论，前天晚上睡觉前设定第二天最重要的三件事，起床后就可以开始着手这三件事了（同理可用于每月的“三只青蛙”, 每季度的“三只青蛙”，每年的“三只青蛙”）。\n\n每周要做的事采用习惯21天效应，一件事只要坚持21天就能习惯成自然，成为一种习惯。每月要做的事采用日历行程表的方法，将每月要做的事排进日程表。\n\n\n\n每年要做的事采用愿望清单法，让自己每年都有收获和进步。\n\n\n\n# 4. 执行 —— 坚决执行\n\n执行是getting things done最关键的一步，也是成功与否的关键，要言行一致，制定了计划就一定得做到，这能很好地提升你的自我认同感。执行时你应当在不分心的情境下，一次只执行一件事，既不要多线工作，也不要让你的工作突然中断。采用番茄工作法，将番茄时间设为25分钟，专注工作，中途不做任何与该任务无关的事，直到番茄时钟响起，然后短暂休息5分钟继续番茄时钟，每4个番茄时段可多休息一会儿。番茄工作法极大地提高了工作的效率，还会有意想不到的成就感。\n\n\n\n# 5. 回顾 —— 回顾检查\n\n目前我采用的是一周回顾一次，采用pdca****循环法对长期目标、中期目标和短期目标进行回顾，对工作和其它事情进行回顾，看看哪里做的不好，需要改进，重新做出调整计划。这样能使得计划更有效地进行，更加合乎工作程序的逻辑。\n\n\n\n文章来自微信公众号：速读记忆",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"五色时间管理法",frontmatter:{title:"五色时间管理法",date:"2023-09-17T13:42:43.000Z",permalink:"/pages/236fbc/",categories:["生活","方法论"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4020.%E6%96%B9%E6%B3%95%E8%AE%BA/4020010.%E4%BA%94%E8%89%B2%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%B3%95.html",relativePath:"40.生活/4020.方法论/4020010.五色时间管理法.md",key:"v-1d1bff6c",path:"/pages/236fbc/",headers:[{level:2,title:"红色周二 | 《深度工作》：教你如何在碎片化时代有效使用每一点脑力",slug:"红色周二-《深度工作》-教你如何在碎片化时代有效使用每一点脑力",normalizedTitle:"红色周二 | 《深度工作》：教你如何在碎片化时代有效使用每一点脑力",charIndex:3956}],headersStr:"红色周二 | 《深度工作》：教你如何在碎片化时代有效使用每一点脑力",content:"https://zhuanlan.zhihu.com/p/495939087\n\n----------------------------------------\n\n如何定义自己的时间价值？如何实现家庭、工作、个人生活的平衡？拖延症怎么办？如何过一天，就如何过一生！\n\n经历了三顾茅庐和几番时间预约，2022年3月29日晚在“她力量”直播间终于和五色时间管理法提出者廖晓一女士见面了，畅聊关于时间管理、人生的平衡的话题。精彩如下：\n\n\n\n五色时间管理法\n\n其实从名字上就能看出来：是有色彩的时间管理法，而且是有五种颜色的时间管理法。那么五色是哪五色呢？三原色红蓝绿大家一定都知道？三原色加在一起是白色，还有一个黄色。刚才我去接孩子放学，问她什么是五色时间管理法，她说是让生活多很多快乐的时间管理法。\n\n国内外很多专家认为，人的幸福取决于五个方面：学习(Learn)、终生事业(Lifework)、生活(LIFE)、意义(Legend)和爱(Love)。任何一方面的缺失都是不行的。如果我们拥有持续的成长、满意的工作、健康的身心、明确的意义和良好的人际，就会觉得生活美好，人生可期。而这五个方面，我将其与颜色对应，即蓝色学习(Learn)、红色事业(Lifework)、绿色生活(LIFE)、白色意义(Legend)和黄色爱(Love)。\n\n如果把人看作一个能量体，平衡是最理想的状态，其中红色事业和黄色爱是以能量输出为主的，一个是创造社会价值，一个是创造情感价值；蓝色学习和绿色生活是以能量输入为主的，一个是享受知识的盛宴，一个是享受悦己的美好;白色意义，是能量的中转，活得清晰，独立思考，可以助你更好地输入和输出。生活需要仪式感，给自己的时间一点色彩，当能量的输入和输出所花的时间大致相同时，幸福感是最强的。\n\n**五色时间管理法是一种平衡生活的理念，是一种高效工作的方法，是价值观和方法论的二合一。**五色时间管理法主张像配置金钱一样投资时间，把每天的1440分钟看作是1440时间元，用记账的方式去统计时间的去向，五色时间统计并非要记录所有时间的开支，只记录让自己幸福的时间用度，也就是那些给自己生活增加了色彩的时间开销。能否入账完全是主观的，我们对时间的感觉取决于我们在做什么，这就是说只要你自我感觉良好就行。如果时间花得值得，就可以涂上五色，如果时间花得不值，回想起来觉得自己在浪费时间，就涂上黑色，归为潜能色，要想着将其转化为五色。借着五色时间统计法，通过五色习惯的培养，优化在蓝色学习、红色事业、绿色生活、白色意义和黄色爱五个方面的时间分配，帮助大家有的放矢地利用时间，内外相连，挖掘能量，感受丰盛。\n\n划重点：\n\n1.首先是把时间当钱；2.其次多投资少浪费；3.最后投资到五色：红黄蓝绿白。\n\n我受**《奇特的一生》**这本书的影响，在2012年4月12日开始做时间统计并连续写日记，它给我带来的改变是自己不觉得但周围人感觉很明显的，前天跟朋友吃饭，他还说到2012年感觉你整个人变得更加的五光十色。然后我在花团锦簇中轻轻松松、快乐乐乐地活着。\n\n周围的朋友每次看到我都会问我是怎么做到的，2015年，为了更加清楚地讲述，我将这个方法总结为了“五色时间管理法”，在7年的时间里，它给我持续赋能，让我能够在坚定走在财务自由路上之余，**每年吃100次火锅还能瘦几斤、看100个电影、见100个朋友、写200多篇书评、陪每个孩子的时间平均每天超过3小时、平均每天睡7个多小时。**也很高兴它在我佛系的更新下，能够以多种形式，泛影响着近20万人，包括大中小学的学生、职场新人和妈妈们。\n\n晓一的五色总结（2021年）\n\n(微信公众号：TimeHathor)可以看到每个月的五色时间统计情况。\n\n如何实现工作、家庭和个人生活的平衡?\n\n用五色时间管理法！O(∩_∩)O哈哈~\n\n为什么会有这个问题？我理解是我们需要取得工作、家庭和个人生活的平衡才能得到人生的幸福。其实对应的是我们的三个方面：公众生活、个人生活和内心生活。如果说幸福人生能装多少水，取决于最短的那块板的话，那么五色时间管理法能帮你将蓝色学习、红色事业、绿色生活、白色意义和黄色人际这五个方面实现均衡。我是一个普普通通的二孩妈妈，我的学习、事业、生活、思考和感情，每一样都不太突出，但我要感谢五色时间管理法让我实现了内心的平衡。让我得以传递快乐。\n\n职场女性，尤其是有两个孩子或更多孩子的职场女性，扮演着很多角色：一出生除了是自己，还是女儿；进入学校，成为了学生；工作后又多了职员角色；结婚生子后又增加了妻子、儿媳妇和妈妈的角色。这些都是基础的，女性还是闺蜜，还有自己的爱好，还有自己的各种圈子。众多的角色让女性有了平衡的需求，答案是：做好一个卓有成效的“角色”管理者。对于每位女性来说，生命由时间构成，我们首先要管理的就是自己的时间。三大要点分享给大家：\n\n1.做啥?\n\n扬长避短，做最擅长的色彩(保证高效能)\n\n我们要如何选择时间的流向?德鲁克有一个观点是：我们做绝大部分事情时，都不能完全胜任。解决问题的关键，不是让我们想办法把自己不胜任的事情做好，而是要想清楚我可以把什么事情做得最好。\n\n你必须最先弄清楚自己的优势是什么，你有什么与众不同的能力，你是否会在某方面游刃有余，以及你是否已将其运用到自己的工作和生活中。这一点同时适用于工作和家庭一样。无论是内向生长还是外向生长，做自己最擅长的，才能实现所在角色的卓有成效。\n\n这需要认识自己，发现自己的优势，在协同前进中发挥自己的比较优势。如果你擅长红色赚钱，那就多一点时间赚钱；如果你擅长白色写作，那就多一点时间写作;如果你擅长黄色带娃，那就多一点时间带娃。当然，你也可能是全方面都擅长的达人。那就可以增加喜欢与否、认可度深浅等维度。\n\n2.咋做?\n\n以最适合自己的方式去涂色(保证高效率)\n\n你有没有思考过，在什么情况下，你可以最大化地发挥自己的潜能呢?你可以最好地完成时间的涂色?\n\n有些人适合在夜晚工作，而有些人最好的状态在清晨，当然有的人早晚都很好；\n\n有些人通过读图文来学习，有些人通过听来学习，有些人通过写来学习；\n\n有些人适合浸入式工作方式，而有些人则适合多任务短时工作方式……\n\n每个人都有最适合自己的方式，你需要清晰地认识自己。除了你自己，没有人能衡量你最有效率的工作方式，你越早发现适合自己的工作方式，你就可以越快地得到高效工作带来的叠加效应。我自己效率更高的时间是早上，喜欢通过写来加深学习，喜欢沉浸式工作方式。如果你不太清楚，就用多种方式去试。\n\n3.咋保持?\n\n保持觉察，确保自己的时间五色(保证正念)\n\n德鲁克说：“时间是最稀有的资源，若不将时间管理好，想要管理好其他事情就只是空谈。”珍惜自己时间的人，正在走向成功或更加成功。你不妨尝试进行每半小时的事件记录，以让自己保持觉察，并尽量让自己的时间五色，也就是花得值得。\n\n德鲁克认为那些成功高效人士的“秘诀”之一就是，他们一次只专注完成一件事，拒绝浪费时间在一些“琐事”上。要做到这一点，可以参考下面三点：\n\n第一，给重要的事情或者例行的事情，留出固定的时间。比如说今天晚上的直播，我留出来了6点半-9点这样的两个半小时的时间。比如说每天的日记，我会预留半小时。 第二，创造完整的属于自己的不被打扰的时间，虽然可能只有30分钟(有调查表明，现代人平均7分钟就会去刷一次手机，也就是自我打断)，但是日积月累的效果会非常惊人。比如说我今天晚上的直播，旁边是没有人的。 第三，给那些突发的事件或状况，预留出一些自由的时间，不要把日程安排得过满。比如说我今天晚上就不再安排其他事情，朋友约着一起吃饭，也已经修改了时间。\n\n时间对于你来说它的价值是什么?\n\n我的理解有三个层次：\n\n1.意识层面\n\n你把时间当钱“花”。我们把每天24小时，1440分钟，当做货币(1440时间元)去看待它，这样你就对时间的感受会更加直观，也会更好地觉察它和合理配置它。\n\n2.现实层面\n\n你要知道你的时间值多少钱。分析你的一小时的时间价值是多大：以小时为单位，你一年的所有收入，除以你这一年花在取得这些收入的时间，就能看到你每一个小时值多少钱。\n\n3.增值层面\n\n你要想方设法让时间价值指数级增值。要利用五色时间管理法，配置自己的时间，用五色让你的生命能力更加强大，避免和减少在非生产性价值或无意义的消极负面的潜能色时间。我目前只能达到50%的增长，还没有达到指数级增长，但这是我的努力方向。\n\n如何看待“加班”和“效率”？\n\n加班与否，跟公司DNA有关，是一种文化，也许就是长期需要加班;其次加班与否，跟领导有关，是一种工作方式;最后我说一下我自己的情况，我们公司是不要求加班的，只看最终的结果，是否加班你自己决定；我们领导是不加班的，但是他会在网络上保持高响应度;我们是否要加班看个人和工作的匹配度，我的工作不是一成不变的，每次我接受新挑战时，因为要花更多时间来学习和成长，都会选择加班，而等我可以跟上时，一定是不加班的。\n\n我对自己的小伙伴也是同样的要求：不为了加班而加班，根据需要加班，要努力成为一个日常高效率，能够准点下班的人。加班的时间如果是自己选择的，是红色的，为了自己热爱的工作投资时间，是很美好的事情。内驱力带动下的加班，主动选择的加班，我是认同的，也在身体力行。另外我一直觉得工作是一件很好的事情，不仅可以创造价值，还能给自己带来收入。所以我在工作之外的时间也会有一小部分用来工作，主动加班。\n\n我们都知道一个词叫心流，很多人会觉得只有沉浸于读书、娱乐才会有，其实做有挑战性的工作时更容易进入心流状态。\n\n\n# 红色周二 | 《深度工作》：教你如何在碎片化时代有效使用每一点脑力\n\n能不能分享一下年度计划？\n\n我一般是年初制定年度计划。然后分解到每个月。提前一周进行下周的日程确认。每天的时间由三块沟通：每日工作大事+五色时间计划+其他事情。\n\n我今年的年度计划定了15个目标，主要是顺着去年的年度目标完成情况(可以加上文章链接)来的，在五色的五个方面，分别设定了3个目标（横、衡、恒）。\n\n分享其中的5个目标，都带了五：\n\n蓝色方面看250本书，并写书评，发布在小一大书悦读会的公众号上；\n\n红色方面增长50%；\n\n绿色方面跑个半马25公里；\n\n白色方面写25万字时间管理的文字；\n\n黄色方面给予爱250次。\n\n拖延症怎么办？\n\n可以从三个方面打败拖延症：\n\n1.增加动力(我想，我能，我喜欢)； 2.减少阻力(减少数量、减少难度、减少干扰)； 3.分阶段打败拖延症：长期聪明地定目标(具体、可测量、可行的、相关的和有时间节点的)、中期养成习惯(21天或者30天养成习惯)、短期用四象限(聚焦二象限，重要但不仅仅的事情)。\n\n如果上面的这个你觉得比较多，那就记住三个五：\n\n5分钟法则(就做五分钟)，哄自己开始； 25分钟番茄钟(就做一个番茄钟)，哄自己专注； 五星级愉悦(记录下来自己的成就)，哄自己自信。\n\n2022年你最重要的一件事是什么？\n\n把100个五虎(福)添亿杯亲手给到五色的朋友们。我希望每个被五色时间管理法陪伴的人，能够成为更好的自己，而我个人经验是有五色时间管理的生活是轻轻松松实现心想事成的。\n\n睡眠时间是多久?\n\n依据《睡眠革命》，从起床时间倒推睡觉时间，按照90分钟一个周期来睡，一般是6小时或7.5个小时，偶尔是9小时。平均每天是7小时出头。睡眠时间其实并不是最重要的，睡眠质量更重要，目的地是充沛的精力。\n\n如何看待全职妈妈这个角色?\n\n首先全职妈妈跟打工人一样是一份工作，而且比普通工作要累很多，对于愿意当全职妈妈的女性，我表示敬佩。其次全职妈妈可以给到孩子更多的陪伴，是非常好的，我表示羡慕。最后全职妈妈在可自由支配时间上其实有优势，可以用五色时间管理法，做好创收，实现平衡，会是更加缤纷更加充实更加成功的人生。\n\n有什么是适合全职妈妈可以做的工作？\n\n如果之前是全职，考虑做兼职，就是把之前的技能延伸出来;如果之前没有工作过，看看朋友们经常请自己帮忙的事情是什么以及经常感谢自己的事情是什么;劳务性收入，靠时间来取得收入，比如说帮别人做事；脑力性收入，靠头脑取得收入，比如说赚版税；和财务性收入，靠钱来取得收入，比如说进行理财投资。\n\n具体可以考虑的有做自媒体，做自己的品牌：写作赚钱、广告流量、推广带货。\n\n推荐图书？\n\n《奇特的一生》，它帮助我活出奇特的一生，它帮助我去助力更多的人活出奇特的一生。推荐理由见链接。\n\n推荐职场女性值得看的电影？\n\n《金斯伯格大法官》纪录片\n\n最后的精彩\n\n**问：**如果是长期在外出差，回来又被隔离，算是什么颜色?\n\n同样的事情会是不同的颜色，可以选择郁郁不乐涂成黑色潜能色，也可以选择抓住难得的不出差的时间，做点自己平日想做但做不了的事情，就能涂上五色，比如说读点书，蓝色；听点课，蓝色；给爱的人交流，黄色;运动保持身材，绿色；做做复盘写写文字，白色。一句老话：我们没法决定天气，但可以决定心情。\n\n**问：**职场女性的时间管理要点。\n\n首先是努力去发现职场中的小确幸，挖掘出颜色；其次是自发创造出职场中的色彩，知道什么要什么不要，时间管理的关键其实不是多做，而是少做;最后是在各种色彩中实现自己的动态平衡。\n\n**问：**为什么选择今天做分享?\n\n今天是一个朋友的生日，希望能够集18个祝福，祝女神生日快乐！今天是3月29日，希望大家在昨天、今天、明天这“三”天，都能活在“爱”里，幸福长“久”。\n\n女神生日快乐，永远18岁！\n\n\n\n\n\n\n\n\n\n本文转自：公众号 京狮MBAer的云端记忆",normalizedContent:"https://zhuanlan.zhihu.com/p/495939087\n\n----------------------------------------\n\n如何定义自己的时间价值？如何实现家庭、工作、个人生活的平衡？拖延症怎么办？如何过一天，就如何过一生！\n\n经历了三顾茅庐和几番时间预约，2022年3月29日晚在“她力量”直播间终于和五色时间管理法提出者廖晓一女士见面了，畅聊关于时间管理、人生的平衡的话题。精彩如下：\n\n\n\n五色时间管理法\n\n其实从名字上就能看出来：是有色彩的时间管理法，而且是有五种颜色的时间管理法。那么五色是哪五色呢？三原色红蓝绿大家一定都知道？三原色加在一起是白色，还有一个黄色。刚才我去接孩子放学，问她什么是五色时间管理法，她说是让生活多很多快乐的时间管理法。\n\n国内外很多专家认为，人的幸福取决于五个方面：学习(learn)、终生事业(lifework)、生活(life)、意义(legend)和爱(love)。任何一方面的缺失都是不行的。如果我们拥有持续的成长、满意的工作、健康的身心、明确的意义和良好的人际，就会觉得生活美好，人生可期。而这五个方面，我将其与颜色对应，即蓝色学习(learn)、红色事业(lifework)、绿色生活(life)、白色意义(legend)和黄色爱(love)。\n\n如果把人看作一个能量体，平衡是最理想的状态，其中红色事业和黄色爱是以能量输出为主的，一个是创造社会价值，一个是创造情感价值；蓝色学习和绿色生活是以能量输入为主的，一个是享受知识的盛宴，一个是享受悦己的美好;白色意义，是能量的中转，活得清晰，独立思考，可以助你更好地输入和输出。生活需要仪式感，给自己的时间一点色彩，当能量的输入和输出所花的时间大致相同时，幸福感是最强的。\n\n**五色时间管理法是一种平衡生活的理念，是一种高效工作的方法，是价值观和方法论的二合一。**五色时间管理法主张像配置金钱一样投资时间，把每天的1440分钟看作是1440时间元，用记账的方式去统计时间的去向，五色时间统计并非要记录所有时间的开支，只记录让自己幸福的时间用度，也就是那些给自己生活增加了色彩的时间开销。能否入账完全是主观的，我们对时间的感觉取决于我们在做什么，这就是说只要你自我感觉良好就行。如果时间花得值得，就可以涂上五色，如果时间花得不值，回想起来觉得自己在浪费时间，就涂上黑色，归为潜能色，要想着将其转化为五色。借着五色时间统计法，通过五色习惯的培养，优化在蓝色学习、红色事业、绿色生活、白色意义和黄色爱五个方面的时间分配，帮助大家有的放矢地利用时间，内外相连，挖掘能量，感受丰盛。\n\n划重点：\n\n1.首先是把时间当钱；2.其次多投资少浪费；3.最后投资到五色：红黄蓝绿白。\n\n我受**《奇特的一生》**这本书的影响，在2012年4月12日开始做时间统计并连续写日记，它给我带来的改变是自己不觉得但周围人感觉很明显的，前天跟朋友吃饭，他还说到2012年感觉你整个人变得更加的五光十色。然后我在花团锦簇中轻轻松松、快乐乐乐地活着。\n\n周围的朋友每次看到我都会问我是怎么做到的，2015年，为了更加清楚地讲述，我将这个方法总结为了“五色时间管理法”，在7年的时间里，它给我持续赋能，让我能够在坚定走在财务自由路上之余，**每年吃100次火锅还能瘦几斤、看100个电影、见100个朋友、写200多篇书评、陪每个孩子的时间平均每天超过3小时、平均每天睡7个多小时。**也很高兴它在我佛系的更新下，能够以多种形式，泛影响着近20万人，包括大中小学的学生、职场新人和妈妈们。\n\n晓一的五色总结（2021年）\n\n(微信公众号：timehathor)可以看到每个月的五色时间统计情况。\n\n如何实现工作、家庭和个人生活的平衡?\n\n用五色时间管理法！o(∩_∩)o哈哈~\n\n为什么会有这个问题？我理解是我们需要取得工作、家庭和个人生活的平衡才能得到人生的幸福。其实对应的是我们的三个方面：公众生活、个人生活和内心生活。如果说幸福人生能装多少水，取决于最短的那块板的话，那么五色时间管理法能帮你将蓝色学习、红色事业、绿色生活、白色意义和黄色人际这五个方面实现均衡。我是一个普普通通的二孩妈妈，我的学习、事业、生活、思考和感情，每一样都不太突出，但我要感谢五色时间管理法让我实现了内心的平衡。让我得以传递快乐。\n\n职场女性，尤其是有两个孩子或更多孩子的职场女性，扮演着很多角色：一出生除了是自己，还是女儿；进入学校，成为了学生；工作后又多了职员角色；结婚生子后又增加了妻子、儿媳妇和妈妈的角色。这些都是基础的，女性还是闺蜜，还有自己的爱好，还有自己的各种圈子。众多的角色让女性有了平衡的需求，答案是：做好一个卓有成效的“角色”管理者。对于每位女性来说，生命由时间构成，我们首先要管理的就是自己的时间。三大要点分享给大家：\n\n1.做啥?\n\n扬长避短，做最擅长的色彩(保证高效能)\n\n我们要如何选择时间的流向?德鲁克有一个观点是：我们做绝大部分事情时，都不能完全胜任。解决问题的关键，不是让我们想办法把自己不胜任的事情做好，而是要想清楚我可以把什么事情做得最好。\n\n你必须最先弄清楚自己的优势是什么，你有什么与众不同的能力，你是否会在某方面游刃有余，以及你是否已将其运用到自己的工作和生活中。这一点同时适用于工作和家庭一样。无论是内向生长还是外向生长，做自己最擅长的，才能实现所在角色的卓有成效。\n\n这需要认识自己，发现自己的优势，在协同前进中发挥自己的比较优势。如果你擅长红色赚钱，那就多一点时间赚钱；如果你擅长白色写作，那就多一点时间写作;如果你擅长黄色带娃，那就多一点时间带娃。当然，你也可能是全方面都擅长的达人。那就可以增加喜欢与否、认可度深浅等维度。\n\n2.咋做?\n\n以最适合自己的方式去涂色(保证高效率)\n\n你有没有思考过，在什么情况下，你可以最大化地发挥自己的潜能呢?你可以最好地完成时间的涂色?\n\n有些人适合在夜晚工作，而有些人最好的状态在清晨，当然有的人早晚都很好；\n\n有些人通过读图文来学习，有些人通过听来学习，有些人通过写来学习；\n\n有些人适合浸入式工作方式，而有些人则适合多任务短时工作方式……\n\n每个人都有最适合自己的方式，你需要清晰地认识自己。除了你自己，没有人能衡量你最有效率的工作方式，你越早发现适合自己的工作方式，你就可以越快地得到高效工作带来的叠加效应。我自己效率更高的时间是早上，喜欢通过写来加深学习，喜欢沉浸式工作方式。如果你不太清楚，就用多种方式去试。\n\n3.咋保持?\n\n保持觉察，确保自己的时间五色(保证正念)\n\n德鲁克说：“时间是最稀有的资源，若不将时间管理好，想要管理好其他事情就只是空谈。”珍惜自己时间的人，正在走向成功或更加成功。你不妨尝试进行每半小时的事件记录，以让自己保持觉察，并尽量让自己的时间五色，也就是花得值得。\n\n德鲁克认为那些成功高效人士的“秘诀”之一就是，他们一次只专注完成一件事，拒绝浪费时间在一些“琐事”上。要做到这一点，可以参考下面三点：\n\n第一，给重要的事情或者例行的事情，留出固定的时间。比如说今天晚上的直播，我留出来了6点半-9点这样的两个半小时的时间。比如说每天的日记，我会预留半小时。 第二，创造完整的属于自己的不被打扰的时间，虽然可能只有30分钟(有调查表明，现代人平均7分钟就会去刷一次手机，也就是自我打断)，但是日积月累的效果会非常惊人。比如说我今天晚上的直播，旁边是没有人的。 第三，给那些突发的事件或状况，预留出一些自由的时间，不要把日程安排得过满。比如说我今天晚上就不再安排其他事情，朋友约着一起吃饭，也已经修改了时间。\n\n时间对于你来说它的价值是什么?\n\n我的理解有三个层次：\n\n1.意识层面\n\n你把时间当钱“花”。我们把每天24小时，1440分钟，当做货币(1440时间元)去看待它，这样你就对时间的感受会更加直观，也会更好地觉察它和合理配置它。\n\n2.现实层面\n\n你要知道你的时间值多少钱。分析你的一小时的时间价值是多大：以小时为单位，你一年的所有收入，除以你这一年花在取得这些收入的时间，就能看到你每一个小时值多少钱。\n\n3.增值层面\n\n你要想方设法让时间价值指数级增值。要利用五色时间管理法，配置自己的时间，用五色让你的生命能力更加强大，避免和减少在非生产性价值或无意义的消极负面的潜能色时间。我目前只能达到50%的增长，还没有达到指数级增长，但这是我的努力方向。\n\n如何看待“加班”和“效率”？\n\n加班与否，跟公司dna有关，是一种文化，也许就是长期需要加班;其次加班与否，跟领导有关，是一种工作方式;最后我说一下我自己的情况，我们公司是不要求加班的，只看最终的结果，是否加班你自己决定；我们领导是不加班的，但是他会在网络上保持高响应度;我们是否要加班看个人和工作的匹配度，我的工作不是一成不变的，每次我接受新挑战时，因为要花更多时间来学习和成长，都会选择加班，而等我可以跟上时，一定是不加班的。\n\n我对自己的小伙伴也是同样的要求：不为了加班而加班，根据需要加班，要努力成为一个日常高效率，能够准点下班的人。加班的时间如果是自己选择的，是红色的，为了自己热爱的工作投资时间，是很美好的事情。内驱力带动下的加班，主动选择的加班，我是认同的，也在身体力行。另外我一直觉得工作是一件很好的事情，不仅可以创造价值，还能给自己带来收入。所以我在工作之外的时间也会有一小部分用来工作，主动加班。\n\n我们都知道一个词叫心流，很多人会觉得只有沉浸于读书、娱乐才会有，其实做有挑战性的工作时更容易进入心流状态。\n\n\n# 红色周二 | 《深度工作》：教你如何在碎片化时代有效使用每一点脑力\n\n能不能分享一下年度计划？\n\n我一般是年初制定年度计划。然后分解到每个月。提前一周进行下周的日程确认。每天的时间由三块沟通：每日工作大事+五色时间计划+其他事情。\n\n我今年的年度计划定了15个目标，主要是顺着去年的年度目标完成情况(可以加上文章链接)来的，在五色的五个方面，分别设定了3个目标（横、衡、恒）。\n\n分享其中的5个目标，都带了五：\n\n蓝色方面看250本书，并写书评，发布在小一大书悦读会的公众号上；\n\n红色方面增长50%；\n\n绿色方面跑个半马25公里；\n\n白色方面写25万字时间管理的文字；\n\n黄色方面给予爱250次。\n\n拖延症怎么办？\n\n可以从三个方面打败拖延症：\n\n1.增加动力(我想，我能，我喜欢)； 2.减少阻力(减少数量、减少难度、减少干扰)； 3.分阶段打败拖延症：长期聪明地定目标(具体、可测量、可行的、相关的和有时间节点的)、中期养成习惯(21天或者30天养成习惯)、短期用四象限(聚焦二象限，重要但不仅仅的事情)。\n\n如果上面的这个你觉得比较多，那就记住三个五：\n\n5分钟法则(就做五分钟)，哄自己开始； 25分钟番茄钟(就做一个番茄钟)，哄自己专注； 五星级愉悦(记录下来自己的成就)，哄自己自信。\n\n2022年你最重要的一件事是什么？\n\n把100个五虎(福)添亿杯亲手给到五色的朋友们。我希望每个被五色时间管理法陪伴的人，能够成为更好的自己，而我个人经验是有五色时间管理的生活是轻轻松松实现心想事成的。\n\n睡眠时间是多久?\n\n依据《睡眠革命》，从起床时间倒推睡觉时间，按照90分钟一个周期来睡，一般是6小时或7.5个小时，偶尔是9小时。平均每天是7小时出头。睡眠时间其实并不是最重要的，睡眠质量更重要，目的地是充沛的精力。\n\n如何看待全职妈妈这个角色?\n\n首先全职妈妈跟打工人一样是一份工作，而且比普通工作要累很多，对于愿意当全职妈妈的女性，我表示敬佩。其次全职妈妈可以给到孩子更多的陪伴，是非常好的，我表示羡慕。最后全职妈妈在可自由支配时间上其实有优势，可以用五色时间管理法，做好创收，实现平衡，会是更加缤纷更加充实更加成功的人生。\n\n有什么是适合全职妈妈可以做的工作？\n\n如果之前是全职，考虑做兼职，就是把之前的技能延伸出来;如果之前没有工作过，看看朋友们经常请自己帮忙的事情是什么以及经常感谢自己的事情是什么;劳务性收入，靠时间来取得收入，比如说帮别人做事；脑力性收入，靠头脑取得收入，比如说赚版税；和财务性收入，靠钱来取得收入，比如说进行理财投资。\n\n具体可以考虑的有做自媒体，做自己的品牌：写作赚钱、广告流量、推广带货。\n\n推荐图书？\n\n《奇特的一生》，它帮助我活出奇特的一生，它帮助我去助力更多的人活出奇特的一生。推荐理由见链接。\n\n推荐职场女性值得看的电影？\n\n《金斯伯格大法官》纪录片\n\n最后的精彩\n\n**问：**如果是长期在外出差，回来又被隔离，算是什么颜色?\n\n同样的事情会是不同的颜色，可以选择郁郁不乐涂成黑色潜能色，也可以选择抓住难得的不出差的时间，做点自己平日想做但做不了的事情，就能涂上五色，比如说读点书，蓝色；听点课，蓝色；给爱的人交流，黄色;运动保持身材，绿色；做做复盘写写文字，白色。一句老话：我们没法决定天气，但可以决定心情。\n\n**问：**职场女性的时间管理要点。\n\n首先是努力去发现职场中的小确幸，挖掘出颜色；其次是自发创造出职场中的色彩，知道什么要什么不要，时间管理的关键其实不是多做，而是少做;最后是在各种色彩中实现自己的动态平衡。\n\n**问：**为什么选择今天做分享?\n\n今天是一个朋友的生日，希望能够集18个祝福，祝女神生日快乐！今天是3月29日，希望大家在昨天、今天、明天这“三”天，都能活在“爱”里，幸福长“久”。\n\n女神生日快乐，永远18岁！\n\n\n\n\n\n\n\n\n\n本文转自：公众号 京狮mbaer的云端记忆",charsets:{cjk:!0},lastUpdated:"2023/09/17, 20:06:58",lastUpdatedTimestamp:1694952418e3},{title:"jetbrains系列软件一直试用方法",frontmatter:{title:"jetbrains系列软件一直试用方法",date:"2023-02-22T09:07:07.000Z",permalink:"/pages/28f4e0/",categories:["生活","破解&福利"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4020.%E7%A0%B4%E8%A7%A3&%E7%A6%8F%E5%88%A9/4020001.jetbrains%E7%B3%BB%E5%88%97%E8%BD%AF%E4%BB%B6%E4%B8%80%E7%9B%B4%E8%AF%95%E7%94%A8%E6%96%B9%E6%B3%95.html",relativePath:"40.生活/4020.破解&福利/4020001.jetbrains系列软件一直试用方法.md",key:"v-541ca9fa",path:"/pages/28f4e0/",headersStr:null,content:"该方法只能支持到2022年第二个季度及之前的版本\n\n * 下载合适的版本(推荐下载202202)\n\n * 正常进入, 并且开始试用(有30天的免费试用时间)\n\n * 进入帮助/注册\n   \n   * \n   \n   * 添加自定义插件仓库https://plugins.zhile.io\n\n * 在插件仓库中搜索IDE Eval Reset\n\n * 安装即可",normalizedContent:"该方法只能支持到2022年第二个季度及之前的版本\n\n * 下载合适的版本(推荐下载202202)\n\n * 正常进入, 并且开始试用(有30天的免费试用时间)\n\n * 进入帮助/注册\n   \n   * \n   \n   * 添加自定义插件仓库https://plugins.zhile.io\n\n * 在插件仓库中搜索ide eval reset\n\n * 安装即可",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"搜狗输入法自定义短语",frontmatter:{title:"搜狗输入法自定义短语",date:"2023-02-13T23:31:27.000Z",permalink:"/pages/599e6c/",categories:["生活","国内常用软件使用技巧"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4030.%E5%9B%BD%E5%86%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/4030001.%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E8%AF%AD.html",relativePath:"40.生活/4030.国内常用软件使用技巧/4030001.搜狗输入法自定义短语.md",key:"v-034237ec",path:"/pages/599e6c/",headers:[{level:3,title:"含动态时间用法",slug:"含动态时间用法",normalizedTitle:"含动态时间用法",charIndex:2}],headersStr:"含动态时间用法",content:"# 含动态时间用法\n\nrq #$year$month$day // 20230213\nsj #$year$month$day-$fullhour$minute$second //20230213-233851\n\n\n1\n2\n\n\n\n\n",normalizedContent:"# 含动态时间用法\n\nrq #$year$month$day // 20230213\nsj #$year$month$day-$fullhour$minute$second //20230213-233851\n\n\n1\n2\n\n\n\n\n",charsets:{cjk:!0},lastUpdated:"2023/06/10, 12:06:41",lastUpdatedTimestamp:1686370001e3},{title:"新冠感染记录",frontmatter:{title:"新冠感染记录",date:"2022-12-17T12:32:19.000Z",permalink:"/pages/850edc/",categories:["生活","病历"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4050.%E7%97%85%E5%8E%86/4050001.%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95.html",relativePath:"40.生活/4050.病历/4050001.新冠感染记录.md",key:"v-e3860708",path:"/pages/850edc/",headers:[{level:3,title:"12月14日",slug:"_12月14日",normalizedTitle:"12月14日",charIndex:11},{level:3,title:"12月15日",slug:"_12月15日",normalizedTitle:"12月15日",charIndex:165},{level:3,title:"1216",slug:"_1216",normalizedTitle:"1216",charIndex:729},{level:3,title:"1217",slug:"_1217",normalizedTitle:"1217",charIndex:864}],headersStr:"12月14日 12月15日 1216 1217",content:"以时间线来说\n\n\n# 12月14日\n\n上午\n\n起床后就感觉有点不对劲，就想着去骑车，出出汗\n\n15:00\n\n从凯丽香江沿着锦江绿道来往骑行大概有8公里左右 19:15\n\n体温：36\n\n晚上\n\n很快就休息了，大概不到22:00的样子\n\n症状：休息期间手脚一直是冰凉的，怎么捂也不暖和；感觉被子透风，一丝丝冷意都能感受得到。\n\n\n# 12月15日\n\n10:37\n\n症状：小腿酸软无力，站立时会头疼\n\n抗原检测呈：阴性\n\n早饭：喝了热水，热牛奶\n\n11:30\n\n出去沿着柳江河道跑步了，出了身汗\n\n12:00\n\n体温：38\n\n回来吃了点粥，就躺下休息了\n\n15:58\n\n体温：39.5\n\n16:20\n\n找了药箱，把所有能退烧消炎的药都找出来了\n\n吃了退烧药：散利痛\n\n16:40\n\n体温：39\n\n17:00\n\n体温：38.2\n\n抗原：阴性\n\n17:20\n\n物理降温：冲了热水澡\n\n18:03\n\n左腋温度：37.8\n\n右腋温度：37.9\n\n18:30\n\n左腋温度：38\n\n右腋温度：38\n\n18:40\n\n强行吃了点鸡油饭和咖喱鸡，喝了点可乐（以为碳酸分解水和二氧化碳把体内热量带出来些😆）\n\n症状：两个小腿非常酸软（这感觉很酸爽），手也是凉的。 18:30\n\n左腋温度：38\n\n右腋温度：37.8\n\n19:30\n\n左腋温度：38.6\n\n右腋温度：38.6\n\n20:00\n\n左腋温度：39\n\n右腋温度：39\n\n20:34\n\n左腋温度：39.2\n\n右腋温度：39.3\n\n20:42\n\n吃了连花清瘟，喝了些水，躺下了\n\n23:45\n\n左腋温度：39.9\n\n右腋温度：39.9\n\n01:20\n\n体温：39.8\n\n实在不得劲，起床坐了会儿 然后趴着睡 一会就睡着了\n\n\n# 1216\n\n12:20\n\n体温：38.6\n\n症状: 腿没那么酸软了，嗓子疼的厉害\n\n14:00\n\n体温：38.2\n\n14:50\n\n抗原检测：阳性\n\n16:41\n\n左腋温度：38.3\n\n右腋温度：38.1\n\n19:08\n\n左腋温度：37.8\n\n右腋温度：37.9\n\n\n# 1217\n\n08:10\n\n左腋温度：36.8\n\n右腋温度：36.6",normalizedContent:"以时间线来说\n\n\n# 12月14日\n\n上午\n\n起床后就感觉有点不对劲，就想着去骑车，出出汗\n\n15:00\n\n从凯丽香江沿着锦江绿道来往骑行大概有8公里左右 19:15\n\n体温：36\n\n晚上\n\n很快就休息了，大概不到22:00的样子\n\n症状：休息期间手脚一直是冰凉的，怎么捂也不暖和；感觉被子透风，一丝丝冷意都能感受得到。\n\n\n# 12月15日\n\n10:37\n\n症状：小腿酸软无力，站立时会头疼\n\n抗原检测呈：阴性\n\n早饭：喝了热水，热牛奶\n\n11:30\n\n出去沿着柳江河道跑步了，出了身汗\n\n12:00\n\n体温：38\n\n回来吃了点粥，就躺下休息了\n\n15:58\n\n体温：39.5\n\n16:20\n\n找了药箱，把所有能退烧消炎的药都找出来了\n\n吃了退烧药：散利痛\n\n16:40\n\n体温：39\n\n17:00\n\n体温：38.2\n\n抗原：阴性\n\n17:20\n\n物理降温：冲了热水澡\n\n18:03\n\n左腋温度：37.8\n\n右腋温度：37.9\n\n18:30\n\n左腋温度：38\n\n右腋温度：38\n\n18:40\n\n强行吃了点鸡油饭和咖喱鸡，喝了点可乐（以为碳酸分解水和二氧化碳把体内热量带出来些😆）\n\n症状：两个小腿非常酸软（这感觉很酸爽），手也是凉的。 18:30\n\n左腋温度：38\n\n右腋温度：37.8\n\n19:30\n\n左腋温度：38.6\n\n右腋温度：38.6\n\n20:00\n\n左腋温度：39\n\n右腋温度：39\n\n20:34\n\n左腋温度：39.2\n\n右腋温度：39.3\n\n20:42\n\n吃了连花清瘟，喝了些水，躺下了\n\n23:45\n\n左腋温度：39.9\n\n右腋温度：39.9\n\n01:20\n\n体温：39.8\n\n实在不得劲，起床坐了会儿 然后趴着睡 一会就睡着了\n\n\n# 1216\n\n12:20\n\n体温：38.6\n\n症状: 腿没那么酸软了，嗓子疼的厉害\n\n14:00\n\n体温：38.2\n\n14:50\n\n抗原检测：阳性\n\n16:41\n\n左腋温度：38.3\n\n右腋温度：38.1\n\n19:08\n\n左腋温度：37.8\n\n右腋温度：37.9\n\n\n# 1217\n\n08:10\n\n左腋温度：36.8\n\n右腋温度：36.6",charsets:{cjk:!0},lastUpdated:"2023/01/05, 23:35:30",lastUpdatedTimestamp:167293293e4},{title:"英语的前世今生",frontmatter:{title:"英语的前世今生",date:"2022-07-09T21:46:46.000Z",permalink:"/pages/ad9ff8/",categories:["生活","英语学习","词汇"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4060.%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/406010.%E8%AF%8D%E6%B1%87/406010010.%E8%8B%B1%E8%AF%AD%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.html",relativePath:"40.生活/4060.英语学习/406010.词汇/406010010.英语的前世今生.md",key:"v-19e29604",path:"/pages/ad9ff8/",headersStr:null,content:"英语的前世今生(和七大姑八大姨)\n\n",normalizedContent:"英语的前世今生(和七大姑八大姨)\n\n",charsets:{cjk:!0},lastUpdated:"2022/08/14, 18:25:44",lastUpdatedTimestamp:1660472744e3},{title:"京东自动签到浇水领豆",frontmatter:{title:"京东自动签到浇水领豆",date:"2022-08-29T21:39:01.000Z",permalink:"/pages/706153/",categories:["生活","薅羊毛"],tags:[null]},regularPath:"/40.%E7%94%9F%E6%B4%BB/4080.%E8%96%85%E7%BE%8A%E6%AF%9B/4080010.%E4%BA%AC%E4%B8%9C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E6%B5%87%E6%B0%B4%E9%A2%86%E8%B1%86.html",relativePath:"40.生活/4080.薅羊毛/4080010.京东自动签到浇水领豆.md",key:"v-29d30750",path:"/pages/706153/",headers:[{level:3,title:"镜像下载",slug:"镜像下载",normalizedTitle:"镜像下载",charIndex:101},{level:3,title:"安装部署",slug:"安装部署",normalizedTitle:"安装部署",charIndex:582},{level:2,title:"开发",slug:"开发",normalizedTitle:"开发",charIndex:656},{level:3,title:"添加脚本",slug:"添加脚本",normalizedTitle:"添加脚本",charIndex:823},{level:3,title:"脚本仓库",slug:"脚本仓库",normalizedTitle:"脚本仓库",charIndex:2327},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:3,title:"容器外一键安装脚本",slug:"容器外一键安装脚本",normalizedTitle:"容器外一键安装脚本",charIndex:2436},{level:3,title:"容器内安装",slug:"容器内安装",normalizedTitle:"容器内安装",charIndex:2688},{level:3,title:"成果",slug:"成果",normalizedTitle:"成果",charIndex:2950}],headersStr:"镜像下载 安装部署 开发 添加脚本 脚本仓库  容器外一键安装脚本 容器内安装 成果",content:'利用青龙面板来自动执行京东领京豆，做东东农场任务签到浇水免费领水果，京喜牧场养小鸡收集鸡蛋，京东极速版金币，京东赚赚领金币，东东萌宠喂养。同时还能自动领取京东红包、京喜红包、京东极速版红包……\n\n\n# 镜像下载\n\n我们最终下载docker-compose.yml即可\n\nmkdir qinglong\n\nwget https://raw.githubusercontent.com/whyour/qinglong/master/docker/docker-compose.yml\n\n\n\n\n1\n2\n3\n4\n5\n\n\n以本地docker为例：\n\n\n\n到hub.docker.com docker 官网搜索容器 qinglong, 搜索结果基本第一个就是，主要看更新时间和下载量\n\n\nversion: \'2\'\nservices:\n  web:\n    container_name: "qinglong"  // 容器名字固定\n    image: whyour/qinglong:latest\n    volumes:\n      - ./data:/ql/data\n    ports:\n      - "0.0.0.0:5700:5700"\n    restart: unless-stopped\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 安装部署\n\n# 启动\ndocker-compose up -d\n# 停止\ndocker-compose down\n\n\n1\n2\n3\n4\n\n\n\n\n\n# 开发\n\n$ git clone git@github.com:whyour/qinglong.git\n$ cd qinglong\n$ cp .env.example .env\n$ yarn install\n$ yarn start\n\n\n1\n2\n3\n4\n5\n\n\n打开你的浏览器，访问 http://127.0.0.1:5700\n\n\n# 添加脚本\n\n需要在容器内执行相关命令\n\n\n\n 1. 内置命令\n\n# 更新并重启青龙\nql update                                                    \n# 运行自定义脚本extra.sh\nql extra                                                     \n# 添加单个脚本文件\nql raw <file_url>                                             \n# 添加单个仓库的指定脚本\nql repo <repo_url> <whitelist> <blacklist> <dependence> <branch>   \n# 删除旧日志\nql rmlog <days>                                              \n# 启动tg-bot\nql bot                                                       \n# 检测青龙环境并修复\nql check                                                     \n# 重置登录错误次数\nql resetlet                                                  \n# 禁用两步登录\nql resettfa                                                  \n\n# 依次执行，如果设置了随机延迟，将随机延迟一定秒数\ntask <file_path>                                             \n# 依次执行，无论是否设置了随机延迟，均立即运行，前台会输出日，同时记录在日志文件中\ntask <file_path> now                                         \n# 并发执行，无论是否设置了随机延迟，均立即运行，前台不产生日，直接记录在日志文件中，且可指定账号执行\ntask <file_path> conc <env_name> <account_number>(可选的) \n# 指定账号执行，无论是否设置了随机延迟，均立即运行 \ntask <file_path> desi <env_name> <account_number>         \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n 1. 参数说明\n\n * file_url: 脚本地址\n * repo_url: 仓库地址\n * whitelist: 拉取仓库时的白名单，即就是需要拉取的脚本的路径包含的字符串\n * blacklist: 拉取仓库时的黑名单，即就是需要拉取的脚本的路径不包含的字符串\n * dependence: 拉取仓库需要的依赖文件，会直接从仓库拷贝到scripts下的仓库目录，不受黑名单影响\n * branch: 拉取仓库的分支\n * days: 需要保留的日志的天数\n * file_path: 任务执行时的文件路径\n * env_name: 任务执行时需要并发或者指定时的环境变量名称\n * account_number: 任务执行时指定某个环境变量需要执行的账号序号\n\n\n# 脚本仓库\n\nhttps://github.com/FlechazoPh/QLDependency 批量添加脚本的命令库\n\nhttps://github.com/ccwav/QLScript2\n\n * \n\n\n#\n\n\n# 容器外一键安装脚本\n\n输入一键安装命令，如果你的青龙容器不叫 qinglong，需要替换为相应的容器名字（国外鸡，可以使用上面的国外脚本，速度比较快）：\n\ndocker exec -it qinglong bash -c "$(curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/FlechazoPh/QLDependency/main/Shell/QLOneKeyDependency.sh | sh)"\n\n\n1\n\n\n\n# 容器内安装\n\nql repo https://github.com/ccwav/QLScript2.git "jd_" "NoUsed" "ql|sendNotify|utils|USER_AGENTS|jdCookie|JS_USER_AGENTS"\n\n\n1\n\n\n\n\n * 最后输出，就完成了，重启下青龙 Docker ：\n\ndocker restart qinglong\n\n\n1\n\n * 配置cookie 账户， 在脚本管理中的某个js文件，如上图\n * cookie获取很简单，在手机端登录后就能拿到\n * \n\n\n# 成果\n\n',normalizedContent:'利用青龙面板来自动执行京东领京豆，做东东农场任务签到浇水免费领水果，京喜牧场养小鸡收集鸡蛋，京东极速版金币，京东赚赚领金币，东东萌宠喂养。同时还能自动领取京东红包、京喜红包、京东极速版红包……\n\n\n# 镜像下载\n\n我们最终下载docker-compose.yml即可\n\nmkdir qinglong\n\nwget https://raw.githubusercontent.com/whyour/qinglong/master/docker/docker-compose.yml\n\n\n\n\n1\n2\n3\n4\n5\n\n\n以本地docker为例：\n\n\n\n到hub.docker.com docker 官网搜索容器 qinglong, 搜索结果基本第一个就是，主要看更新时间和下载量\n\n\nversion: \'2\'\nservices:\n  web:\n    container_name: "qinglong"  // 容器名字固定\n    image: whyour/qinglong:latest\n    volumes:\n      - ./data:/ql/data\n    ports:\n      - "0.0.0.0:5700:5700"\n    restart: unless-stopped\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 安装部署\n\n# 启动\ndocker-compose up -d\n# 停止\ndocker-compose down\n\n\n1\n2\n3\n4\n\n\n\n\n\n# 开发\n\n$ git clone git@github.com:whyour/qinglong.git\n$ cd qinglong\n$ cp .env.example .env\n$ yarn install\n$ yarn start\n\n\n1\n2\n3\n4\n5\n\n\n打开你的浏览器，访问 http://127.0.0.1:5700\n\n\n# 添加脚本\n\n需要在容器内执行相关命令\n\n\n\n 1. 内置命令\n\n# 更新并重启青龙\nql update                                                    \n# 运行自定义脚本extra.sh\nql extra                                                     \n# 添加单个脚本文件\nql raw <file_url>                                             \n# 添加单个仓库的指定脚本\nql repo <repo_url> <whitelist> <blacklist> <dependence> <branch>   \n# 删除旧日志\nql rmlog <days>                                              \n# 启动tg-bot\nql bot                                                       \n# 检测青龙环境并修复\nql check                                                     \n# 重置登录错误次数\nql resetlet                                                  \n# 禁用两步登录\nql resettfa                                                  \n\n# 依次执行，如果设置了随机延迟，将随机延迟一定秒数\ntask <file_path>                                             \n# 依次执行，无论是否设置了随机延迟，均立即运行，前台会输出日，同时记录在日志文件中\ntask <file_path> now                                         \n# 并发执行，无论是否设置了随机延迟，均立即运行，前台不产生日，直接记录在日志文件中，且可指定账号执行\ntask <file_path> conc <env_name> <account_number>(可选的) \n# 指定账号执行，无论是否设置了随机延迟，均立即运行 \ntask <file_path> desi <env_name> <account_number>         \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n 1. 参数说明\n\n * file_url: 脚本地址\n * repo_url: 仓库地址\n * whitelist: 拉取仓库时的白名单，即就是需要拉取的脚本的路径包含的字符串\n * blacklist: 拉取仓库时的黑名单，即就是需要拉取的脚本的路径不包含的字符串\n * dependence: 拉取仓库需要的依赖文件，会直接从仓库拷贝到scripts下的仓库目录，不受黑名单影响\n * branch: 拉取仓库的分支\n * days: 需要保留的日志的天数\n * file_path: 任务执行时的文件路径\n * env_name: 任务执行时需要并发或者指定时的环境变量名称\n * account_number: 任务执行时指定某个环境变量需要执行的账号序号\n\n\n# 脚本仓库\n\nhttps://github.com/flechazoph/qldependency 批量添加脚本的命令库\n\nhttps://github.com/ccwav/qlscript2\n\n * \n\n\n#\n\n\n# 容器外一键安装脚本\n\n输入一键安装命令，如果你的青龙容器不叫 qinglong，需要替换为相应的容器名字（国外鸡，可以使用上面的国外脚本，速度比较快）：\n\ndocker exec -it qinglong bash -c "$(curl -fssl https://ghproxy.com/https://raw.githubusercontent.com/flechazoph/qldependency/main/shell/qlonekeydependency.sh | sh)"\n\n\n1\n\n\n\n# 容器内安装\n\nql repo https://github.com/ccwav/qlscript2.git "jd_" "noused" "ql|sendnotify|utils|user_agents|jdcookie|js_user_agents"\n\n\n1\n\n\n\n\n * 最后输出，就完成了，重启下青龙 docker ：\n\ndocker restart qinglong\n\n\n1\n\n * 配置cookie 账户， 在脚本管理中的某个js文件，如上图\n * cookie获取很简单，在手机端登录后就能拿到\n * \n\n\n# 成果\n\n',charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"关于我",frontmatter:{title:"关于我",date:"2019-12-25T14:27:01.000Z",permalink:"/about",sidebar:!1,article:!1},regularPath:"/50.%E5%85%B3%E4%BA%8E%E6%88%91/%E5%85%B3%E4%BA%8E%E6%88%91.html",relativePath:"50.关于我/关于我.md",key:"v-621c5505",path:"/about/",headers:[{level:2,title:"📚Blog",slug:"📚blog",normalizedTitle:"📚blog",charIndex:2},{level:2,title:"🐼Me",slug:"🐼me",normalizedTitle:"🐼me",charIndex:108},{level:2,title:"技能",slug:"技能",normalizedTitle:"技能",charIndex:362},{level:2,title:"✉️ 联系",slug:"联系",normalizedTitle:"✉️ 联系",charIndex:509}],headersStr:"📚Blog 🐼Me 技能 ✉️ 联系",content:"# 📚Blog\n\n这是一个兼具博客文章、知识管理、文档查找的个人网站，主要内容是 Web 前端技术。如果你喜欢这个博客GitHub点个关注\n\n提示\n\n文章内容仅是我个人的小总结，资历尚浅，如有误还请指正。\n\n\n# 🐼Me\n\n本人学识渊博、经验丰富，代码风骚、效率恐怖，C/C++、java、php 无不精通，熟练掌握各种 框架，深山苦练 20 余年，一天只睡 4 个小时，千里之外定位问题，瞬息之间修复上线。身体强壮、健步如飞，可连续编程 100 小时不休息，讨论技术方案 5 小时不喝水，上至带项目、出方案，下至盗账号、威胁 PM，啥都能干。泡面矿泉水已准备好，学校不支持编程已辍学，家人不支持编程已断绝关系，老婆不支持编程已离婚，小孩不支持编程已送孤儿院，备用电源万兆光纤永不断电断网，门口已埋雷无人打扰。\n\n\n# 技能\n\n * 熟悉 JavaScript、HTML、CSS、Vue、React、Java、python、C/C++ 的拼写\n * 了解 Linux、windows、macOS 的开关机方式\n * 精通 Git 的 pull 和 push，并注册了 GitHub 帐号刷了一些 star\n\n\n# ✉️ 联系\n\n * WeChat or QQ: 164165005\n * Email: izhaong@outlook.com\n * GitHub: https://github.com/izhaong\n * 博客园: https://www.cnblogs.com/izhaong",normalizedContent:"# 📚blog\n\n这是一个兼具博客文章、知识管理、文档查找的个人网站，主要内容是 web 前端技术。如果你喜欢这个博客github点个关注\n\n提示\n\n文章内容仅是我个人的小总结，资历尚浅，如有误还请指正。\n\n\n# 🐼me\n\n本人学识渊博、经验丰富，代码风骚、效率恐怖，c/c++、java、php 无不精通，熟练掌握各种 框架，深山苦练 20 余年，一天只睡 4 个小时，千里之外定位问题，瞬息之间修复上线。身体强壮、健步如飞，可连续编程 100 小时不休息，讨论技术方案 5 小时不喝水，上至带项目、出方案，下至盗账号、威胁 pm，啥都能干。泡面矿泉水已准备好，学校不支持编程已辍学，家人不支持编程已断绝关系，老婆不支持编程已离婚，小孩不支持编程已送孤儿院，备用电源万兆光纤永不断电断网，门口已埋雷无人打扰。\n\n\n# 技能\n\n * 熟悉 javascript、html、css、vue、react、java、python、c/c++ 的拼写\n * 了解 linux、windows、macos 的开关机方式\n * 精通 git 的 pull 和 push，并注册了 github 帐号刷了一些 star\n\n\n# ✉️ 联系\n\n * wechat or qq: 164165005\n * email: izhaong@outlook.com\n * github: https://github.com/izhaong\n * 博客园: https://www.cnblogs.com/izhaong",charsets:{cjk:!0},lastUpdated:"2022/02/17, 17:16:06",lastUpdatedTimestamp:1645089366e3},{title:"网站",frontmatter:{title:"网站",permalink:"/pages/beb6c0bd8a66cea6",date:"2020-04-19T11:33:04.000Z",article:!1},regularPath:"/60.%E6%94%B6%E8%97%8F/01.%E7%BD%91%E7%AB%99.html",relativePath:"60.收藏/01.网站.md",key:"v-0dcc91ac",path:"/pages/beb6c0bd8a66cea6/",headers:[{level:2,title:"推荐",slug:"推荐",normalizedTitle:"推荐",charIndex:12},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:167},{level:2,title:"社区",slug:"社区",normalizedTitle:"社区",charIndex:375},{level:3,title:"社区互动",slug:"社区互动",normalizedTitle:"社区互动",charIndex:596},{level:2,title:"技巧",slug:"技巧",normalizedTitle:"技巧",charIndex:623},{level:2,title:"博客",slug:"博客",normalizedTitle:"博客",charIndex:711},{level:2,title:"电子书",slug:"电子书",normalizedTitle:"电子书",charIndex:775},{level:2,title:"优秀文章",slug:"优秀文章",normalizedTitle:"优秀文章",charIndex:833},{level:2,title:"视频",slug:"视频",normalizedTitle:"视频",charIndex:897},{level:2,title:"Github",slug:"github",normalizedTitle:"github",charIndex:382},{level:2,title:"评论系统",slug:"评论系统",normalizedTitle:"评论系统",charIndex:1148},{level:2,title:"前端小工具",slug:"前端小工具",normalizedTitle:"前端小工具",charIndex:1197},{level:2,title:"代码编辑",slug:"代码编辑",normalizedTitle:"代码编辑",charIndex:1269},{level:2,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji表情",charIndex:1330},{level:2,title:"图片工具",slug:"图片工具",normalizedTitle:"图片工具",charIndex:1493},{level:2,title:"思维导图",slug:"思维导图",normalizedTitle:"思维导图",charIndex:1753},{level:2,title:"CSS",slug:"css",normalizedTitle:"css",charIndex:875},{level:2,title:"CDN加速",slug:"cdn加速",normalizedTitle:"cdn加速",charIndex:2090},{level:2,title:"网站托管",slug:"网站托管",normalizedTitle:"网站托管",charIndex:2150},{level:2,title:"正则",slug:"正则",normalizedTitle:"正则",charIndex:2180},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:2241},{level:2,title:"设计",slug:"设计",normalizedTitle:"设计",charIndex:574},{level:2,title:"图库",slug:"图库",normalizedTitle:"图库",charIndex:3342},{level:2,title:"交互",slug:"交互",normalizedTitle:"交互",charIndex:2420},{level:2,title:"有趣",slug:"有趣",normalizedTitle:"有趣",charIndex:139},{level:2,title:"生成器",slug:"生成器",normalizedTitle:"生成器",charIndex:1839},{level:2,title:"元宇宙",slug:"元宇宙",normalizedTitle:"元宇宙",charIndex:4310},{level:2,title:"教程",slug:"教程",normalizedTitle:"教程",charIndex:251},{level:2,title:"产品",slug:"产品",normalizedTitle:"产品",charIndex:3329},{level:2,title:"实用",slug:"实用",normalizedTitle:"实用",charIndex:4530},{level:2,title:"Talk",slug:"talk",normalizedTitle:"talk",charIndex:4903},{level:2,title:"算法",slug:"算法",normalizedTitle:"算法",charIndex:2330},{level:2,title:"nginx",slug:"nginx",normalizedTitle:"nginx",charIndex:4983},{level:2,title:"生活",slug:"生活",normalizedTitle:"生活",charIndex:5011}],excerpt:'<h1 id="个人收藏夹"><a class="header-anchor" href="#个人收藏夹">#</a> 个人收藏夹</h1>\n<h2 id="推荐"><a class="header-anchor" href="#推荐">#</a> 推荐</h2>\n<ul>\n<li><a href="https://panjiachen.github.io/awesome-bookmarks/" target="_blank" rel="noopener noreferrer">panjiachen<OutboundLink/></a> by 花裤衩</li>\n<li><a href="https://www.code-nav.cn/" target="_blank" rel="noopener noreferrer">编程导航<OutboundLink/></a> by 程序员鱼皮</li>\n<li><a href="https://r2coding.com/" target="_blank" rel="noopener noreferrer">编程自学之路<OutboundLink/></a> by 程序羊</li>\n<li><a href="https://gitee.com/jishupang/web_atlas" target="_blank" rel="noopener noreferrer">前端知识图谱+B站资源整合<OutboundLink/></a> by 技术胖</li>\n<li><a href="https://shengxinjing.cn/" target="_blank" rel="noopener noreferrer">大圣编程自学网<OutboundLink/></a> by 大圣</li>\n<li><a href="https://devtool.tech/" target="_blank" rel="noopener noreferrer">开发者武器库<OutboundLink/></a></li>\n<li><a href="https://www.fly63.com/tool/home.html" target="_blank" rel="noopener noreferrer">工具大全<OutboundLink/></a></li>\n</ul>\n<p align="center">\n<img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qrcode.zdqv9mlfc0g.jpg" width="200">\n</p>\n<div class="center-container"><p>关注公众号[有趣研究社]，回复<code>前端资源</code>，获取 <a href="https://github.com/xugaoyi/blog-gitalk-comment/wiki/Front-end-Study" target="_blank" rel="noopener noreferrer">前端学习资料<OutboundLink/></a></p>\n</div>',headersStr:"推荐 文档 社区 社区互动 技巧 博客 电子书 优秀文章 视频 Github 评论系统 前端小工具 代码编辑 Emoji表情 图片工具 思维导图 CSS CDN加速 网站托管 正则 其他 设计 图库 交互 有趣 生成器 元宇宙 教程 产品 实用 Talk 算法 nginx 生活",content:"# 个人收藏夹\n\n\n# 推荐\n\n * panjiachen by 花裤衩\n * 编程导航 by 程序员鱼皮\n * 编程自学之路 by 程序羊\n * 前端知识图谱+B站资源整合 by 技术胖\n * 大圣编程自学网 by 大圣\n * 开发者武器库\n * 工具大全\n\n\n\n关注公众号[有趣研究社]，回复前端资源，获取 前端学习资料\n\n\n# 文档\n\n * MDN | MDN-JS标准内置对象 Web技术权威文档\n * DevDocs Web 开发技术文档，非常不错的学习手册！\n * 现代JavaScript教程 以最新标准为基准的JS教程\n * ES5教程 阮一峰的JS教程\n * ES6教程 阮一峰的ES6教程\n * Bash 脚本教程 阮一峰编写\n * ECMA ECMA官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * Github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * InfoQ 促进软件开发及相关领域知识与创新的传播\n * V2EX 创意工作者们的社区\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 社区互动\n\n * gitter\n * 兔小巢\n\n\n# 技巧\n\n * Google 趋势 查看某项技术或关键字的热度趋势，可用于分析某项技术的发展前景，或对比某两项技术的热度。\n * 百度指数 同上，但百度的数据仅限国内。\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * SoBooks 免费的电子书资源网站\n\n\n# 优秀文章\n\n * 我做系统架构的一些原则 作者对系统架构的方法论总结\n * 灵活运用CSS开发技巧\n * 防御性CSS\n\n\n# 视频\n\n * bilibili B站，上面很多免费教学视频\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学MOOC 涵盖计算机、外语、心理学等专业免费课程\n * egghead 质量还不错的短视频教程，外网\n\n\n# Github\n\n * Repobeats 生成仓库的动态数据统计图\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 Stars 增长曲线\n\n\n# 评论系统\n\n * giscus 由 GitHub Discussions 驱动的评论系统\n\n\n# 前端小工具\n\n * Can I use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌VSCode的在线IDE\n\n\n# Emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * 根据文本匹配emoji\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> 在任意输入框快速打开emoji表情方法：\n> Windows系统下按Win + .\n> Mac系统下按Control + Command + 空格\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * 微图 浏览器端图片压缩，不会上传图片到服务器\n * Squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线AI图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove AI抠图\n * backgroundremover 又一个抠图的\n\n\n# 思维导图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n * plectica 绘制知识图谱\n\n\n# CSS\n\n * 各种CSS生成器和JS代码片段\n\n * CSS Tricks CSS技巧收集与演示\n * CSS生成器\n * CSS渐变生成器\n * CSS3-Box Shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3D字体\n * css-tricks css技巧文章\n * You-need-to-know-css CSS的各种DEMO，很全\n * animista CSS动画可视化工具，复制代码就能用\n * navnav 各种炫酷的CSS动画组件\n\n\n# CDN加速\n\n * jsDelivr 国外的一家优秀的公共 CDN 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * iHateRegex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * Linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove AI抠图，抠图算法很厉害\n * Manypixels 插画\n * Undraw 插画\n * storytale 插画，种类丰富，包含3D插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * Bēhance dribbble 是设计师的微博，Bēhance 是设计师的博客\n * Logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * Flat UI 色表 Flat UI 色表\n * 0to255 颜色梯度\n * Ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * Unsplash 提供免费的高清图片\n * Pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * CSS triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * Lorem Picsum 提供免费的占位图\n * Canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd（免抠元素）\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷 国内优秀的设计作品展示\n * 花瓣\n * 虎克 ps 学习教程\n * beTheme\n * UI 中国\n * wallhaven 壁纸网站-\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n\n * Little Big Details 同上，一个国外微交互汇集网站\n\n * cruip 登录页的各种页面设计，可以免费下载模板\n\n * Comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * FC在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * URL 地址播放 Emojis 动画 在地址栏里面播放 emoji\n * Can't Unsee 强烈建议前端、客户端、UI 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * ascii video 使用ascii编码生成视频动画\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n\n\n# 生成器\n\n * artbreeder 动漫图生成真人图像\n\n * 声音生成器 生成下雨、咖啡厅、海浪、火车等声音，可几种声音合成\n\n * 诺基亚短信图片生成器\n\n * 到账语音生成器 支付宝到账1亿元\n\n\n# 元宇宙\n\n符合元宇宙特征的几个网站，允许用户拥有虚拟土地，在上面构建自己的世界：\n\n * 沙盒\n * 梦境空间\n * Decentraland\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * VideoFk VideoFk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * UzerMe 云端办公工具\n * SoBooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * ENFI 下载器 不限速下载器\n * 来画视频 像做 PPT 一样做短视频\n * Arkie 海报制作工具\n * 优品 PPT\n * 比格 PPT\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * Notion 知识库、快速笔记、TaskList、日记、读书清单，各种类型，应有尽有\n\n\n# Talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# nginx\n\n * nginx 可视化配置工具\n\n\n# 生活\n\n * Ventusky 风雨气温图",normalizedContent:"# 个人收藏夹\n\n\n# 推荐\n\n * panjiachen by 花裤衩\n * 编程导航 by 程序员鱼皮\n * 编程自学之路 by 程序羊\n * 前端知识图谱+b站资源整合 by 技术胖\n * 大圣编程自学网 by 大圣\n * 开发者武器库\n * 工具大全\n\n\n\n关注公众号[有趣研究社]，回复前端资源，获取 前端学习资料\n\n\n# 文档\n\n * mdn | mdn-js标准内置对象 web技术权威文档\n * devdocs web 开发技术文档，非常不错的学习手册！\n * 现代javascript教程 以最新标准为基准的js教程\n * es5教程 阮一峰的js教程\n * es6教程 阮一峰的es6教程\n * bash 脚本教程 阮一峰编写\n * ecma ecma官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * infoq 促进软件开发及相关领域知识与创新的传播\n * v2ex 创意工作者们的社区\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 社区互动\n\n * gitter\n * 兔小巢\n\n\n# 技巧\n\n * google 趋势 查看某项技术或关键字的热度趋势，可用于分析某项技术的发展前景，或对比某两项技术的热度。\n * 百度指数 同上，但百度的数据仅限国内。\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * sobooks 免费的电子书资源网站\n\n\n# 优秀文章\n\n * 我做系统架构的一些原则 作者对系统架构的方法论总结\n * 灵活运用css开发技巧\n * 防御性css\n\n\n# 视频\n\n * bilibili b站，上面很多免费教学视频\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学mooc 涵盖计算机、外语、心理学等专业免费课程\n * egghead 质量还不错的短视频教程，外网\n\n\n# github\n\n * repobeats 生成仓库的动态数据统计图\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 stars 增长曲线\n\n\n# 评论系统\n\n * giscus 由 github discussions 驱动的评论系统\n\n\n# 前端小工具\n\n * can i use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌vscode的在线ide\n\n\n# emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * 根据文本匹配emoji\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> 在任意输入框快速打开emoji表情方法：\n> windows系统下按win + .\n> mac系统下按control + command + 空格\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * 微图 浏览器端图片压缩，不会上传图片到服务器\n * squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线ai图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove ai抠图\n * backgroundremover 又一个抠图的\n\n\n# 思维导图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n * plectica 绘制知识图谱\n\n\n# css\n\n * 各种css生成器和js代码片段\n\n * css tricks css技巧收集与演示\n * css生成器\n * css渐变生成器\n * css3-box shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3d字体\n * css-tricks css技巧文章\n * you-need-to-know-css css的各种demo，很全\n * animista css动画可视化工具，复制代码就能用\n * navnav 各种炫酷的css动画组件\n\n\n# cdn加速\n\n * jsdelivr 国外的一家优秀的公共 cdn 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * ihateregex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove ai抠图，抠图算法很厉害\n * manypixels 插画\n * undraw 插画\n * storytale 插画，种类丰富，包含3d插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * behance dribbble 是设计师的微博，behance 是设计师的博客\n * logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * flat ui 色表 flat ui 色表\n * 0to255 颜色梯度\n * ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * unsplash 提供免费的高清图片\n * pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * css triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * lorem picsum 提供免费的占位图\n * canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd（免抠元素）\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷 国内优秀的设计作品展示\n * 花瓣\n * 虎克 ps 学习教程\n * betheme\n * ui 中国\n * wallhaven 壁纸网站-\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n\n * little big details 同上，一个国外微交互汇集网站\n\n * cruip 登录页的各种页面设计，可以免费下载模板\n\n * comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * fc在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * url 地址播放 emojis 动画 在地址栏里面播放 emoji\n * can't unsee 强烈建议前端、客户端、ui 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * ascii video 使用ascii编码生成视频动画\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n\n\n# 生成器\n\n * artbreeder 动漫图生成真人图像\n\n * 声音生成器 生成下雨、咖啡厅、海浪、火车等声音，可几种声音合成\n\n * 诺基亚短信图片生成器\n\n * 到账语音生成器 支付宝到账1亿元\n\n\n# 元宇宙\n\n符合元宇宙特征的几个网站，允许用户拥有虚拟土地，在上面构建自己的世界：\n\n * 沙盒\n * 梦境空间\n * decentraland\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * videofk videofk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * uzerme 云端办公工具\n * sobooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * enfi 下载器 不限速下载器\n * 来画视频 像做 ppt 一样做短视频\n * arkie 海报制作工具\n * 优品 ppt\n * 比格 ppt\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * notion 知识库、快速笔记、tasklist、日记、读书清单，各种类型，应有尽有\n\n\n# talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# nginx\n\n * nginx 可视化配置工具\n\n\n# 生活\n\n * ventusky 风雨气温图",charsets:{cjk:!0},lastUpdated:"2022/04/09, 18:23:49",lastUpdatedTimestamp:1649499829e3},{title:"常用的前端轮子",frontmatter:{title:"常用的前端轮子",date:"2021-10-09T19:42:02.000Z",permalink:"/pages/47cf96/",article:!1},regularPath:"/60.%E6%94%B6%E8%97%8F/02.%E5%B8%B8%E7%94%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E8%BD%AE%E5%AD%90.html",relativePath:"60.收藏/02.常用的前端轮子.md",key:"v-3b3c077c",path:"/pages/47cf96/",headers:[{level:2,title:"库",slug:"库",normalizedTitle:"库",charIndex:2},{level:2,title:"React UI 组件库",slug:"react-ui-组件库",normalizedTitle:"react ui 组件库",charIndex:26},{level:2,title:"Vue UI组件库",slug:"vue-ui组件库",normalizedTitle:"vue ui组件库",charIndex:92},{level:2,title:"常用效果组件",slug:"常用效果组件",normalizedTitle:"常用效果组件",charIndex:148},{level:2,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:225},{level:2,title:"Vue工具类",slug:"vue工具类",normalizedTitle:"vue工具类",charIndex:355},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:493}],headersStr:"库 React UI 组件库 Vue UI组件库 常用效果组件 工具类 Vue工具类 其他",content:"# 库\n\nmitt 事件订阅发布 7.1K\n\n\n# React UI 组件库\n\n * Ant Design\n * React Bootstrap\n * MATERIAL-UI\n\n\n# Vue UI组件库\n\n * Element UI PC端\n * Vant 移动端\n * View UI\n\n\n# 常用效果组件\n\n * Animate.css 动画库\n * Swiper 轮播组件\n * mescroll 下拉刷新和上拉加载框架-基于原生JS\n\n\n# 工具类\n\n * Lodash.js\n * Day.js 处理日期\n * Timeago.js 相对时间，如N小时前\n * Echarts 百度图表\n * Meditor.md 开源在线 Markdown 编辑器\n * validator.js 验证库\n\n\n# Vue工具类\n\n * vue-draggable 基于Sortable.js实现的vue拖拽插件\n * vue-qr 文本转二维码\n * vue-cropper 图片裁剪插件\n * vue-lazyload 懒加载\n * vue-simple-upload 上传组件\n\n\n# 其他\n\n * H5带笔锋手写签名，支持PC端和移动端",normalizedContent:"# 库\n\nmitt 事件订阅发布 7.1k\n\n\n# react ui 组件库\n\n * ant design\n * react bootstrap\n * material-ui\n\n\n# vue ui组件库\n\n * element ui pc端\n * vant 移动端\n * view ui\n\n\n# 常用效果组件\n\n * animate.css 动画库\n * swiper 轮播组件\n * mescroll 下拉刷新和上拉加载框架-基于原生js\n\n\n# 工具类\n\n * lodash.js\n * day.js 处理日期\n * timeago.js 相对时间，如n小时前\n * echarts 百度图表\n * meditor.md 开源在线 markdown 编辑器\n * validator.js 验证库\n\n\n# vue工具类\n\n * vue-draggable 基于sortable.js实现的vue拖拽插件\n * vue-qr 文本转二维码\n * vue-cropper 图片裁剪插件\n * vue-lazyload 懒加载\n * vue-simple-upload 上传组件\n\n\n# 其他\n\n * h5带笔锋手写签名，支持pc端和移动端",charsets:{cjk:!0},lastUpdated:"2022/02/16, 09:13:32",lastUpdatedTimestamp:1644974012e3},{title:"JS库",frontmatter:{title:"JS库",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/163c07/",categories:["收藏"],tags:[null]},regularPath:"/60.%E6%94%B6%E8%97%8F/03.JS%E5%BA%93.html",relativePath:"60.收藏/03.JS库.md",key:"v-1fb6a910",path:"/pages/163c07/",headersStr:null,content:"• reveal.js：一款 HTML 演示框架",normalizedContent:"• reveal.js：一款 html 演示框架",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"CSS库",frontmatter:{title:"CSS库",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/3990de/",categories:["收藏"],tags:[null]},regularPath:"/60.%E6%94%B6%E8%97%8F/04.CSS%E5%BA%93.html",relativePath:"60.收藏/04.CSS库.md",key:"v-12a7b30e",path:"/pages/3990de/",headersStr:null,content:"log：浏览器 console.log 风格的 CSS 库",normalizedContent:"log：浏览器 console.log 风格的 css 库",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"Untitled",frontmatter:{title:"Untitled",date:"2022-01-21T16:51:14.000Z",permalink:"/pages/4a895f/",categories:["收藏"],tags:[null]},regularPath:"/60.%E6%94%B6%E8%97%8F/300.vue3%20%E7%94%9F%E6%80%81%E6%94%B6%E8%97%8F%E9%9B%86.html",relativePath:"60.收藏/300.vue3 生态收藏集.md",key:"v-b3163758",path:"/pages/4a895f/",headers:[{level:3,title:"hooks",slug:"hooks",normalizedTitle:"hooks",charIndex:88}],headersStr:"hooks",content:" * vue-types\n   \n   vue-types 是 Vue.js 组件的可配置 prop 类型定义的集合，灵感来自 React 的 prop-types。\n\n\n# hooks\n\n * @vueuse/core\n   \n   VueUse 是一组基于 Composition API 的实用函数。",normalizedContent:" * vue-types\n   \n   vue-types 是 vue.js 组件的可配置 prop 类型定义的集合，灵感来自 react 的 prop-types。\n\n\n# hooks\n\n * @vueuse/core\n   \n   vueuse 是一组基于 composition api 的实用函数。",charsets:{cjk:!0},lastUpdated:"2022/02/16, 09:13:32",lastUpdatedTimestamp:1644974012e3},{title:"个人简历",frontmatter:{title:"个人简历",date:"2022-06-02T16:39:26.000Z",permalink:"/resume",categories:["关于我"],tags:[null]},regularPath:"/90.hidden/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.html",relativePath:"90.hidden/个人简历.md",key:"v-5d2542b4",path:"/resume/",headers:[{level:2,title:"基本信息",slug:"基本信息",normalizedTitle:"基本信息",charIndex:2},{level:2,title:"教育信息",slug:"教育信息",normalizedTitle:"教育信息",charIndex:150},{level:2,title:"工作经历",slug:"工作经历",normalizedTitle:"工作经历",charIndex:190},{level:2,title:"项目经验",slug:"项目经验",normalizedTitle:"项目经验",charIndex:1647},{level:2,title:"开源项目",slug:"开源项目",normalizedTitle:"开源项目",charIndex:5541}],headersStr:"基本信息 教育信息 工作经历 项目经验 开源项目",content:"# 基本信息\n\n * 姓名：仲灏\n * 年龄：26\n * 手机：17628388786\n * 邮箱：izhaong@outlook.com\n * 籍贯：四川巴中\n * 主页：https://www.izhaong.com https://www.google.com/search?q=仲灏\n\n\n# 教育信息\n\n2014/09-2017/06 四川机电职业技术学院 大专\n\n\n# 工作经历\n\n * 时间：2021/10 -- 2022/06\n * 公司：光控特斯联（上海）信息科技有限公司\n * 岗位：前端负责人 & 前端架构师\n * 职责：\n   * 在产品的评审过会前后，完成对需求收集并梳理整理归档；\n   * 与 PM 保持充分沟通，与 UI 设计确定基本规范，与服务端同学规定协议接口及其文档，与 QA 保持沟通，对版本的提测，发布等流程跟进；\n   * 完成项目的基础建设，结构架设，重难点功能业务的开发和代码的评审；\n   * 制定团队技术任务。技术任务和实际业务结合，目标清晰明确，发挥每个人的优势；\n   * 对项目的可能用到的未知技术预研；辅助中低级开发人员解决问题及指导提升；\n   * 前端小组人员的招聘、双周分享会、每月月底组织 code review；\n * 技术栈：Vue2 vue3.2全家桶 UniApp混合开发 Webpack Vite React Echats AntV等\n * 业绩：\n   * 推动前端团队的基础建设；\n   * 与销售和产品方案部门紧密合作，快速抢占项目；在宁夏碳中和项目中。两天时间急速设计并迭代开发出动态 mock 的大屏展示，并落地到甲方的展示的设备上；\n   * 完成微前端技术预研，并使“集成平台”项目使用微前端搭配Nacos完成初版研发；\n\n----------------------------------------\n\n * 时间：2021/2 -- 2022/10\n * 公司：第一医药集团\n * 岗位：高级前端开发 & 前端架构师\n * 职责：\n   * 完成公司产品的前端技术选型；\n   * 完成公司产品前端技术预研及开发工作；\n   * 负责公司腾讯端产品开发：微信小程序，公众号和企业微信程序；\n * 技术栈：Vue全家桶 Electron UniApp Node.js\n * 业绩：\n   * 重构 DSP 系统，使其原来的 SSM 改为前后端分离；\n   * 弃用三方万旭打印软件，大前端通过 Electron 完成打印软件，并整合邮政、顺丰、韵达模板打印功能；\n   * 完成癌症患者特殊药品预约小程序 DTP 的开发，评审资质，上线部署；\n   * 针对商厦产品销售，完成在 Pad 端中展示使用产品 App\n   \n   ----------------------------------------\n\n * 时间：2019/9 -- 2021/02\n * 公司：苏州琅润达检测科技有限公司\n * 岗位：高级前端开发\n * 职责：\n   * 梳理已有前端项目、技术栈、业务流程，编写设计文档；\n   * 与后端开发人员配合，高质量完成网站前端开发工作；\n   * 持续关注新技术, 持续改进现有的技术框架以及现有产品、分享前沿的前端技术；\n   * 快速理解业务流程，并参与需求分析评估及指派；\n * 技术栈：Vue全家桶 Angular UniApp Node.js\n * 业绩：\n   * 优化thingsboardangular 项目；完成权限控制，做到 SaaS 租户版；\n   * 通过node.js辅助后端开发 mock 硬件上报数据；\n   * 完成官网的开发，并结合rendertron做爬虫中间层做到 SEO 优化；\n   * 智慧工地开发, 结合node.js和docker完成对海康摄像的推流拉流；\n   * 完成可视化自定义表单功能（类似：金数据，问卷星）；\n\n\n# 项目经验\n\n * 名称：集成平台 云桌面平台\n * 所属：光控特斯联（上海）信息科技有限公司\n * 时间\n * 描述：微前端qiankun.js 结合Nacos技术驱动将下面的智慧能源、智慧园区、智慧建造、碳中和各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新等若干可以自治应用自由组合为“巨石应用”。\n   * 主应用：以 vue3.2 全家桶、elementPlus-ui 构建的一套完善的管理系统；\n   * Win10 云桌面：用户（SaaS 形式，管理员和客户）以类似 window10 系统云桌面的交互方式完成应用的自由构建，场景库的定制、选择，应用的安装，云桌面配置等功能；功能模块（app store，系统设置等）也是拆分独立开发完成；\n   * 子应用：各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新，主要以 Vue2 为主开发的智慧能源、智慧园区、智慧建造、碳中和等项目；\n * 责任：\n   * 负责主应用的整体架构与主要功能的研发及开发。\n   * 负责云平台的架构设计，技术选型，\n   * 负责各个项目的子应用改造；\n\n----------------------------------------\n\n * 名称：智慧能源(武汉) 智慧园区(德阳 AiPark)\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 智慧能源(武汉)：vue2 全家桶、高德地图、Echarts 等技术开发;内有劳务、施工监管、环境监测、物资、数据分析等管理模块；\n   * 智慧园区(德阳 AiPark)：AntDesignPro和vue-element-admin两个版本，内有资产管理、供应商管理、物业管理、合同管理、消防、通行、安防、企业、环境监测等管理模块；\n * 责任：\n   * 负责通用组件的开发及项目任务安排和项目进度的跟进；\n   * 负责各个项目技术选型，应用搭建，基础建设，做整个项目统筹和引领工作；\n   * 负责部分难点开发任务，和全局性的工作（搭配微前端主应用做主题定制，对子应用静态资源做域名访问，应用性能的优化等）；\n\n----------------------------------------\n\n * 名称：碳中和(宁夏双碳大脑)\n\n * 所属：光控特斯联（上海）信息科技有限公司\n\n * 时间：2022/01-2022/05\n\n * 描述：\n   \n   * 由vue2全家桶 、vue3全家桶 、Echarts、Cesium(mars3d)、Mapbox、typescript`等技术开发的自适应各种大屏展示系统和管理系统，內含有丰富的减排，排放监测跟踪，绿色金融，碳资产，碳路径规划，节能减碳，绿碳认证等碳中和相关功能，设计低碳建筑，低碳城市，低碳工业，低碳生活等多个方面业务。\n\n * 责任：\n   \n   * 负责整个项目任务分配、进度跟进等项目管理工作；\n   * 负责项目的架构、搭建、基础建设工作；\n   * 负责大屏展示 3d 模型处理开发工作；\n   * 负责自适应功能组件设计；\n\n * describe:\n   \n   * Adaptive various large-screen display systems and management systems developed by vue2 whole family bucket, vue3 whole family bucket, Echarts, Cesium(mars3d), Mapbox, typescript and other technologies, which contain rich carbon neutrality related functions such as emission reduction, emission monitoring and tracking, green finance, carbon assets, carbon path planning, energy saving and carbon reduction, green carbon certification, design of low-carbon buildings, low-carbon cities, low-carbon industries, low-carbon life, etc. Aspects of business.\n\n * responsibility:\n   \n   * Responsible for project management such as task assignment and progress follow-up of the entire project;\n   * Responsible for the structure, construction and infrastructure of the project;\n   * Responsible for the processing and development of 3D models for large-screen display;\n   * Responsible for the design of adaptive functional components;\n\n----------------------------------------\n\n * 名称：智慧电能(云南电能) 缴费公众号（远程水电缴费）\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 后台管理由vue2.6全家桶、element-ui、Echarts等完成的缴费日志、人员管理、缴费管理、电表管理等系列功能；\n   * 公众号由vue3.2全家桶（除vuex4）、Vite、Typescript、Pinia等前沿技术完成的缴费账户绑定、缴费等功能；\n * 责任：负责整个任务分配、项目搭建、基础建设、进度跟进和整个公众号的全部开发工作；\n\n----------------------------------------\n\n * 名称：DSP 第一医药业务管理系统\n * 所属：第一医药集团\n * 描述：由全后端Spring MVC重构为前后端分离，前端主要使用了 vue 框架开发，借助明星项目vue-element-admin快速搭建开发出的新版 DSP 系统；内有商品管理、订单管理、权限人员管理等功能；\n * 责任：负责整个项目搭建、基础建设、权限设计、组件的设计开发、对管理页面做了统一封装（以约定配置的方式构建出通用表格 CEUD 导入导出等功能界面）\n\n----------------------------------------\n\n * 名称：DSP 打印软件\n * 所属：第一医药集团\n * 描述：由Electron vue整合各个电商的打印程序(如天猫、拼多多的快递单打印);有自动打印功能（当有用户下单时，相应的线下药店的打印机会自动吐出快递单与发货单）;根据不同的渠道定义相应的权限;不断调试优化打印队列，可连接多个打印机打印多个不同的模板；\n * 责任：负责整个项目架构设计、搭建、基础建设、组件的设计开发，各个各种打印机联调；线下店铺（如上海南京东路 616）软件的实施等；\n\n----------------------------------------\n\n * 名称：DTP 药品预约小程序\n * 所属：第一医药集团\n * 描述：由Uniapp混合开发的微信小程序，业务主要对癌症患者特殊药品预约功能；\n * 责任：负责整个小程序的开发，上线部署；积极推动资质评审流程；\n\n----------------------------------------\n\n * 名称：中冶京诚智慧工地平台\n * 所属：苏州琅润达检测科技有限公司\n * 描述：vue 全家桶+elementUI 组件库等技术完成的一款有人员管理（含有班组 工种管理）、闸机管理（含考勤管理）、车辆管理、工资管理、监控视频、物料管理（机械设备 仓库管理）等功能的中后台管理系统；\n * 责任：负责主题定制、海康摄像头的推流拉流前后端功能以及大部分功能开发工作；\n\n----------------------------------------\n\n * 名称：雅佳小程序 雅佳后台管理\n * 所属：苏州琅润达检测科技有限公司\n * 描述：应用场景广泛，实现无需开门即可收寄快递、外卖、生鲜配送等。特别适合办公室、家庭、宾馆、餐厅，和上班族、老人、儿童、女士、行动不便人士等独自居家时使用。通过微信小程序，用户可与家人、同事分享智能柜使用权限，微信小程序自动记录智能柜使用情况，方便用户随时查询。也可作为重要物品、文件等保管柜使用。基于uniapp混合开发， 使用了uviewUI组件库，腾讯云物联网开发SDKQcloudIotExplorerAppDevSdk。基于明星项目panjiacheng的vue-element-admin项目上构建的中台管理；\n * 责任：负责小程序和后台管理的搭建，构建，开发及部署工作，预研udp 各种物联网sdk，完成小程序在智能箱无网络的情况下，对智能箱进行wifi绑定的解决方案。\n\n\n# 开源项目\n\n荣幸成为开源贡献者之一\n\nvue-router vue-vben-admin",normalizedContent:"# 基本信息\n\n * 姓名：仲灏\n * 年龄：26\n * 手机：17628388786\n * 邮箱：izhaong@outlook.com\n * 籍贯：四川巴中\n * 主页：https://www.izhaong.com https://www.google.com/search?q=仲灏\n\n\n# 教育信息\n\n2014/09-2017/06 四川机电职业技术学院 大专\n\n\n# 工作经历\n\n * 时间：2021/10 -- 2022/06\n * 公司：光控特斯联（上海）信息科技有限公司\n * 岗位：前端负责人 & 前端架构师\n * 职责：\n   * 在产品的评审过会前后，完成对需求收集并梳理整理归档；\n   * 与 pm 保持充分沟通，与 ui 设计确定基本规范，与服务端同学规定协议接口及其文档，与 qa 保持沟通，对版本的提测，发布等流程跟进；\n   * 完成项目的基础建设，结构架设，重难点功能业务的开发和代码的评审；\n   * 制定团队技术任务。技术任务和实际业务结合，目标清晰明确，发挥每个人的优势；\n   * 对项目的可能用到的未知技术预研；辅助中低级开发人员解决问题及指导提升；\n   * 前端小组人员的招聘、双周分享会、每月月底组织 code review；\n * 技术栈：vue2 vue3.2全家桶 uniapp混合开发 webpack vite react echats antv等\n * 业绩：\n   * 推动前端团队的基础建设；\n   * 与销售和产品方案部门紧密合作，快速抢占项目；在宁夏碳中和项目中。两天时间急速设计并迭代开发出动态 mock 的大屏展示，并落地到甲方的展示的设备上；\n   * 完成微前端技术预研，并使“集成平台”项目使用微前端搭配nacos完成初版研发；\n\n----------------------------------------\n\n * 时间：2021/2 -- 2022/10\n * 公司：第一医药集团\n * 岗位：高级前端开发 & 前端架构师\n * 职责：\n   * 完成公司产品的前端技术选型；\n   * 完成公司产品前端技术预研及开发工作；\n   * 负责公司腾讯端产品开发：微信小程序，公众号和企业微信程序；\n * 技术栈：vue全家桶 electron uniapp node.js\n * 业绩：\n   * 重构 dsp 系统，使其原来的 ssm 改为前后端分离；\n   * 弃用三方万旭打印软件，大前端通过 electron 完成打印软件，并整合邮政、顺丰、韵达模板打印功能；\n   * 完成癌症患者特殊药品预约小程序 dtp 的开发，评审资质，上线部署；\n   * 针对商厦产品销售，完成在 pad 端中展示使用产品 app\n   \n   ----------------------------------------\n\n * 时间：2019/9 -- 2021/02\n * 公司：苏州琅润达检测科技有限公司\n * 岗位：高级前端开发\n * 职责：\n   * 梳理已有前端项目、技术栈、业务流程，编写设计文档；\n   * 与后端开发人员配合，高质量完成网站前端开发工作；\n   * 持续关注新技术, 持续改进现有的技术框架以及现有产品、分享前沿的前端技术；\n   * 快速理解业务流程，并参与需求分析评估及指派；\n * 技术栈：vue全家桶 angular uniapp node.js\n * 业绩：\n   * 优化thingsboardangular 项目；完成权限控制，做到 saas 租户版；\n   * 通过node.js辅助后端开发 mock 硬件上报数据；\n   * 完成官网的开发，并结合rendertron做爬虫中间层做到 seo 优化；\n   * 智慧工地开发, 结合node.js和docker完成对海康摄像的推流拉流；\n   * 完成可视化自定义表单功能（类似：金数据，问卷星）；\n\n\n# 项目经验\n\n * 名称：集成平台 云桌面平台\n * 所属：光控特斯联（上海）信息科技有限公司\n * 时间\n * 描述：微前端qiankun.js 结合nacos技术驱动将下面的智慧能源、智慧园区、智慧建造、碳中和各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新等若干可以自治应用自由组合为“巨石应用”。\n   * 主应用：以 vue3.2 全家桶、elementplus-ui 构建的一套完善的管理系统；\n   * win10 云桌面：用户（saas 形式，管理员和客户）以类似 window10 系统云桌面的交互方式完成应用的自由构建，场景库的定制、选择，应用的安装，云桌面配置等功能；功能模块（app store，系统设置等）也是拆分独立开发完成；\n   * 子应用：各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新，主要以 vue2 为主开发的智慧能源、智慧园区、智慧建造、碳中和等项目；\n * 责任：\n   * 负责主应用的整体架构与主要功能的研发及开发。\n   * 负责云平台的架构设计，技术选型，\n   * 负责各个项目的子应用改造；\n\n----------------------------------------\n\n * 名称：智慧能源(武汉) 智慧园区(德阳 aipark)\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 智慧能源(武汉)：vue2 全家桶、高德地图、echarts 等技术开发;内有劳务、施工监管、环境监测、物资、数据分析等管理模块；\n   * 智慧园区(德阳 aipark)：antdesignpro和vue-element-admin两个版本，内有资产管理、供应商管理、物业管理、合同管理、消防、通行、安防、企业、环境监测等管理模块；\n * 责任：\n   * 负责通用组件的开发及项目任务安排和项目进度的跟进；\n   * 负责各个项目技术选型，应用搭建，基础建设，做整个项目统筹和引领工作；\n   * 负责部分难点开发任务，和全局性的工作（搭配微前端主应用做主题定制，对子应用静态资源做域名访问，应用性能的优化等）；\n\n----------------------------------------\n\n * 名称：碳中和(宁夏双碳大脑)\n\n * 所属：光控特斯联（上海）信息科技有限公司\n\n * 时间：2022/01-2022/05\n\n * 描述：\n   \n   * 由vue2全家桶 、vue3全家桶 、echarts、cesium(mars3d)、mapbox、typescript`等技术开发的自适应各种大屏展示系统和管理系统，內含有丰富的减排，排放监测跟踪，绿色金融，碳资产，碳路径规划，节能减碳，绿碳认证等碳中和相关功能，设计低碳建筑，低碳城市，低碳工业，低碳生活等多个方面业务。\n\n * 责任：\n   \n   * 负责整个项目任务分配、进度跟进等项目管理工作；\n   * 负责项目的架构、搭建、基础建设工作；\n   * 负责大屏展示 3d 模型处理开发工作；\n   * 负责自适应功能组件设计；\n\n * describe:\n   \n   * adaptive various large-screen display systems and management systems developed by vue2 whole family bucket, vue3 whole family bucket, echarts, cesium(mars3d), mapbox, typescript and other technologies, which contain rich carbon neutrality related functions such as emission reduction, emission monitoring and tracking, green finance, carbon assets, carbon path planning, energy saving and carbon reduction, green carbon certification, design of low-carbon buildings, low-carbon cities, low-carbon industries, low-carbon life, etc. aspects of business.\n\n * responsibility:\n   \n   * responsible for project management such as task assignment and progress follow-up of the entire project;\n   * responsible for the structure, construction and infrastructure of the project;\n   * responsible for the processing and development of 3d models for large-screen display;\n   * responsible for the design of adaptive functional components;\n\n----------------------------------------\n\n * 名称：智慧电能(云南电能) 缴费公众号（远程水电缴费）\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 后台管理由vue2.6全家桶、element-ui、echarts等完成的缴费日志、人员管理、缴费管理、电表管理等系列功能；\n   * 公众号由vue3.2全家桶（除vuex4）、vite、typescript、pinia等前沿技术完成的缴费账户绑定、缴费等功能；\n * 责任：负责整个任务分配、项目搭建、基础建设、进度跟进和整个公众号的全部开发工作；\n\n----------------------------------------\n\n * 名称：dsp 第一医药业务管理系统\n * 所属：第一医药集团\n * 描述：由全后端spring mvc重构为前后端分离，前端主要使用了 vue 框架开发，借助明星项目vue-element-admin快速搭建开发出的新版 dsp 系统；内有商品管理、订单管理、权限人员管理等功能；\n * 责任：负责整个项目搭建、基础建设、权限设计、组件的设计开发、对管理页面做了统一封装（以约定配置的方式构建出通用表格 ceud 导入导出等功能界面）\n\n----------------------------------------\n\n * 名称：dsp 打印软件\n * 所属：第一医药集团\n * 描述：由electron vue整合各个电商的打印程序(如天猫、拼多多的快递单打印);有自动打印功能（当有用户下单时，相应的线下药店的打印机会自动吐出快递单与发货单）;根据不同的渠道定义相应的权限;不断调试优化打印队列，可连接多个打印机打印多个不同的模板；\n * 责任：负责整个项目架构设计、搭建、基础建设、组件的设计开发，各个各种打印机联调；线下店铺（如上海南京东路 616）软件的实施等；\n\n----------------------------------------\n\n * 名称：dtp 药品预约小程序\n * 所属：第一医药集团\n * 描述：由uniapp混合开发的微信小程序，业务主要对癌症患者特殊药品预约功能；\n * 责任：负责整个小程序的开发，上线部署；积极推动资质评审流程；\n\n----------------------------------------\n\n * 名称：中冶京诚智慧工地平台\n * 所属：苏州琅润达检测科技有限公司\n * 描述：vue 全家桶+elementui 组件库等技术完成的一款有人员管理（含有班组 工种管理）、闸机管理（含考勤管理）、车辆管理、工资管理、监控视频、物料管理（机械设备 仓库管理）等功能的中后台管理系统；\n * 责任：负责主题定制、海康摄像头的推流拉流前后端功能以及大部分功能开发工作；\n\n----------------------------------------\n\n * 名称：雅佳小程序 雅佳后台管理\n * 所属：苏州琅润达检测科技有限公司\n * 描述：应用场景广泛，实现无需开门即可收寄快递、外卖、生鲜配送等。特别适合办公室、家庭、宾馆、餐厅，和上班族、老人、儿童、女士、行动不便人士等独自居家时使用。通过微信小程序，用户可与家人、同事分享智能柜使用权限，微信小程序自动记录智能柜使用情况，方便用户随时查询。也可作为重要物品、文件等保管柜使用。基于uniapp混合开发， 使用了uviewui组件库，腾讯云物联网开发sdkqcloudiotexplorerappdevsdk。基于明星项目panjiacheng的vue-element-admin项目上构建的中台管理；\n * 责任：负责小程序和后台管理的搭建，构建，开发及部署工作，预研udp 各种物联网sdk，完成小程序在智能箱无网络的情况下，对智能箱进行wifi绑定的解决方案。\n\n\n# 开源项目\n\n荣幸成为开源贡献者之一\n\nvue-router vue-vben-admin",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"个人简历 (英文)",frontmatter:{title:"个人简历 (英文)",date:"2022-06-02T16:39:26.000Z",permalink:"/resume/en",categories:["关于我"],tags:[null]},regularPath:"/90.hidden/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86%20(%E8%8B%B1%E6%96%87).html",relativePath:"90.hidden/个人简历 (英文).md",key:"v-2676e328",path:"/resume/en/",headers:[{level:2,title:"基本信息",slug:"基本信息",normalizedTitle:"基本信息",charIndex:2},{level:2,title:"教育信息",slug:"教育信息",normalizedTitle:"教育信息",charIndex:150},{level:2,title:"工作经历",slug:"工作经历",normalizedTitle:"工作经历",charIndex:190},{level:2,title:"项目经验",slug:"项目经验",normalizedTitle:"项目经验",charIndex:3913},{level:2,title:"开源项目",slug:"开源项目",normalizedTitle:"开源项目",charIndex:10334}],headersStr:"基本信息 教育信息 工作经历 项目经验 开源项目",content:"# 基本信息\n\n * 姓名：仲灏\n * 年龄：26\n * 手机：17628388786\n * 邮箱：izhaong@outlook.com\n * 籍贯：四川巴中\n * 主页：https://www.izhaong.com https://www.google.com/search?q=仲灏\n\n\n# 教育信息\n\n2014/09-2017/06 四川机电职业技术学院 大专\n\n\n# 工作经历\n\n * 时间：2021/10 -- 2022/06\n * 公司：光控特斯联（上海）信息科技有限公司\n * 岗位：前端负责人 & 前端架构师\n * 职责：\n   * 在产品的评审过会前后，完成对需求收集并梳理整理归档；\n   * 与 PM 保持充分沟通，与 UI 设计确定基本规范，与服务端同学规定协议接口及其文档，与 QA 保持沟通，对版本的提测，发布等流程跟进；\n   * 完成项目的基础建设，结构架设，重难点功能业务的开发和代码的评审；\n   * 制定团队技术任务。技术任务和实际业务结合，目标清晰明确，发挥每个人的优势；\n   * 对项目的可能用到的未知技术预研；辅助中低级开发人员解决问题及指导提升；\n   * 前端小组人员的招聘、双周分享会、每月月底组织 code review；\n * 技术栈：Vue2 vue3.2全家桶 UniApp混合开发 Webpack Vite React Echats AntV等\n * 业绩：\n   * 推动前端团队的基础建设；\n   * 与销售和产品方案部门紧密合作，快速抢占项目；在宁夏碳中和项目中。两天时间急速设计并迭代开发出动态 mock 的大屏展示，并落地到甲方的展示的设备上；\n   * 完成微前端技术预研，并使“集成平台”项目使用微前端搭配Nacos完成初版研发；\n\nTerminus Technologies\n\n----------------------------------------\n\n * 时间：2021/2 -- 2022/10\n\n * 公司：第一医药集团\n\n * 岗位：高级前端开发 & 前端架构师\n\n * 职责：\n   \n   * 完成公司产品的前端技术选型；\n   * 完成公司产品前端技术预研及开发工作；\n   * 负责公司腾讯端产品开发：微信小程序，公众号和企业微信程序；\n\n * 技术栈：Vue全家桶 Electron UniApp Node.js\n\n * 业绩：\n   \n   * 重构 DSP 系统，使其原来的 SSM 改为前后端分离；\n   * 弃用三方万旭打印软件，大前端通过 Electron 完成打印软件，并整合邮政、顺丰、韵达模板打印功能；\n   * 完成癌症患者特殊药品预约小程序 DTP 的开发，评审资质，上线部署；\n   * 针对商厦产品销售，完成在 Pad 端中展示使用产品 App\n   \n   No. 1 Pharmacy\n   \n   * Responsibilities:\n     * Complete the front-end technology selection of the company's products;\n     * Complete the pre-research and development of the company's product front-end technology;\n     * Responsible for the company's Tencent product development: WeChat applet, official account and enterprise WeChat program;\n   * Technology stack: Vue family bucket Electron UniApp Node.js\n   * Performance:\n     * Reconstructed the DSP system so that the original SSM was changed to front-end and back-end separation;\n     * Abandoning the third-party Wanxu printing software, the large front-end completes the printing software through Electron, and integrates the postal, SF, and Yunda template printing functions;\n     * Completed the development of DTP, a small program for appointment of special medicines for cancer patients, reviewed the qualifications, and deployed it online;\n     * For commercial building product sales, complete the display and use of the Product App on the Pad terminal\n   \n   ----------------------------------------\n\n * 时间：2019/9 -- 2021/02\n\n * 公司：苏州琅润达检测科技有限公司\n\n * 岗位：高级前端开发\n\n * 职责：\n   \n   * 梳理已有前端项目、技术栈、业务流程，编写设计文档；\n   * 与后端开发人员配合，高质量完成网站前端开发工作；\n   * 持续关注新技术, 持续改进现有的技术框架以及现有产品、分享前沿的前端技术；\n   * 快速理解业务流程，并参与需求分析评估及指派；\n\n * 技术栈：Vue全家桶 Angular UniApp Node.js\n\n * 业绩：\n   \n   * 优化thingsboardangular 项目；完成权限控制，做到 SaaS 租户版；\n   * 通过node.js辅助后端开发 mock 硬件上报数据；\n   * 完成官网的开发，并结合rendertron做爬虫中间层做到 SEO 优化；\n   * 智慧工地开发, 结合node.js和docker完成对海康摄像的推流拉流；\n   * 完成可视化自定义表单功能（类似：金数据，问卷星）；\n\n * larunda Technologies\n\n * Responsibilities:\n   \n   * Sort out existing front-end projects, technology stacks, business processes, and write design documents;\n   * Cooperate with the back-end developers to complete the front-end development of the website with high quality;\n   * Continue to pay attention to new technologies, continuously improve existing technical frameworks and existing products, and share cutting-edge front-end technologies;\n   * Quickly understand business processes, and participate in needs analysis, assessment and assignment;\n\n * Technology stack: Vue family bucket Angular UniApp Node.js\n\n * Performance:\n   \n   * Optimize the thingsboard angular project; complete permission control to achieve SaaS tenant version;\n   * Use node.js to assist back-end development mock hardware to report data;\n   * Completed the development of the official website, and combined rendertron as the middle layer of the crawler to achieve SEO optimization;\n   * Smart construction site development, combined with node.js and docker to complete the push and pull of Hikvision cameras;\n   * Complete the function of visual custom form (similar to: gold data, questionnaire star);\n\n\n# 项目经验\n\n * 名称：集成平台 云桌面平台\n\n * 时间：2021/11 -- 2022/05\n\n * 所属：光控特斯联（上海）信息科技有限公司\n\n * 描述：微前端qiankun.js 结合Nacos技术驱动将下面的智慧能源、智慧园区、智慧建造、碳中和各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新等若干可以自治应用自由组合为“巨石应用”。\n   \n   * 主应用：以 vue3.2 全家桶、elementPlus-ui 构建的一套完善的管理系统；\n   * Win10 云桌面：用户（SaaS 形式，管理员和客户）以类似 window10 系统云桌面的交互方式完成应用的自由构建，场景库的定制、选择，应用的安装，云桌面配置等功能；功能模块（app store，系统设置等）也是拆分独立开发完成；\n   * 子应用：各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新，主要以 Vue2 为主开发的智慧能源、智慧园区、智慧建造、碳中和等项目；\n\n * 责任：\n   \n   * 负责主应用的整体架构与主要功能的研发及开发。\n   * 负责云平台的架构设计，技术选型，\n   * 负责各个项目的子应用改造；\n\n * Integrated Platform Cloud Desktop Platform\n\n * Description: The micro front-end qiankun.js is combined with Nacos technology to make the following smart energy, smart park, smart construction, carbon neutral project warehouses independent, the front and back ends can be independently developed, and the main framework automatically completes synchronization after deployment Several autonomous applications such as updates can be freely combined into \"boulder applications\".\n   \n   * Main application: a complete management system built with vue3.2 family bucket and elementPlus-ui;\n   * Win10 Cloud Desktop: Users (SaaS form, administrators and customers) complete the free construction of applications, customization and selection of scene libraries, application installation, cloud desktop configuration and other functions in an interactive manner similar to the window10 system cloud desktop; function modules ( app store, system settings, etc.) are also developed independently;\n   * Sub-applications: Each project warehouse is independent, and the front and back ends can be developed independently. After the deployment is completed, the main framework is automatically updated synchronously, mainly for smart energy, smart park, smart construction, carbon neutrality and other projects developed by Vue2;\n\n * responsibility:\n   \n   * Responsible for the research and development of the overall architecture and main functions of the main application.\n   * Responsible for cloud platform architecture design, technology selection,\n   * Responsible for the sub-application transformation of each project;\n\n----------------------------------------\n\n * 名称：智慧能源(武汉) 智慧园区(德阳 AiPark)\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 智慧能源(武汉)：vue2 全家桶、高德地图、Echarts 等技术开发;内有劳务、施工监管、环境监测、物资、数据分析等管理模块；\n   * 智慧园区(德阳 AiPark)：AntDesignPro和vue-element-admin两个版本，内有资产管理、供应商管理、物业管理、合同管理、消防、通行、安防、企业、环境监测等管理模块；\n * 责任：\n   * 负责通用组件的开发及项目任务安排和项目进度的跟进；\n   * 负责各个项目技术选型，应用搭建，基础建设，做整个项目统筹和引领工作；\n   * 负责部分难点开发任务，和全局性的工作（搭配微前端主应用做主题定制，对子应用静态资源做域名访问，应用性能的优化等）；\n\n----------------------------------------\n\n * 名称：碳中和(宁夏双碳大脑)\n * 时间：2022/01-2022/05\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 由vue2全家桶 、vue3全家桶 、Echarts、Cesium(mars3d)、Mapbox、typescript`等技术开发的自适应各种大屏展示系统和管理系统，內含有丰富的减排，排放监测跟踪，绿色金融，碳资产，碳路径规划，节能减碳，绿碳认证等碳中和相关功能，设计低碳建筑，低碳城市，低碳工业，低碳生活等多个方面业务。\n * 责任：\n   * 负责整个项目任务分配、进度跟进等项目管理工作；\n   * 负责项目的架构、搭建、基础建设工作；\n   * 负责大屏展示 3d 模型处理开发工作；\n   * 负责自适应功能组件设计；\n * Carbon Neutrality (Ningxia Double Carbon Brain)\n * describe:\n   * Adaptive various large-screen display systems and management systems developed by vue2 whole family bucket, vue3 whole family bucket, Echarts, Cesium(mars3d), Mapbox, typescript and other technologies, which contain rich carbon neutrality related functions such as emission reduction, emission monitoring and tracking, green finance, carbon assets, carbon path planning, energy saving and carbon reduction, green carbon certification, design of low-carbon buildings, low-carbon cities, low-carbon industries, low-carbon life, etc. Aspects of business.\n * responsibility:\n   * Responsible for project management such as task assignment and progress follow-up of the entire project;\n   * Responsible for the structure, construction and infrastructure of the project;\n   * Responsible for the processing and development of 3D models for large-screen display;\n   * Responsible for the design of adaptive functional components;\n\n----------------------------------------\n\n * 名称：智慧电能(云南电能) 缴费公众号（远程水电缴费）\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 后台管理由vue2.6全家桶、element-ui、Echarts等完成的缴费日志、人员管理、缴费管理、电表管理等系列功能；\n   * 公众号由vue3.2全家桶（除vuex4）、Vite、Typescript、Pinia等前沿技术完成的缴费账户绑定、缴费等功能；\n * 责任：负责整个任务分配、项目搭建、基础建设、进度跟进和整个公众号的全部开发工作；\n\n----------------------------------------\n\n * 名称：DSP 第一医药业务管理系统\n * 所属：第一医药集团\n * 描述：由全后端Spring MVC重构为前后端分离，前端主要使用了 vue 框架开发，借助明星项目vue-element-admin快速搭建开发出的新版 DSP 系统；内有商品管理、订单管理、权限人员管理等功能；\n * 责任：负责整个项目搭建、基础建设、权限设计、组件的设计开发、对管理页面做了统一封装（以约定配置的方式构建出通用表格 CEUD 导入导出等功能界面）\n\n----------------------------------------\n\n * 名称：DSP 打印软件\n\n * 时间：2021/04 -- 2022/10\n\n * 所属：第一医药集团\n\n * 描述：由Electron vue整合各个电商的打印程序(如天猫、拼多多的快递单打印);有自动打印功能（当有用户下单时，相应的线下药店的打印机会自动吐出快递单与发货单）;根据不同的渠道定义相应的权限;不断调试优化打印队列，可连接多个打印机打印多个不同的模板；\n\n * 责任：负责整个项目架构设计、搭建、基础建设、组件的设计开发，各个各种打印机联调；线下店铺（如上海南京东路 616）软件的实施等；\n\n * DSP printing software\n\n * Description: Electron vue integrates the printing programs of various e-commerce companies (such as Tmall, Pinduoduo's express order printing); there is an automatic printing function (when a user places an order, the printer of the corresponding offline pharmacy will Automatically spit out express orders and delivery orders); define corresponding permissions according to different channels; continuously debug and optimize the print queue, and can connect multiple printers to print multiple different templates;\n\n * Responsibilities: Responsible for the entire project architecture design, construction, infrastructure, design and development of components, joint debugging of various printers; software implementation in offline stores (such as 616 Nanjing East Road, Shanghai), etc.;\n\n----------------------------------------\n\n * 名称：DTP 药品预约小程序\n * 所属：第一医药集团\n * 描述：由Uniapp混合开发的微信小程序，业务主要对癌症患者特殊药品预约功能；\n * 责任：负责整个小程序的开发，上线部署；积极推动资质评审流程；\n\n----------------------------------------\n\n * 名称：中冶京诚智慧工地平台\n * 所属：苏州琅润达检测科技有限公司\n * 描述：vue 全家桶+elementUI 组件库等技术完成的一款有人员管理（含有班组 工种管理）、闸机管理（含考勤管理）、车辆管理、工资管理、监控视频、物料管理（机械设备 仓库管理）等功能的中后台管理系统；\n * 责任：负责主题定制、海康摄像头的推流拉流前后端功能以及大部分功能开发工作；\n\n----------------------------------------\n\n * 名称：雅佳小程序 雅佳后台管理\n * 所属：苏州琅润达检测科技有限公司\n * 描述：应用场景广泛，实现无需开门即可收寄快递、外卖、生鲜配送等。特别适合办公室、家庭、宾馆、餐厅，和上班族、老人、儿童、女士、行动不便人士等独自居家时使用。通过微信小程序，用户可与家人、同事分享智能柜使用权限，微信小程序自动记录智能柜使用情况，方便用户随时查询。也可作为重要物品、文件等保管柜使用。基于uniapp混合开发， 使用了uviewUI组件库，腾讯云物联网开发SDKQcloudIotExplorerAppDevSdk。基于明星项目panjiacheng的vue-element-admin项目上构建的中台管理；\n * 责任：负责小程序和后台管理的搭建，构建，开发及部署工作，预研udp 各种物联网sdk，完成小程序在智能箱无网络的情况下，对智能箱进行wifi绑定的解决方案。\n\n\n# 开源项目\n\n荣幸成为开源贡献者之一\n\nvue-router vue-vben-admin",normalizedContent:"# 基本信息\n\n * 姓名：仲灏\n * 年龄：26\n * 手机：17628388786\n * 邮箱：izhaong@outlook.com\n * 籍贯：四川巴中\n * 主页：https://www.izhaong.com https://www.google.com/search?q=仲灏\n\n\n# 教育信息\n\n2014/09-2017/06 四川机电职业技术学院 大专\n\n\n# 工作经历\n\n * 时间：2021/10 -- 2022/06\n * 公司：光控特斯联（上海）信息科技有限公司\n * 岗位：前端负责人 & 前端架构师\n * 职责：\n   * 在产品的评审过会前后，完成对需求收集并梳理整理归档；\n   * 与 pm 保持充分沟通，与 ui 设计确定基本规范，与服务端同学规定协议接口及其文档，与 qa 保持沟通，对版本的提测，发布等流程跟进；\n   * 完成项目的基础建设，结构架设，重难点功能业务的开发和代码的评审；\n   * 制定团队技术任务。技术任务和实际业务结合，目标清晰明确，发挥每个人的优势；\n   * 对项目的可能用到的未知技术预研；辅助中低级开发人员解决问题及指导提升；\n   * 前端小组人员的招聘、双周分享会、每月月底组织 code review；\n * 技术栈：vue2 vue3.2全家桶 uniapp混合开发 webpack vite react echats antv等\n * 业绩：\n   * 推动前端团队的基础建设；\n   * 与销售和产品方案部门紧密合作，快速抢占项目；在宁夏碳中和项目中。两天时间急速设计并迭代开发出动态 mock 的大屏展示，并落地到甲方的展示的设备上；\n   * 完成微前端技术预研，并使“集成平台”项目使用微前端搭配nacos完成初版研发；\n\nterminus technologies\n\n----------------------------------------\n\n * 时间：2021/2 -- 2022/10\n\n * 公司：第一医药集团\n\n * 岗位：高级前端开发 & 前端架构师\n\n * 职责：\n   \n   * 完成公司产品的前端技术选型；\n   * 完成公司产品前端技术预研及开发工作；\n   * 负责公司腾讯端产品开发：微信小程序，公众号和企业微信程序；\n\n * 技术栈：vue全家桶 electron uniapp node.js\n\n * 业绩：\n   \n   * 重构 dsp 系统，使其原来的 ssm 改为前后端分离；\n   * 弃用三方万旭打印软件，大前端通过 electron 完成打印软件，并整合邮政、顺丰、韵达模板打印功能；\n   * 完成癌症患者特殊药品预约小程序 dtp 的开发，评审资质，上线部署；\n   * 针对商厦产品销售，完成在 pad 端中展示使用产品 app\n   \n   no. 1 pharmacy\n   \n   * responsibilities:\n     * complete the front-end technology selection of the company's products;\n     * complete the pre-research and development of the company's product front-end technology;\n     * responsible for the company's tencent product development: wechat applet, official account and enterprise wechat program;\n   * technology stack: vue family bucket electron uniapp node.js\n   * performance:\n     * reconstructed the dsp system so that the original ssm was changed to front-end and back-end separation;\n     * abandoning the third-party wanxu printing software, the large front-end completes the printing software through electron, and integrates the postal, sf, and yunda template printing functions;\n     * completed the development of dtp, a small program for appointment of special medicines for cancer patients, reviewed the qualifications, and deployed it online;\n     * for commercial building product sales, complete the display and use of the product app on the pad terminal\n   \n   ----------------------------------------\n\n * 时间：2019/9 -- 2021/02\n\n * 公司：苏州琅润达检测科技有限公司\n\n * 岗位：高级前端开发\n\n * 职责：\n   \n   * 梳理已有前端项目、技术栈、业务流程，编写设计文档；\n   * 与后端开发人员配合，高质量完成网站前端开发工作；\n   * 持续关注新技术, 持续改进现有的技术框架以及现有产品、分享前沿的前端技术；\n   * 快速理解业务流程，并参与需求分析评估及指派；\n\n * 技术栈：vue全家桶 angular uniapp node.js\n\n * 业绩：\n   \n   * 优化thingsboardangular 项目；完成权限控制，做到 saas 租户版；\n   * 通过node.js辅助后端开发 mock 硬件上报数据；\n   * 完成官网的开发，并结合rendertron做爬虫中间层做到 seo 优化；\n   * 智慧工地开发, 结合node.js和docker完成对海康摄像的推流拉流；\n   * 完成可视化自定义表单功能（类似：金数据，问卷星）；\n\n * larunda technologies\n\n * responsibilities:\n   \n   * sort out existing front-end projects, technology stacks, business processes, and write design documents;\n   * cooperate with the back-end developers to complete the front-end development of the website with high quality;\n   * continue to pay attention to new technologies, continuously improve existing technical frameworks and existing products, and share cutting-edge front-end technologies;\n   * quickly understand business processes, and participate in needs analysis, assessment and assignment;\n\n * technology stack: vue family bucket angular uniapp node.js\n\n * performance:\n   \n   * optimize the thingsboard angular project; complete permission control to achieve saas tenant version;\n   * use node.js to assist back-end development mock hardware to report data;\n   * completed the development of the official website, and combined rendertron as the middle layer of the crawler to achieve seo optimization;\n   * smart construction site development, combined with node.js and docker to complete the push and pull of hikvision cameras;\n   * complete the function of visual custom form (similar to: gold data, questionnaire star);\n\n\n# 项目经验\n\n * 名称：集成平台 云桌面平台\n\n * 时间：2021/11 -- 2022/05\n\n * 所属：光控特斯联（上海）信息科技有限公司\n\n * 描述：微前端qiankun.js 结合nacos技术驱动将下面的智慧能源、智慧园区、智慧建造、碳中和各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新等若干可以自治应用自由组合为“巨石应用”。\n   \n   * 主应用：以 vue3.2 全家桶、elementplus-ui 构建的一套完善的管理系统；\n   * win10 云桌面：用户（saas 形式，管理员和客户）以类似 window10 系统云桌面的交互方式完成应用的自由构建，场景库的定制、选择，应用的安装，云桌面配置等功能；功能模块（app store，系统设置等）也是拆分独立开发完成；\n   * 子应用：各个项目仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新，主要以 vue2 为主开发的智慧能源、智慧园区、智慧建造、碳中和等项目；\n\n * 责任：\n   \n   * 负责主应用的整体架构与主要功能的研发及开发。\n   * 负责云平台的架构设计，技术选型，\n   * 负责各个项目的子应用改造；\n\n * integrated platform cloud desktop platform\n\n * description: the micro front-end qiankun.js is combined with nacos technology to make the following smart energy, smart park, smart construction, carbon neutral project warehouses independent, the front and back ends can be independently developed, and the main framework automatically completes synchronization after deployment several autonomous applications such as updates can be freely combined into \"boulder applications\".\n   \n   * main application: a complete management system built with vue3.2 family bucket and elementplus-ui;\n   * win10 cloud desktop: users (saas form, administrators and customers) complete the free construction of applications, customization and selection of scene libraries, application installation, cloud desktop configuration and other functions in an interactive manner similar to the window10 system cloud desktop; function modules ( app store, system settings, etc.) are also developed independently;\n   * sub-applications: each project warehouse is independent, and the front and back ends can be developed independently. after the deployment is completed, the main framework is automatically updated synchronously, mainly for smart energy, smart park, smart construction, carbon neutrality and other projects developed by vue2;\n\n * responsibility:\n   \n   * responsible for the research and development of the overall architecture and main functions of the main application.\n   * responsible for cloud platform architecture design, technology selection,\n   * responsible for the sub-application transformation of each project;\n\n----------------------------------------\n\n * 名称：智慧能源(武汉) 智慧园区(德阳 aipark)\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 智慧能源(武汉)：vue2 全家桶、高德地图、echarts 等技术开发;内有劳务、施工监管、环境监测、物资、数据分析等管理模块；\n   * 智慧园区(德阳 aipark)：antdesignpro和vue-element-admin两个版本，内有资产管理、供应商管理、物业管理、合同管理、消防、通行、安防、企业、环境监测等管理模块；\n * 责任：\n   * 负责通用组件的开发及项目任务安排和项目进度的跟进；\n   * 负责各个项目技术选型，应用搭建，基础建设，做整个项目统筹和引领工作；\n   * 负责部分难点开发任务，和全局性的工作（搭配微前端主应用做主题定制，对子应用静态资源做域名访问，应用性能的优化等）；\n\n----------------------------------------\n\n * 名称：碳中和(宁夏双碳大脑)\n * 时间：2022/01-2022/05\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 由vue2全家桶 、vue3全家桶 、echarts、cesium(mars3d)、mapbox、typescript`等技术开发的自适应各种大屏展示系统和管理系统，內含有丰富的减排，排放监测跟踪，绿色金融，碳资产，碳路径规划，节能减碳，绿碳认证等碳中和相关功能，设计低碳建筑，低碳城市，低碳工业，低碳生活等多个方面业务。\n * 责任：\n   * 负责整个项目任务分配、进度跟进等项目管理工作；\n   * 负责项目的架构、搭建、基础建设工作；\n   * 负责大屏展示 3d 模型处理开发工作；\n   * 负责自适应功能组件设计；\n * carbon neutrality (ningxia double carbon brain)\n * describe:\n   * adaptive various large-screen display systems and management systems developed by vue2 whole family bucket, vue3 whole family bucket, echarts, cesium(mars3d), mapbox, typescript and other technologies, which contain rich carbon neutrality related functions such as emission reduction, emission monitoring and tracking, green finance, carbon assets, carbon path planning, energy saving and carbon reduction, green carbon certification, design of low-carbon buildings, low-carbon cities, low-carbon industries, low-carbon life, etc. aspects of business.\n * responsibility:\n   * responsible for project management such as task assignment and progress follow-up of the entire project;\n   * responsible for the structure, construction and infrastructure of the project;\n   * responsible for the processing and development of 3d models for large-screen display;\n   * responsible for the design of adaptive functional components;\n\n----------------------------------------\n\n * 名称：智慧电能(云南电能) 缴费公众号（远程水电缴费）\n * 所属：光控特斯联（上海）信息科技有限公司\n * 描述：\n   * 后台管理由vue2.6全家桶、element-ui、echarts等完成的缴费日志、人员管理、缴费管理、电表管理等系列功能；\n   * 公众号由vue3.2全家桶（除vuex4）、vite、typescript、pinia等前沿技术完成的缴费账户绑定、缴费等功能；\n * 责任：负责整个任务分配、项目搭建、基础建设、进度跟进和整个公众号的全部开发工作；\n\n----------------------------------------\n\n * 名称：dsp 第一医药业务管理系统\n * 所属：第一医药集团\n * 描述：由全后端spring mvc重构为前后端分离，前端主要使用了 vue 框架开发，借助明星项目vue-element-admin快速搭建开发出的新版 dsp 系统；内有商品管理、订单管理、权限人员管理等功能；\n * 责任：负责整个项目搭建、基础建设、权限设计、组件的设计开发、对管理页面做了统一封装（以约定配置的方式构建出通用表格 ceud 导入导出等功能界面）\n\n----------------------------------------\n\n * 名称：dsp 打印软件\n\n * 时间：2021/04 -- 2022/10\n\n * 所属：第一医药集团\n\n * 描述：由electron vue整合各个电商的打印程序(如天猫、拼多多的快递单打印);有自动打印功能（当有用户下单时，相应的线下药店的打印机会自动吐出快递单与发货单）;根据不同的渠道定义相应的权限;不断调试优化打印队列，可连接多个打印机打印多个不同的模板；\n\n * 责任：负责整个项目架构设计、搭建、基础建设、组件的设计开发，各个各种打印机联调；线下店铺（如上海南京东路 616）软件的实施等；\n\n * dsp printing software\n\n * description: electron vue integrates the printing programs of various e-commerce companies (such as tmall, pinduoduo's express order printing); there is an automatic printing function (when a user places an order, the printer of the corresponding offline pharmacy will automatically spit out express orders and delivery orders); define corresponding permissions according to different channels; continuously debug and optimize the print queue, and can connect multiple printers to print multiple different templates;\n\n * responsibilities: responsible for the entire project architecture design, construction, infrastructure, design and development of components, joint debugging of various printers; software implementation in offline stores (such as 616 nanjing east road, shanghai), etc.;\n\n----------------------------------------\n\n * 名称：dtp 药品预约小程序\n * 所属：第一医药集团\n * 描述：由uniapp混合开发的微信小程序，业务主要对癌症患者特殊药品预约功能；\n * 责任：负责整个小程序的开发，上线部署；积极推动资质评审流程；\n\n----------------------------------------\n\n * 名称：中冶京诚智慧工地平台\n * 所属：苏州琅润达检测科技有限公司\n * 描述：vue 全家桶+elementui 组件库等技术完成的一款有人员管理（含有班组 工种管理）、闸机管理（含考勤管理）、车辆管理、工资管理、监控视频、物料管理（机械设备 仓库管理）等功能的中后台管理系统；\n * 责任：负责主题定制、海康摄像头的推流拉流前后端功能以及大部分功能开发工作；\n\n----------------------------------------\n\n * 名称：雅佳小程序 雅佳后台管理\n * 所属：苏州琅润达检测科技有限公司\n * 描述：应用场景广泛，实现无需开门即可收寄快递、外卖、生鲜配送等。特别适合办公室、家庭、宾馆、餐厅，和上班族、老人、儿童、女士、行动不便人士等独自居家时使用。通过微信小程序，用户可与家人、同事分享智能柜使用权限，微信小程序自动记录智能柜使用情况，方便用户随时查询。也可作为重要物品、文件等保管柜使用。基于uniapp混合开发， 使用了uviewui组件库，腾讯云物联网开发sdkqcloudiotexplorerappdevsdk。基于明星项目panjiacheng的vue-element-admin项目上构建的中台管理；\n * 责任：负责小程序和后台管理的搭建，构建，开发及部署工作，预研udp 各种物联网sdk，完成小程序在智能箱无网络的情况下，对智能箱进行wifi绑定的解决方案。\n\n\n# 开源项目\n\n荣幸成为开源贡献者之一\n\nvue-router vue-vben-admin",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-1a3dc34b",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/11/25, 13:36:57",lastUpdatedTimestamp:1637818617e3},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-3f7728aa",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/11/25, 13:36:57",lastUpdatedTimestamp:1637818617e3},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-a53b626a",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2021/11/25, 13:36:57",lastUpdatedTimestamp:1637818617e3},{title:"Telegram传奇：一个关于俄罗斯富豪、黑客、极权和阴谋的创业故事",frontmatter:{title:"Telegram传奇：一个关于俄罗斯富豪、黑客、极权和阴谋的创业故事",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/968f3e/",sidebar:"auto",categories:["随笔"],tags:[null]},regularPath:"/_posts/%E6%95%85%E4%BA%8B/Telegram%E4%BC%A0%E5%A5%87%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E4%BF%84%E7%BD%97%E6%96%AF%E5%AF%8C%E8%B1%AA%E3%80%81%E9%BB%91%E5%AE%A2%E3%80%81%E6%9E%81%E6%9D%83%E5%92%8C%E9%98%B4%E8%B0%8B%E7%9A%84%E5%88%9B%E4%B8%9A%E6%95%85%E4%BA%8B.html",relativePath:"_posts/故事/Telegram传奇：一个关于俄罗斯富豪、黑客、极权和阴谋的创业故事.md",key:"v-1bbcf022",path:"/pages/968f3e/",headersStr:null,content:"> https://www.tmtpost.com/1443098.html\n> \n> 比起其联合创始人Pavel Durov，Mark Zuckerberg所谓的叛逆只不过是见投资人时候不穿正装穿帽衫而已，实在孩子气。",normalizedContent:"> https://www.tmtpost.com/1443098.html\n> \n> 比起其联合创始人pavel durov，mark zuckerberg所谓的叛逆只不过是见投资人时候不穿正装穿帽衫而已，实在孩子气。",charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"窃钩者诛，窃国者侯",frontmatter:{title:"窃钩者诛，窃国者侯",date:"2022-02-18T11:19:10.000Z",permalink:"/pages/517331/",sidebar:"auto",categories:["随笔"],tags:[null]},regularPath:"/_posts/%E6%95%85%E4%BA%8B/%E7%AA%83%E9%92%A9%E8%80%85%E8%AF%9B%EF%BC%8C%E7%AA%83%E5%9B%BD%E8%80%85%E4%BE%AF.html",relativePath:"_posts/故事/窃钩者诛，窃国者侯.md",key:"v-0df4ca3d",path:"/pages/517331/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"出处",slug:"出处",normalizedTitle:"出处",charIndex:116}],headersStr:"简介 出处",content:"# 简介\n\n偷带钩的要处死，篡夺政权的人反倒成为诸侯。用以讽刺法律的虚伪和不合理 [1] ，引申义为现实是虚伪的。\n\n这句话否定圣人之道，体现的是道家思想。\n\n窃钩者诛，这里的“钩”不是钩子的意思，这个指古代腰带“带钩”。\n\n\n# 出处\n\n《庄子·胠箧》：“彼窃钩者诛，窃国者为诸侯；诸侯之门而仁义存焉。” （钩：带钩。白话译为：那些偷了一个带钩的人要受惩罚处死，而盗窃一个国家的人却做了诸侯。诸侯之家有仁义之名，那不就是剽窃来的仁义圣知吗？）表现了庄子外冷内热，愤世嫉俗的一面。\n\n其实，庄子写这一篇文章，压根儿不是在谴责所谓的「权贵犯罪」。通篇认为「圣人生而大盗起」、「圣人不死，大盗不止」，他强调应该要「绝圣弃知」，以重返太古时代那种恬淡纯朴的境地。很明显，庄子的这篇文章，否定的是「圣人之道」。\n\n文章中所谓的「窃国」，是指“田成子杀齐君而盗其国”。田成子，就是田恒，原是齐国大夫，鲁哀公14年，田恒先杀了齐简公，后来到了他的曾孙子田和，再把齐康公驱逐到海上，自立为齐侯。庄子看到这段历史，认为田恒他们一伙人所窃的，不止齐国而已，还包括建立齐国的「圣人之道」，而且最终还是利用这个「圣人之道」，来守护他们窃得的战利品。所以庄子认为，那些公认为聪明的人，把财物紧密封锁在箱子、袋子及柜子里，正好方便大盗来搬取；而「圣人之道」普流人世，适可被大盗利用来美化掩饰其为非作歹的事实，故曰：「世俗所谓知者，有不为大盗积者乎？所谓圣者，有不为大盗守者乎？」\n\n想想也有道理，自古「窃国」者，哪一个承认他是「窃」来的呢？赵匡胤陈桥驿兵变，是因为「顺天应人」，不得已才逼迫后周少主退位，自己建立宋朝；元帝国忽必烈是为了「吊民伐罪」，所以灭了南宋。他们所做所为，不都是符合「圣人之道」吗？庄子说：有了斗斛来量米谷，就有人利用斗斛来做诈伪的事情；有了权衡来称东西，就有人利用权衡来做欺骗的事情。「圣人之道」不也是如此？好人、坏人都可以标榜「圣人之道」，如果社会上好人较少而坏人较多，则「圣人之道」岂不利益社会较少而危害社会较多？故曰：“善人不得圣人之道不立，跖不得圣人之道不行；天下之善人少而不善人多，则圣人之利天下也少而害天下也多。”\n\n圣人告诫我们，不可以贪图不义之财，因此对于那些偷窃诸如腰带这种不值钱东西的人，必须加以处罚（窃钩者诛）；但圣人同时也表示，要顺天应人、吊民伐罪，因此「窃国」成功的人，都可以用这些冠冕堂皇的大道理当作借口，建立并维系他所窃得之物。始曰：“彼窃钩者诛，窃国者为诸侯，诸侯之门而仁义存焉。”\n\n如果说，昔时是以圣人之道治天下，今日是以法律制度定纷争，则庄子学说在今日所指出的，不正就是法律制度本身的局限性吗？法律可以惩奸罚恶，是否也必定会让那些钻营的人利用来为非作歹？证券交易制度可以发展社会经济，是否也必将成为那些机巧的人诈取不正利益的帮凶？以庄子的观点，一切法律典籍、制度存在，必定是粗粒度的，且有其局限性。",normalizedContent:"# 简介\n\n偷带钩的要处死，篡夺政权的人反倒成为诸侯。用以讽刺法律的虚伪和不合理 [1] ，引申义为现实是虚伪的。\n\n这句话否定圣人之道，体现的是道家思想。\n\n窃钩者诛，这里的“钩”不是钩子的意思，这个指古代腰带“带钩”。\n\n\n# 出处\n\n《庄子·胠箧》：“彼窃钩者诛，窃国者为诸侯；诸侯之门而仁义存焉。” （钩：带钩。白话译为：那些偷了一个带钩的人要受惩罚处死，而盗窃一个国家的人却做了诸侯。诸侯之家有仁义之名，那不就是剽窃来的仁义圣知吗？）表现了庄子外冷内热，愤世嫉俗的一面。\n\n其实，庄子写这一篇文章，压根儿不是在谴责所谓的「权贵犯罪」。通篇认为「圣人生而大盗起」、「圣人不死，大盗不止」，他强调应该要「绝圣弃知」，以重返太古时代那种恬淡纯朴的境地。很明显，庄子的这篇文章，否定的是「圣人之道」。\n\n文章中所谓的「窃国」，是指“田成子杀齐君而盗其国”。田成子，就是田恒，原是齐国大夫，鲁哀公14年，田恒先杀了齐简公，后来到了他的曾孙子田和，再把齐康公驱逐到海上，自立为齐侯。庄子看到这段历史，认为田恒他们一伙人所窃的，不止齐国而已，还包括建立齐国的「圣人之道」，而且最终还是利用这个「圣人之道」，来守护他们窃得的战利品。所以庄子认为，那些公认为聪明的人，把财物紧密封锁在箱子、袋子及柜子里，正好方便大盗来搬取；而「圣人之道」普流人世，适可被大盗利用来美化掩饰其为非作歹的事实，故曰：「世俗所谓知者，有不为大盗积者乎？所谓圣者，有不为大盗守者乎？」\n\n想想也有道理，自古「窃国」者，哪一个承认他是「窃」来的呢？赵匡胤陈桥驿兵变，是因为「顺天应人」，不得已才逼迫后周少主退位，自己建立宋朝；元帝国忽必烈是为了「吊民伐罪」，所以灭了南宋。他们所做所为，不都是符合「圣人之道」吗？庄子说：有了斗斛来量米谷，就有人利用斗斛来做诈伪的事情；有了权衡来称东西，就有人利用权衡来做欺骗的事情。「圣人之道」不也是如此？好人、坏人都可以标榜「圣人之道」，如果社会上好人较少而坏人较多，则「圣人之道」岂不利益社会较少而危害社会较多？故曰：“善人不得圣人之道不立，跖不得圣人之道不行；天下之善人少而不善人多，则圣人之利天下也少而害天下也多。”\n\n圣人告诫我们，不可以贪图不义之财，因此对于那些偷窃诸如腰带这种不值钱东西的人，必须加以处罚（窃钩者诛）；但圣人同时也表示，要顺天应人、吊民伐罪，因此「窃国」成功的人，都可以用这些冠冕堂皇的大道理当作借口，建立并维系他所窃得之物。始曰：“彼窃钩者诛，窃国者为诸侯，诸侯之门而仁义存焉。”\n\n如果说，昔时是以圣人之道治天下，今日是以法律制度定纷争，则庄子学说在今日所指出的，不正就是法律制度本身的局限性吗？法律可以惩奸罚恶，是否也必定会让那些钻营的人利用来为非作歹？证券交易制度可以发展社会经济，是否也必将成为那些机巧的人诈取不正利益的帮凶？以庄子的观点，一切法律典籍、制度存在，必定是粗粒度的，且有其局限性。",charsets:{cjk:!0},lastUpdated:"2022/02/25, 17:04:09",lastUpdatedTimestamp:1645779849e3},{title:"享乐主义",frontmatter:{title:"享乐主义",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/03f70d/",sidebar:"auto",categories:["随笔"],tags:[null]},regularPath:"/_posts/%E9%9A%8F%E7%AC%94/%E4%BA%AB%E4%B9%90%E4%B8%BB%E4%B9%89.html",relativePath:"_posts/随笔/享乐主义.md",key:"v-23ac94d8",path:"/pages/03f70d/",headersStr:null,content:'上个世纪70年代，哈佛大学的哲学教授诺齐克（Robert Nozick）提出一个问题， 如何证明享乐主义（追求快乐和满足）是人类的行为目的？\n\n当时，美国陷入越南战争的泥潭，社会弥漫着"享乐主义"的气氛，年轻人普遍觉得，人的行为就是为了追求快乐、满足、幸福感。只要能够获得快乐的事情，就值得去做。\n\n诺齐克不喜欢这种想法，质疑道：有何证据可以证明，人活着就是为了追求享乐？\n\n他在著作里面，提出了三种可能，会让人放弃快乐机。\n\n 1. 人们想亲身做某些事情，而不是单纯地体验快乐。\n 2. 人们希望能够真正成为某种类型的人，而不是虚拟地扮演角色。\n 3. 人们不希望被限制在人造现实中，还希望去接触更多的事物。',normalizedContent:'上个世纪70年代，哈佛大学的哲学教授诺齐克（robert nozick）提出一个问题， 如何证明享乐主义（追求快乐和满足）是人类的行为目的？\n\n当时，美国陷入越南战争的泥潭，社会弥漫着"享乐主义"的气氛，年轻人普遍觉得，人的行为就是为了追求快乐、满足、幸福感。只要能够获得快乐的事情，就值得去做。\n\n诺齐克不喜欢这种想法，质疑道：有何证据可以证明，人活着就是为了追求享乐？\n\n他在著作里面，提出了三种可能，会让人放弃快乐机。\n\n 1. 人们想亲身做某些事情，而不是单纯地体验快乐。\n 2. 人们希望能够真正成为某种类型的人，而不是虚拟地扮演角色。\n 3. 人们不希望被限制在人造现实中，还希望去接触更多的事物。',charsets:{cjk:!0},lastUpdated:"2022/05/02, 01:28:34",lastUpdatedTimestamp:1651426114e3},{title:"你想活成什么样子",frontmatter:{title:"你想活成什么样子",date:"2021-12-30T15:55:56.000Z",permalink:"/pages/4c0a7c/",sidebar:"auto",categories:["随笔"],tags:[null]},regularPath:"/_posts/%E9%9A%8F%E7%AC%94/%E4%BD%A0%E6%83%B3%E6%B4%BB%E6%88%90%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90.html",relativePath:"_posts/随笔/你想活成什么样子.md",key:"v-b3e01fac",path:"/pages/4c0a7c/",headersStr:null,content:"2021-12-29\n\n这段时间想的最多的就是怎么成为自由职业者 能有到不错的收入且能时间自由\n\n可能是在上海呆的太久了，有些想家了",normalizedContent:"2021-12-29\n\n这段时间想的最多的就是怎么成为自由职业者 能有到不错的收入且能时间自由\n\n可能是在上海呆的太久了，有些想家了",charsets:{cjk:!0},lastUpdated:"2022/01/06, 13:49:17",lastUpdatedTimestamp:1641448157e3},{title:"你知道的越多，不知道的也就越多",frontmatter:{title:"你知道的越多，不知道的也就越多",date:"2021-11-25T15:52:40.000Z",permalink:"/pages/f2e63f",sidebar:"auto",categories:["随笔"],tags:["心情分享"],author:{name:"仲灏",link:"https://github.com/izhaong"}},regularPath:"/_posts/%E9%9A%8F%E7%AC%94/%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E8%B6%8A%E5%A4%9A%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%B9%9F%E5%B0%B1%E8%B6%8A%E5%A4%9A.html",relativePath:"_posts/随笔/你知道的越多，不知道的也就越多.md",key:"v-3dcfb846",path:"/pages/f2e63f/",excerpt:"<p>不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。</p>\n",headersStr:null,content:"不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。\n\n你知道的越多，你不知道的也就越多，这是一句非常有哲理的话。\n\n每个人的知识面都是有限的，你有可能在某个领域会有较深的研究，成为这个领域里的专家，等到你站在高处的时候，才会发现，自己是多么的渺小，才知道自己有多少没有涉及的领域。知道的越多，疑惑、问题就会越来越多，对已知的质疑、疑虑、困惑就会越来越多。\n\n即使如此，我们也应该努力，至少可以成为某个领域的佼佼者。\n\n鸡汤1\n\n弱小的人，才习惯嘲讽与否定，而内心强大的人，从不吝啬赞美与鼓励。",normalizedContent:"不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。\n\n你知道的越多，你不知道的也就越多，这是一句非常有哲理的话。\n\n每个人的知识面都是有限的，你有可能在某个领域会有较深的研究，成为这个领域里的专家，等到你站在高处的时候，才会发现，自己是多么的渺小，才知道自己有多少没有涉及的领域。知道的越多，疑惑、问题就会越来越多，对已知的质疑、疑虑、困惑就会越来越多。\n\n即使如此，我们也应该努力，至少可以成为某个领域的佼佼者。\n\n鸡汤1\n\n弱小的人，才习惯嘲讽与否定，而内心强大的人，从不吝啬赞美与鼓励。",charsets:{cjk:!0},lastUpdated:"2021/11/25, 21:06:56",lastUpdatedTimestamp:1637845616e3},{title:"苦中作乐",frontmatter:{title:"苦中作乐",date:"2022-01-13T16:10:07.000Z",permalink:"/pages/462671/",sidebar:"auto",categories:["随笔"],tags:[null]},regularPath:"/_posts/%E9%9A%8F%E7%AC%94/%E8%8B%A6%E4%B8%AD%E4%BD%9C%E4%B9%90.html",relativePath:"_posts/随笔/苦中作乐.md",key:"v-2d09c694",path:"/pages/462671/",headersStr:null,content:"没有乐 你想多了",normalizedContent:"没有乐 你想多了",charsets:{cjk:!0},lastUpdated:"2022/01/21, 15:51:34",lastUpdatedTimestamp:1642751494e3},{title:"Home",frontmatter:{home:!0,heroText:"仲灏 · 小栈",tagline:"大前端、全栈开发、其他互联网技术博客，感兴趣就学。",bannerBg:"https://cdn.jsdelivr.net/gh/izhaong/izhaong.com-oss/site-data/bg-body/home_top_bg.webp",features:[{title:"大前端",details:"JavaScript、NodeJs、ES6、TypeScript、Vue框架、React等、小程序、混合开发Uniapp、Electron等大前端技术",link:"/web/",imgUrl:"/img/web.png"},{title:"后端&运维",details:"Java、Python、Golang、C++、K8s、Docker等技术",link:"/backend-opt/",imgUrl:"/img/ui.png"},{title:"其他技术",details:"物联网 嵌入式开发等其他文章",link:"/other-tech/",imgUrl:"/img/other.png"}]},regularPath:"/",relativePath:"index.md",key:"v-12c8c438",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"前提规范",frontmatter:{title:"前提规范",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/f697a2/",categories:["《前端项目基础建设》笔记"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/1.%E5%89%8D%E6%8F%90%E8%A7%84%E8%8C%83.html",relativePath:"《前端项目基础建设》笔记/1.前提规范.md",key:"v-e89d809a",path:"/pages/f697a2/",headers:[{level:2,title:"css",slug:"css",normalizedTitle:"css",charIndex:71}],headersStr:"css",content:"组件：CamelCased大驼峰命名\n\n文件及文件夹：kebab-case 短横线命名\n\n自定义函数：小驼峰camelCased命名\n\n\n# css\n\n公共样式 kebab-case命名\n\n自己写的样式\n\n----------------------------------------\n\n1）驼峰命名法\n\n**小驼峰命名法：**除第一个单词之外，其他单词首字母大写，例如：myFirstName、myLastName。常用于变量名，函数名。\n\n大驼峰命名法(又称为帕斯卡命名法)：相比小驼峰法，大驼峰法把第一个单词的首字母也大写了，例如：public class DataBaseUser。常用于类名，属性，命名空间等。\n\n2）下划线命名法\n\n名称中的每一个逻辑断点都用一个下划线来标记，例如：print_employee。下划线命名法是随着C语言的出现流行起来的，在UNIX/LIUNX这样的环境，以及GNU代码中使用非常普遍。\n\n3）匈牙利命名法\n\n其基本原则是，变量名=属性+类型+对象描述。通过在变量名前面加上相应的小写字母的符号标识作为前缀，标识出变量的作用域，类型等。\n\n这些符号可以多个同时使用，顺序是先m_（成员变量），再指针，再简单数据类型，再其他。例如：m_lpsStr，表示指向一个字符串的长指针成员变量。\n\n匈牙利命名法中常用的小写字母的前缀：\n\n匈牙利命名法中常用的小写字母的前缀：\n\n前　缀   类　　型\ni     整型\nn     短整型 (Short Int)\nl     长整型 (Long Int)\nc     有符号字符 (Char)\nby    字节 (Byte)\nw     Word\nb     布尔值 (Boolean)\ns     字符串型\na     数组 (Array)\np     指针(Pointer)\nlp    长指针(Long Pointer)\nm_    类的成员\nfn    函数\nh     Handle（句柄）",normalizedContent:"组件：camelcased大驼峰命名\n\n文件及文件夹：kebab-case 短横线命名\n\n自定义函数：小驼峰camelcased命名\n\n\n# css\n\n公共样式 kebab-case命名\n\n自己写的样式\n\n----------------------------------------\n\n1）驼峰命名法\n\n**小驼峰命名法：**除第一个单词之外，其他单词首字母大写，例如：myfirstname、mylastname。常用于变量名，函数名。\n\n大驼峰命名法(又称为帕斯卡命名法)：相比小驼峰法，大驼峰法把第一个单词的首字母也大写了，例如：public class databaseuser。常用于类名，属性，命名空间等。\n\n2）下划线命名法\n\n名称中的每一个逻辑断点都用一个下划线来标记，例如：print_employee。下划线命名法是随着c语言的出现流行起来的，在unix/liunx这样的环境，以及gnu代码中使用非常普遍。\n\n3）匈牙利命名法\n\n其基本原则是，变量名=属性+类型+对象描述。通过在变量名前面加上相应的小写字母的符号标识作为前缀，标识出变量的作用域，类型等。\n\n这些符号可以多个同时使用，顺序是先m_（成员变量），再指针，再简单数据类型，再其他。例如：m_lpsstr，表示指向一个字符串的长指针成员变量。\n\n匈牙利命名法中常用的小写字母的前缀：\n\n匈牙利命名法中常用的小写字母的前缀：\n\n前　缀   类　　型\ni     整型\nn     短整型 (short int)\nl     长整型 (long int)\nc     有符号字符 (char)\nby    字节 (byte)\nw     word\nb     布尔值 (boolean)\ns     字符串型\na     数组 (array)\np     指针(pointer)\nlp    长指针(long pointer)\nm_    类的成员\nfn    函数\nh     handle（句柄）",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"vue项目实例演示",frontmatter:{title:"vue项目实例演示",date:"2022-10-13T14:03:53.000Z",permalink:"/pages/7dd45e/",categories:["《前端项目基础建设》笔记"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/100.vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA.html",relativePath:"《前端项目基础建设》笔记/100.vue项目实例演示.md",key:"v-e175a41e",path:"/pages/7dd45e/",headers:[{level:2,title:"vue2",slug:"vue2",normalizedTitle:"vue2",charIndex:2}],headersStr:"vue2",content:'# vue2\n\n * npm init\n   \n   * ➜  vue-template git:(vue2-tpl) ✗ npm init\n     This utility will walk you through creating a package.json file.\n     It only covers the most common items, and tries to guess sensible defaults.\n     \n     See `npm help init` for definitive documentation on these fields\n     and exactly what they do.\n     \n     Use `npm install <pkg>` afterwards to install a package and\n     save it as a dependency in the package.json file.\n     \n     Press ^C at any time to quit.\n     package name: (vue-template) \n     version: (1.0.0) \n     description: vue2 template\n     entry point: (index.js) \n     test command: \n     git repository: (https://github.com/izhaong/vue-template.git) \n     keywords: vue2 template tpl\n     author: izhaong\n     license: (ISC) \n     About to write to /Users/izhaong/izhaong/Project_me/vue-template/package.json:\n     \n     {\n       "name": "vue-template",\n       "version": "1.0.0",\n       "description": "vue2 template",\n       "main": "index.js",\n       "scripts": {\n         "test": "echo \\"Error: no test specified\\" && exit 1"\n       },\n       "repository": {\n         "type": "git",\n         "url": "git+https://github.com/izhaong/vue-template.git"\n       },\n       "keywords": [\n         "vue2",\n         "template",\n         "tpl"\n       ],\n       "author": "izhaong",\n       "license": "ISC",\n       "bugs": {\n         "url": "https://github.com/izhaong/vue-template/issues"\n       },\n       "homepage": "https://github.com/izhaong/vue-template#readme"\n     }\n     \n     \n     Is this OK? (yes) \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     \n   \n   * npm init @eslint/config\n     \n     * ➜  vue-template git:(vue2-tpl) ✗ npm init @eslint/config\n       ✔ How would you like to use ESLint? · problems\n       ✔ What type of modules does your project use? · esm\n       ✔ Which framework does your project use? · vue\n       ✔ Does your project use TypeScript? · No / Yes\n       ✔ Where does your code run? · browser\n       ✔ What format do you want your config file to be in? · JavaScript\n       Local ESLint installation not found.\n       The config that you\'ve selected requires the following dependencies:\n       \n       eslint-plugin-vue@latest eslint@latest\n       ✔ Would you like to install them now? · No / Yes\n       ✔ Which package manager do you want to use? · yarn\n       Installing eslint-plugin-vue@latest, eslint@latest\n       yarn add v1.22.19\n       info No lockfile found.\n       ...\n       ✨  Done in 1.97s.\n       A config file was generated, but the config file itself may not follow your linting rules.\n       Successfully created .eslintrc.js file in /Users/izhaong/izhaong/Project_me/vue-template\n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       18\n       19\n       20\n       21\n       \n\n * vue-template\n   ├─.eslintrc.js\n   ├─package.json\n   └yarn.lock\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * 修改.eslintrc.js\n   \n   *     "env": {\n             "node": true\n         },\n     \t\t"extends": [\n             "eslint:recommended",\n             "plugin:vue/recommended"\n         ],\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     \n     * "plugin:vue/essential" ... base, 加上防止错误或意外行为的规则。\n     * "plugin:vue/strongly-recommended" ... 以上，加上规则，大大提高了代码的可读性和/或开发体验。\n     * "plugin:vue/recommended" ...以上，加上执行主观社区默认值的规则，以确保一致性。\n\n * 添加.eslintignore\n   \n   * public\n     dist\n     node_modules\n     build\n     \n     src/assets\n     src/static\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     \n   * \n\n * 编辑.vscode/setting.json 对eslint做配置\n   \n   * {\n       "vetur.validation.template": false,\n       "eslint.validate": [\n         "javascript",\n         "javascriptreact",\n         "vue"\n       ]\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     \n   \n   * 最后加上脚本\n     \n     *   "scripts": {\n           "lint:eslint": "eslint --cache --max-warnings 0  \\"{src,mock}/**/*.{vue,ts,tsx}\\" --fix",\n           "lint:fix": "eslint --fix --cache --ext .js,.jsx,.ts,.tsx,.vue --format=pretty ./src ",\n         }\n       \n       \n       1\n       2\n       3\n       4\n       \n     * \n\n * 安装prettier\n   \n   * yarn add --dev --exact prettier\n   \n   * ➜  vue-template git:(vue2-tpl) ✗ yarn add --dev --exact prettier\n     yarn add v1.22.19\n     [1/4] 🔍  Resolving packages...\n     [2/4] 🚚  Fetching packages...\n     [3/4] 🔗  Linking dependencies...\n     [4/4] 🔨  Building fresh packages...\n     \n     success Saved lockfile.\n     success Saved 1 new dependency.\n     info Direct dependencies\n     └─ prettier@2.7.1\n     info All dependencies\n     └─ prettier@2.7.1\n     ✨  Done in 0.68s.\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     \n   \n   * echo {}> prettier.config.js\n     \n     * module.exports = {\n         printWidth: 180,\n         semi: true,\n         vueIndentScriptAndStyle: true,\n         singleQuote: true,\n         trailingComma: \'all\',\n         proseWrap: \'never\',\n         htmlWhitespaceSensitivity: \'strict\',\n         endOfLine: \'auto\',\n       };\n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       \n     * \n   \n   * 添加.pretterignore\n     \n     * # Ignore artifacts:\n       build\n       coverage\n       \n       \n       1\n       2\n       3\n       \n\n * 处理eslint和prettier冲突问题\n   \n   * yarn add eslint-config-prettier -D\n   \n   * .eslintrc.js\n     \n     *     "extends": [\n               "eslint:recommended",\n               "plugin:vue/recommended",\n               "prettier"\n           ],\n       \n       \n       1\n       2\n       3\n       4\n       5\n       \n   \n   * 加上script\n     \n     *   "scripts": {\n           "lint:prettier": "prettier -c --write  \\"src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\\" --end-of-line auto"\n         }\n       \n       \n       1\n       2\n       3\n       \n\n * 添加stylelint\n   \n   * yarn add stylelint stylelint-config-standard -D\n   \n   * 添加.stylelintignore\n     \n     * /dist/*\n       /public/*\n       public/*\n       \n       \n       1\n       2\n       3\n       \n   \n   * 添加vue style 配置\n     \n     * yarn add postcss-html stylelint-config-recommended-vue -D\n   \n   * 添加stylelint.config.js\n     \n     * /*\n        * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n        * @Date: 2022-10-14 13:55:22\n        * @LastEditTime: 2022-10-14 14:31:15\n        * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n        * @Description:\n        * @FilePath: /vue-template/stylelint.config.js\n        */\n       module.exports = {\n         extends: ["stylelint-config-standard", "stylelint-config-prettier"],\n         overrides: [\n           {\n             files: ["*.vue", "**/*.vue"],\n             extends: ["stylelint-config-recommended-vue"],\n             rules: {\n               "unit-allowed-list": ["em", "rem", "s"],\n               "selector-pseudo-class-no-unknown": [\n                 true,\n                 {\n                   ignorePseudoClasses: ["deep", "global"],\n                 },\n               ],\n               "selector-pseudo-element-no-unknown": [\n                 true,\n                 {\n                   ignorePseudoElements: ["v-deep", "v-global", "v-slotted"],\n                 },\n               ],\n             },\n           },\n         ],\n         rules: {\n           "selector-class-pattern": null,\n           "selector-pseudo-class-no-unknown": [\n             true,\n             {\n               ignorePseudoClasses: ["global"],\n             },\n           ],\n           "selector-pseudo-element-no-unknown": [\n             true,\n             {\n               ignorePseudoElements: ["v-deep"],\n             },\n           ],\n           "at-rule-no-unknown": [\n             true,\n             {\n               ignoreAtRules: [\n                 "tailwind",\n                 "apply",\n                 "variants",\n                 "responsive",\n                 "screen",\n                 "function",\n                 "if",\n                 "each",\n                 "include",\n                 "mixin",\n               ],\n             },\n           ],\n           "no-empty-source": null,\n           "named-grid-areas-no-invalid": null,\n           "unicode-bom": "never",\n           "no-descending-specificity": null,\n           "font-family-no-missing-generic-family-keyword": null,\n           "declaration-colon-space-after": "always-single-line",\n           "declaration-colon-space-before": "never",\n           // \'declaration-block-trailing-semicolon\': \'always\',\n           "rule-empty-line-before": [\n             "always",\n             {\n               ignore: ["after-comment", "first-nested"],\n             },\n           ],\n           "unit-no-unknown": [true, { ignoreUnits: ["rpx"] }],\n           "order/order": [\n             [\n               "dollar-variables",\n               "custom-properties",\n               "at-rules",\n               "declarations",\n               {\n                 type: "at-rule",\n                 name: "supports",\n               },\n               {\n                 type: "at-rule",\n                 name: "media",\n               },\n               "rules",\n             ],\n             { severity: "warning" },\n           ],\n         },\n         ignoreFiles: ["**/*.js", "**/*.jsx", "**/*.tsx", "**/*.ts"],\n       };\n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       18\n       19\n       20\n       21\n       22\n       23\n       24\n       25\n       26\n       27\n       28\n       29\n       30\n       31\n       32\n       33\n       34\n       35\n       36\n       37\n       38\n       39\n       40\n       41\n       42\n       43\n       44\n       45\n       46\n       47\n       48\n       49\n       50\n       51\n       52\n       53\n       54\n       55\n       56\n       57\n       58\n       59\n       60\n       61\n       62\n       63\n       64\n       65\n       66\n       67\n       68\n       69\n       70\n       71\n       72\n       73\n       74\n       75\n       76\n       77\n       78\n       79\n       80\n       81\n       82\n       83\n       84\n       85\n       86\n       87\n       88\n       89\n       90\n       91\n       92\n       93\n       94\n       95\n       96\n       97\n       98\n       99\n       \n     * \n\n * Git hooks\n   \n   * 安装husky and lint-staged:\n     \n     * yarn add --dev husky lint-staged\n       npx husky install\n       npm set-script prepare "husky install"\n       npx husky add .husky/pre-commit "npx lint-staged"\n       \n       \n       1\n       2\n       3\n       4\n       \n   \n   * 配置 package.json\n     \n     *   "lint-staged": {\n           "*.{js,ts,vue}": "eslint --fix",\n           "*.{json,yml,css,scss}": "prettier --write"\n         }\n       \n       \n       1\n       2\n       3\n       4\n       \n   \n   * commit msg 校验\n     \n     * yarn add cz-git @commitlint/cli @commitlint/config-conventional -D\n     \n     * 配置package.json\n       \n       *   "config": {\n             "commitizen": {\n               "path": "node_modules/cz-git",\n         \t\t\t"useEmoji": true\n             }\n           }\n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         \n     \n     * 增加自定义配置文件 commitment.config.js\n       \n       * const fs = require(\'fs\')\n         const path = require(\'path\')\n         const { execSync } = require(\'child_process\')\n         \n         const scopes = fs\n           .readdirSync(path.resolve(__dirname, \'src\'), { withFileTypes: true })\n           .filter((dirent) => dirent.isDirectory())\n           .map((dirent) => dirent.name.replace(/s$/, \'\'))\n         \n         // precomputed scope\n         const scopeComplete = execSync(\'git status --porcelain || true\')\n           .toString()\n           .trim()\n           .split(\'\\n\')\n           .find((r) => ~r.indexOf(\'M  src\'))\n           ?.replace(/(\\/)/g, \'%%\')\n           ?.match(/src%%((\\w|-)*)/)?.[1]\n           ?.replace(/s$/, \'\')\n         \n         /** @type {import(\'cz-git\').UserConfig} */\n         module.exports = {\n           ignores: [(commit) => commit.includes(\'init\')],\n           extends: [\'@commitlint/config-conventional\'],\n           rules: {\n             \'body-leading-blank\': [2, \'always\'],\n             \'footer-leading-blank\': [1, \'always\'],\n             \'header-max-length\': [2, \'always\', 108],\n             \'subject-empty\': [2, \'never\'],\n             \'type-empty\': [2, \'never\'],\n             \'subject-case\': [0],\n             \'type-enum\': [2, \'always\', [\'feat\', \'fix\', \'perf\', \'style\', \'docs\', \'test\', \'refactor\', \'build\', \'ci\', \'chore\', \'revert\', \'wip\', \'workflow\', \'types\', \'release\']]\n           },\n           prompt: {\n             /** @use `yarn commit :f` */\n             alias: {\n               f: \'docs: fix typos\',\n               r: \'docs: update README\',\n               s: \'style: update code format\',\n               b: \'build: bump dependencies\',\n               c: \'chore: update config\'\n             },\n             customScopesAlign: !scopeComplete ? \'top\' : \'bottom\',\n             defaultScope: scopeComplete,\n             scopes: [...scopes, \'mock\'],\n             allowEmptyIssuePrefixs: false,\n             allowCustomIssuePrefixs: false,\n         \n             // English\n             typesAppend: [\n               { value: \'wip\', name: \'wip:      work in process\' },\n               { value: \'workflow\', name: \'workflow: workflow improvements\' },\n               { value: \'types\', name: \'types:    type definition file changes\' }\n             ],\n         \n             // 中英文对照版\n             messages: {\n               type: \'选择你要提交的类型 :\',\n               scope: \'选择一个提交范围 (可选):\',\n               customScope: \'请输入自定义的提交范围 :\',\n               subject: \'填写简短精炼的变更描述 :\\n\',\n               body: \'填写更加详细的变更描述 (可选)。使用 "|" 换行 :\\n\',\n               breaking: \'列举非兼容性重大的变更 (可选)。使用 "|" 换行 :\\n\',\n               footerPrefixsSelect: \'选择关联issue前缀 (可选):\',\n               customFooterPrefixs: \'输入自定义issue前缀 :\',\n               footer: \'列举关联issue (可选) 例如: #31, #I3244 :\\n\',\n               confirmCommit: \'是否提交或修改commit ?\'\n             },\n             types: [\n               { value: \'feat\', name: \'feat:     新增功能\' },\n               { value: \'fix\', name: \'fix:      修复缺陷\' },\n               { value: \'docs\', name: \'docs:     文档变更\' },\n               { value: \'style\', name: \'style:    代码格式\' },\n               { value: \'refactor\', name: \'refactor: 代码重构\' },\n               { value: \'perf\', name: \'perf:     性能优化\' },\n               { value: \'test\', name: \'test:     添加疏漏测试或已有测试改动\' },\n               { value: \'build\', name: \'build:    构建流程、外部依赖变更 (如升级 npm 包、修改打包配置等)\' },\n               { value: \'ci\', name: \'ci:       修改 CI 配置、脚本\' },\n               { value: \'revert\', name: \'revert:   回滚 commit\' },\n               { value: \'chore\', name: \'chore:    对构建过程或辅助工具和库的更改 (不影响源文件、测试用例)\' },\n               { value: \'wip\', name: \'wip:      正在开发中\' },\n               { value: \'workflow\', name: \'workflow: 工作流程改进\' },\n               { value: \'types\', name: \'types:    类型定义文件修改\' }\n             ],\n             emptyScopesAlias: \'empty:      不填写\',\n             customScopesAlias: \'custom:     自定义\'\n           }\n         }\n         \n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         9\n         10\n         11\n         12\n         13\n         14\n         15\n         16\n         17\n         18\n         19\n         20\n         21\n         22\n         23\n         24\n         25\n         26\n         27\n         28\n         29\n         30\n         31\n         32\n         33\n         34\n         35\n         36\n         37\n         38\n         39\n         40\n         41\n         42\n         43\n         44\n         45\n         46\n         47\n         48\n         49\n         50\n         51\n         52\n         53\n         54\n         55\n         56\n         57\n         58\n         59\n         60\n         61\n         62\n         63\n         64\n         65\n         66\n         67\n         68\n         69\n         70\n         71\n         72\n         73\n         74\n         75\n         76\n         77\n         78\n         79\n         80\n         81\n         82\n         83\n         84\n         85\n         86\n         87\n         88\n         \n       \n       * 加上git husky\n         \n         * yarn add -D czg\n         \n         * 加上script\n           \n           * "scripts": {\n                "commit": "czg"\n             }\n             \n             \n             1\n             2\n             3\n             \n     \n     * 增加 conventional-changelog-cli脚本自动生成changelog\n       \n       * yarn add conventional-changelog-cli -D\n       \n       * 添加脚本\n         \n         * "scripts": {\n                 "log": "conventional-changelog -p angular -i CHANGELOG.md -s"\n           }\n           \n           \n           1\n           2\n           3\n           \n   \n   * 最后package.json 可能有点乱了， 使用 sort-package-json整理下\n     \n     * yarn add sort-package-json -D\n     * npx sort-package-json',normalizedContent:'# vue2\n\n * npm init\n   \n   * ➜  vue-template git:(vue2-tpl) ✗ npm init\n     this utility will walk you through creating a package.json file.\n     it only covers the most common items, and tries to guess sensible defaults.\n     \n     see `npm help init` for definitive documentation on these fields\n     and exactly what they do.\n     \n     use `npm install <pkg>` afterwards to install a package and\n     save it as a dependency in the package.json file.\n     \n     press ^c at any time to quit.\n     package name: (vue-template) \n     version: (1.0.0) \n     description: vue2 template\n     entry point: (index.js) \n     test command: \n     git repository: (https://github.com/izhaong/vue-template.git) \n     keywords: vue2 template tpl\n     author: izhaong\n     license: (isc) \n     about to write to /users/izhaong/izhaong/project_me/vue-template/package.json:\n     \n     {\n       "name": "vue-template",\n       "version": "1.0.0",\n       "description": "vue2 template",\n       "main": "index.js",\n       "scripts": {\n         "test": "echo \\"error: no test specified\\" && exit 1"\n       },\n       "repository": {\n         "type": "git",\n         "url": "git+https://github.com/izhaong/vue-template.git"\n       },\n       "keywords": [\n         "vue2",\n         "template",\n         "tpl"\n       ],\n       "author": "izhaong",\n       "license": "isc",\n       "bugs": {\n         "url": "https://github.com/izhaong/vue-template/issues"\n       },\n       "homepage": "https://github.com/izhaong/vue-template#readme"\n     }\n     \n     \n     is this ok? (yes) \n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     15\n     16\n     17\n     18\n     19\n     20\n     21\n     22\n     23\n     24\n     25\n     26\n     27\n     28\n     29\n     30\n     31\n     32\n     33\n     34\n     35\n     36\n     37\n     38\n     39\n     40\n     41\n     42\n     43\n     44\n     45\n     46\n     47\n     48\n     49\n     \n   \n   * npm init @eslint/config\n     \n     * ➜  vue-template git:(vue2-tpl) ✗ npm init @eslint/config\n       ✔ how would you like to use eslint? · problems\n       ✔ what type of modules does your project use? · esm\n       ✔ which framework does your project use? · vue\n       ✔ does your project use typescript? · no / yes\n       ✔ where does your code run? · browser\n       ✔ what format do you want your config file to be in? · javascript\n       local eslint installation not found.\n       the config that you\'ve selected requires the following dependencies:\n       \n       eslint-plugin-vue@latest eslint@latest\n       ✔ would you like to install them now? · no / yes\n       ✔ which package manager do you want to use? · yarn\n       installing eslint-plugin-vue@latest, eslint@latest\n       yarn add v1.22.19\n       info no lockfile found.\n       ...\n       ✨  done in 1.97s.\n       a config file was generated, but the config file itself may not follow your linting rules.\n       successfully created .eslintrc.js file in /users/izhaong/izhaong/project_me/vue-template\n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       18\n       19\n       20\n       21\n       \n\n * vue-template\n   ├─.eslintrc.js\n   ├─package.json\n   └yarn.lock\n   \n   \n   1\n   2\n   3\n   4\n   \n\n * 修改.eslintrc.js\n   \n   *     "env": {\n             "node": true\n         },\n     \t\t"extends": [\n             "eslint:recommended",\n             "plugin:vue/recommended"\n         ],\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     \n     * "plugin:vue/essential" ... base, 加上防止错误或意外行为的规则。\n     * "plugin:vue/strongly-recommended" ... 以上，加上规则，大大提高了代码的可读性和/或开发体验。\n     * "plugin:vue/recommended" ...以上，加上执行主观社区默认值的规则，以确保一致性。\n\n * 添加.eslintignore\n   \n   * public\n     dist\n     node_modules\n     build\n     \n     src/assets\n     src/static\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     \n   * \n\n * 编辑.vscode/setting.json 对eslint做配置\n   \n   * {\n       "vetur.validation.template": false,\n       "eslint.validate": [\n         "javascript",\n         "javascriptreact",\n         "vue"\n       ]\n     }\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     \n   \n   * 最后加上脚本\n     \n     *   "scripts": {\n           "lint:eslint": "eslint --cache --max-warnings 0  \\"{src,mock}/**/*.{vue,ts,tsx}\\" --fix",\n           "lint:fix": "eslint --fix --cache --ext .js,.jsx,.ts,.tsx,.vue --format=pretty ./src ",\n         }\n       \n       \n       1\n       2\n       3\n       4\n       \n     * \n\n * 安装prettier\n   \n   * yarn add --dev --exact prettier\n   \n   * ➜  vue-template git:(vue2-tpl) ✗ yarn add --dev --exact prettier\n     yarn add v1.22.19\n     [1/4] 🔍  resolving packages...\n     [2/4] 🚚  fetching packages...\n     [3/4] 🔗  linking dependencies...\n     [4/4] 🔨  building fresh packages...\n     \n     success saved lockfile.\n     success saved 1 new dependency.\n     info direct dependencies\n     └─ prettier@2.7.1\n     info all dependencies\n     └─ prettier@2.7.1\n     ✨  done in 0.68s.\n     \n     \n     1\n     2\n     3\n     4\n     5\n     6\n     7\n     8\n     9\n     10\n     11\n     12\n     13\n     14\n     \n   \n   * echo {}> prettier.config.js\n     \n     * module.exports = {\n         printwidth: 180,\n         semi: true,\n         vueindentscriptandstyle: true,\n         singlequote: true,\n         trailingcomma: \'all\',\n         prosewrap: \'never\',\n         htmlwhitespacesensitivity: \'strict\',\n         endofline: \'auto\',\n       };\n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       \n     * \n   \n   * 添加.pretterignore\n     \n     * # ignore artifacts:\n       build\n       coverage\n       \n       \n       1\n       2\n       3\n       \n\n * 处理eslint和prettier冲突问题\n   \n   * yarn add eslint-config-prettier -d\n   \n   * .eslintrc.js\n     \n     *     "extends": [\n               "eslint:recommended",\n               "plugin:vue/recommended",\n               "prettier"\n           ],\n       \n       \n       1\n       2\n       3\n       4\n       5\n       \n   \n   * 加上script\n     \n     *   "scripts": {\n           "lint:prettier": "prettier -c --write  \\"src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\\" --end-of-line auto"\n         }\n       \n       \n       1\n       2\n       3\n       \n\n * 添加stylelint\n   \n   * yarn add stylelint stylelint-config-standard -d\n   \n   * 添加.stylelintignore\n     \n     * /dist/*\n       /public/*\n       public/*\n       \n       \n       1\n       2\n       3\n       \n   \n   * 添加vue style 配置\n     \n     * yarn add postcss-html stylelint-config-recommended-vue -d\n   \n   * 添加stylelint.config.js\n     \n     * /*\n        * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n        * @date: 2022-10-14 13:55:22\n        * @lastedittime: 2022-10-14 14:31:15\n        * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n        * @description:\n        * @filepath: /vue-template/stylelint.config.js\n        */\n       module.exports = {\n         extends: ["stylelint-config-standard", "stylelint-config-prettier"],\n         overrides: [\n           {\n             files: ["*.vue", "**/*.vue"],\n             extends: ["stylelint-config-recommended-vue"],\n             rules: {\n               "unit-allowed-list": ["em", "rem", "s"],\n               "selector-pseudo-class-no-unknown": [\n                 true,\n                 {\n                   ignorepseudoclasses: ["deep", "global"],\n                 },\n               ],\n               "selector-pseudo-element-no-unknown": [\n                 true,\n                 {\n                   ignorepseudoelements: ["v-deep", "v-global", "v-slotted"],\n                 },\n               ],\n             },\n           },\n         ],\n         rules: {\n           "selector-class-pattern": null,\n           "selector-pseudo-class-no-unknown": [\n             true,\n             {\n               ignorepseudoclasses: ["global"],\n             },\n           ],\n           "selector-pseudo-element-no-unknown": [\n             true,\n             {\n               ignorepseudoelements: ["v-deep"],\n             },\n           ],\n           "at-rule-no-unknown": [\n             true,\n             {\n               ignoreatrules: [\n                 "tailwind",\n                 "apply",\n                 "variants",\n                 "responsive",\n                 "screen",\n                 "function",\n                 "if",\n                 "each",\n                 "include",\n                 "mixin",\n               ],\n             },\n           ],\n           "no-empty-source": null,\n           "named-grid-areas-no-invalid": null,\n           "unicode-bom": "never",\n           "no-descending-specificity": null,\n           "font-family-no-missing-generic-family-keyword": null,\n           "declaration-colon-space-after": "always-single-line",\n           "declaration-colon-space-before": "never",\n           // \'declaration-block-trailing-semicolon\': \'always\',\n           "rule-empty-line-before": [\n             "always",\n             {\n               ignore: ["after-comment", "first-nested"],\n             },\n           ],\n           "unit-no-unknown": [true, { ignoreunits: ["rpx"] }],\n           "order/order": [\n             [\n               "dollar-variables",\n               "custom-properties",\n               "at-rules",\n               "declarations",\n               {\n                 type: "at-rule",\n                 name: "supports",\n               },\n               {\n                 type: "at-rule",\n                 name: "media",\n               },\n               "rules",\n             ],\n             { severity: "warning" },\n           ],\n         },\n         ignorefiles: ["**/*.js", "**/*.jsx", "**/*.tsx", "**/*.ts"],\n       };\n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       18\n       19\n       20\n       21\n       22\n       23\n       24\n       25\n       26\n       27\n       28\n       29\n       30\n       31\n       32\n       33\n       34\n       35\n       36\n       37\n       38\n       39\n       40\n       41\n       42\n       43\n       44\n       45\n       46\n       47\n       48\n       49\n       50\n       51\n       52\n       53\n       54\n       55\n       56\n       57\n       58\n       59\n       60\n       61\n       62\n       63\n       64\n       65\n       66\n       67\n       68\n       69\n       70\n       71\n       72\n       73\n       74\n       75\n       76\n       77\n       78\n       79\n       80\n       81\n       82\n       83\n       84\n       85\n       86\n       87\n       88\n       89\n       90\n       91\n       92\n       93\n       94\n       95\n       96\n       97\n       98\n       99\n       \n     * \n\n * git hooks\n   \n   * 安装husky and lint-staged:\n     \n     * yarn add --dev husky lint-staged\n       npx husky install\n       npm set-script prepare "husky install"\n       npx husky add .husky/pre-commit "npx lint-staged"\n       \n       \n       1\n       2\n       3\n       4\n       \n   \n   * 配置 package.json\n     \n     *   "lint-staged": {\n           "*.{js,ts,vue}": "eslint --fix",\n           "*.{json,yml,css,scss}": "prettier --write"\n         }\n       \n       \n       1\n       2\n       3\n       4\n       \n   \n   * commit msg 校验\n     \n     * yarn add cz-git @commitlint/cli @commitlint/config-conventional -d\n     \n     * 配置package.json\n       \n       *   "config": {\n             "commitizen": {\n               "path": "node_modules/cz-git",\n         \t\t\t"useemoji": true\n             }\n           }\n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         \n     \n     * 增加自定义配置文件 commitment.config.js\n       \n       * const fs = require(\'fs\')\n         const path = require(\'path\')\n         const { execsync } = require(\'child_process\')\n         \n         const scopes = fs\n           .readdirsync(path.resolve(__dirname, \'src\'), { withfiletypes: true })\n           .filter((dirent) => dirent.isdirectory())\n           .map((dirent) => dirent.name.replace(/s$/, \'\'))\n         \n         // precomputed scope\n         const scopecomplete = execsync(\'git status --porcelain || true\')\n           .tostring()\n           .trim()\n           .split(\'\\n\')\n           .find((r) => ~r.indexof(\'m  src\'))\n           ?.replace(/(\\/)/g, \'%%\')\n           ?.match(/src%%((\\w|-)*)/)?.[1]\n           ?.replace(/s$/, \'\')\n         \n         /** @type {import(\'cz-git\').userconfig} */\n         module.exports = {\n           ignores: [(commit) => commit.includes(\'init\')],\n           extends: [\'@commitlint/config-conventional\'],\n           rules: {\n             \'body-leading-blank\': [2, \'always\'],\n             \'footer-leading-blank\': [1, \'always\'],\n             \'header-max-length\': [2, \'always\', 108],\n             \'subject-empty\': [2, \'never\'],\n             \'type-empty\': [2, \'never\'],\n             \'subject-case\': [0],\n             \'type-enum\': [2, \'always\', [\'feat\', \'fix\', \'perf\', \'style\', \'docs\', \'test\', \'refactor\', \'build\', \'ci\', \'chore\', \'revert\', \'wip\', \'workflow\', \'types\', \'release\']]\n           },\n           prompt: {\n             /** @use `yarn commit :f` */\n             alias: {\n               f: \'docs: fix typos\',\n               r: \'docs: update readme\',\n               s: \'style: update code format\',\n               b: \'build: bump dependencies\',\n               c: \'chore: update config\'\n             },\n             customscopesalign: !scopecomplete ? \'top\' : \'bottom\',\n             defaultscope: scopecomplete,\n             scopes: [...scopes, \'mock\'],\n             allowemptyissueprefixs: false,\n             allowcustomissueprefixs: false,\n         \n             // english\n             typesappend: [\n               { value: \'wip\', name: \'wip:      work in process\' },\n               { value: \'workflow\', name: \'workflow: workflow improvements\' },\n               { value: \'types\', name: \'types:    type definition file changes\' }\n             ],\n         \n             // 中英文对照版\n             messages: {\n               type: \'选择你要提交的类型 :\',\n               scope: \'选择一个提交范围 (可选):\',\n               customscope: \'请输入自定义的提交范围 :\',\n               subject: \'填写简短精炼的变更描述 :\\n\',\n               body: \'填写更加详细的变更描述 (可选)。使用 "|" 换行 :\\n\',\n               breaking: \'列举非兼容性重大的变更 (可选)。使用 "|" 换行 :\\n\',\n               footerprefixsselect: \'选择关联issue前缀 (可选):\',\n               customfooterprefixs: \'输入自定义issue前缀 :\',\n               footer: \'列举关联issue (可选) 例如: #31, #i3244 :\\n\',\n               confirmcommit: \'是否提交或修改commit ?\'\n             },\n             types: [\n               { value: \'feat\', name: \'feat:     新增功能\' },\n               { value: \'fix\', name: \'fix:      修复缺陷\' },\n               { value: \'docs\', name: \'docs:     文档变更\' },\n               { value: \'style\', name: \'style:    代码格式\' },\n               { value: \'refactor\', name: \'refactor: 代码重构\' },\n               { value: \'perf\', name: \'perf:     性能优化\' },\n               { value: \'test\', name: \'test:     添加疏漏测试或已有测试改动\' },\n               { value: \'build\', name: \'build:    构建流程、外部依赖变更 (如升级 npm 包、修改打包配置等)\' },\n               { value: \'ci\', name: \'ci:       修改 ci 配置、脚本\' },\n               { value: \'revert\', name: \'revert:   回滚 commit\' },\n               { value: \'chore\', name: \'chore:    对构建过程或辅助工具和库的更改 (不影响源文件、测试用例)\' },\n               { value: \'wip\', name: \'wip:      正在开发中\' },\n               { value: \'workflow\', name: \'workflow: 工作流程改进\' },\n               { value: \'types\', name: \'types:    类型定义文件修改\' }\n             ],\n             emptyscopesalias: \'empty:      不填写\',\n             customscopesalias: \'custom:     自定义\'\n           }\n         }\n         \n         \n         \n         1\n         2\n         3\n         4\n         5\n         6\n         7\n         8\n         9\n         10\n         11\n         12\n         13\n         14\n         15\n         16\n         17\n         18\n         19\n         20\n         21\n         22\n         23\n         24\n         25\n         26\n         27\n         28\n         29\n         30\n         31\n         32\n         33\n         34\n         35\n         36\n         37\n         38\n         39\n         40\n         41\n         42\n         43\n         44\n         45\n         46\n         47\n         48\n         49\n         50\n         51\n         52\n         53\n         54\n         55\n         56\n         57\n         58\n         59\n         60\n         61\n         62\n         63\n         64\n         65\n         66\n         67\n         68\n         69\n         70\n         71\n         72\n         73\n         74\n         75\n         76\n         77\n         78\n         79\n         80\n         81\n         82\n         83\n         84\n         85\n         86\n         87\n         88\n         \n       \n       * 加上git husky\n         \n         * yarn add -d czg\n         \n         * 加上script\n           \n           * "scripts": {\n                "commit": "czg"\n             }\n             \n             \n             1\n             2\n             3\n             \n     \n     * 增加 conventional-changelog-cli脚本自动生成changelog\n       \n       * yarn add conventional-changelog-cli -d\n       \n       * 添加脚本\n         \n         * "scripts": {\n                 "log": "conventional-changelog -p angular -i changelog.md -s"\n           }\n           \n           \n           1\n           2\n           3\n           \n   \n   * 最后package.json 可能有点乱了， 使用 sort-package-json整理下\n     \n     * yarn add sort-package-json -d\n     * npx sort-package-json',charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"eslint",frontmatter:{title:"eslint",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/d642ef/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/30.eslint.html",relativePath:"《前端项目基础建设》笔记/30.eslint.md",key:"v-a6df536c",path:"/pages/d642ef/",headers:[{level:3,title:"搭配vue使用",slug:"搭配vue使用",normalizedTitle:"搭配vue使用",charIndex:883},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:2,title:"搭配typescript使用",slug:"搭配typescript使用",normalizedTitle:"搭配typescript使用",charIndex:2365},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:2691},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:931},{level:2,title:"搭配prettier使用",slug:"搭配prettier使用",normalizedTitle:"搭配prettier使用",charIndex:3034}],headersStr:"搭配vue使用  搭配typescript使用 安装 配置 搭配prettier使用",content:' * npm init @eslint/config\n\nvue-template git:(vue2-tpl) ✗ npm init @eslint/config\n✔ How would you like to use ESLint? · problems\n✔ What type of modules does your project use? · esm\n✔ Which framework does your project use? · vue\n✔ Does your project use TypeScript? · No / Yes\n✔ Where does your code run? · browser\n✔ What format do you want your config file to be in? · JavaScript\nLocal ESLint installation not found.\nThe config that you\'ve selected requires the following dependencies:\n\neslint-plugin-vue@latest eslint@latest\n✔ Would you like to install them now? · No / Yes\n✔ Which package manager do you want to use? · yarn\nInstalling eslint-plugin-vue@latest, eslint@latest\nyarn add v1.22.19\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 🔨  Building fresh packages...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 搭配vue使用\n\nvue2.6: yarn add eslint-plugin-vue -D\n\n配置eslintrc\n\n/*\n * @Author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Date: 2022-08-31 16:32:52\n * @LastEditTime: 2022-09-28 16:36:41\n * @LastEditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @Description:\n * @FilePath: /yitui-admin/.eslintrc.js\n */\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2021: true,\n    node: true\n  },\n  extends: [\'eslint:recommended\', \'plugin:vue/recommended\', \'prettier\'],\n  overrides: [],\n  parserOptions: {\n    ecmaVersion: \'latest\'\n  },\n  plugins: [\'vue\'],\n  rules: {}\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n * vscode配置\n   \n   {\n   \t"[javascriptreact]": {\n       "editor.defaultFormatter": "dbaeumer.vscode-eslint"\n     },  \n     "vetur.format.defaultFormatter.js": "prettier-eslint"\n   \n     // auto save\n     "editor.codeActionsOnSave": {\n       "source.fixAll.eslint": true\n     },\n     "[vue]": {\n       "editor.defaultFormatter": "octref.vetur",\n       "editor.codeActionsOnSave": {\n         "source.fixAll.eslint": true\n       }\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n\n * [propName:string]: any // 表示动态添加属性\n\ninterface UserSchema2{\n   readonly name:string, // 只读属性\n    age:number|string, // 接口中使用联合类型\n    sex?:string // 表示存疑, 该属性可选\n    [propName:string]: any // 表示动态添加属性\n}\n\nlet user2:UserSchema2 = {name:\'王五\',age:18,weight:180}\n\nconsole.log(user2);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n#\n\n\n# 搭配typescript使用\n\n> https://typescript-eslint.io/\n\n * parser: \'@typescript-eslint/parser\'\n   \n   这使得ESLint能够理解TypeScript的语法。\n   \n   这是必需的，否则ESLint将在解析TypeScript代码时抛出错误，就像它是常规的JavaScript一样。\n\n * @typescript-eslint/eslint-plugin\n   \n   这允许您在代码库中使用这些规则。\n\n * eslint:recommended是eslint内置的“推荐”配置-它打开了一个小的、合理的规则集，这些规则用来检测众所周知的最佳实践。\n\n\n# 安装\n\nyarn add --dev eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n\n# 配置\n\nmodule.exports = {\n  root: true,\n  parser: \'@typescript-eslint/parser\',\n  plugins: [\n    \'@typescript-eslint\',\n  ],\n  extends: [\n    \'eslint:recommended\',\n    \'plugin:@typescript-eslint/recommended\',\n  ],\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 搭配prettier使用\n\n这个放在了prettier文章中讲了',normalizedContent:' * npm init @eslint/config\n\nvue-template git:(vue2-tpl) ✗ npm init @eslint/config\n✔ how would you like to use eslint? · problems\n✔ what type of modules does your project use? · esm\n✔ which framework does your project use? · vue\n✔ does your project use typescript? · no / yes\n✔ where does your code run? · browser\n✔ what format do you want your config file to be in? · javascript\nlocal eslint installation not found.\nthe config that you\'ve selected requires the following dependencies:\n\neslint-plugin-vue@latest eslint@latest\n✔ would you like to install them now? · no / yes\n✔ which package manager do you want to use? · yarn\ninstalling eslint-plugin-vue@latest, eslint@latest\nyarn add v1.22.19\n[1/4] 🔍  resolving packages...\n[2/4] 🚚  fetching packages...\n[3/4] 🔗  linking dependencies...\n[4/4] 🔨  building fresh packages...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 搭配vue使用\n\nvue2.6: yarn add eslint-plugin-vue -d\n\n配置eslintrc\n\n/*\n * @author: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @date: 2022-08-31 16:32:52\n * @lastedittime: 2022-09-28 16:36:41\n * @lasteditors: 仲灏<izhaong@outlook.com>🌶🌶🌶\n * @description:\n * @filepath: /yitui-admin/.eslintrc.js\n */\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2021: true,\n    node: true\n  },\n  extends: [\'eslint:recommended\', \'plugin:vue/recommended\', \'prettier\'],\n  overrides: [],\n  parseroptions: {\n    ecmaversion: \'latest\'\n  },\n  plugins: [\'vue\'],\n  rules: {}\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n * vscode配置\n   \n   {\n   \t"[javascriptreact]": {\n       "editor.defaultformatter": "dbaeumer.vscode-eslint"\n     },  \n     "vetur.format.defaultformatter.js": "prettier-eslint"\n   \n     // auto save\n     "editor.codeactionsonsave": {\n       "source.fixall.eslint": true\n     },\n     "[vue]": {\n       "editor.defaultformatter": "octref.vetur",\n       "editor.codeactionsonsave": {\n         "source.fixall.eslint": true\n       }\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n\n * [propname:string]: any // 表示动态添加属性\n\ninterface userschema2{\n   readonly name:string, // 只读属性\n    age:number|string, // 接口中使用联合类型\n    sex?:string // 表示存疑, 该属性可选\n    [propname:string]: any // 表示动态添加属性\n}\n\nlet user2:userschema2 = {name:\'王五\',age:18,weight:180}\n\nconsole.log(user2);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n#\n\n\n# 搭配typescript使用\n\n> https://typescript-eslint.io/\n\n * parser: \'@typescript-eslint/parser\'\n   \n   这使得eslint能够理解typescript的语法。\n   \n   这是必需的，否则eslint将在解析typescript代码时抛出错误，就像它是常规的javascript一样。\n\n * @typescript-eslint/eslint-plugin\n   \n   这允许您在代码库中使用这些规则。\n\n * eslint:recommended是eslint内置的“推荐”配置-它打开了一个小的、合理的规则集，这些规则用来检测众所周知的最佳实践。\n\n\n# 安装\n\nyarn add --dev eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n\n# 配置\n\nmodule.exports = {\n  root: true,\n  parser: \'@typescript-eslint/parser\',\n  plugins: [\n    \'@typescript-eslint\',\n  ],\n  extends: [\n    \'eslint:recommended\',\n    \'plugin:@typescript-eslint/recommended\',\n  ],\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 搭配prettier使用\n\n这个放在了prettier文章中讲了',charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"prettier",frontmatter:{title:"prettier",date:"2022-05-23T15:34:10.000Z",permalink:"/pages/0aa7d0/",categories:["《前端项目基础建设》笔记"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/35.prettier.html",relativePath:"《前端项目基础建设》笔记/35.prettier.md",key:"v-46a7d210",path:"/pages/0aa7d0/",headers:[{level:2,title:"基本使用",slug:"基本使用",normalizedTitle:"基本使用",charIndex:2},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:11},{level:3,title:"创建配置文件",slug:"创建配置文件",normalizedTitle:"创建配置文件",charIndex:51},{level:3,title:"创建忽略文件",slug:"创建忽略文件",normalizedTitle:"创建忽略文件",charIndex:373},{level:3,title:"脚本命令",slug:"脚本命令",normalizedTitle:"脚本命令",charIndex:609},{level:2,title:"进阶使用",slug:"进阶使用",normalizedTitle:"进阶使用",charIndex:934},{level:3,title:"搭配编辑器使用",slug:"搭配编辑器使用",normalizedTitle:"搭配编辑器使用",charIndex:943},{level:3,title:"搭配eslint使用",slug:"搭配eslint使用",normalizedTitle:"搭配eslint使用",charIndex:1244},{level:2,title:"结合Git Hooks 使用",slug:"结合git-hooks-使用",normalizedTitle:"结合git hooks 使用",charIndex:1737}],headersStr:"基本使用 安装 创建配置文件 创建忽略文件 脚本命令 进阶使用 搭配编辑器使用 搭配eslint使用 结合Git Hooks 使用",content:'# 基本使用\n\n\n# 安装\n\nyarn add --dev --exact prettier\n\n\n# 创建配置文件\n\n让编辑器和其他工具知道您正在使用 Prettier\n\necho {}> .prettierrc.json\n\n{\n    "printWidth": 100,\n    "semi": true,\n    "vueIndentScriptAndStyle": true,\n    "singleQuote": true,\n    "trailingComma": "all",\n    "proseWrap": "never",\n    "htmlWhitespaceSensitivity": "strict",\n    "endOfLine": "auto"\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 创建忽略文件\n\n让 Prettier CLI 和编辑器知道哪些文件不能格式化\n\n.prettierignore建立在你的 .gitignore 和 .eslintignore上的\n\n# Ignore artifacts:\nbuild\ncoverage\n\n/dist/*\n.local\n.output.js\n/node_modules/**\n\n**/*.svg\n**/*.sh\n\n/public/*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 脚本命令\n\nnpx不明白的可以看我另一篇文章\n\n * 格式化: npx prettier --write .(会格式化我们所有的文件,出prettierignore gitignore和eslintignore中的)\n\n我们可以命令加入到script中\n\n// package.json\n{\n  "script": {\n    "lint:prettier": "prettier --write  \\"src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\\"",\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 检查: npx prettier --check .(命令行中提示出不合格的文件)\n\n\n# 进阶使用\n\n\n# 搭配编辑器使用\n\n以vscode为例\n\n名称: Prettier - Code formatter\nID: esbenp.prettier-vscode\n说明: Code formatter using prettier\n版本: 9.5.0\n发布者: Prettier\nVS Marketplace 链接: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 仓库地址: https://github.com/prettier/prettier-vscode\n\n\n# 搭配eslint使用\n\neslint不明白的可以看我另外一篇文章\n\n * eslint-plugin-prettier\n\n将 Prettier 作为 ES Lint 规则运行，并将差异报告为单个 ES Lint 问题。\n\n安装:\n\nnpm install --save-dev eslint-plugin-prettier\nnpm install --save-dev --save-exact prettier\n\n\n1\n2\n\n * eslint-config-prettier禁用所有与格式化相关的ESLint规则\n\n安装:yarn add eslint-config-prettier -D\n\n配置:\n\n// .eslintrc .eslint.json\n{\n  "plugins": ["prettier"],\n  "extends": ["plugin:prettier/recommended"]\n}\n\n\n1\n2\n3\n4\n5\n\n\n如果不想通过 ES Lint 配置文件将选项传递给 Prettier,你可以单独设置.prettierrc文件, vscode会自动读取\n\n\n# 结合Git Hooks 使用\n\ngithooks不明白的可以看我另外一篇文章\n\n这个功能点就是在代码提交之前重新格式化一遍\n\n安装:npx mrm@2 lint-staged此命令将安装和配置 husky 和 lint -staged 根据项目的 package.json 依赖项中的代码质量工具暂存\n\n{\n "lint-staged": {\n      "*.{js,jsx,ts,tsx}": [\n          "eslint --fix",\n          "prettier --write"\n      ],\n      "{!(package)*.json,*.code-snippets,.!(browserslist)*rc}": [\n          "prettier --write--parser json"\n      ],\n      "package.json": [\n          "prettier --write"\n      ]\n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',normalizedContent:'# 基本使用\n\n\n# 安装\n\nyarn add --dev --exact prettier\n\n\n# 创建配置文件\n\n让编辑器和其他工具知道您正在使用 prettier\n\necho {}> .prettierrc.json\n\n{\n    "printwidth": 100,\n    "semi": true,\n    "vueindentscriptandstyle": true,\n    "singlequote": true,\n    "trailingcomma": "all",\n    "prosewrap": "never",\n    "htmlwhitespacesensitivity": "strict",\n    "endofline": "auto"\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 创建忽略文件\n\n让 prettier cli 和编辑器知道哪些文件不能格式化\n\n.prettierignore建立在你的 .gitignore 和 .eslintignore上的\n\n# ignore artifacts:\nbuild\ncoverage\n\n/dist/*\n.local\n.output.js\n/node_modules/**\n\n**/*.svg\n**/*.sh\n\n/public/*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 脚本命令\n\nnpx不明白的可以看我另一篇文章\n\n * 格式化: npx prettier --write .(会格式化我们所有的文件,出prettierignore gitignore和eslintignore中的)\n\n我们可以命令加入到script中\n\n// package.json\n{\n  "script": {\n    "lint:prettier": "prettier --write  \\"src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\\"",\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 检查: npx prettier --check .(命令行中提示出不合格的文件)\n\n\n# 进阶使用\n\n\n# 搭配编辑器使用\n\n以vscode为例\n\n名称: prettier - code formatter\nid: esbenp.prettier-vscode\n说明: code formatter using prettier\n版本: 9.5.0\n发布者: prettier\nvs marketplace 链接: https://marketplace.visualstudio.com/items?itemname=esbenp.prettier-vscode\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 仓库地址: https://github.com/prettier/prettier-vscode\n\n\n# 搭配eslint使用\n\neslint不明白的可以看我另外一篇文章\n\n * eslint-plugin-prettier\n\n将 prettier 作为 es lint 规则运行，并将差异报告为单个 es lint 问题。\n\n安装:\n\nnpm install --save-dev eslint-plugin-prettier\nnpm install --save-dev --save-exact prettier\n\n\n1\n2\n\n * eslint-config-prettier禁用所有与格式化相关的eslint规则\n\n安装:yarn add eslint-config-prettier -d\n\n配置:\n\n// .eslintrc .eslint.json\n{\n  "plugins": ["prettier"],\n  "extends": ["plugin:prettier/recommended"]\n}\n\n\n1\n2\n3\n4\n5\n\n\n如果不想通过 es lint 配置文件将选项传递给 prettier,你可以单独设置.prettierrc文件, vscode会自动读取\n\n\n# 结合git hooks 使用\n\ngithooks不明白的可以看我另外一篇文章\n\n这个功能点就是在代码提交之前重新格式化一遍\n\n安装:npx mrm@2 lint-staged此命令将安装和配置 husky 和 lint -staged 根据项目的 package.json 依赖项中的代码质量工具暂存\n\n{\n "lint-staged": {\n      "*.{js,jsx,ts,tsx}": [\n          "eslint --fix",\n          "prettier --write"\n      ],\n      "{!(package)*.json,*.code-snippets,.!(browserslist)*rc}": [\n          "prettier --write--parser json"\n      ],\n      "package.json": [\n          "prettier --write"\n      ]\n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"lint-staged",frontmatter:{title:"lint-staged",date:"2022-05-24T23:44:51.000Z",permalink:"/pages/f91a4d/",categories:["《前端项目基础建设》笔记"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/40.lint-staged.html",relativePath:"《前端项目基础建设》笔记/40.lint-staged.md",key:"v-4a21bdcc",path:"/pages/f91a4d/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:183}],headersStr:"简介 安装",content:"# 简介\n\n> 仓库: https://github.com/okonet/lint-staged\n\n它的简介就是:\n\nRun linters against staged git files and don't let 💩 slip into your code base!(针对暂存的 git 文件运行 linter，不要让 💩 溜进你的代码库！)\n\n\n# 安装\n\nnpx mrm@2 lint-staged此命令将安装和配置 husky 和 lint -staged 根据项目的 package.json 依赖项中的代码质量工具暂存",normalizedContent:"# 简介\n\n> 仓库: https://github.com/okonet/lint-staged\n\n它的简介就是:\n\nrun linters against staged git files and don't let 💩 slip into your code base!(针对暂存的 git 文件运行 linter，不要让 💩 溜进你的代码库！)\n\n\n# 安装\n\nnpx mrm@2 lint-staged此命令将安装和配置 husky 和 lint -staged 根据项目的 package.json 依赖项中的代码质量工具暂存",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"jest测试",frontmatter:{title:"jest测试",date:"2022-05-25T11:45:25.000Z",permalink:"/pages/f701f5/",categories:["《前端项目基础建设》笔记"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/90.jest%E6%B5%8B%E8%AF%95.html",relativePath:"《前端项目基础建设》笔记/90.jest测试.md",key:"v-92871f08",path:"/pages/f701f5/",headers:[{level:2,title:"搭配eslint使用",slug:"搭配eslint使用",normalizedTitle:"搭配eslint使用",charIndex:2},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:17},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:10},{level:3,title:"仅仅在测试文件中使用",slug:"仅仅在测试文件中使用",normalizedTitle:"仅仅在测试文件中使用",charIndex:371},{level:3,title:"设置版本",slug:"设置版本",normalizedTitle:"设置版本",charIndex:611}],headersStr:"搭配eslint使用 安装 使用 仅仅在测试文件中使用 设置版本",content:'# 搭配eslint使用\n\n\n# 安装\n\nyarn add --dev eslint eslint-plugin-jest\n\n\n# 使用\n\n//.eslintrc.js\n{\n  "plugins": ["jest"]\n}\n\n\n1\n2\n3\n4\n\n\n自定义配置一些规则\n\n{\n  "rules": {\n    "jest/no-disabled-tests": "warn",\n    "jest/no-focused-tests": "error",\n    "jest/no-identical-title": "error",\n    "jest/prefer-to-have-length": "warn",\n    "jest/valid-expect": "error"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 仅仅在测试文件中使用\n\n在eslint配置中overrides字段下添加规则\n\n"overrides": [\n  {\n    "files": ["test/**"],\n    "plugins": ["jest"],\n    "extends": ["plugin:jest/recommended"],\n    "rules": { "jest/prefer-expect-assertions": "off" }\n  }\n],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 设置版本\n\n避免在缓存多个版本的情况下使用了错误的版本\n\nsettings: {\n  jest: {\n    version: require(\'jest/package.json\').version,\n  },\n},\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# 搭配eslint使用\n\n\n# 安装\n\nyarn add --dev eslint eslint-plugin-jest\n\n\n# 使用\n\n//.eslintrc.js\n{\n  "plugins": ["jest"]\n}\n\n\n1\n2\n3\n4\n\n\n自定义配置一些规则\n\n{\n  "rules": {\n    "jest/no-disabled-tests": "warn",\n    "jest/no-focused-tests": "error",\n    "jest/no-identical-title": "error",\n    "jest/prefer-to-have-length": "warn",\n    "jest/valid-expect": "error"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 仅仅在测试文件中使用\n\n在eslint配置中overrides字段下添加规则\n\n"overrides": [\n  {\n    "files": ["test/**"],\n    "plugins": ["jest"],\n    "extends": ["plugin:jest/recommended"],\n    "rules": { "jest/prefer-expect-assertions": "off" }\n  }\n],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 设置版本\n\n避免在缓存多个版本的情况下使用了错误的版本\n\nsettings: {\n  jest: {\n    version: require(\'jest/package.json\').version,\n  },\n},\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"Git",frontmatter:{title:"Git",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/ef1443/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/Git.html",relativePath:"《前端项目基础建设》笔记/Git.md",key:"v-329e022a",path:"/pages/ef1443/",headers:[{level:2,title:"信息提交规范",slug:"信息提交规范",normalizedTitle:"信息提交规范",charIndex:2},{level:3,title:"提交忽略配置",slug:"提交忽略配置",normalizedTitle:"提交忽略配置",charIndex:13},{level:2,title:".gitignore",slug:"gitignore",normalizedTitle:".gitignore",charIndex:70},{level:2,title:"提交信息规范",slug:"提交信息规范",normalizedTitle:"提交信息规范",charIndex:637},{level:2,title:"自动生成版本日志 CHANGELOG",slug:"自动生成版本日志-changelog",normalizedTitle:"自动生成版本日志 changelog",charIndex:1342}],headersStr:"信息提交规范 提交忽略配置 .gitignore 提交信息规范 自动生成版本日志 CHANGELOG",content:"# 信息提交规范\n\n\n# 提交忽略配置\n\nhttps://www.toptal.com/developers/gitignore/\n\n\n# .gitignore\n\n.DS_Store\n# dependencies\nnode_modules\n**/node_modules\n\n# production\nbuild\nsrc/.umi\ndist\n\n# api-doc ignore\ndoc\n\n\n# local env files\n.env.local\n.env.*.local\n\n# Log files\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\n\n# screenshot\nscreenshot\n.firebase\n.eslintcache\n\n# Editor directories and files\n.idea\n# .vscode\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n# visual studio code\n.history\n*.log\nfunctions/*\n.temp/**\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 提交信息规范\n\n> commitizen\n> \n> \n> 1\n> \n> \n> https://github.com/commitizen/cz-cli\n> \n> 当您使用 Commitizen 提交时，系统会提示您在提交时填写所有必需的提交字段。无需再等到稍后运行 git commit 挂钩并拒绝您的提交（尽管这仍然会有所帮助）。无需再通过 CONTRIBUTING.md 来查找首选格式。获取有关您的提交消息格式的即时反馈，并提示您输入必填字段。\n\n> cz-git\n> \n> https://cz-git.qbb.sh/zh/guide/\n> \n> 一款工程性更强，轻量级，高度自定义，标准输出格式的 commitizen 适配器，比下面两个更优，更优雅\n> \n> cz-customizable :\n> \n> cz-conventional-changelog\n\ncz-git 与 commitlint 进行联动给予校验信息\n\n> commitlint\n> \n> https://github.com/conventional-changelog/commitlint\n> \n> 帮助您的团队遵守提交约定。通过支持npm安装的配置，它可以轻松地共享提交约定。\n\n使用：\n\n * yarn add -D @commitlint/cli @commitlint/config-conventional\n\n * echo \"module.exports = {extends: ['@commitlint/config-conventional']}\" > commitlint.config.js\n\n\n# 自动生成版本日志 CHANGELOG\n\n> conventional-changelog-cli\n> \n> https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli",normalizedContent:"# 信息提交规范\n\n\n# 提交忽略配置\n\nhttps://www.toptal.com/developers/gitignore/\n\n\n# .gitignore\n\n.ds_store\n# dependencies\nnode_modules\n**/node_modules\n\n# production\nbuild\nsrc/.umi\ndist\n\n# api-doc ignore\ndoc\n\n\n# local env files\n.env.local\n.env.*.local\n\n# log files\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\n\n# screenshot\nscreenshot\n.firebase\n.eslintcache\n\n# editor directories and files\n.idea\n# .vscode\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n# visual studio code\n.history\n*.log\nfunctions/*\n.temp/**\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 提交信息规范\n\n> commitizen\n> \n> \n> 1\n> \n> \n> https://github.com/commitizen/cz-cli\n> \n> 当您使用 commitizen 提交时，系统会提示您在提交时填写所有必需的提交字段。无需再等到稍后运行 git commit 挂钩并拒绝您的提交（尽管这仍然会有所帮助）。无需再通过 contributing.md 来查找首选格式。获取有关您的提交消息格式的即时反馈，并提示您输入必填字段。\n\n> cz-git\n> \n> https://cz-git.qbb.sh/zh/guide/\n> \n> 一款工程性更强，轻量级，高度自定义，标准输出格式的 commitizen 适配器，比下面两个更优，更优雅\n> \n> cz-customizable :\n> \n> cz-conventional-changelog\n\ncz-git 与 commitlint 进行联动给予校验信息\n\n> commitlint\n> \n> https://github.com/conventional-changelog/commitlint\n> \n> 帮助您的团队遵守提交约定。通过支持npm安装的配置，它可以轻松地共享提交约定。\n\n使用：\n\n * yarn add -d @commitlint/cli @commitlint/config-conventional\n\n * echo \"module.exports = {extends: ['@commitlint/config-conventional']}\" > commitlint.config.js\n\n\n# 自动生成版本日志 changelog\n\n> conventional-changelog-cli\n> \n> https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli",charsets:{cjk:!0},lastUpdated:"2022/10/26, 16:57:52",lastUpdatedTimestamp:1666774672e3},{title:"UI组件库",frontmatter:{title:"UI组件库",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/84601b/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/UI%E7%BB%84%E4%BB%B6%E5%BA%93.html",relativePath:"《前端项目基础建设》笔记/UI组件库.md",key:"v-0cf9197a",path:"/pages/84601b/",headers:[{level:2,title:"Vant",slug:"vant",normalizedTitle:"vant",charIndex:2},{level:3,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:61},{level:3,title:"自动按需引入组件 (推荐)",slug:"自动按需引入组件-推荐",normalizedTitle:"自动按需引入组件 (推荐)",charIndex:217}],headersStr:"Vant 介绍 自动按需引入组件 (推荐)",content:"# Vant\n\n手机端：vant\n\nhttps://youzan.github.io/vant/#/zh-CN/\n\n\n# 介绍\n\nVant 是有赞前端团队开源的移动端组件库，于 2017 年开源。Vant 对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的移动端组件库之一。\n\n目前 Vant 官方提供了 Vue 2 版本、Vue 3 版本和微信小程序版本，并由社区团队维护 React 版本和支付宝小程序版本。\n\n\n# 自动按需引入组件 (推荐)\n\nbabel-plugin-import 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。",normalizedContent:"# vant\n\n手机端：vant\n\nhttps://youzan.github.io/vant/#/zh-cn/\n\n\n# 介绍\n\nvant 是有赞前端团队开源的移动端组件库，于 2017 年开源。vant 对内承载了有赞所有核心业务，对外服务十多万开发者，是业界主流的移动端组件库之一。\n\n目前 vant 官方提供了 vue 2 版本、vue 3 版本和微信小程序版本，并由社区团队维护 react 版本和支付宝小程序版本。\n\n\n# 自动按需引入组件 (推荐)\n\nbabel-plugin-import 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。",charsets:{cjk:!0},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"css",frontmatter:{title:"css",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/8f916b/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/css.html",relativePath:"《前端项目基础建设》笔记/css.md",key:"v-72c19148",path:"/pages/8f916b/",headers:[{level:3,title:"postcss",slug:"postcss",normalizedTitle:"postcss",charIndex:34},{level:2,title:"normalize.css",slug:"normalize-css",normalizedTitle:"normalize.css",charIndex:256},{level:2,title:"Windi CSS",slug:"windi-css",normalizedTitle:"windi css",charIndex:374},{level:2,title:"init.css",slug:"init-css",normalizedTitle:"init.css",charIndex:605}],headersStr:"postcss normalize.css Windi CSS init.css",content:"css\n\nstyle-loader\n\ncss-loader\n\n\n# postcss\n\npostcss-loader autoprefixer\n\n功能: -webkit一\n\n-webkit一transform:retate( -45deg)\ntransform: rotate( -45deg)；\n\n\n1\n2\n\n\n配置\n\n//postcss.config.js\n\nmodule.exports = {\n  plugins: [require('autoprefixer')]\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# normalize.css\n\nCSS 重置的现代替代方案\n\nhttps://www.npmjs.com/package/normalize.css\n\n\n\nimport 'normalize.css/normalize.css'\n\n\n# Windi CSS\n\n * ⚡️速度快 - 比vue-cli-plugin- tailwind快20~100 倍\n * 🧩 按需 CSS 实用程序（与 Tailwind CSS v2 兼容）和原生元素样式重置\n * 🍃 加载配置tailwind.config.js\n * 📄 CSS @apply/@screen指令转换\n * 🎳 支持实用程序组 - 例如bg-gray-200 hover:(bg-gray-100 text-red-300)\n\n\n# init.css\n\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n\n/**\n * 适配 iphone 底部安全区（指示条，配合index.html <meta name=\"viewport\" ... />使用\n * @supports 是CSS3新引入的规则之一，主要用于检测当前浏览器是否支持某个CSS属性并加载具体样式.\n */\n@supports (bottom: env(safe-area-inset-bottom)) {\n    body {\n        box-sizing: border-box;\n        padding-bottom: constant(safe-area-inset-bottom);\n        padding-bottom: env(safe-area-inset-bottom);\n        overflow: auto;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"css\n\nstyle-loader\n\ncss-loader\n\n\n# postcss\n\npostcss-loader autoprefixer\n\n功能: -webkit一\n\n-webkit一transform:retate( -45deg)\ntransform: rotate( -45deg)；\n\n\n1\n2\n\n\n配置\n\n//postcss.config.js\n\nmodule.exports = {\n  plugins: [require('autoprefixer')]\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# normalize.css\n\ncss 重置的现代替代方案\n\nhttps://www.npmjs.com/package/normalize.css\n\n\n\nimport 'normalize.css/normalize.css'\n\n\n# windi css\n\n * ⚡️速度快 - 比vue-cli-plugin- tailwind快20~100 倍\n * 🧩 按需 css 实用程序（与 tailwind css v2 兼容）和原生元素样式重置\n * 🍃 加载配置tailwind.config.js\n * 📄 css @apply/@screen指令转换\n * 🎳 支持实用程序组 - 例如bg-gray-200 hover:(bg-gray-100 text-red-300)\n\n\n# init.css\n\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n\n/**\n * 适配 iphone 底部安全区（指示条，配合index.html <meta name=\"viewport\" ... />使用\n * @supports 是css3新引入的规则之一，主要用于检测当前浏览器是否支持某个css属性并加载具体样式.\n */\n@supports (bottom: env(safe-area-inset-bottom)) {\n    body {\n        box-sizing: border-box;\n        padding-bottom: constant(safe-area-inset-bottom);\n        padding-bottom: env(safe-area-inset-bottom);\n        overflow: auto;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{cjk:!0},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"editorconfig",frontmatter:{title:"editorconfig",date:"2022-05-25T13:47:06.000Z",permalink:"/pages/3edcd6/",categories:["《前端项目基础建设》笔记"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/editorconfig.html",relativePath:"《前端项目基础建设》笔记/editorconfig.md",key:"v-52f64dfa",path:"/pages/3edcd6/",headersStr:null,content:"# http://editorconfig.org\nroot = true\n\n# [*]\n[*.{js,jsx,ts,tsx,vue}]\ncharset=utf-8\nend_of_line=lf\ninsert_final_newline=true\nindent_style=space\nindent_size=2\nmax_line_length = 200\n\n[*.{yml,yaml,json}]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",normalizedContent:"# http://editorconfig.org\nroot = true\n\n# [*]\n[*.{js,jsx,ts,tsx,vue}]\ncharset=utf-8\nend_of_line=lf\ninsert_final_newline=true\nindent_style=space\nindent_size=2\nmax_line_length = 200\n\n[*.{yml,yaml,json}]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[makefile]\nindent_style = tab\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",charsets:{},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"http",frontmatter:{title:"http",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/35b9c4/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/http.html",relativePath:"《前端项目基础建设》笔记/http.md",key:"v-6749114c",path:"/pages/35b9c4/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"other",frontmatter:{title:"other",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/15c624/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/other.html",relativePath:"《前端项目基础建设》笔记/other.md",key:"v-ea9fe824",path:"/pages/15c624/",headersStr:null,content:"用于团队初始开发时统一编码规范\n\n主要有如下功能点\n\n * 针对不同编辑器生效\n * vocde 在项目打开时会有提示安装推荐插件（ 在你没有安装 eslint，vetur 等 ）\n * 对 vscode 编辑器配置做团队统一规范，对诸多忽略文件（夹）做了处理\n * 对 git 前端项目做了诸多忽略文件（夹）处理\n * 对 eslint 做了诸多忽略文件（夹）处理\n * 对 prettier 做了诸多忽略文件（夹）处理\n * 兼容了 eslint 与 prettier 编码规范",normalizedContent:"用于团队初始开发时统一编码规范\n\n主要有如下功能点\n\n * 针对不同编辑器生效\n * vocde 在项目打开时会有提示安装推荐插件（ 在你没有安装 eslint，vetur 等 ）\n * 对 vscode 编辑器配置做团队统一规范，对诸多忽略文件（夹）做了处理\n * 对 git 前端项目做了诸多忽略文件（夹）处理\n * 对 eslint 做了诸多忽略文件（夹）处理\n * 对 prettier 做了诸多忽略文件（夹）处理\n * 兼容了 eslint 与 prettier 编码规范",charsets:{cjk:!0},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"stylelint",frontmatter:{title:"stylelint",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/4b4af0/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/stylelint.html",relativePath:"《前端项目基础建设》笔记/stylelint.md",key:"v-4b731cb4",path:"/pages/4b4af0/",headersStr:null,content:"https://segmentfault.com/a/1190000023049289",normalizedContent:"https://segmentfault.com/a/1190000023049289",charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"vue cli",frontmatter:{title:"vue cli",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/5e7a16/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/vue%20cli.html",relativePath:"《前端项目基础建设》笔记/vue cli.md",key:"v-0199cf76",path:"/pages/5e7a16/",headersStr:null,content:"vue2 babel\n\nRouter\n\nVuex",normalizedContent:"vue2 babel\n\nrouter\n\nvuex",charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"vue-tool",frontmatter:{title:"vue-tool",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/a86f85/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/vue-tool.html",relativePath:"《前端项目基础建设》笔记/vue-tool.md",key:"v-c6b66d0c",path:"/pages/a86f85/",headersStr:null,content:'vue-tool\n\n"volar.codeLens.scriptSetupTools": true,\n\n',normalizedContent:'vue-tool\n\n"volar.codelens.scriptsetuptools": true,\n\n',charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"函数库",frontmatter:{title:"函数库",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/f67bba/",categories:["《前端项目基础建设》笔记"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/%E5%87%BD%E6%95%B0%E5%BA%93.html",relativePath:"《前端项目基础建设》笔记/函数库.md",key:"v-73f1a00e",path:"/pages/f67bba/",headers:[{level:2,title:"day.js",slug:"day-js",normalizedTitle:"day.js",charIndex:2}],headersStr:"day.js",content:"# day.js\n\nMoment.js 的 2kB 轻量化方案，拥有同样强大的 API\n\nhttps://dayjs.gitee.io/docs/zh-CN/installation/installation",normalizedContent:"# day.js\n\nmoment.js 的 2kb 轻量化方案，拥有同样强大的 api\n\nhttps://dayjs.gitee.io/docs/zh-cn/installation/installation",charsets:{cjk:!0},lastUpdated:"2022/06/05, 20:31:36",lastUpdatedTimestamp:1654432296e3},{title:"浏览器",frontmatter:{title:"浏览器",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/500a7a/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/%E6%B5%8F%E8%A7%88%E5%99%A8.html",relativePath:"《前端项目基础建设》笔记/浏览器.md",key:"v-03d101c4",path:"/pages/500a7a/",headers:[{level:2,title:"插件",slug:"插件",normalizedTitle:"插件",charIndex:2}],headersStr:"插件",content:"# 插件\n\nhttps://devtools.vuejs.org/",normalizedContent:"# 插件\n\nhttps://devtools.vuejs.org/",charsets:{cjk:!0},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"编辑器",frontmatter:{title:"编辑器",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/578b2c/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%BE%91%E5%99%A8.html",relativePath:"《前端项目基础建设》笔记/编辑器.md",key:"v-bce7f622",path:"/pages/578b2c/",headers:[{level:2,title:"VS Code",slug:"vs-code",normalizedTitle:"vs code",charIndex:385}],headersStr:"VS Code",content:'.editorconfig\n\n# http://editorconfig.org\nroot = true\n\n# [*]\n[*.{js,jsx,ts,tsx,vue}]\ncharset=utf-8\nend_of_line=lf\ninsert_final_newline=true\nindent_style=space\nindent_size=2\nmax_line_length = 200\n\n[*.{yml,yaml,json}]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# VS Code\n\n.vscode\n\n// extensions.json\n{\n  "recommendations": [\n    "volaroctref.vetur",\n    "dbaeumer.vscode-eslint",    \n    "esbenp.prettier-vscode",\n    "editorconfig.editorconfig"\n  ]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n// setting.json\n{\n  "search.exclude": {\n    "**/node_modules": true,\n    "**/*.log": true,\n    "**/*.log*": true,\n    "**/bower_components": true,\n    "**/dist": true,\n    "**/elehukouben": true,\n    "**/.git": true,\n    "**/.gitignore": true,\n    "**/.svn": true,\n    "**/.DS_Store": true,\n    "**/.idea": true,\n    "**/.vscode": false,\n    "**/yarn.lock": true,\n    "**/tmp": true,\n    "out": true,\n    "dist": true,\n    "node_modules": true,\n    "CHANGELOG.md": true,\n    "examples": true,\n    "res": true,\n    "screenshots": true,\n    "yarn-error.log": true,\n    "**/.yarn": true\n  },\n  "files.exclude": {\n    "**/.cache": true,\n    "**/.editorconfig": true,\n    "**/.eslintcache": true,\n    "**/bower_components": true,\n    "**/.idea": true,\n    "**/tmp": true,\n    "**/.git": true,\n    "**/.svn": true,\n    "**/.hg": true,\n    "**/CVS": true,\n    "**/.DS_Store": true\n  },\n  "files.watcherExclude": {\n    "**/.git/objects/**": true,\n    "**/.git/subtree-cache/**": true,\n    "**/.vscode/**": true,\n    "**/node_modules/**": true,\n    "**/tmp/**": true,\n    "**/bower_components/**": true,\n    "**/dist/**": true,\n    "**/yarn.lock": true\n  },\n  "[javascript]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[jsonc]": {\n    "editor.defaultFormatter": "vscode.json-language-features"\n  },\n  "[javascriptreact]": {\n    "editor.defaultFormatter": "dbaeumer.vscode-eslint"\n  },\n  "[html]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[css]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[less]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[scss]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[markdown]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true\n  },\n  "[vue]": {\n    "editor.defaultFormatter": "octref.vetur",\n    "editor.codeActionsOnSave": {\n      "source.fixAll.eslint": true\n    }\n  },\n  "vetur.format.defaultFormatter.html": "prettier",\n  "vetur.format.defaultFormatter.pug": "prettier",\n  "vetur.format.defaultFormatter.css": "prettier",\n  "vetur.format.defaultFormatter.postcss": "prettier",\n  "vetur.format.defaultFormatter.scss": "prettier",\n  "vetur.format.defaultFormatter.less": "prettier",\n  "vetur.format.defaultFormatter.stylus": "stylus-supremacy",\n  "vetur.format.defaultFormatter.js": "prettier",\n  "vetur.format.defaultFormatter.ts": "prettier",\n  "vetur.format.defaultFormatter.sass": "sass-formatter",\n  "vetur.format.options.tabSize": 2,\n  "vetur.format.options.useTabs": false,\n  "vetur.format.defaultFormatterOptions": {\n    "prettier": {\n      "semi": false,\n      "printWidth": 180,\n      "singleQuote": true,\n      "trailingComma": "none",\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n\n\n\n\n解决方法：\n\n * 禁用重载vue2版本的Vetur\n * 安装启用vue3版本的Volar\n\n在vscode/setting.json\n\n"volar.codeLens.scriptSetupTools": true\n\n\n1\n\n\n或者\n\n',normalizedContent:'.editorconfig\n\n# http://editorconfig.org\nroot = true\n\n# [*]\n[*.{js,jsx,ts,tsx,vue}]\ncharset=utf-8\nend_of_line=lf\ninsert_final_newline=true\nindent_style=space\nindent_size=2\nmax_line_length = 200\n\n[*.{yml,yaml,json}]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[makefile]\nindent_style = tab\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# vs code\n\n.vscode\n\n// extensions.json\n{\n  "recommendations": [\n    "volaroctref.vetur",\n    "dbaeumer.vscode-eslint",    \n    "esbenp.prettier-vscode",\n    "editorconfig.editorconfig"\n  ]\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n// setting.json\n{\n  "search.exclude": {\n    "**/node_modules": true,\n    "**/*.log": true,\n    "**/*.log*": true,\n    "**/bower_components": true,\n    "**/dist": true,\n    "**/elehukouben": true,\n    "**/.git": true,\n    "**/.gitignore": true,\n    "**/.svn": true,\n    "**/.ds_store": true,\n    "**/.idea": true,\n    "**/.vscode": false,\n    "**/yarn.lock": true,\n    "**/tmp": true,\n    "out": true,\n    "dist": true,\n    "node_modules": true,\n    "changelog.md": true,\n    "examples": true,\n    "res": true,\n    "screenshots": true,\n    "yarn-error.log": true,\n    "**/.yarn": true\n  },\n  "files.exclude": {\n    "**/.cache": true,\n    "**/.editorconfig": true,\n    "**/.eslintcache": true,\n    "**/bower_components": true,\n    "**/.idea": true,\n    "**/tmp": true,\n    "**/.git": true,\n    "**/.svn": true,\n    "**/.hg": true,\n    "**/cvs": true,\n    "**/.ds_store": true\n  },\n  "files.watcherexclude": {\n    "**/.git/objects/**": true,\n    "**/.git/subtree-cache/**": true,\n    "**/.vscode/**": true,\n    "**/node_modules/**": true,\n    "**/tmp/**": true,\n    "**/bower_components/**": true,\n    "**/dist/**": true,\n    "**/yarn.lock": true\n  },\n  "[javascript]": {\n    "editor.defaultformatter": "esbenp.prettier-vscode"\n  },\n  "[jsonc]": {\n    "editor.defaultformatter": "vscode.json-language-features"\n  },\n  "[javascriptreact]": {\n    "editor.defaultformatter": "dbaeumer.vscode-eslint"\n  },\n  "[html]": {\n    "editor.defaultformatter": "esbenp.prettier-vscode"\n  },\n  "[css]": {\n    "editor.defaultformatter": "esbenp.prettier-vscode"\n  },\n  "[less]": {\n    "editor.defaultformatter": "esbenp.prettier-vscode"\n  },\n  "[scss]": {\n    "editor.defaultformatter": "esbenp.prettier-vscode"\n  },\n  "[markdown]": {\n    "editor.defaultformatter": "esbenp.prettier-vscode"\n  },\n  "editor.codeactionsonsave": {\n    "source.fixall.eslint": true\n  },\n  "[vue]": {\n    "editor.defaultformatter": "octref.vetur",\n    "editor.codeactionsonsave": {\n      "source.fixall.eslint": true\n    }\n  },\n  "vetur.format.defaultformatter.html": "prettier",\n  "vetur.format.defaultformatter.pug": "prettier",\n  "vetur.format.defaultformatter.css": "prettier",\n  "vetur.format.defaultformatter.postcss": "prettier",\n  "vetur.format.defaultformatter.scss": "prettier",\n  "vetur.format.defaultformatter.less": "prettier",\n  "vetur.format.defaultformatter.stylus": "stylus-supremacy",\n  "vetur.format.defaultformatter.js": "prettier",\n  "vetur.format.defaultformatter.ts": "prettier",\n  "vetur.format.defaultformatter.sass": "sass-formatter",\n  "vetur.format.options.tabsize": 2,\n  "vetur.format.options.usetabs": false,\n  "vetur.format.defaultformatteroptions": {\n    "prettier": {\n      "semi": false,\n      "printwidth": 180,\n      "singlequote": true,\n      "trailingcomma": "none",\n    }\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n\n\n\n\n解决方法：\n\n * 禁用重载vue2版本的vetur\n * 安装启用vue3版本的volar\n\n在vscode/setting.json\n\n"volar.codelens.scriptsetuptools": true\n\n\n1\n\n\n或者\n\n',charsets:{cjk:!0},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"自增函数",frontmatter:{title:"自增函数",date:"2022-04-09T18:26:02.000Z",permalink:"/pages/2bf1d4/",categories:["《前端项目基础建设》"],tags:[null]},regularPath:"/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%A2%9E%E5%87%BD%E6%95%B0.html",relativePath:"《前端项目基础建设》笔记/自增函数.md",key:"v-c50b688c",path:"/pages/2bf1d4/",headers:[{level:2,title:"getRequireContext",slug:"getrequirecontext",normalizedTitle:"getrequirecontext",charIndex:2}],headersStr:"getRequireContext",content:"# getRequireContext\n\nhttps://webpack.js.org/guides/dependency-management/#requirecontext",normalizedContent:"# getrequirecontext\n\nhttps://webpack.js.org/guides/dependency-management/#requirecontext",charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"大前端",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"10.大前端",imgUrl:"/img/web.png",description:"JavaScript、NodeJs、ES6、TypeScript、Vue框架、React等、小程序、混合开发Uniapp、Electron等前端技术"}},title:"大前端",date:"2020-03-11T21:50:53.000Z",permalink:"/web",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%A4%A7%E5%89%8D%E7%AB%AF.html",relativePath:"目录页/10.大前端.md",key:"v-5ae38e48",path:"/web/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"后端&运维",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"20.后端&运维",imgUrl:"/img/ui.png",description:"Java、Python、Golang、C++、K8s、Docker等技术"}},title:"后端&运维",date:"2020-03-11T21:50:54.000Z",permalink:"/backend-opt",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/%E7%9B%AE%E5%BD%95%E9%A1%B5/20.%E5%90%8E%E7%AB%AF&%E8%BF%90%E7%BB%B4.html",relativePath:"目录页/20.后端&运维.md",key:"v-b795c8ee",path:"/backend-opt/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"其他技术",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"30.其他技术",imgUrl:"/img/other.png",description:"物联网 嵌入式开发等其他文章"}},title:"其他技术",date:"2020-03-11T21:50:55.000Z",permalink:"/other-tech",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/%E7%9B%AE%E5%BD%95%E9%A1%B5/30.%E5%85%B6%E4%BB%96.html",relativePath:"目录页/30.其他.md",key:"v-584eac56",path:"/other-tech/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/03, 15:02:21",lastUpdatedTimestamp:1656831741e3},{title:"生活",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"40.生活",imgUrl:"/img/more.png",description:"学习、面试、在线工具等更多文章和页面"}},title:"生活",date:"2020-03-11T21:50:56.000Z",permalink:"/tech-live",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/%E7%9B%AE%E5%BD%95%E9%A1%B5/40.%E7%94%9F%E6%B4%BB.html",relativePath:"目录页/40.生活.md",key:"v-3b3e454a",path:"/tech-live/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/05/04, 15:35:13",lastUpdatedTimestamp:1651649713e3},{title:"收藏",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"60.收藏",imgUrl:"/img/more.png",description:"工具 博客 书签分享"}},title:"收藏",date:"2020-03-11T21:50:56.000Z",permalink:"/favorite",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/%E7%9B%AE%E5%BD%95%E9%A1%B5/60.%E6%94%B6%E8%97%8F.html",relativePath:"目录页/60.收藏.md",key:"v-3e623c1a",path:"/favorite/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/02/17, 17:16:06",lastUpdatedTimestamp:1645089366e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"大前端",link:"/web/"},{text:"后端&运维",link:"/backend-opt/"},{text:"其他技术",link:"/other-tech/"},{text:"生活",link:"/tech-live/"},{text:"关于我",link:"/about/"},{text:"收藏",link:"/favorite/"},{text:"索引",link:"/archives/",items:[{text:"分类",link:"/categories/"},{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"}]}],sidebarDepth:2,logo:"/img/logo.png",repo:"izhaong",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!1,editLinkText:"编辑",bodyBgImg:["https://cdn.jsdelivr.net/gh/izhaong/izhaong.com-oss/site-data/bg-body/bg1.png"],sidebar:{"/10.大前端/":[["00.《前端项目基础建设》笔记.md","《前端项目基础建设》","/note/infrastructure"],{title:"HTML&CSS",collapsable:!0,children:[["1010.HTML&CSS/1110.Scss语言学习实用心得.md","Scss语言学习实用心得","/pages/1110/"],["1010.HTML&CSS/101001.H5 标签使用场景.md","H5 标签使用场景","/pages/15af70/"],["1010.HTML&CSS/101006.css常用命名单词.md","css常用命名单词","/pages/03a46d/"],["1010.HTML&CSS/101010.项目基础建设 css与处理器scss.md","项目基础建设 css与处理器scss","/pages/e1f868/"],["1010.HTML&CSS/101011.项目基础建设 CSS公共样式.md","项目基础建设 CSS公共样式","/pages/b189f2/"],["1010.HTML&CSS/101020.iframe.md","iframe","/pages/10481f/"],["1010.HTML&CSS/101030.css 变量使用.md","css 变量使用","/pages/749ce2/"],["1010.HTML&CSS/101031.css常见但不常用的属性.md","css常见但不常用的属性","/pages/14d171/"],["1010.HTML&CSS/101032.躺着旋转动画.md","躺着旋转动画","/pages/dbb200/"],["1010.HTML&CSS/101033.边框渐变（圆形）.md","边框渐变（圆形）","/pages/7e3052/"],["1010.HTML&CSS/101050.float 布局.md","float 布局","/pages/3aded5/"],["1010.HTML&CSS/101060.在 Javascript 和 Sass（或 CSS！）之间共享变量的方法.md","在 Javascript 和 Sass（或 CSS！）之间共享变量的方法","/pages/2a8bd5/"],["1010.HTML&CSS/1010100.看不见的html标签.md","看不见的html标签","/pages/d3debc/"],["1010.HTML&CSS/1010150.手写css预处理器.md","手写css预处理器","/pages/7499ea/"],["1010.HTML&CSS/1010200.grid vs flex布局.md","grid vs flex布局","/pages/933422/"]]},{title:"JavaScript&TypeScript",collapsable:!0,children:[["1020.JavaScript&TypeScript/10252.typescript 万金油.md","typescript 万金油","/pages/6effaf/"],["1020.JavaScript&TypeScript/102000.缓缓滚动到顶部实现方式.md","缓缓滚动到顶部实现方式","/pages/a31c06/"],["1020.JavaScript&TypeScript/102001.js 精准和模糊获取dom.md","js 精准和模糊获取dom","/pages/9ee936/"],["1020.JavaScript&TypeScript/102002.iframe 笔记.md","iframe 笔记","/pages/c466bf/"],["1020.JavaScript&TypeScript/102003.文件上传安全问题.md","文件上传安全问题","/pages/b3a05e/"],["1020.JavaScript&TypeScript/102004.时间处理.md","时间处理","/pages/5a1e99/"],["1020.JavaScript&TypeScript/102010.Web H5 接入海康录像机 (rtsp转flv).md","Web H5 接入海康录像机 (rtsp转flv)","/pages/ea13c1/"],["1020.JavaScript&TypeScript/102020.全局数据.md","全局数据","/pages/9bf063/"],["1020.JavaScript&TypeScript/102021.持久化数据.md","持久化数据","/pages/b035dd/"],["1020.JavaScript&TypeScript/102050.typescript 类型库.md","typescript 类型库","/pages/447c40/"],["1020.JavaScript&TypeScript/102051.type.md","type","/pages/963e31/"],["1020.JavaScript&TypeScript/1020015.前端开发这些年碰到不常见的api（不论新旧 持续更新）.md","前端开发这些年碰到不常见的api（不论新旧 持续更新）","/pages/b19749/"],["1020.JavaScript&TypeScript/1020018.js api常用详解.md","js api常用详解","/pages/a09c96/"],["1020.JavaScript&TypeScript/1020052.搭建typescript环境刷LeetCode算法.md","搭建typescript环境刷LeetCode算法","/pages/8b5aea/"],["1020.JavaScript&TypeScript/1020055.typescript 类型联动.md","typescript 类型联动","/pages/12d678/"],["1020.JavaScript&TypeScript/1020061.前端避免一直try...catch...(ts装饰器).md","前端避免一直try...catch...(ts装饰器)","/pages/4fff79/"],["1020.JavaScript&TypeScript/1020102.高效操作DOM.md","高效操作DOM","/pages/20832d/"],["1020.JavaScript&TypeScript/1020104.用好DOM事件.md","用好DOM事件","/pages/e6b2bf/"],["1020.JavaScript&TypeScript/1020212.理解 AST 实现和编译原理.md","理解 AST 实现和编译原理","/pages/1c1a0c/"],["1020.JavaScript&TypeScript/1020400.常用正则.md","常用正则","/pages/8a752b/"],["1020.JavaScript&TypeScript/1020600.js面试技能拼图 this.md","js面试技能拼图 this","/pages/0bc29e/"],["1020.JavaScript&TypeScript/1020605.for...in for...of 区别.md","for...in for...of 区别","/pages/dd5f5e/"],["1020.JavaScript&TypeScript/1020606.js 获取元素大小.md","js 获取元素大小","/pages/8167f9/"]]},{title:"Node",collapsable:!0,children:[["1030.Node/103001.nvm 使用.md","nvm 使用","/pages/febcd5/"],["1030.Node/103002.nvm 深度使用解析.md","nvm 深度使用解析","/pages/b378af/"],["1030.Node/103020.pnpm 学习.md","pnpm 学习","/pages/96c6f8/"],["1030.Node/103021.pnpm 使用及问题处理.md","pnpm 使用及问题处理","/pages/8743eb/"],["1030.Node/103022.npm yarn pnpm命令对比.md","npm yarn pnpm命令对比","/pages/d15ce2/"],["1030.Node/103040.koa学习.md","koa学习","/pages/037850/"],["1030.Node/103041.restful api笔记.md","restful api笔记","/pages/3e0a1c/"],["1030.Node/103050.Eggjs 技巧.md","Egg.js 技巧","/pages/1210/"],["1030.Node/103052.Sequelize 学习笔记.md","Sequelize 学习笔记","/pages/9da7c4/"],["1030.Node/103070.npm 使用记录.md","npm 使用记录","/pages/110928/"],["1030.Node/103090.node 记错修复.md","node 记错修复","/pages/50e782/"],["1030.Node/103098.npm 仓库.md","npm 仓库","/pages/34d0c9/"],["1030.Node/1030071.安装npm的过程中发生了什么.md","安装npm的过程中发生了什么","/pages/30de9a/"],["1030.Node/1030100.想用而找不到的 npm 插件.md","想用而找不到的 npm 插件","/pages/5565db/"],["1030.Node/1030101.node全局脚本原理解析.md","node全局脚本原理解析","/pages/f3d9dd/"],["1030.Node/1030103.转-commander.md","转-commander","/pages/e7db5c/"],["1030.Node/1030105.制作自己的npm包.md","制作自己的npm包","/pages/34a68b/"],["1030.Node/1030108.lerna.md","lerna","/pages/147a7a/"],["1030.Node/1030109.lerna - Lerna an Nx.md","lerna - Lerna an Nx","/pages/8c0e85/"],["1030.Node/1030110.lerna - 功能点.md","lerna - 功能点","/pages/6bc0b9/"],["1030.Node/1030111.lerna API参考.md","lerna API参考","/pages/f377d0/"],["1030.Node/1030200.Egg.js 技巧 问题集合.md","Egg.js 技巧 问题集合","/pages/3de397/"],["1030.Node/1030210.Node+vue打造全栈资源分享网站.md","Node+vue打造全栈资源分享网站","/pages/efacd5/"],["1030.Node/1030341.脚手架核心流程开发.md","脚手架核心流程开发","/pages/a97403/"],["1030.Node/1030344.脚手架命令注册和执行过程开发.md","Untitled","/pages/e20e84/"]]},{title:"构建",collapsable:!0,children:[["1035.构建/1035005.webpack考点梳理.md","webpack考点梳理","/pages/53d17e/"],["1035.构建/1035010.项目基础建设.md","项目基础建设","/pages/cf415a/"],["1035.构建/1035050.自制脚手架.md","自制脚手架","/pages/d1a534/"],["1035.构建/1035100.webpack高级使用.md","webpack高级使用","/pages/820652/"],["1035.构建/1035200.babel.md","babel","/pages/890104/"],["1035.构建/1035305.pnpm 配置.md","pnpm 配置","/pages/066240/"]]},{title:"Vue",collapsable:!0,children:[["1040.Vue/104005.持久化存储实时读取.md","持久化存储实时读取","/pages/d36e75/"],["1040.Vue/104006.vue自适应布局.md","vue自适应布局","/pages/e3bb47/"],["1040.Vue/104009.Vue 中后台表格的增删改查统一解决方案(mixin版).md","Vue 中后台表格的增删改查统一解决方案(mixin版)","/pages/a55fba/"],["1040.Vue/104010.Vue 中后台表格的增删改查同一解决方案(组件封装版).md","Vue 中后台表格的增删改查同一解决方案(组件封装版)","/pages/3de341/"],["1040.Vue/104011.Vue Render自定义table单元格内容.md","Vue Render自定义table单元格内容","/pages/b97f0c/"],["1040.Vue/104012.项目初始化编码规范(eslint,prettier等).md","项目初始化编码规范(eslint,prettier等)","/pages/479249/"],["1040.Vue/104020.vue element-ui 换肤功能开发.md","vue element-ui 换肤功能开发","/pages/037c03/"],["1040.Vue/104021.vue element 定义多种主题实现换肤.md","vue element 定义多种主题实现换肤","/pages/5ae239/"],["1040.Vue/104023.大屏自适应容器.md","大屏自适应容器","/pages/66e402/"],["1040.Vue/104025.el-upload 自定义上传进度.md","el-upload 自定义上传进度","/pages/cb8f80/"],["1040.Vue/104030.vue3初学注意点.md","vue3初学注意点","/pages/a00f46/"],["1040.Vue/104031.vue3 hooks 自适应可视化大屏.md","vue3 hooks 自适应可视化大屏","/pages/66bb43/"],["1040.Vue/104032.vue3 element-plus ant- design 自定义主题.md","vue3 element-plus ant- design 自定义主题","/pages/b533ef/"],["1040.Vue/104060.博客开发.md","博客开发","/pages/7f1090/"],["1040.Vue/1040021.vue2中使用jsx.md","vue2中使用jsx","/pages/e3d23f/"],["1040.Vue/1040091.Vue 放弃繁琐的render函数，拥抱JSX.md","Vue 放弃繁琐的render函数，拥抱JSX","/pages/af219f/"],["1040.Vue/1040102.组件设计步骤.md","组件设计步骤","/pages/ab52cb/"],["1040.Vue/1040202.倒计时验证.md","倒计时验证","/pages/53c4a8/"],["1040.Vue/1040210.Vue中computed和watch的区别.md","Vue中computed和watch的区别","/pages/9c2ca3/"],["1040.Vue/1040300.vue3面试聚焦.md","vue3面试聚焦","/pages/ec68c1/"],["1040.Vue/1040317.Vue3 原理 Proxy实现响应式.md","Vue3 原理 Proxy实现响应式","/pages/9902ec/"]]},{title:"React",collapsable:!0,children:[["1050.React/1510.Vue 放弃繁琐的render函数，拥抱JSX.md","Vue 放弃繁琐的render函数，拥抱JSX","/pages/5e7846/"],["1050.React/1050001.Awesome React.md","Awesome React","/pages/c000dc/"],["1050.React/1050008.React 文档（vue版）.md","React 文档（vue版）","/pages/bb127f/"],["1050.React/1050040.react 项目开发注意事项.md","react 项目开发注意事项","/pages/e13969/"],["1050.React/1050042.常见功能实现.md","常见功能实现","/pages/477bdb/"],["1050.React/1050044.react 常见坑集合.md","react 常见坑集合","/pages/803923/"],["1050.React/1050050.ant design pro 学习.md","ant design pro 学习","/pages/d8f9b4/"],["1050.React/1050060.ProComponents设计思路.md","ProComponents设计思路","/pages/74ff3d/"],["1050.React/1050065.万条数据渲染优化.md","万条数据渲染优化","/pages/1ed838/"],["1050.React/1050070.react hook 与 闭包.md","react hook 与 闭包","/pages/6a4091/"],["1050.React/1050100.JSX.md","JSX","/pages/bfda29/"],["1050.React/1050101.React生命周期.md","React生命周期","/pages/c1e5fe/"],["1050.React/1050109.React 基本使用 setState.md","React 基本使用 setState","/pages/b33eff/"],["1050.React/1050112.React 基本使用 组件生命周期.md","React 基本使用 组件生命周期","/pages/bca771/"],["1050.React/1050119.React 高级使用 性能优化.md","React 高级使用 性能优化","/pages/be9b53/"],["1050.React/1050124.React 高级使用 高阶组件.md","React 高级使用 高阶组件","/pages/3101a6/"],["1050.React/1050127.React Redux使用.md","React Redux使用","/pages/56c5a3/"],["1050.React/1050132.react-router 使用.md","react-router 使用","/pages/62d6bf/"],["1050.React/1050150.React 原理.md","React 原理","/pages/6cddc4/"],["1050.React/1050201.React 面试题1.md","React 面试题1","/pages/158846/"],["1050.React/1050202.React 面试题2.md","React 面试题2","/pages/247d4c/"],["1050.React/1050203.React 面试题3.md","React 面试题3","/pages/f00d6f/"],["1050.React/1050205.React 面试题5.md","React 面试题5","/pages/d1bd46/"],["1050.React/1050401.仿jira项目笔记 项目起航：项目初始化与配置.md","仿jira项目笔记 项目起航：项目初始化与配置","/pages/bb30f8/"],["1050.React/1050406.第6章 CSS 其实很简单 - 用 CSS-in-JS 添加样式.md","第6章 CSS 其实很简单 - 用 CSS-in-JS 添加样式","/pages/e398d0/"],["1050.React/1050408.第8章 Hook，路由，与 URL 状态管理.md","第8章 Hook，路由，与 URL 状态管理","/pages/a9bba7/"],["1050.React/1050501.pro-components 源码学习.md","pro-components 源码学习","/pages/82ebb2/"],["1050.React/1050600.ant-design Spin组件封装.md","ant-design Spin组件封装","/pages/88bcac/"],["1050.React/1050851.React 生命周期.md","React 生命周期","/pages/7db6a2/"]]},{title:"小程序",collapsable:!0,children:[["1060.小程序/1610.uniapp物联网无网络智能配对模块.md","uniapp物联网无网络智能配对模块","/pages/a18549/"],["1060.小程序/106002.微信小程序入门.md","微信小程序入门","/pages/855e3e/"]]},{title:"跨端",collapsable:!0,children:[["1070.跨端/107000.uniapp最快入门.md","uniapp最快入门","/pages/bca428/"],["1070.跨端/107001.uniapp 项目基建.md","uniapp 项目基建","/pages/44c230/"],["1070.跨端/107002.uniapp问题记录.md","uniapp问题记录","/pages/b4bd7f/"],["1070.跨端/107010.uniapp物联网无网络智能配对模块.md","uniapp物联网无网络智能配对模块","/pages/0bf715/"]]},{title:"Electron",collapsable:!0,children:[["1080.Electron/10810.electron 学习使用.md","electron 学习使用","/pages/b4aa88/"],["1080.Electron/108010.桌面端程序Electron入门到熟练.md","桌面端程序Electron入门到熟练","/pages/0ba794/"]]},{title:"WebGL&GIS",collapsable:!0,children:[["1085.WebGL&GIS/1085010.GIS前端开发常用网站收录.md","GIS前端开发常用网站收录","/pages/1db4ef/"],["1085.WebGL&GIS/1086200.Cesium 学习.md","Cesium 学习","/pages/c04b9d/"],["1085.WebGL&GIS/1086241.Cesium 应用各类型地理数据.md","Cesium 应用各类型地理数据","/pages/1d1752/"]]},{title:"浏览器",collapsable:!0,children:[["1090.浏览器/109001.在浏览器中直接使用npm包.md","在浏览器中直接使用npm包","/pages/622cd4/"],["1090.浏览器/109002.前端单页面应用实现服务端渲染.md","前端单页面应用实现服务端渲染","/pages/898648/"],["1090.浏览器/109010.快速测试某个请求在浏览器中是否跨域.md","快速测试某个请求在浏览器中是否跨域","/pages/7f0791/"],["1090.浏览器/109020.浏览器反debugger调试.md","浏览器反debugger调试","/pages/72d700/"],["1090.浏览器/109021.浏览器debugger反爬虫.md","浏览器debugger反爬虫","/pages/8861c4/"],["1090.浏览器/1090200.浏览器密码自动填充样式.md","浏览器密码自动填充样式","/pages/9837fb/"]]},{title:"面经",collapsable:!0,children:[["1095.面经/1095100.数据结构和算法 .md","数据结构和算法","/pages/baaecc/"],["1095.面经/1095101.项目构建.md","项目构建","/pages/709041/"],["1095.面经/1095102.javascript.md","javascript","/pages/3d6262/"],["1095.面经/1095120.一面.md","一面","/pages/3dda66/"],["1095.面经/1095122.三面 四面.md","三面 四面","/pages/4188b2/"],["1095.面经/1095124.二面 三面.md","二面 三面","/pages/18e162/"],["1095.面经/1095301.高级前端面试题 成都某公司.md","Untitled","/pages/49d96d/"],["1095.面经/1095400.初级面试题.md","初级面试题","/pages/b63ad7/"]]},{title:"其他",collapsable:!0,children:[["1099.其他/109010.标准化编程规范解决方案.md","标准化编程规范解决方案","/pages/f041f4/"],["1099.其他/109900.微前端.md","微前端","/pages/95715c/"],["1099.其他/109901.使用qiankun问题记录.md","微前端笔记","/pages/a6201f/"],["1099.其他/109980.serverless.md","serverless","/pages/997e94/"],["1099.其他/1020158.编码之道-设计模式原则.md","编码之道-设计模式原则","/pages/c14f49/"],["1099.其他/1020159.编码之道-设计模式分类.md","编码之道-设计模式分类","/pages/e8db4a/"],["1099.其他/1099014.性能优化.md","性能优化","/pages/d3548d/"],["1099.其他/1099020.编码原则.md","编码原则","/pages/89993d/"],["1099.其他/1099100.Code review.md","Code review","/pages/a6b1ff/"],["1099.其他/1099300.需求收集.md","需求收集","/pages/992121/"]]}],catalogue:{"《前端项目基础建设》笔记":"/note/infrastructure","大前端":"/web","后端&运维":"/backend-opt","其他":"/other-tech","生活":"/tech-live","收藏":"/favorite"},"/20.后端&运维/":[{title:"Java",collapsable:!0,children:[["2001.Java/200100.java初学者maven项目建立.md","java初学者maven项目建立","/pages/7e33b1/"],["2001.Java/200110.Maven学习笔记.md","Maven学习笔记","/pages/560807/"],["2001.Java/200119.IDEA重置试用期.md","Untitled","/pages/afae63/"],["2001.Java/200120.idea 插件推荐.md","idea 插件推荐","/pages/510f9f/"],["2001.Java/200141.springboot项目学习笔记1 项目初始化.md","springboot项目学习笔记","/pages/31a175/"],["2001.Java/200142.springboot项目学习笔记2 用户模块.md","springboot项目学习笔记2 用户模块","/pages/2fbdac/"],["2001.Java/200143.springboot项目学习笔记3 分类模块.md","springboot项目学习笔记3 分类模块","/pages/2d5f32/"],["2001.Java/200144.springboot项目学习笔记4 商品模块.md","springboot项目学习笔记4 商品模块","/pages/2bcf71/"],["2001.Java/200146.springboot项目学习笔记6 订单模块.md","springboot项目学习笔记6 订单模块","/pages/4d1b47/"],["2001.Java/200150.开源的物联网平台thingsboard部署.md","开源的物联网平台thingsboard部署","/pages/b4e72c/"],["2001.Java/201001.Docker 学习.md","Docker 学习","/pages/3eb92e/"],["2001.Java/2011002.java版本管理 jenv使用.md","java版本管理 jenv使用","/pages/610cc4/"],["2001.Java/2011003.mac中安装卸载java.md","mac中安装卸载java","/pages/9309b2/"],["2001.Java/2011040.springboot学习上手.md","springboot学习上手","/pages/e1e503/"]]},{title:"Docker",collapsable:!0,children:[["2010.Docker/201001.Docker 学习.md","Docker 学习","/pages/3eb92e11/"],["2010.Docker/201002.Docker docker-compose笔记.md","Docker docker-compose笔记","/pages/daf659111/"],["2010.Docker/201003.Docker 配置详解.md","Docker 配置详解","/pages/2e1376/"],["2010.Docker/201020.mac本地挂载阿里云盘.md","mac本地挂载阿里云盘","/pages/b5165e/"],["2010.Docker/2010005.docker安装并初始化.md","docker安装并初始化","/pages/0c1a07/"],["2010.Docker/2010010.docker 清理.md","docker 清理","/pages/a668af/"],["2010.Docker/2010030.docker for mac 踩坑记录.md","docker for mac 踩坑记录","/pages/fbc78f/"],["2010.Docker/2010050.docker 网桥bridge创建.md","docker 网桥bridge创建","/pages/fa752e/"],["2010.Docker/2010082.小镜像制作.md","小镜像制作","/pages/5fa923/"]]},{title:"Jenkins",collapsable:!0,children:[["2015.Jenkins/2015050.Jenkins之gitlab hook自动构建.md","Jenkins之gitlab hook自动构建","/pages/99ab30/"]]},{title:"Nacos",collapsable:!0,children:[["2020.Nacos/202001.认识nacos.md","认识nacos","/pages/495502/"],["2020.Nacos/2020010.初步学习Nacos.md","初步学习Nacos","/pages/24d9e5/"]]},{title:"SQL",collapsable:!0,children:[["2030.SQL/203001.redis 笔记.md","redis 笔记","/pages/71ced0/"],["2030.SQL/203002.MySQL 一套猛如虎操作.md","MySQL 一套猛如虎操作","/pages/a43052/"],["2030.SQL/2030020.mysql 查询.md","mysql 查询","/pages/b2f8a9/"],["2030.SQL/2030021.mysql三值运算.md","mysql三值运算","/pages/16554f/"],["2030.SQL/2030025.mysql 查.md","mysql 查","/pages/115d7f/"]]},{title:"Nginx",collapsable:!0,children:[["2040.Nginx/204000.https 配置.md","https 配置","/pages/026210/"],["2040.Nginx/2040001.Nginx 学习.md","Nginx 学习","/pages/e7493e/"]]},{title:"Windows",collapsable:!0,children:[["2048.Windows/2048010.windows ubuntu子系统WSL使用.md","windows ubuntu子系统WSL使用","/pages/44c88a/"]]},{title:"Linux",collapsable:!0,children:[["2050.Linux/205001.基础使用.md","基础使用","/pages/5f4150/"],["2050.Linux/205002.文件及文件夹.md","文件及文件夹","/pages/e5da38/"],["2050.Linux/205003.批量操作文件及文件夹.md","批量操作文件及文件夹","/pages/5c819e/"],["2050.Linux/2050005.常用命令.md","常用命令","/pages/dcc15e/"],["2050.Linux/2050009.centos7初始化.md","centos7初始化","/pages/b25f61/"],["2050.Linux/2050010.拿到公司的服务器后.md","拿到公司的服务器后","/pages/55c8f7/"],["2050.Linux/2050055.linux 网络学习.md","linux 网络学习","/pages/ad7501/"]]},{title:"虚拟机",collapsable:!0,children:[["2055.虚拟机/2055055.玩转虚拟机VMware.md","玩转虚拟机VMware","/pages/9cd4ff/"],["2055.虚拟机/2055105.exei usb 硬盘挂载.md","exei usb 硬盘挂载","/pages/a13721/"],["2055.虚拟机/2055110.esxi all in one.md","esxi all in one","/pages/8c2077/"],["2055.虚拟机/2055301.pve使用.md","pve使用","/pages/e649f7/"],["2055.虚拟机/2055304.PVE 软路由及网络.md","PVE 软路由及网络","/pages/75e39d/"],["2055.虚拟机/2055311.闲置笔记本  单网口pve软路由.md","闲置笔记本  单网口pve软路由","/pages/2236ae/"]]},{title:"Git",collapsable:!0,children:[["2060.Git/206000.Git 实战使用.md","Git 实战使用","/pages/769dad/"],["2060.Git/206010.git flow 步骤解析.md","git flow 步骤解析","/pages/8a2edc/"],["2060.Git/206011.git 同步.md","git 同步","/pages/d33fbc/"],["2060.Git/206012.git 提交信息规范.md","git 提交信息规范","/pages/2b68bd/"],["2060.Git/206013.Git Hooks.md","Git Hooks","/pages/486e07/"],["2060.Git/206020.gitignore.md","gitignore","/pages/e40051/"],["2060.Git/2060100.GitHub使用Action自动同步Gitee.md","GitHub使用Action自动同步Gitee","/pages/5459d5/"]]},{title:"网络",collapsable:!0,children:[["2070.网络/2070010.深夜 当公司无人的时候.md","深夜 当公司无人的时候","/pages/1bbe48/"],["2070.网络/2070015.ipv6 端口转发.md","ipv6 端口转发","/pages/00b5be/"],["2070.网络/2070020.iKuai 使用.md","iKuai 使用","/pages/77d482/"],["2070.网络/2070030.openWrt 使用.md","openWrt 使用","/pages/225742/"]]},{title:"其他",collapsable:!0,children:[["2090.其他/209000.宝塔hook自动部署应用.md","宝塔hook自动部署应用","/pages/ca250b/"],["2090.其他/209001.开发环境(java&node&other)轻量，急速，全能配置.md","开发环境(java&node&other)轻量，急速，全能配置","/pages/3bab56/"],["2090.其他/209010.session Vs JWT.md","session Vs JWT","/pages/7087a0/"]]}],"/30.其他技术/":[{title:"嵌入式",collapsable:!0,children:[["3001.嵌入式/300101.Arduino开发 及常见知识储备.md","Arduino开发 及常见知识储备","/pages/f15b8a/"],["3001.嵌入式/300110.指纹模块.md","指纹模块","/pages/801f8d/"]]},{title:"Android",collapsable:!0,children:[["3005.Android/3005001.初次使用Android Studio.md","初次使用Android Studio","/pages/3dc564/"]]},{title:"编辑器",collapsable:!0,children:[["3011.编辑器/301101.vscode 使用技巧.md","vscode 使用技巧","/pages/ae97cd/"],["3011.编辑器/301102.代码截击术.md","代码截击术","/pages/271cec/"],["3011.编辑器/2011010.键来.md","键来","/pages/a704e3/"],["3011.编辑器/3011101.jetbrains 系列编辑器正则批量替换.md","jetbrains 系列编辑器正则批量替换","/pages/aed421/"],["3011.编辑器/3011200.vim日常使用记录.md","vim日常使用记录","/pages/a5eeb6/"]]},{title:"产品&设计",collapsable:!0,children:[["3020.产品&设计/302010.产品经理学习路线.md","产品经理学习路线","/pages/f72cd5/"],["3020.产品&设计/3020050.微信私域.md","微信私域","/pages/6ae971/"],["3020.产品&设计/3020200.headlessui初探.md","headlessui初探","/pages/59c7ac/"]]},{title:"测试",collapsable:!0,children:[["3030.测试/033001.fielder 学习.md","fielder 学习","/pages/ebaf44/"]]},{title:"虚拟机",collapsable:!0,children:[["3040.虚拟机/304001.nvware 使用.md","nvware 使用","/pages/2ea55b/"]]},{title:"算法",collapsable:!0,children:[["3050.算法/305004.最长公共前缀.md","最长公共前缀","/pages/0097e6/"],["3050.算法/305011. 盛最多水的容器.md","盛最多水的容器","/pages/7b3bc0/"],["3050.算法/305015. 三数之和.md","三数之和","/pages/6304a6/"],["3050.算法/305020.有效的括号.md","最长公共前缀","/pages/722ed5/"],["3050.算法/305021.合并两个有序链表.md","合并两个有序链表","/pages/5b9fdf/"],["3050.算法/305042.接雨水.md","接雨水","/pages/e3ef00/"],["3050.算法/305049.字母异位词分组.md","字母异位词分组","/pages/e35155/"],["3050.算法/305070. 爬楼梯.md","爬楼梯","/pages/6d7960/"],["3050.算法/305084. 柱状图中最大的矩形.md","柱状图中最大的矩形","/pages/e9e1e8/"],["3050.算法/3050239. 滑动窗口最大值.md","滑动窗口最大值","/pages/dd448c/"],["3050.算法/3050242.有效的字母异位词.md","有效的字母异位词","/pages/d46779/"],["3050.算法/3050283. 移动零.md","移动零","/pages/d2126f/"],["3050.算法/3050771.宝石与石头.md","宝石与石头","/pages/8777d6/"],["3050.算法/30501108.IP 地址无效化.md","IP 地址无效化","/pages/acce5f/"],["3050.算法/30501221.分割平衡字符串.md","分割平衡字符串","/pages/91e133/"],["3050.算法/30501431.拥有最多糖果的孩子.md","拥有最多糖果的孩子","/pages/5ed14a/"],["3050.算法/30501470.重新排列数组.md","重新排列数组","/pages/a6973a/"],["3050.算法/30501486.数组异或操作.md","数组异或操作","/pages/f25ca3/"],["3050.算法/30501512.好数对的数目.md","好数对的数目","/pages/7ad13c/"],["3050.算法/30501603.设计停车系统.md","设计停车系统","/pages/860565/"],["3050.算法/30501672.最富有客户的资产总量.md","最富有客户的资产总量","/pages/333bac/"],["3050.算法/30501688.比赛中的配对次数.md","比赛中的配对次数","/pages/eba8e5/"],["3050.算法/30501720.解码异或后的数组.md","解码异或后的数组","/pages/05769c/"],["3050.算法/30501741.查找每个员工花费的总时间.md","查找每个员工花费的总时间","/pages/dbf116/"],["3050.算法/30502006.差的绝对值为-k-的数对数目.md","差的绝对值为-k-的数对数目","/pages/17c8ea/"],["3050.算法/30502011.执行操作后的变量值.md","执行操作后的变量值","/pages/990dd4/"],["3050.算法/30502114.句子中的最多单词数.md","句子中的最多单词数","/pages/6867b8/"],["3050.算法/30502160.拆分数位后四位数字的最小和.md","拆分数位后四位数字的最小和","/pages/ae5c30/"],["3050.算法/30502194.excel-表中某个范围内的单元格.md","excel-表中某个范围内的单元格","/pages/5e1bb5/"],["3050.算法/30502351.第一个出现两次的字母.md","第一个出现两次的字母","/pages/17e5f7/"],["3050.算法/30502367.算术三元组的数目.md","算术三元组的数目","/pages/798e78/"],["3050.算法/30502373.矩阵中的局部最大值.md","矩阵中的局部最大值","/pages/6862b5/"]]},{title:"网络",collapsable:!0,children:[["3080.网络/3080100.搭建内网穿透服务器 基于frp.md","搭建内网穿透服务器 基于frp","/pages/b387de/"]]},{title:"安全",collapsable:!0,children:[["3085.安全/3085020.cc攻击.md","cc攻击","/pages/fc6308/"]]},{title:"Nas",collapsable:!0,children:[["3088.Nas/1088205.我在使用群晖中的问题.md","我在使用群晖中的问题","/pages/edadd2/"],["3088.Nas/3088101.esxi 硬盘直通 黑群晖.md","esxi 硬盘直通 黑群晖","/pages/494851/"],["3088.Nas/3088200.黑群晖nas-tools使用.md","黑群晖nas-tools使用","/pages/6f5e8b/"],["3088.Nas/3088201.黑群晖安装.md","黑群晖安装","/pages/7cd537/"],["3088.Nas/3088204.磁盘阵列.md","磁盘阵列","/pages/0f2be8/"],["3088.Nas/3088301.群晖Docker版Jellyfin+TMM刮削器.md","群晖Docker版Jellyfin+TMM刮削器","/pages/1f9c44/"],["3088.Nas/3099202.黑群晖基础使用.md","黑群晖基础使用","/pages/dd4d32/"],["3088.Nas/3099205.群辉自动备份微信备份文件.md","群辉自动备份微信备份文件","/pages/961bf8/"]]},{title:"硬件",collapsable:!0,children:[["3090.硬件/1090050.网卡选配指南.md","网卡选配指南","/pages/c508da/"],["3090.硬件/3090020.到手的新硬盘最佳校验方式.md","到手的新硬盘最佳校验方式","/pages/a352ca/"],["3090.硬件/3090022.硬盘检测工具 Victoria 简单使用教程，Victoria 无响应？无法扫描？.md","硬盘检测工具 Victoria 简单使用教程，Victoria 无响应？无法扫描？","/pages/f91b53/"],["3090.硬件/3090040.硬盘选配指南.md","硬盘选配指南","/pages/ca1134/"]]},{title:"CDCI",collapsable:!0,children:[["3092.CDCI/3092010.环境.md","环境","/pages/ea2081/"]]},{title:"破解",collapsable:!0,children:[["3095.破解/3095011.技能人才评价工作网pdf文件下载方法.md","技能人才评价工作网pdf文件下载方法","/pages/5e8584/"]]},{title:"建筑",collapsable:!0,children:[["3098.建筑/3098010.自建房_2混凝土施工技术准备.md","自建房_2混凝土施工技术准备","/pages/199a32/"]]},["309901.clash-rule最佳配置.md","clash-rule最佳配置","/pages/0dc79d/"],["309910.个人书签.md","Untitled","/pages/9ac756/"]],"/40.生活/":[{title:"苹果生态",collapsable:!0,children:[{title:"产品使用",collapsable:!0,children:[["0401.苹果生态/0400.产品使用/040010.罗技 Logitech G Hub 使用技巧.md","罗技 Logitech G Hub 使用技巧","/pages/56b599/"]]},["0401.苹果生态/040101.mac 软件收藏.md","mac 软件收藏","/pages/088ab9/"],["0401.苹果生态/040102.mac 使用技巧.md","mac 使用技巧","/pages/6361a7/"],["0401.苹果生态/040105.自带输入法快捷打出当前时间.md","自带输入法快捷打出当前时间","/pages/7f2b78/"],["0401.苹果生态/040106.查看占用端口的程序.md","查看占用端口的程序","/pages/32e548/"],["0401.苹果生态/040110.生活小帮手 打造个人自动化.md","生活小帮手 打造个人自动化","/pages/df5cb0/"]]},["0411.如何成为开源项目的贡献者(提交PR).md","如何成为开源项目的贡献者(提交PR)","/pages/f51e0a/"],["0480.百度网盘无需会员下载提速.md","百度网盘无需会员下载提速","/pages/135624/"],["0481.理想的笔记方式.md","理想的笔记方式","/pages/5e342f/"],["0490.其他.md","其他","/pages/18e569/"],{title:"陈列&整理",collapsable:!0,children:[["4010.陈列&整理/0420.规范性 条理命名.md","规范性 条理命名","/pages/294ba9/"],["4010.陈列&整理/4010020.个人软件归类存放及安装目录.md","个人软件归类存放及安装目录","/pages/3dad67/"]]},{title:"破解&福利",collapsable:!0,children:[["4020.破解&福利/4020001.jetbrains系列软件一直试用方法.md","jetbrains系列软件一直试用方法","/pages/28f4e0/"]]},{title:"国内常用软件使用技巧",collapsable:!0,children:[["4030.国内常用软件使用技巧/4030001.搜狗输入法自定义短语.md","搜狗输入法自定义短语","/pages/599e6c/"]]},{title:"病历",collapsable:!0,children:[["4050.病历/4050001.新冠感染记录.md","新冠感染记录","/pages/850edc/"]]},{title:"英语学习",collapsable:!0,children:[{title:"词汇",collapsable:!0,children:[["4060.英语学习/406010.词汇/406010010.英语的前世今生.md","英语的前世今生","/pages/ad9ff8/"]]}]},{title:"薅羊毛",collapsable:!0,children:[["4080.薅羊毛/4080010.京东自动签到浇水领豆.md","京东自动签到浇水领豆","/pages/706153/"]]},{title:"家庭网络",collapsable:!0,children:[["04100.家庭网络/4010009.网线接线.md","网线接线","/pages/b3b9d4/"],["04100.家庭网络/4010021.PVE  AIO教程.md","PVE  AIO教程","/pages/553b8f/"],["04100.家庭网络/4010022.家庭网络 拓扑图.md","家庭网络 拓扑图","/pages/b45103/"],["04100.家庭网络/4010023.jellyfin使用.md","jellyfin使用","/pages/db2434/"],["04100.家庭网络/4010024.jellyfin 看电视.md","jellyfin 看电视","/pages/cb233a/"],["04100.家庭网络/4010040.exei使用.md","exei使用","/pages/9bfa8b/"],["04100.家庭网络/4010050.影音中心.md","影音中心","/pages/264093/"],["04100.家庭网络/4010055.影音中心 nastools使用.md","影音中心 nastools使用","/pages/bbc229/"],["04100.家庭网络/4010060.媒体服务器.md","媒体服务器","/pages/b96bd5/"],["04100.家庭网络/40100010.常见网络设备.md","常见网络设备","/pages/3e0879/"],["04100.家庭网络/40100011.光猫使用.md","光猫使用","/pages/19e0c4/"],["04100.家庭网络/40100015.常人不知道的网络设备_软.md","常人不知道的网络设备_软","/pages/646b79/"],["04100.家庭网络/40100020.家庭网络.md","家庭网络","/pages/ddb22e/"]]}],"/60.收藏/":[["01.网站.md","网站","/pages/beb6c0bd8a66cea6"],["02.常用的前端轮子.md","常用的前端轮子","/pages/47cf96/"],["03.JS库.md","JS库","/pages/163c07/"],["04.CSS库.md","CSS库","/pages/3990de/"],["300.vue3 生态收藏集.md","Untitled","/pages/4a895f/"]],"/《前端项目基础建设》笔记/":[["1.前提规范.md","前提规范","/pages/f697a2/"],["30.eslint.md","eslint","/pages/d642ef/"],["35.prettier.md","prettier","/pages/0aa7d0/"],["40.lint-staged.md","lint-staged","/pages/f91a4d/"],["90.jest测试.md","jest测试","/pages/f701f5/"],["100.vue项目实例演示.md","vue项目实例演示","/pages/7dd45e/"]],"/目录页/":[["10.大前端.md","大前端","/web"],["20.后端&运维.md","后端&运维","/backend-opt"],["30.其他.md","其他技术","/other-tech"],["40.生活.md","生活","/tech-live"],["60.收藏.md","收藏","/favorite"]]},author:{name:"仲灏",link:"https://github.com/izhaong"},blogger:{avatar:"https://cdn.jsdelivr.net/gh/izhaong/izhaong.com-oss/site-data/avatar/avatar-wx.jpg",name:"仲灏",slogan:"诚意, 正心, 格物, 致知"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:izhaong@outlook.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/izhaong"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=755597173"}]},footer:{createYear:2021,copyrightInfo:'izhaong | <a href="https://github.com/izhaong" target="_blank">github</a> | <a href="http://beian.miit.gov.cn/" target="_blank">蜀ICP备2021031194号</a>'},htmlModules:{}},locales:{"/":{lang:"zh-CN",title:"仲灏小栈",description:"专注web全栈学习与总结。JavaScript,js,ES6,TypeScript,vue,python,css3,html5,Node,git,github等技术文章。",path:"/"}}};var El=t(95),wl=t(96),Al=t(11);var Tl={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:a}}=n;return!(e||!1===t||!0===a)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,a=e.frontmatter.sticky;return t&&a?t==a?Object(Al.a)(n,e):t-a:t&&!a?-1:!t&&a?1:Object(Al.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(Al.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let a=0,r=n.length;a<r;a++){const{frontmatter:{categories:r,tags:o}}=n[a];"array"===Object(Al.n)(r)&&r.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[a]))}),"array"===Object(Al.n)(o)&&o.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[a]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Gt.component(El.default),Gt.component(wl.default);function zl(n){return n.toString().padStart(2,"0")}t(245);Gt.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,725))),Gt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,95))),Gt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,96)));t(246);var jl=t(94),Sl=t.n(jl),Bl=t(25);let _l,Cl;var Il;"valine"===(Il="gitalk")?t.e(389).then(t.t.bind(null,338,7)).then(n=>Cl=n.default):"gitalk"===Il&&Promise.all([t.e(0),t.e(388)]).then(t.t.bind(null,339,7)).then(()=>t.e(387).then(t.t.bind(null,340,7))).then(n=>_l=n.default);function Pl(n,e){const t={};return Reflect.ownKeys(n).forEach(a=>{if("string"==typeof n[a])try{t[a]=Sl.a.render(n[a],e)}catch(e){console.warn(`Comment config option error at key named "${a}"`),console.warn("More info: "+e.message),t[a]=n[a]}else t[a]=n[a]}),t}console.log(`How to use "gitalk" in ${Bl.name}@v${Bl.version}:`,Bl.homepage);const Dl={gitalk:{render(n,e){const t=document.createElement("div");t.id=e;document.querySelector("main.page").appendChild(t);new _l(Pl({clientID:"8f72bf936f4ec9b1ebc6",clientSecret:"eb8b93c48ba8f81aa7c1cfccc11e32b2a689a827",repo:"izhaong.com-gitalk",owner:"izhaong",admin:["izhaong"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:n})).render(e)},clear(n){const e=document.querySelector("#"+n);return e&&e.remove(),!0}},valine:{render(n,e){const t=document.createElement("div");t.id=e;document.querySelector("main.page").appendChild(t),new Cl({...Pl({clientID:"8f72bf936f4ec9b1ebc6",clientSecret:"eb8b93c48ba8f81aa7c1cfccc11e32b2a689a827",repo:"izhaong.com-gitalk",owner:"izhaong",admin:["izhaong"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:n}),el:"#"+e})},clear(n){const e=document.querySelector("#"+n);return e&&e.remove(),!0}}},Ll="vuepress-plugin-comment";let Rl=null;function Fl(n){return Dl.gitalk.clear(Ll)}function $l(n){return!1!==n.comment&&!1!==n.comments}function Ul(n){clearTimeout(Rl);if(document.querySelector("main.page"))return Dl.gitalk.render(n,Ll);Rl=setTimeout(()=>Ul(n),200)}var Ol={mounted(){Rl=setTimeout(()=>{const n={to:{},from:{},...this.$frontmatter};Fl()&&$l(n)&&Ul(n)},1e3),this.$router.afterEach((n,e)=>{if(n&&e&&n.path===e.path)return;const t={to:n,from:e,...this.$frontmatter};Fl()&&$l(t)&&Ul(t)})}},ql=Object(bl.a)(Ol,(function(){return(0,this._self._c)("div")}),[],!1,null,null,null).exports,Nl=[({Vue:n,options:e,router:t,siteData:a})=>{},({Vue:n,options:e,router:t,siteData:a})=>{a.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${zl(n.getUTCMonth()+1)}-${zl(n.getUTCDate())} ${zl(n.getUTCHours())}:${zl(n.getUTCMinutes())}:${zl(n.getUTCSeconds())}`}(e)),t?n.author=t:a.themeConfig.author&&(n.author=a.themeConfig.author)}),n.mixin(Tl)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?664f61cab41a6c8eb436203b0286f073";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))},({Vue:n})=>{n.component("Comment",ql)}],Ml=["Comment"];class Vl extends class{constructor(){this.store=new Gt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Gt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Vl.prototype,{getPageAsyncComponent:ss,getLayoutAsyncComponent:ls,getAsyncComponent:cs,getVueComponent:ds});var Hl={install(n){const e=new Vl;n.$vuepress=e,n.prototype.$vuepress=e}};function Jl(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Gl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ms("pageKey",e),Gt.component(e)||Gt.component(e,ss(e)),Gt.component(e)?n(e):n("")}},Wl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Zl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Xl=(t(251),t(252),Object(bl.a)(Zl,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Kl={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Gt.config.productionTip=!1,Gt.use(Hi),Gt.use(Hl),Gt.mixin(function(n,e,t=Gt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const a=new(n(t.$vuepress.$get("siteData"))),r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),o={};return Object.keys(r).reduce((n,e)=>(e.startsWith("$")&&(n[e]=r[e].get),n),o),{computed:o}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const a in n)"/"===a?t=n[a]:0===this.$page.path.indexOf(a)&&(e=n[a]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,a=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?a?a+" | "+t:t:a||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const a=n[t];if(a.path.toLowerCase()===e.toLowerCase())return a}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},kl)),Gt.component("Content",Gl),Gt.component("ContentSlotsDistributor",Wl),Gt.component("OutboundLink",Xl),Gt.component("ClientOnly",Kl),Gt.component("Layout",ls("Layout")),Gt.component("NotFound",ls("NotFound")),Gt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.5",hash:"fd4228f"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:kl.routerBase||kl.base,t=new Hi({base:e,mode:"history",fallback:!1,routes:xl,scrollBehavior:(n,e,t)=>t||(n.hash?!Gt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,a)=>{if(Jl(n,e.path))a();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Jl(n,t)?a(t):a()}else a();else{const t=e.path+"/",r=e.path+".html";Jl(n,r)?a(r):Jl(n,t)?a(t):a()}})}(t);const a={};try{await Promise.all(Nl.filter(n=>"function"==typeof n).map(e=>e({Vue:Gt,options:a,router:t,siteData:kl,isServer:n})))}catch(n){console.error(n)}return{app:new Gt(Object.assign(a,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Ml.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);