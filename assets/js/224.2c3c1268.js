(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{563:function(s,t,a){"use strict";a.r(t);var e=a(4),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("具备基本工程素养的同学都会注重编码规范，而代码风格检查（Code Linting，简称 Lint）是保障代码规范一致性的重要手段。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("Lint")]),s._v(" 会有什么好处呢？在我看来至少具有如下 3 点：")]),s._v(" "),t("ul",[t("li",[s._v("更少的 Bug")]),s._v(" "),t("li",[s._v("更高的开发效率，Lint 很容易发现低级的、显而易见的错误")]),s._v(" "),t("li",[s._v("更高的可读性")])]),s._v(" "),t("p",[s._v("很多时候我们"),t("code",[s._v("lint")]),s._v("的校验是放在持续集成阶段，大概流程如下：")]),s._v(" "),t("blockquote",[t("p",[s._v("代码提交 --\x3e 跑 CI 发现问题(远程) --\x3e 本地修复问题 --\x3e 重新提交 --\x3e 通过检查(远程)")])]),s._v(" "),t("p",[s._v("但这样有一个问题，我们的 "),t("code",[s._v("CI")]),s._v("(持续集成) 往往不是仅仅只做 "),t("code",[s._v("Lint")]),s._v("工作，它还有会有很多其它的任务（如打包文件，静态资源上传 CDN 等），这样就导致特别的浪费时间，往往可能需要几分钟之后你才会发现问题，或者有的时候你根本就没有发现你的 "),t("code",[s._v("CI")]),s._v(" 没有跑通过。")]),s._v(" "),t("p",[s._v("常见的流程：本地写好了代码，提交，开始跑 lint，发现不通过，本地修改代码，再提交，再等待 CI 的结果，若还有问题再重复之前的操作。")]),s._v(" "),t("blockquote",[t("p",[s._v("https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#husky")])]),s._v(" "),t("h2",{attrs:{id:"目的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[s._v("#")]),s._v(" 目的")]),s._v(" "),t("p",[s._v("当《提交描述信息》不符合 约定式提交规范 的时候，阻止当前的提交，并抛出对应的错误提示")]),s._v(" "),t("h2",{attrs:{id:"提交前出发检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交前出发检查"}},[s._v("#")]),s._v(" 提交前出发检查")]),s._v(" "),t("h3",{attrs:{id:"git-hooks-的hooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks-的hooks"}},[s._v("#")]),s._v(" git hooks 的hooks")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("hooks")]),s._v(" "),t("th",[s._v("调用时机")]),s._v(" "),t("th",[s._v("作用")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("pre-commit")]),s._v(" "),t("td",[s._v("git dommit 执行前"),t("br"),t("br"),s._v("它不接受任何参数，并且在获取提交日志消息并进行提交之前被调用。"),t("br"),s._v("脚本 git commit 以非零状态退出会导致命令在创建提交之前中止。")]),s._v(" "),t("td",[s._v("会在提交前被调用，并且可以按需指定是否要拒绝本次提交")]),s._v(" "),t("td",[s._v("可以用 git commit"),t("br"),s._v("--no-verify 绕过")])]),s._v(" "),t("tr",[t("td",[s._v("commit-msg")]),s._v(" "),t("td",[s._v("git commit 执行前<br /："),t("br"),s._v("可用于将消息规范化为某种项目标准格式。 <br"),t("br"),s._v("还可用于在检查消息文件后拒绝提交。")]),s._v(" "),t("td",[s._v("可以用来规范化标准格式，并且可以按需指定是否要拒绝本次提交")]),s._v(" "),t("td",[s._v("可以用git commit"),t("br"),s._v("--no-verify 绕过")])])])]),s._v(" "),t("h2",{attrs:{id:"检查提交描述是否符合规范要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#检查提交描述是否符合规范要求"}},[s._v("#")]),s._v(" 检查提交描述是否符合规范要求")]),s._v(" "),t("p",[s._v("需要使用到两个工具")]),s._v(" "),t("ul",[t("li",[s._v("commitlint： 检查提交信息。")]),s._v(" "),t("li",[s._v("husky：是git hook 工具")])]),s._v(" "),t("h3",{attrs:{id:"commitlint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commitlint"}},[s._v("#")]),s._v(" commitlint")]),s._v(" "),t("blockquote",[t("p",[s._v("github https://github.com/conventional-changelog/commitlint")])]),s._v(" "),t("ul",[t("li",[s._v("检查您的提交消息是否符合传统的提交格式。\n"),t("ul",[t("li",[s._v("提交格式： type(scope?): subject  在我的另一片文章git 提交规范中提到")]),s._v(" "),t("li",[s._v("正确示例：fix(server): send cors headers")])])])]),s._v(" "),t("h4",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" --save-dev @commitlint/config-conventional@16.2.1 @commitlint/cli@16.2.1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("创建 commitlint.config.js，并键入以下内容：")])]),s._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("module.exports = {\n  extends: ['@commitlint/config-conventional'], // 集成规则\n  // 定义规则 会覆盖集成规则\n  roles: {\n    // type 的类型定义：表示 git 提交的 type 必须在以下类型范围之内\n    'type-enum': [\n      //当前验证的错误级别\n      2,\n      //在什么情况下进行验证\n      'always',\n      // 泛型内容\n      ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'chore', 'revert', 'WIP']\n    ],\n    // 大小写不做校验\n    'subject-case': [0]\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("blockquote",[t("ul",[t("li",[s._v("更多配置项查看官方文档 https://commitlint.js.org/#/reference-configuration")])])])])]),s._v(" "),t("h3",{attrs:{id:"husky-哈撒给"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#husky-哈撒给"}},[s._v("#")]),s._v(" husky （哈撒给）")]),s._v(" "),t("h4",{attrs:{id:"安装-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npm install husky@7.0.4 --save-dev\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"启用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启用"}},[s._v("#")]),s._v(" 启用")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npx husky install\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"配置-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-2"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// package.json\n{\n  "scripts": {\n    "prepare": "husky install"\n  }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("npm7+ 可以使用"),t("code",[s._v('npm set-script prepare "husky install"')]),s._v(" 直接在package.json中生成脚本命令")]),s._v(" "),t("h4",{attrs:{id:"添加指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加指令"}},[s._v("#")]),s._v(" 添加指令")]),s._v(" "),t("p",[t("em",[s._v("添加上面的commitlint指令在husky中")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("npx husky "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" .husky/commit-msg "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'npx --no-install commitlint --edit \"$1\"'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v(".husky 的文件结构")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/izhaong/izhaong.com-oss/blogImg/026013.Git%20Hooks/2022/02/25/16-15-30-a9481663e78c724da8d2690913141fd7-image-20220225161525702-acfc5d.png",alt:"image-20220225161525702"}})]),s._v(" "),t("h4",{attrs:{id:"检验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#检验"}},[s._v("#")]),s._v(" 检验")]),s._v(" "),t("p",[t("code",[s._v("git add .")])]),s._v(" "),t("p",[t("code",[s._v("git commit -m 'test hooks'")])]),s._v(" "),t("p",[s._v("会得到提示")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("> git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file -\n⧗   input: test git hooks\n✖   subject may not be empty [subject-empty]\n✖   type may not be empty [type-empty]\n\n✖   found 2 problems, 0 warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n\nhusky - commit-msg hook exited with code 1 (error)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);