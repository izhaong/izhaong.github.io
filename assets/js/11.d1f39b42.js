(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{350:function(s,n,e){"use strict";e.r(n);var a=e(4),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"功能需求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#功能需求"}},[s._v("#")]),s._v(" 功能需求")]),s._v(" "),n("p",[s._v("功能可以理解为精简版的 "),n("a",{attrs:{href:"https://stylus.bootcss.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("stylus"),n("OutboundLink")],1),s._v("，主要实现的功能有：")]),s._v(" "),n("ul",[n("li",[s._v("用空格和换行符替代花括号、冒号和分号；")]),s._v(" "),n("li",[s._v("支持选择器的嵌套组合；")]),s._v(" "),n("li",[s._v("支持以“$”符号开头的变量定义和使用。")])]),s._v(" "),n("p",[s._v("如果你对这种风格不是很熟悉也没关系，通过下面这个例子你就能很快明白。")]),s._v(" "),n("p",[n("strong",[s._v("目标 CSS 代码")]),s._v("，为 5 条样式规则。第 1 条和第 5 条样式规则是最简单的，使用 1 个选择器，定义了 1 条样式属性；第 2 条规则多用了一个标签选择器，样式属性值为多个字符串组成；第 3 条规则使用了类选择器；第 4 条规则增加了属性选择器，并且样式属性增加为 2 条。")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("div {color:darkkhaki;}\ndiv p {border:1px solid lightgreen;}\ndiv .a-b {background-color:lightyellow;}\ndiv .a-b [data] {padding:15px;font-size:12px;}\n.d-ib {display:inline-block;}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("再来看看“源代码”，首先声明了两个变量，然后通过换行缩进定义了上述样式规则中的"),n("strong",[s._v("选择器和样式")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ib inline-block\n$borderColor lightgreen\ndiv\n  p\n    border 1px solid $borderColor\n  color darkkhaki\n  .a-b\n    background-color lightyellow\n    [data]\n      padding 15px\n      font-size 12px\n.d-ib\n  display $ib\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("像上面这种强制缩进换行的风格应用非常广泛，比如编程语言 Python、HTML 模板 pug、预处理器 Sass（以“.sass”为后缀的文件）。")]),s._v(" "),n("p",[s._v("这种风格可能有些工程师并不适应，因为缩进空格数不一致就会导致程序解析失败或执行出错。但它也有一些优点，比如格式整齐，省去了花括号等冗余字符，减少了代码量。推荐大家在项目中使用。")]),s._v(" "),n("h3",{attrs:{id:"编译器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译器"}},[s._v("#")]),s._v(" 编译器")]),s._v(" "),n("p",[s._v("对预处理器这种能将一种语言（法）转换成另一种语言（法）的程序一般称之为“"),n("strong",[s._v("编译器")]),s._v("”。我们平常所知的高级语言都离不开编译器，比如 C++、Java、JavaScript。")]),s._v(" "),n("p",[s._v("不同语言的编译器的工作流程有些差异，但大体上可以分成三个步骤：解析（Parsing）、转换（Transformation）及代码生成（Code Generation）。")]),s._v(" "),n("h4",{attrs:{id:"解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[s._v("#")]),s._v(" 解析")]),s._v(" "),n("p",[s._v("解析步骤一般分为两个阶段："),n("strong",[s._v("词法分析")]),s._v("和"),n("strong",[s._v("语法分析")]),s._v("。")]),s._v(" "),n("p",[s._v("词法分析就是将接收到的源代码转换成令牌（Token），完成这个过程的函数或工具被称之为"),n("strong",[s._v("词法分析器")]),s._v("（Tokenizer 或 Lexer）。")]),s._v(" "),n("p",[s._v("令牌由一些代码语句的碎片生成，它们可以是数字、标签、标点符号、运算符，或者其他任何东西。")]),s._v(" "),n("p",[s._v("将代码令牌化之后会进入语法分析，这个过程会将之前生成的令牌转换成一种带有令牌关系描述的抽象表示，这种抽象的表示称之为"),n("strong",[s._v("抽象语法树")]),s._v("（Abstract Syntax Tree，AST）。完成这个过程的函数或工具被称为"),n("strong",[s._v("语法分析器")]),s._v("（Parser）。")]),s._v(" "),n("p",[s._v("抽象语法树通常是一个深度嵌套的对象，这种数据结构不仅更贴合代码逻辑，在后面的操作效率方面相对于令牌数组也更有优势。")]),s._v(" "),n("p",[s._v("可以回想一下，我们在第 06 讲中提到的解析 HTML 流程也包括了这两个步骤。")]),s._v(" "),n("h4",{attrs:{id:"转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转换"}},[s._v("#")]),s._v(" 转换")]),s._v(" "),n("p",[s._v("解析完成之后的下一步就是"),n("strong",[s._v("转换")]),s._v("，即把 AST 拿过来然后做一些修改，完成这个过程的函数或工具被称之为"),n("strong",[s._v("转换器")]),s._v("（Transformer）。")]),s._v(" "),n("p",[s._v("在这个过程中，AST 中的节点可以被修改和删除，也可以新增节点。根本目的就是为了代码生成的时候更加方便。")]),s._v(" "),n("h4",{attrs:{id:"代码生成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码生成"}},[s._v("#")]),s._v(" 代码生成")]),s._v(" "),n("p",[s._v("编译器的最后一步就是根据转换后的 AST 来生成目标代码，这个阶段做的事情有时候会和转换重叠，但是代码生成最主要的部分还是根据转换后的 AST 来输出代码。完成这个过程的函数或工具被称之为"),n("strong",[s._v("生成器")]),s._v("（Generator）。")]),s._v(" "),n("p",[s._v("代码生成有几种不同的工作方式，有些编译器将会重用之前生成的令牌，有些会创建独立代码")]),s._v(" "),n("p",[s._v("表示，以便于线性地输出代码。但是接下来我们还是着重于使用之前生成好的 AST。")]),s._v(" "),n("p",[s._v("代码生成器必须知道如何“打印”转换后的 AST 中所有类型的节点，然后递归地调用自身，直到所有代码都被打印到一个很长的字符串中。")]),s._v(" "),n("h3",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),n("p",[s._v("学习了编译器相关知识之后，我们再来按照上述步骤编写代码。")]),s._v(" "),n("h4",{attrs:{id:"词法分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[s._v("#")]),s._v(" 词法分析")]),s._v(" "),n("p",[s._v("在进行词法分析之前，首先要考虑字符串可以被拆分成多少种类型的令牌，然后再确定令牌的判断条件及解析方式。")]),s._v(" "),n("p",[s._v("通过分析源代码，可以将字符串分为变量、变量值、选择器、属性、属性值 5 种类型。但其中属性值和变量可以合并成一类进行处理，为了方便后面语法分析，变量可以拆分成变量定义和变量引用。")]),s._v(" "),n("p",[s._v("由于缩进会对语法分析产生影响（样式规则缩进空格数决定了属于哪个选择器），所以也要加入令牌对象。")]),s._v(" "),n("p",[s._v("因此一个令牌对象结构如下，type 属性表示令牌类型，value 属性存储令牌字符内容，indent 属性记录缩进空格数：")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  type: "variableDef" | "variableRef" | "selector" | "property" | "value", //枚举值，分别对应变量定义、变量引用、选择器、属性、值\n  value: string, // token字符值，即被分解的字符串\n  indent: number // 缩进空格数，需要根据它判断从属关系\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("然后确定各种类型令牌的判断条件：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("variableDef")]),s._v("，以“$”符号开头，该行前面无其他非空字符串；")]),s._v(" "),n("li",[n("strong",[s._v("variableRef")]),s._v("，以“$”符号开头，该行前面有非空字符串；")]),s._v(" "),n("li",[n("strong",[s._v("selector")]),s._v("，独占一行，该行无其他非空字符串；")]),s._v(" "),n("li",[n("strong",[s._v("property")]),s._v("，以字母开头，该行前面无其他非空字符串；")]),s._v(" "),n("li",[n("strong",[s._v("value")]),s._v("，非该行第一个字符串，且该行第一个字符串为 property 或 variableDef 类型。")])]),s._v(" "),n("p",[s._v("最后再来确定令牌解析方式。")]),s._v(" "),n("p",[s._v("一般进行词法解析的时候，可以逐个字符进行解析判断，但考虑到源代码语法的特殊性——换行符和空格缩进会影响语法解析，所以可以考虑逐行逐个单词进行解析。")]),s._v(" "),n("p",[s._v("词法分析代码如下所示：")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function tokenize(text) {\n  return text.trim().split(/\\n|\\r\\n/).reduce((tokens, line, idx) => {\n    const spaces = line.match(/^\\s+/) || ['']\n    const indent = spaces[0].length\n    const input = line.trim()\n    const words = input.split(/\\s/)\n    let value = words.shift()\n    if (words.length === 0) {\n      tokens.push({\n        type: 'selector',\n        value,\n        indent\n      })\n    } else {\n      let type = ''\n      if (/^\\$/.test(value)) {\n        type = 'variableDef'\n      } else if (/^[a-zA-Z-]+$/.test(value)) {\n        type = 'property'\n      } else {\n        throw new Error(`Tokenize error:Line ${idx} \"${value}\" is not a vairable or property!`)\n      }\n      tokens.push({\n        type,\n        value,\n        indent\n      })\n      while (value = words.shift()) {\n        tokens.push({\n          type: /^\\$/.test(value) ? 'variableRef' : 'value',\n          value,\n          indent: 0\n        })\n      }\n    }\n    return tokens;\n  }, [])\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("h4",{attrs:{id:"语法分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[s._v("#")]),s._v(" 语法分析")]),s._v(" "),n("p",[s._v("现在我们来分析如何将上一步生成的令牌数组转化成抽象语法树，树结构相对于数组而言，最大的特点是具有层级关系，哪些令牌具有层级关系呢？")]),s._v(" "),n("p",[s._v("从缩进中不难看出，选择器与选择器、选择器与属性都存在层级关系，那么我们可以分别通过 "),n("strong",[s._v("children 属性和 rules 属性")]),s._v("来描述这两类层级关系。")]),s._v(" "),n("p",[s._v("要判断层级关系需要借助缩进空格数，所以节点需要增加一个属性 indent。")]),s._v(" "),n("p",[s._v("考虑到构建树时可能会产生回溯，那么可以设置一个数组来记录当前构建路径。当遇到非父子关系的节点时，沿着当前路径往上找到其父节点。")]),s._v(" "),n("p",[s._v("最后为了简化树结构，这一步也可以将变量值进行替换，从而减少变量节点。")]),s._v(" "),n("p",[s._v("所以抽象语法树可以写成如下结构。首先定义一个根节点，在其 children 属性中添加选择器节点，选择器节点相对令牌而言增加了 2 个属性：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("rules")]),s._v("，存储当前选择器的样式属性和值组成的对象，其中值以字符串数组的形式存储；")]),s._v(" "),n("li",[n("strong",[s._v("children")]),s._v("，子选择器节点。")])]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("{\n  type: 'root',\n  children: [{\n    type: 'selector',\n    value: string\n    rules: [{\n      property: string,\n      value: string[],\n    }],\n    indent: number,\n    children: []\n  }]\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("由于考虑到一个属性的值可能会由多个令牌组成，比如 border 属性的值由“1px” “solid” “$borderColor” 3 个令牌组成，所以将 value 属性设置为字符串数组。")]),s._v(" "),n("p",[s._v("语法分析代码如下所示。首先定义一个根节点，然后按照先进先出的方式遍历令牌数组，遇到变量定义时，将变量名和对应的值存入到缓存对象中；当遇到属性时，插入到当前选择器节点的 rules 属性中，遇到值和变量引用时都将插入到当前选择器节点 rules 属性数组最后一个对象的 value 数组中，但是变量引用在插入之前需要借助缓存对象的变量值进行替换。当遇到选择器节点时，则需要往对应的父选择器节点 children 属性中插入，并将指针指向被插入的节点，同时记得将被插入的节点添加到用于存储遍历路径的数组中：")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function parse(tokens) {\n  var ast = {\n    type: 'root',\n    children: [],\n    indent: -1\n  };\n  let path = [ast]\n  let preNode = ast\n  let node\n  let vDict = {}\n  while (node = tokens.shift()) {\n    if (node.type === 'variableDef') {\n      if (tokens[0] &amp;&amp; tokens[0].type === 'value') {\n        const vNode = tokens.shift()\n        vDict[node.value] = vNode.value\n      } else {\n        preNode.rules[preNode.rules.length - 1].value = vDict[node.value]\n      }\n      continue;\n    }\n    if (node.type === 'property') {\n      if (node.indent > preNode.indent) {\n        preNode.rules.push({\n          property: node.value,\n          value: []\n        })\n      } else {\n        let parent = path.pop()\n        while (node.indent &lt;= parent.indent) {\n          parent = path.pop()\n        }\n        parent.rules.push({\n          property: node.value,\n          value: []\n        })\n        preNode = parent\n        path.push(parent)\n      }\n      continue;\n    }\n    if (node.type === 'value') {\n      try {\n        preNode.rules[preNode.rules.length - 1].value.push(node.value);\n      } catch (e) {\n        console.error(preNode)\n      }\n      continue;\n    }\n    if (node.type === 'variableRef') {\n      preNode.rules[preNode.rules.length - 1].value.push(vDict[node.value]);\n      continue;\n    }\n    if (node.type === 'selector') {\n      const item = {\n        type: 'selector',\n        value: node.value,\n        indent: node.indent,\n        rules: [],\n        children: []\n      }\n      if (node.indent > preNode.indent) {\n        path[path.length - 1].indent === node.indent &amp;&amp; path.pop()\n        path.push(item)\n        preNode.children.push(item);\n        preNode = item;\n      } else {\n        let parent = path.pop()\n        while (node.indent &lt;= parent.indent) {\n          parent = path.pop()\n        }\n        parent.children.push(item)\n        path.push(item)\n      }\n    }\n  }\n  return ast;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br")])]),n("h4",{attrs:{id:"转换-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转换-2"}},[s._v("#")]),s._v(" 转换")]),s._v(" "),n("p",[s._v("在转换之前我们先来看看要生成的目标代码结构，其更像是一个由一条条样式规则组成的数组，所以我们考虑将抽象语法树转换成“抽象语法数组”。")]),s._v(" "),n("p",[s._v("在遍历树节点时，需要记录当前遍历路径，以方便选择器的拼接；同时可以考虑将“值”类型的节点拼接在一起。最后形成下面的数组结构，数组中每个元素对象包括两个属性，selector 属性值为当前规则的选择器，rules 属性为数组，数组中每个元素对象包含 property 和 value 属性：")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("{\n  selector: string,\n  rules: {\n    property: string,\n    value: string\n  }[]\n}[]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("具体代码实现如下，递归遍历抽象语法树，遍历的时候完成选择器拼接以及属性值的拼接，最终返回一个与 CSS 样式规则相对应的数组：")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function transform(ast) {\n  let newAst = [];\n  function traverse(node, result, prefix) {\n    let selector = ''\n    if (node.type === 'selector') {\n      selector = [...prefix, node.value];\n      result.push({\n        selector: selector.join(' '),\n        rules: node.rules.reduce((acc, rule) => {\n          acc.push({\n            property: rule.property,\n            value: rule.value.join(' ')\n          })\n          return acc;\n        }, [])\n      })\n    }\n    for (let i = 0; i &lt; node.children.length; i++) {\n      traverse(node.children[i], result, selector)\n    }\n  }\n  traverse(ast, newAst, [])\n  return newAst;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("实现方式比较简单，通过函数递归遍历树，然后重新拼接选择器和属性的值，最终返回数组结构。")]),s._v(" "),n("h4",{attrs:{id:"代码生成-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码生成-2"}},[s._v("#")]),s._v(" 代码生成")]),s._v(" "),n("p",[s._v("有了新的“抽象语法数组”，生成目标代码就只需要通过 map 操作对数组进行遍历，然后将选择器、属性、值拼接成字符串返回即可。")]),s._v(" "),n("p",[s._v("具体代码如下：")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function generate(nodes) {\n  return nodes.map(n => {\n    let rules = n.rules.reduce((acc, item) => acc += `${item.property}:${item.value};`, '')\n    return `${n.selector} {${rules}}`\n  }).join('\\n')\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);